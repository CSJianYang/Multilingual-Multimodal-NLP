[
    {
        "title": "Remove Duplicates from Sorted List",
        "question_content": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n&nbsp;\nExample 1:\n\nInput: head = [1,1,2]\nOutput: [1,2]\n\nExample 2:\n\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]\n\n&nbsp;\nConstraints:\n\n\tThe number of nodes in the list is in the range [0, 300].\n\t-100 <= Node.val <= 100\n\tThe list is guaranteed to be sorted in ascending order.",
        "solutions": [
            {
                "id": 28625,
                "title": "3-line-java-recursive-solution",
                "content": "This solution is inspired by renzid https://leetcode.com/discuss/33043/3-line-recursive-solution\\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n            if(head == null || head.next == null)return head;\\n            head.next = deleteDuplicates(head.next);\\n            return head.val == head.next.val ? head.next : head;\\n    }\\n\\nEnjoy!",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "This solution is inspired by renzid https://leetcode.com/discuss/33043/3-line-recursive-solution\\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n            if(head == null || head.next == null)return head;\\n            head.next = deleteDuplicates(head.next);\\n            return head.val == head.next.val ? head.next : head;\\n    }\\n\\nEnjoy!",
                "codeTag": "Unknown"
            },
            {
                "id": 28614,
                "title": "my-pretty-solution-java",
                "content": "    public class Solution {\\n        public ListNode deleteDuplicates(ListNode head) {\\n            ListNode list = head;\\n             \\n             while(list != null) {\\n            \\t if (list.next == null) {\\n            \\t\\t break;\\n            \\t }\\n            \\t if (list.val == list.next.val) {\\n            \\t\\t list.next = list.next.next;\\n            \\t } else {\\n            \\t\\t list = list.next;\\n            \\t }\\n             }\\n             \\n             return head;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public ListNode deleteDuplicates(ListNode head) {\\n            ListNode list = head;\\n             \\n             while(list != null) {\\n            \\t if (list.next == null) {\\n            \\t\\t break;\\n            \\t }",
                "codeTag": "Java"
            },
            {
                "id": 28621,
                "title": "simple-iterative-python-6-lines-60-ms",
                "content": "    def deleteDuplicates(self, head):\\n        cur = head\\n        while cur:\\n            while cur.next and cur.next.val == cur.val:\\n                cur.next = cur.next.next     # skip duplicated node\\n            cur = cur.next     # not duplicate of current node, move to next node\\n        return head",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def deleteDuplicates(self, head):\\n        cur = head\\n        while cur:\\n            while cur.next and cur.next.val == cur.val:\\n                cur.next = cur.next.next     # skip duplicated node\\n            cur = cur.next     # not duplicate of current node, move to next node\\n        return head",
                "codeTag": "Python3"
            },
            {
                "id": 28663,
                "title": "easy-to-understand-c-solution",
                "content": "no need to initialize a new node\\n\\n    ListNode* deleteDuplicates(ListNode* head) {\\n            ListNode* cur = head;\\n            while(cur) {\\n            \\twhile(cur->next && cur->val == cur->next->val) {\\n            \\t\\tcur->next = cur->next->next;\\n            \\t}\\n            \\tcur = cur->next;\\n            }\\n            return head;\\n        }",
                "solutionTags": [],
                "code": "no need to initialize a new node\\n\\n    ListNode* deleteDuplicates(ListNode* head) {\\n            ListNode* cur = head;\\n            while(cur) {\\n            \\twhile(cur->next && cur->val == cur->next->val) {\\n            \\t\\tcur->next = cur->next->next;\\n            \\t}\\n            \\tcur = cur->next;\\n            }\\n            return head;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 3257316,
                "title": "c-python-c-java-easiest-solution-o-n-time",
                "content": "# C++\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* temp=head;\\n        while (temp&&temp->next)\\n        {\\n            if (temp->next->val==temp->val)\\n            {\\n                temp->next=temp->next->next;\\n                continue;\\n            }\\n            temp=temp->next;\\n        }\\n        return head;\\n    }\\n};\\n```\\n\\n# Python\\n```\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        temp = head\\n        while (temp and temp.next):\\n            if (temp.next.val == temp.val):\\n                temp.next = temp.next.next\\n                continue\\n            temp = temp.next\\n        return head\\n        \\n```\\n\\n# C\\n```\\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\\n    struct ListNode* temp=head;\\n    while (temp&&temp->next)\\n    {\\n        if (temp->next->val==temp->val)\\n        {\\n            temp->next=temp->next->next;\\n            continue;\\n        }\\n        temp=temp->next;\\n    }\\n    return head;\\n}\\n```\\n\\n# Java\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = head;\\n        while (temp != null && temp.next != null)\\n        {\\n            if (temp.next.val==temp.val)\\n            {\\n                temp.next=temp.next.next;\\n                continue;\\n            }\\n            temp=temp.next;\\n        }\\n        return head;\\n    }\\n}\\n```\\n\\nUpvote if this helps please \\uD83D\\uDE42\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* temp=head;\\n        while (temp&&temp->next)\\n        {\\n            if (temp->next->val==temp->val)\\n            {\\n                temp->next=temp->next->next;\\n                continue;\\n            }\\n            temp=temp->next;\\n        }\\n        return head;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        temp = head\\n        while (temp and temp.next):\\n            if (temp.next.val == temp.val):\\n                temp.next = temp.next.next\\n                continue\\n            temp = temp.next\\n        return head\\n        \\n```\n```\\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\\n    struct ListNode* temp=head;\\n    while (temp&&temp->next)\\n    {\\n        if (temp->next->val==temp->val)\\n        {\\n            temp->next=temp->next->next;\\n            continue;\\n        }\\n        temp=temp->next;\\n    }\\n    return head;\\n}\\n```\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = head;\\n        while (temp != null && temp.next != null)\\n        {\\n            if (temp.next.val==temp.val)\\n            {\\n                temp.next=temp.next.next;\\n                continue;\\n            }\\n            temp=temp.next;\\n        }\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28730,
                "title": "concise-solution-and-memory-freeing",
                "content": "I noticed that the solutions posted here are too long and complicated. They use unnecessary variables and/or checks etc.\\nThe solution can be much more concise. Here is my solution:\\n\\n    class Solution {\\n    public:\\n        ListNode *deleteDuplicates(ListNode *head) {\\n            ListNode* cur = head;\\n            while (cur) {\\n                while (cur->next && cur->val == cur->next->val)\\n                    cur->next = cur->next->next;\\n                cur = cur->next;\\n            }\\n            return head;\\n        }\\n    };\\n\\n**Note about freeing memory**. We need to free memory when we delete a node. But don't use `delete node;` construct on an interview without discussing it with the interviewer. A list node can be allocated in many different ways and we can use `delete node;` only if we are sure that the nodes were allocated with `new TreeNode(...);`.",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        ListNode *deleteDuplicates(ListNode *head) {\\n            ListNode* cur = head;\\n            while (cur) {\\n                while (cur->next && cur->val == cur->next->val)\\n                    cur->next = cur->next->next;\\n                cur = cur->next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 943403,
                "title": "python-simple-solution",
                "content": "**Solution 1:**\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        cur=head\\n        while cur:\\n            while cur.next and cur.next.val==cur.val:\\n                cur.next=cur.next.next\\n            cur=cur.next\\n        return head\\n        \\n```\\n\\n**Solution 2:**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        cur=head\\n        while cur:\\n            if cur.next and cur.next.val==cur.val:\\n                cur.next=cur.next.next\\n            else:\\n                cur=cur.next\\n        return head\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        cur=head\\n        while cur:\\n            while cur.next and cur.next.val==cur.val:\\n                cur.next=cur.next.next\\n            cur=cur.next\\n        return head\\n        \\n```\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        cur=head\\n        while cur:\\n            if cur.next and cur.next.val==cur.val:\\n                cur.next=cur.next.next\\n            else:\\n                cur=cur.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28722,
                "title": "javascript-solution",
                "content": "I didn't see many JS solutions, so I thought I'd share\\n\\n<pre>\\nvar deleteDuplicates = function(head) {\\n    var current = head;\\n    \\n    while(current) {\\n        if(current.next !== null && current.val == current.next.val) {\\n            current.next = current.next.next;\\n        } else {\\n            current = current.next;\\n        }\\n    }\\n    \\n    return head;\\n};\\n</pre>",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "I didn't see many JS solutions, so I thought I'd share\\n\\n<pre>\\nvar deleteDuplicates = function(head) {\\n    var current = head;\\n    \\n    while(current) {\\n        if(current.next !== null && current.val == current.next.val) {\\n            current.next = current.next.next;\\n        } else {\\n            current = current.next;\\n        }\\n    }\\n    \\n    return head;\\n};\\n</pre>",
                "codeTag": "Unknown"
            },
            {
                "id": 314650,
                "title": "c-code-8-ms-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* cur_node = head;\\n        while (cur_node && cur_node->next) {\\n            ListNode* next_node = cur_node->next;\\n            if (cur_node->val == next_node->val)\\n                cur_node->next = next_node->next;\\n            else\\n                cur_node = next_node;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* cur_node = head;\\n        while (cur_node && cur_node->next) {\\n            ListNode* next_node = cur_node->next;\\n            if (cur_node->val == next_node->val)\\n                cur_node->next = next_node->next;\\n            else\\n                cur_node = next_node;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2892275,
                "title": "python3-o-n-beats-95-80-41-ms-simple-with-explanation",
                "content": "# Approach\\n- We first deal with edge case of head being `None` rather than a `ListNode`\\n- Next we create a new variable `curr` to point at our current node, starting with the `head` node\\n- If `curr.next` is another node, we compare `curr.val` and `curr.next.val`\\n    - If the values are the same, we must remove one from the linked list\\n        - We keep the first node and remove the second by updating the first\\'s .next (`curr.next`) to the next node\\'s `.next` (`curr.next.next`)\\n    - If the values differ, we move point `curr` to the next node\\n- We repeat the previous process until the current node does not point to another node, at which point we return `head`, the de-duplicated linked list\\n\\n# Code\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if not head:\\n            return None\\n\\n        curr = head\\n\\n        while curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n\\n        return head\\n\\n```\\n\\n## Please upvote if you find this helpful! :D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if not head:\\n            return None\\n\\n        curr = head\\n\\n        while curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n\\n        return head\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3765793,
                "title": "easy-java-solution-beats-100-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n\\n    ListNode temp = head;\\n        if (head == null)\\n        {\\n            return head;\\n        }\\n        \\n        while (temp.next !=null)\\n        {\\n            if (temp.val != temp.next.val) {\\n                temp = temp.next;\\n            }\\n            else temp.next = temp.next.next;\\n        }\\n        return head;\\n    }\\n}\\n```\\n\\n![cat.jpeg](https://assets.leetcode.com/users/images/c78d9c13-efe2-4e13-a6e9-c5c7c4f16a18_1689361724.747828.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n\\n    ListNode temp = head;\\n        if (head == null)\\n        {\\n            return head;\\n        }\\n        \\n        while (temp.next !=null)\\n        {\\n            if (temp.val != temp.next.val) {\\n                temp = temp.next;\\n            }\\n            else temp.next = temp.next.next;\\n        }\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2414474,
                "title": "very-easy-100-fully-explained-java-c-python-js-c-python3",
                "content": "# **Java Solution:**\\nRuntime: 1 ms, faster than 92.17% of Java online submissions for Remove Duplicates from Sorted List.\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        // Special case...\\n        if(head == null || head.next == null)\\n            return head;\\n        // Initialize a pointer curr with the address of head node...\\n        ListNode curr = head;\\n        // Traverse all element through a while loop if curr node and the next node of curr node are present...\\n        while( curr != null && curr.next != null){\\n            // If the value of curr is equal to the value of prev...\\n            // It means the value is present in the linked list...\\n            if(curr.val == curr.next.val){\\n                // Hence we do not need to include curr again in the linked list...\\n                // So we increment the value of curr...\\n                curr.next = curr.next.next;\\n            }\\n            // Otherwise, we increment the curr pointer...\\n            else{\\n                curr = curr.next; \\n            }\\n        }\\n        return head;        // Return the sorted linked list without any duplicate element...\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\nRuntime: 4 ms, faster than 81.52% of C++ online submissions for Remove Duplicates from Sorted List.\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        // Special case...\\n        if(head==NULL || head->next==NULL)\\n            return head;\\n        // Initialize two pointers tmp(slow) and curr(fast)...\\n        ListNode* tmp = head;\\n        ListNode* curr = head->next;\\n        // Traverse all element through a while loop if curr node is not null...\\n        while(curr!=NULL) {\\n            // If the value of curr is equal to the value of tmp...\\n            // It means the value is present in the linked list...\\n            if(tmp->val == curr->val) {\\n                // Hence we do not need to include curr again in the linked list...\\n                // So we increment the value of curr...\\n                curr=curr->next;\\n            }\\n            // Otherwise, we increment both the pointers.\\n            else {\\n                tmp->next = curr;\\n                tmp = curr;\\n                curr = tmp->next;\\n            }\\n        }\\n        tmp->next = NULL;\\n        return head;        // Return the sorted linked list without any duplicate element...\\n    }\\n};\\n```\\n\\n# **Python Solution:**\\nRuntime: 36 ms, faster than 79.68% of Python online submissions for Remove Duplicates from Sorted List.\\n```\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        # Handle special case that the list is empty\\n        if head == None:\\n            return head\\n        # Initialize curr with the address of head node...\\n        curr = head\\n        # Travel the list until the second last node\\n        while curr.next != None:\\n            # If the value of curr is equal to the value of prev...\\n            # It means the value is present in the linked list...\\n            if curr.val == curr.next.val:\\n                # Hence we do not need to include curr again in the linked list...\\n                # So we increment the value of curr...\\n                tmp = curr.next\\n                curr.next = curr.next.next\\n                del tmp\\n            # Otherwise, we increment the curr pointer...\\n            else:\\n                curr = curr.next\\n        return head         # Return the sorted linked list without any duplicate element...\\n```\\n                    \\n# **JavaScript Solution:**\\nRuntime: 82 ms, faster than 84.86% of JavaScript online submissions for Remove Duplicates from Sorted List.\\n```\\nvar deleteDuplicates = function(head) {\\n    // Special case...\\n    if(head == null || head.next == null)\\n        return head;\\n    // Initialize a pointer curr with the address of head node...\\n    let curr = head;\\n    // Traverse all element through a while loop if curr node and the next node of curr node are present...\\n    while( curr != null && curr.next != null){\\n        // If the value of curr is equal to the value of prev...\\n        // It means the value is present in the linked list...\\n        if(curr.val == curr.next.val){\\n            // Hence we do not need to include curr again in the linked list...\\n            // So we increment the value of curr...\\n            curr.next = curr.next.next;\\n        }\\n        // Otherwise, we increment the curr pointer...\\n        else{\\n            curr = curr.next; \\n        }\\n    }\\n    return head;        // Return the sorted linked list without any duplicate element...\\n};\\n```\\n\\n# **C Language:**\\n```\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    // Special case...\\n    if(head==NULL || head->next==NULL)\\n        return head;\\n    // Initialize two pointers tmp(slow) and curr(fast)...\\n    struct ListNode* tmp = head;\\n    struct ListNode* curr = head->next;\\n    // Traverse all element through a while loop if curr node is not null...\\n    while(curr!=NULL) {\\n        // If the value of curr is equal to the value of tmp...\\n        // It means the value is present in the linked list...\\n        if(tmp->val == curr->val) {\\n            // Hence we do not need to include curr again in the linked list...\\n            // So we increment the value of curr...\\n            curr=curr->next;\\n        }\\n        // Otherwise, we increment both the pointers.\\n        else {\\n            tmp->next = curr;\\n            tmp = curr;\\n            curr = tmp->next;\\n        }\\n    }\\n    tmp->next = NULL;\\n    return head;        // Return the sorted linked list without any duplicate element...\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        # Handle special case that the list is empty\\n        if head == None:\\n            return head\\n        # Initialize curr with the address of head node...\\n        curr = head\\n        # Travel the list until the second last node\\n        while curr.next != None:\\n            # If the value of curr is equal to the value of prev...\\n            # It means the value is present in the linked list...\\n            if curr.val == curr.next.val:\\n                # Hence we do not need to include curr again in the linked list...\\n                # So we increment the value of curr...\\n                tmp = curr.next\\n                curr.next = curr.next.next\\n                del tmp\\n            # Otherwise, we increment the curr pointer...\\n            else:\\n                curr = curr.next\\n        return head         # Return the sorted linked list without any duplicate element...\\n```\\n**I am working hard for you guys...\\nPlease upvote if you find any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        // Special case...\\n        if(head == null || head.next == null)\\n            return head;\\n        // Initialize a pointer curr with the address of head node...\\n        ListNode curr = head;\\n        // Traverse all element through a while loop if curr node and the next node of curr node are present...\\n        while( curr != null && curr.next != null){\\n            // If the value of curr is equal to the value of prev...\\n            // It means the value is present in the linked list...\\n            if(curr.val == curr.next.val){\\n                // Hence we do not need to include curr again in the linked list...\\n                // So we increment the value of curr...\\n                curr.next = curr.next.next;\\n            }\\n            // Otherwise, we increment the curr pointer...\\n            else{\\n                curr = curr.next; \\n            }\\n        }\\n        return head;        // Return the sorted linked list without any duplicate element...\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        // Special case...\\n        if(head==NULL || head->next==NULL)\\n            return head;\\n        // Initialize two pointers tmp(slow) and curr(fast)...\\n        ListNode* tmp = head;\\n        ListNode* curr = head->next;\\n        // Traverse all element through a while loop if curr node is not null...\\n        while(curr!=NULL) {\\n            // If the value of curr is equal to the value of tmp...\\n            // It means the value is present in the linked list...\\n            if(tmp->val == curr->val) {\\n                // Hence we do not need to include curr again in the linked list...\\n                // So we increment the value of curr...\\n                curr=curr->next;\\n            }\\n            // Otherwise, we increment both the pointers.\\n            else {\\n                tmp->next = curr;\\n                tmp = curr;\\n                curr = tmp->next;\\n            }\\n        }\\n        tmp->next = NULL;\\n        return head;        // Return the sorted linked list without any duplicate element...\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        # Handle special case that the list is empty\\n        if head == None:\\n            return head\\n        # Initialize curr with the address of head node...\\n        curr = head\\n        # Travel the list until the second last node\\n        while curr.next != None:\\n            # If the value of curr is equal to the value of prev...\\n            # It means the value is present in the linked list...\\n            if curr.val == curr.next.val:\\n                # Hence we do not need to include curr again in the linked list...\\n                # So we increment the value of curr...\\n                tmp = curr.next\\n                curr.next = curr.next.next\\n                del tmp\\n            # Otherwise, we increment the curr pointer...\\n            else:\\n                curr = curr.next\\n        return head         # Return the sorted linked list without any duplicate element...\\n```\n```\\nvar deleteDuplicates = function(head) {\\n    // Special case...\\n    if(head == null || head.next == null)\\n        return head;\\n    // Initialize a pointer curr with the address of head node...\\n    let curr = head;\\n    // Traverse all element through a while loop if curr node and the next node of curr node are present...\\n    while( curr != null && curr.next != null){\\n        // If the value of curr is equal to the value of prev...\\n        // It means the value is present in the linked list...\\n        if(curr.val == curr.next.val){\\n            // Hence we do not need to include curr again in the linked list...\\n            // So we increment the value of curr...\\n            curr.next = curr.next.next;\\n        }\\n        // Otherwise, we increment the curr pointer...\\n        else{\\n            curr = curr.next; \\n        }\\n    }\\n    return head;        // Return the sorted linked list without any duplicate element...\\n};\\n```\n```\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    // Special case...\\n    if(head==NULL || head->next==NULL)\\n        return head;\\n    // Initialize two pointers tmp(slow) and curr(fast)...\\n    struct ListNode* tmp = head;\\n    struct ListNode* curr = head->next;\\n    // Traverse all element through a while loop if curr node is not null...\\n    while(curr!=NULL) {\\n        // If the value of curr is equal to the value of tmp...\\n        // It means the value is present in the linked list...\\n        if(tmp->val == curr->val) {\\n            // Hence we do not need to include curr again in the linked list...\\n            // So we increment the value of curr...\\n            curr=curr->next;\\n        }\\n        // Otherwise, we increment both the pointers.\\n        else {\\n            tmp->next = curr;\\n            tmp = curr;\\n            curr = tmp->next;\\n        }\\n    }\\n    tmp->next = NULL;\\n    return head;        // Return the sorted linked list without any duplicate element...\\n}\\n```\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        # Handle special case that the list is empty\\n        if head == None:\\n            return head\\n        # Initialize curr with the address of head node...\\n        curr = head\\n        # Travel the list until the second last node\\n        while curr.next != None:\\n            # If the value of curr is equal to the value of prev...\\n            # It means the value is present in the linked list...\\n            if curr.val == curr.next.val:\\n                # Hence we do not need to include curr again in the linked list...\\n                # So we increment the value of curr...\\n                tmp = curr.next\\n                curr.next = curr.next.next\\n                del tmp\\n            # Otherwise, we increment the curr pointer...\\n            else:\\n                curr = curr.next\\n        return head         # Return the sorted linked list without any duplicate element...\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28699,
                "title": "clear-python-code-beat-90",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        first, second = head, head.next if head else None\\n        while second:\\n            if first.val == second.val:\\n                second = second.next\\n                first.next = second\\n            else:\\n                first = second\\n                second = second.next\\n                \\n        return head\\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        first, second = head, head.next if head else None\\n        while second:\\n            if first.val == second.val:\\n                second = second.next\\n                first.next = second\\n            else:\\n                first = second\\n                second = second.next\\n                \\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023588,
                "title": "java-runtime-0ms-beats-100-00",
                "content": "# Intuition\\nThe problem requires removing duplicates from a sorted singly-linked list. The approach involves iterating through the list and removing duplicates while maintaining the sorted order.\\n\\n# Approach\\n- Initialize a pointer `current` to the head of the linked list to traverse the list.\\n- Start a while loop that continues until `current` reaches the end of the list or `current.next` reaches null.\\n- Inside the loop, compare the value of the current node `current.val` with the value of the next node `current.next.val`.\\n- If the values are equal, it indicates a duplicate node. In this case, update the `next` pointer of the current node `current.next` to skip the next node (remove the duplicate).\\n- If the values are not equal, move the `current` pointer to the next node, continuing the traversal.\\n- Repeat the loop until the end of the list is reached, ensuring that all duplicates are removed while maintaining the sorted order of the remaining nodes.\\n- After the loop, return the modified linked list, which contains no duplicates.\\n\\n# Complexity\\n- Time complexity: O(n)\\n  The algorithm iterates through the linked list once, where n is the number of nodes in the list. Each node is examined once to identify and remove duplicates.\\n\\n- Space complexity: O(1)\\n  The algorithm uses a constant amount of additional memory space for variables, regardless of the size of the input linked list, making its space complexity constant.\\n\\n# Code\\n```java\\nclass Solution {\\n   public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n\\n        while (current != null && current.next != null) {\\n            if (current.val == current.next.val) {\\n                current.next = current.next.next;\\n            } else {\\n                current = current.next;\\n            }\\n        }\\n\\n        return head;\\n    }\\n}\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/03822e25-72a1-4bde-a0fe-7a31db27fa1f_1694283728.4735084.webp)\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n   public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n\\n        while (current != null && current.next != null) {\\n            if (current.val == current.next.val) {\\n                current.next = current.next.next;\\n            } else {\\n                current = current.next;\\n            }\\n        }\\n\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 455325,
                "title": "python-whithot-other-space",
                "content": "use cur to skip node which value are equal, and then return head\\n```python\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        cur = head\\n        while(cur):\\n            if(cur.next and cur.next.val==cur.val):\\n                cur.next = cur.next.next\\n            else:\\n                cur = cur.next\\n        return head\\n```\\n\\nRuntime: 36 ms, faster than 94.20% of Python3 online submissions for Remove Duplicates from Sorted List.\\nMemory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for Remove Duplicates from Sorted List.\\n\\n**If it helps you , Please give me a vote star\\nThanks**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        cur = head\\n        while(cur):\\n            if(cur.next and cur.next.val==cur.val):\\n                cur.next = cur.next.next\\n            else:\\n                cur = cur.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28636,
                "title": "clean-java-solution",
                "content": "    public ListNode deleteDuplicates(ListNode head) {\\n        if(head==null||head.next==null) return head;\\n        ListNode dummy=head;\\n        while(dummy.next!=null){\\n            if(dummy.next.val==dummy.val){\\n                dummy.next=dummy.next.next;\\n            }else dummy=dummy.next;\\n        }\\n        return head;\\n    }",
                "solutionTags": [],
                "code": "    public ListNode deleteDuplicates(ListNode head) {\\n        if(head==null||head.next==null) return head;\\n        ListNode dummy=head;\\n        while(dummy.next!=null){\\n            if(dummy.next.val==dummy.val){\\n                dummy.next=dummy.next.next;\\n            }else dummy=dummy.next;\\n        }\\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 344741,
                "title": "my-idiomatic-solution-rust",
                "content": "```\\nimpl Solution {\\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        if head.is_none() {\\n            return None;\\n        }\\n        let mut h = head;\\n        let mut p1 = h.as_mut().unwrap();\\n        while let Some(p2) = p1.next.as_mut() {\\n            if p1.val == p2.val {\\n                p1.next = p2.next.take();\\n            } else {\\n                p1 = p1.next.as_mut().unwrap();\\n            }\\n        }\\n        h\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        if head.is_none() {\\n            return None;\\n        }\\n        let mut h = head;\\n        let mut p1 = h.as_mut().unwrap();\\n        while let Some(p2) = p1.next.as_mut() {\\n            if p1.val == p2.val {\\n                p1.next = p2.next.take();\\n            } else {\\n                p1 = p1.next.as_mut().unwrap();\\n            }\\n        }\\n        h\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1506294,
                "title": "c-and-python-simple-solution",
                "content": "**C++ :**\\n\\n```\\nListNode* deleteDuplicates(ListNode* head) {\\n        \\n\\tif(!head) return head;\\n\\tListNode* tmp = head;\\n\\n\\twhile(tmp && tmp -> next)\\n\\t{\\n\\t\\tif(tmp -> val == tmp -> next -> val)\\n\\t\\t\\ttmp -> next = tmp -> next -> next;\\n\\t\\telse\\n\\t\\t\\ttmp = tmp -> next; \\n\\t}\\n\\n\\treturn head;\\n}\\n```\\n\\n**Python :**\\n\\n```\\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\tif not head:\\n\\t\\treturn head\\n\\n\\ttemp = head\\n\\twhile temp and temp.next:\\n\\t\\tif temp.val == temp.next.val:\\n\\t\\t\\ttemp.next = temp.next.next\\n\\t\\telse:\\n\\t\\t\\ttemp = temp.next\\n\\n\\treturn head\\n```\\n\\n**Like it ? please upvote**\\n",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "C"
                ],
                "code": "```\\nListNode* deleteDuplicates(ListNode* head) {\\n        \\n\\tif(!head) return head;\\n\\tListNode* tmp = head;\\n\\n\\twhile(tmp && tmp -> next)\\n\\t{\\n\\t\\tif(tmp -> val == tmp -> next -> val)\\n\\t\\t\\ttmp -> next = tmp -> next -> next;\\n\\t\\telse\\n\\t\\t\\ttmp = tmp -> next; \\n\\t}\\n\\n\\treturn head;\\n}\\n```\n```\\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\tif not head:\\n\\t\\treturn head\\n\\n\\ttemp = head\\n\\twhile temp and temp.next:\\n\\t\\tif temp.val == temp.next.val:\\n\\t\\t\\ttemp.next = temp.next.next\\n\\t\\telse:\\n\\t\\t\\ttemp = temp.next\\n\\n\\treturn head\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 28765,
                "title": "c-concise-solution",
                "content": "        \\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode *cur = head;\\n        while (cur && cur->next) {\\n            if (cur->val == cur->next->val)\\n                cur->next = cur->next->next;\\n            else\\n                cur = cur->next;\\n        }\\n        return head;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "        \\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode *cur = head;\\n        while (cur && cur->next) {\\n            if (cur->val == cur->next->val)\\n                cur->next = cur->next->next;\\n            else\\n                cur = cur->next;\\n        }\\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 801992,
                "title": "javascript-solution-83",
                "content": "```\\nvar deleteDuplicates = function(head) {\\n    if(!head) return head\\n    var cur = head\\n    \\n    while(cur!=null && cur.next != null) {\\n        if(cur.next.val === cur.val) {\\n            cur.next = cur.next.next\\n        }else {\\n            cur = cur.next\\n        }\\n    }\\n    return head\\n}\\n```\\n\\n**Runtime: 76 ms, faster than 94.64% of JavaScript online submissions for Remove Duplicates from Sorted List.**\\n\\n**Memory Usage: 38.6 MB, less than 44.03% of JavaScript online submissions for Remove Duplicates from Sorted List.**\\n\\n**Feedback Appreciated**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar deleteDuplicates = function(head) {\\n    if(!head) return head\\n    var cur = head\\n    \\n    while(cur!=null && cur.next != null) {\\n        if(cur.next.val === cur.val) {\\n            cur.next = cur.next.next\\n        }else {\\n            cur = cur.next\\n        }\\n    }\\n    return head\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1557910,
                "title": "rust-simple-concise-iterative-0ms-100",
                "content": "This would be a simple thing in C/C++, but with Rust\\'s super strict borrow checking and the general usage model for `Option` wrapping `Box` it\\'s challenging to find a solution that looks concise and is efficient. But I think I have it here. Any \"crustaceans\" who see a better way and want to offer advice, please let me know.\\n\\n```rust\\nimpl Solution {\\n    \\n    pub fn delete_duplicates(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> \\n    {\\n        let mut curr_opt = head.as_mut();\\n        \\n        while let Some(curr) = curr_opt {\\n            let mut next_opt = curr.next.take();\\n            \\n            while let Some(next) = next_opt.as_mut() {    \\n                if next.val == curr.val \\n                     { next_opt  = next.next.take(); }\\n                else { curr.next = next_opt;  break; }\\n            }\\n            curr_opt = curr.next.as_mut();\\n        }\\n        head\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Linked List"
                ],
                "code": "```rust\\nimpl Solution {\\n    \\n    pub fn delete_duplicates(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> \\n    {\\n        let mut curr_opt = head.as_mut();\\n        \\n        while let Some(curr) = curr_opt {\\n            let mut next_opt = curr.next.take();\\n            \\n            while let Some(next) = next_opt.as_mut() {    \\n                if next.val == curr.val \\n                     { next_opt  = next.next.take(); }\\n                else { curr.next = next_opt;  break; }\\n            }\\n            curr_opt = curr.next.as_mut();\\n        }\\n        head\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 28745,
                "title": "easy-understand-java-solution",
                "content": " public ListNode deleteDuplicates(ListNode head) {\\n\\n        ListNode temp = head;\\n\\n        while(temp!=null&&temp.next!=null){\\n\\n            if(temp.val == temp.next.val){\\n\\n                temp.next = temp.next.next;\\n            }\\n            else\\n                temp = temp.next;\\n        }\\n        return head;\\n    }",
                "solutionTags": [],
                "code": " public ListNode deleteDuplicates(ListNode head) {\\n\\n        ListNode temp = head;\\n\\n        while(temp!=null&&temp.next!=null){\\n\\n            if(temp.val == temp.next.val){\\n\\n                temp.next = temp.next.next;\\n            }\\n            else\\n                temp = temp.next;\\n        }\\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 28828,
                "title": "one-liner-in-ruby",
                "content": "Recursively remove duplicates from the rest of the list, then possibly drop the head (if it's a duplicate of the value after it).\\n\\nRuby:\\n\\n    def delete_duplicates(h)\\n        h && (h.next = delete_duplicates(h.next)) && h.next.val == h.val ? h.next : h\\n    end\\n\\n---\\n\\nBad C++ versions:\\n\\n    return h && (h->next = deleteDuplicates(h->next)) && h->next->val == h->val ? h->next : h;\\n\\nAs @shawnyi pointed out, that leaks memory. So `delete`:\\n\\n    if (h && (h->next = deleteDuplicates(h->next)) && h->next->val == h->val) delete h, h = h->next; return h;\\n\\nAs @drbombe pointed out, I shouldn't access `h->next` after deleting `h`. Not sure what I was thinking. I certainly knew that. I guess I just focused on the algorithm and didn't care as long as it gets accepted (which it does).\\n\\nFor a proper version, see @drbombe's solution below.",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "Recursively remove duplicates from the rest of the list, then possibly drop the head (if it's a duplicate of the value after it).\\n\\nRuby:\\n\\n    def delete_duplicates(h)\\n        h && (h.next = delete_duplicates(h.next)) && h.next.val == h.val ? h.next : h\\n    end\\n\\n---\\n\\nBad C++ versions:\\n\\n    return h && (h->next = deleteDuplicates(h->next)) && h->next->val == h->val ? h->next : h;\\n\\nAs @shawnyi pointed out, that leaks memory. So `delete`:\\n\\n    if (h && (h->next = deleteDuplicates(h->next)) && h->next->val == h->val) delete h, h = h->next; return h;\\n\\nAs @drbombe pointed out, I shouldn't access `h->next` after deleting `h`. Not sure what I was thinking. I certainly knew that. I guess I just focused on the algorithm and didn't care as long as it gets accepted (which it does).\\n\\nFor a proper version, see @drbombe's solution below.",
                "codeTag": "Python3"
            },
            {
                "id": 2676904,
                "title": "easy-to-understand-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        /* if head = NULL */\\n        if(!head) return head;\\n        /* setting the curr at head */\\n        ListNode *curr = head;\\n        while(curr->next){\\n            /* if curr value == curr next value the we have to delete next value */\\n            if(curr->val == curr->next->val){\\n                /* stroing next address for deleting further */\\n                ListNode *temp = curr->next;\\n                \\n                /* changing curr pointer to next of next */\\n                curr->next = curr->next->next;\\n                delete temp;\\n            }\\n            else curr = curr->next;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        /* if head = NULL */\\n        if(!head) return head;\\n        /* setting the curr at head */\\n        ListNode *curr = head;\\n        while(curr->next){\\n            /* if curr value == curr next value the we have to delete next value */\\n            if(curr->val == curr->next->val){\\n                /* stroing next address for deleting further */\\n                ListNode *temp = curr->next;\\n                \\n                /* changing curr pointer to next of next */\\n                curr->next = curr->next->next;\\n                delete temp;\\n            }\\n            else curr = curr->next;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1335394,
                "title": "swift-remove-duplicates-from-sorted-list-test-cases",
                "content": "```swift\\nclass Solution {\\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\\n        var node = head\\n        while let next = node?.next {\\n            node!.val == next.val ? (node!.next = next.next) : (node = next)\\n        }\\n        return head\\n    }\\n}\\n```\\n\\n```swift\\nimport XCTest\\n\\n// Executed 2 tests, with 0 failures (0 unexpected) in 0.027 (0.029) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test0() {\\n        let res = s.deleteDuplicates(.init([1,1,2]))\\n        let expected = ListNode([1,2])\\n        XCTAssertEqual(res?.val, expected?.val)\\n    }\\n    func test1() {\\n        let res = s.deleteDuplicates(.init([1,1,2,3,3]))\\n        let expected = ListNode([1,2,3])\\n        XCTAssertEqual(res?.val, expected?.val)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n```swift\\npublic class ListNode {\\n    public var val: Int\\n    public var next: ListNode?\\n    public init() { self.val = 0; self.next = nil; }\\n    public init(_ val: Int) { self.val = val; self.next = nil; }\\n    public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n    public init?(_ array: [Int]) {\\n        guard !array.isEmpty else { return nil }\\n        self.val = array[0]\\n        var prev: ListNode = self\\n        for i in 1..<array.count {\\n            let new = ListNode(array[i])\\n            prev.next = new\\n            prev = new\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\\n        var node = head\\n        while let next = node?.next {\\n            node!.val == next.val ? (node!.next = next.next) : (node = next)\\n        }\\n        return head\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\n// Executed 2 tests, with 0 failures (0 unexpected) in 0.027 (0.029) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test0() {\\n        let res = s.deleteDuplicates(.init([1,1,2]))\\n        let expected = ListNode([1,2])\\n        XCTAssertEqual(res?.val, expected?.val)\\n    }\\n    func test1() {\\n        let res = s.deleteDuplicates(.init([1,1,2,3,3]))\\n        let expected = ListNode([1,2,3])\\n        XCTAssertEqual(res?.val, expected?.val)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\n```swift\\npublic class ListNode {\\n    public var val: Int\\n    public var next: ListNode?\\n    public init() { self.val = 0; self.next = nil; }\\n    public init(_ val: Int) { self.val = val; self.next = nil; }\\n    public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n    public init?(_ array: [Int]) {\\n        guard !array.isEmpty else { return nil }\\n        self.val = array[0]\\n        var prev: ListNode = self\\n        for i in 1..<array.count {\\n            let new = ListNode(array[i])\\n            prev.next = new\\n            prev = new\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 935684,
                "title": "very-understandable-javascript-two-pointer-solution-o-n-time-o-1-space",
                "content": "Let p = prev, n = next. Now walk through the code using p and n\\n```\\n1->1->2->3->3->4\\np  n\\n\\n1->   2->3->3->4\\np     n\\n\\n1->2->3->3->4\\np  n\\n\\n1->2->3->3->4\\n   p  n\\n\\n1->2->3->3->4\\n      p  n\\n\\t  \\n1->2->3   ->4\\n\\t  p  n\\n\\t  \\n1->2->3->4\\n\\t  p  n\\n\\n1->2->3->4\\n\\t     p  n\\n```\\n\\nCode: \\n```\\nvar deleteDuplicates = function(head) {\\n  if (!head) return null;\\n  // Init prev as 1st node, next as 2nd node\\n  let prev = head, next = head.next;\\n\\n  // Iterate until next is null, which is end of list\\n  while (next) {\\n    if (prev.val === next.val) {\\n\\t  // If next is a duplicate, skip over it by pointing its prev to its next\\n      prev.next = next.next;\\n    } else {\\n\\t  // Else, just move prev forward to continue through the list\\n      prev = prev.next;\\n    }\\n\\t// Always move next forward, it moves along with prev\\n    next = next.next;\\n  }\\n\\n  return head;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n1->1->2->3->3->4\\np  n\\n\\n1->   2->3->3->4\\np     n\\n\\n1->2->3->3->4\\np  n\\n\\n1->2->3->3->4\\n   p  n\\n\\n1->2->3->3->4\\n      p  n\\n\\t  \\n1->2->3   ->4\\n\\t  p  n\\n\\t  \\n1->2->3->4\\n\\t  p  n\\n\\n1->2->3->4\\n\\t     p  n\\n```\n```\\nvar deleteDuplicates = function(head) {\\n  if (!head) return null;\\n  // Init prev as 1st node, next as 2nd node\\n  let prev = head, next = head.next;\\n\\n  // Iterate until next is null, which is end of list\\n  while (next) {\\n    if (prev.val === next.val) {\\n\\t  // If next is a duplicate, skip over it by pointing its prev to its next\\n      prev.next = next.next;\\n    } else {\\n\\t  // Else, just move prev forward to continue through the list\\n      prev = prev.next;\\n    }\\n\\t// Always move next forward, it moves along with prev\\n    next = next.next;\\n  }\\n\\n  return head;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 28743,
                "title": "remove-duplicates-from-sorted-unsorted-list-in-java",
                "content": "Remove duplicates from sorted linked list : \\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode fakeHead = head;\\n        while(fakeHead != null && fakeHead.next != null){\\n            if(fakeHead.val == fakeHead.next.val){\\n                fakeHead.next = fakeHead.next.next;\\n            } else{\\n                fakeHead = fakeHead.next;\\n            }\\n        }\\n        return head;\\n    }\\n\\n\\n\\nRemove duplicates from unsorted linked list (works on sorted list as well) : \\n\\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n        Set<Integer> set = new HashSet<>();\\n        ListNode pre = null;\\n        ListNode fakeHead = head;\\n        while(fakeHead != null){\\n            if(!set.add(fakeHead.val)){\\n                pre.next = fakeHead.next;\\n            } else{\\n                pre = fakeHead;\\n            }\\n            fakeHead = fakeHead.next;\\n        }\\n        return head;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Remove duplicates from sorted linked list : \\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode fakeHead = head;\\n        while(fakeHead != null && fakeHead.next != null){\\n            if(fakeHead.val == fakeHead.next.val){\\n                fakeHead.next = fakeHead.next.next;\\n            } else{\\n                fakeHead = fakeHead.next;\\n            }\\n        }\\n        return head;\\n    }\\n\\n\\n\\nRemove duplicates from unsorted linked list (works on sorted list as well) : \\n\\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n        Set<Integer> set = new HashSet<>();\\n        ListNode pre = null;\\n        ListNode fakeHead = head;\\n        while(fakeHead != null){\\n            if(!set.add(fakeHead.val)){\\n                pre.next = fakeHead.next;\\n            } else{\\n                pre = fakeHead;\\n            }\\n            fakeHead = fakeHead.next;\\n        }\\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3154174,
                "title": "simple-java-c-100-readable-easy-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\n public class Solution {\\npublic ListNode deleteDuplicates(ListNode head) {\\n    ListNode temp = head;\\n    while (temp != null) {\\n        while(temp.next != null && temp.next.val == temp.val) {\\n           temp.next = temp.next.next;\\n        }\\n        temp = temp.next;\\n    }\\n    return head;\\n}\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\n public class Solution {\\npublic ListNode deleteDuplicates(ListNode head) {\\n    ListNode temp = head;\\n    while (temp != null) {\\n        while(temp.next != null && temp.next.val == temp.val) {\\n           temp.next = temp.next.next;\\n        }\\n        temp = temp.next;\\n    }\\n    return head;\\n}\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1921891,
                "title": "100-fastest-swift-solution-time-o-n-space-o-1",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the number of nodes in the linked list.\\n    //   - space: O(1), only constant space is used.\\n    \\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\\n        var current = head\\n        var last: ListNode?\\n        \\n        while current != nil {\\n            if last != nil && current!.val == last!.val {\\n                last?.next = current?.next\\n            \\n            } else {\\n                last = current\\n            }\\n            \\n            current = current?.next\\n        }\\n        \\n        return head\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the number of nodes in the linked list.\\n    //   - space: O(1), only constant space is used.\\n    \\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\\n        var current = head\\n        var last: ListNode?\\n        \\n        while current != nil {\\n            if last != nil && current!.val == last!.val {\\n                last?.next = current?.next\\n            \\n            } else {\\n                last = current\\n            }\\n            \\n            current = current?.next\\n        }\\n        \\n        return head\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1308429,
                "title": "simple-python-solution",
                "content": "```\\n\\t\\tif not head:\\n            return None\\n        curr = head\\n        while curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr=curr.next\\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n\\t\\tif not head:\\n            return None\\n        curr = head\\n        while curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr=curr.next\\n        return head\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3026270,
                "title": "javascript-easy-solution-with-explanation-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe purpose of this code is to remove duplicate nodes from a linked list. It does this by iterating through the linked list and comparing the values stored in each node to the values stored in the nodes that come after it. If it finds two nodes with the same value, it deletes the second of the two nodes.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The function begins by checking if the head argument is null, in which case it returns null. This check handles the case of an empty linked list.\\n2. The function then declares a local variable curr and initializes it to head. This variable will be used to iterate through the linked list and delete any duplicate nodes.\\n3. The function then enters a while loop that continues as long as curr.next is not null. This loop will iterate through the entire linked list.\\n4. Within the loop, the function checks if the value stored in the current node (curr.val) is equal to the value stored in the next node (curr.next.val). If these values are equal, then the current node and the next node are duplicates, and the next node needs to be deleted.\\n5. To delete the next node, the function first stores a reference to the node after the next node (next_next). This is necessary because after the next node is deleted, we will need to update curr.next to skip over the deleted node and point to the node after the next node.\\n6. The function then declares a local variable nodeToDelete and initializes it to curr.next, which is the node that needs to be deleted.\\n7. The function then calls the built-in delete function and passes it nodeToDelete, which deletes the node from the linked list.\\n8. Finally, the function updates curr.next to point to the node after the next node (next_next), effectively skipping over the deleted node.\\n9. If the values stored in curr.val and curr.next.val are not equal, then the current node and the next node are not duplicates, and the loop simply advances curr to the next node by updating curr to curr.next.\\n10. After the loop completes, the function returns head, which is the reference to the head node of the linked list with the duplicates removed.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this code is O(n), where n is the number of nodes in the linked list. This is because the function iterates through the entire linked list once, performing a constant amount of work on each iteration.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this code is O(1), because the function only uses a constant amount of space regardless of the size of the input. The only variables that are allocated are \"curr\",\" next_next\", and \"nodeToDelete\", which are all fixed-size variables that do not depend on the size of the input.\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    //empty list\\n    if(head == null)\\n    return null;\\n\\n   let curr = head;\\n    while(curr.next != null){\\n    \\n        if(curr.val == curr.next.val){\\n          let next_next = curr.next.next;\\n          let nodeToDelete = curr.next;\\n          delete(nodeToDelete);\\n          curr.next = next_next;\\n        }\\n        else//not equal\\n        { \\n          curr = curr.next;\\n        }\\n       \\n    }\\nreturn head;\\n};\\n**<!-- Please upvote if you like this solution -->**\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    //empty list\\n    if(head == null)\\n    return null;\\n\\n   let curr = head;\\n    while(curr.next != null){\\n    \\n        if(curr.val == curr.next.val){\\n          let next_next = curr.next.next;\\n          let nodeToDelete = curr.next;\\n          delete(nodeToDelete);\\n          curr.next = next_next;\\n        }\\n        else//not equal\\n        { \\n          curr = curr.next;\\n        }\\n       \\n    }\\nreturn head;\\n};\\n**<!-- Please upvote if you like this solution -->**\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1258359,
                "title": "simplest-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head)\\n    {\\n        ListNode* pointer = head;\\n        while(pointer != NULL && pointer->next != NULL)\\n        {\\n            if(pointer->val == pointer->next->val)\\n            {\\n                pointer->next = pointer->next->next; //if the val of current node is equals to the val of next node then skip the node\\n            }\\n            else\\n            {\\n                pointer = pointer->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```\\n**Like the solution? Please upvote.....**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head)\\n    {\\n        ListNode* pointer = head;\\n        while(pointer != NULL && pointer->next != NULL)\\n        {\\n            if(pointer->val == pointer->next->val)\\n            {\\n                pointer->next = pointer->next->next; //if the val of current node is equals to the val of next node then skip the node\\n            }\\n            else\\n            {\\n                pointer = pointer->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28750,
                "title": "4-ms-c-solution",
                "content": "    if (head) {\\n        struct ListNode *p = head;\\n        while (p->next) {\\n            if (p->val != p->next->val) {\\n                p = p->next;\\n            }\\n            else {\\n                struct ListNode *tmp = p->next;\\n                p->next = p->next->next;\\n                free(tmp);\\n            }\\n        }\\n    }\\n    \\n    return head;",
                "solutionTags": [],
                "code": "    if (head) {\\n        struct ListNode *p = head;\\n        while (p->next) {\\n            if (p->val != p->next->val) {\\n                p = p->next;\\n            }\\n            else {\\n                struct ListNode *tmp = p->next;\\n                p->next = p->next->next;\\n                free(tmp);\\n            }\\n        }\\n    }\\n    \\n    return head;",
                "codeTag": "Unknown"
            },
            {
                "id": 3333593,
                "title": "6-lines-code-in-python3",
                "content": "\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr=head\\n        while curr:\\n            while curr.next and curr.next.val==curr.val:\\n                curr.next=curr.next.next\\n            curr=curr.next\\n        return head\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr=head\\n        while curr:\\n            while curr.next and curr.next.val==curr.val:\\n                curr.next=curr.next.next\\n            curr=curr.next\\n        return head\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3333386,
                "title": "awesome-trick-with-7-lines-of-code",
                "content": "\\n# One Pointers Approach--->Time:O(N)\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        current=head\\n        while current and current.next:\\n            if current.val==current.next.val:\\n                current.next=current.next.next\\n            else:\\n                current=current.next\\n        return head\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        current=head\\n        while current and current.next:\\n            if current.val==current.next.val:\\n                current.next=current.next.next\\n            else:\\n                current=current.next\\n        return head\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2662393,
                "title": "simple-python-solution-faster-than-97-36",
                "content": "**O(N) Time & O(1) Space Solution**\\n```\\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\tfront = head #points to the front of the linked list\\n\\twhile head and head.next: #while we aren\\'t at the end of the list\\n\\t\\tif head.val == head.next.val: #if the next node has the same value\\n\\t\\t\\thead.next = head.next.next #skip it\\n\\t\\telse: #not a duplicate\\n\\t\\t\\thead = head.next #otherwise move forward\\n\\treturn front #return the front of the linked list\\n```\\nIn this solution, we use ```front``` to keep track of the front of the linkedlist. Then, we go through the list up until the end and check to see if the value of the current node is equal to the value of the next node. If it is, then we skip the duplicate node by setting ```head.next = head.next.next```. If we just removed a duplicate, we don\\'t know if the next node is also a duplicate, so we should not move forward with ```head = head.next``` like we do when we do not find a duplicate.\\nThis solution only needs to look at every node once, giving ```O(N)``` time complexity. Since it requires a constant amount of additional space, the memory complexity is ```O(1)```.\\n\\nP.S. ```while head and head.next``` is the same as ```while head is not None and head.next is not None``` \\u2013\\u2013 it just checks that neither of them are ```None```.\\n\\n**Thanks for Reading!**\\nIf this post has been helpful, please consider upvoting! Also, if I made any mistakes or there are other optimizations, methods I didn\\'t consider, etc. please let me know!",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\tfront = head #points to the front of the linked list\\n\\twhile head and head.next: #while we aren\\'t at the end of the list\\n\\t\\tif head.val == head.next.val: #if the next node has the same value\\n\\t\\t\\thead.next = head.next.next #skip it\\n\\t\\telse: #not a duplicate\\n\\t\\t\\thead = head.next #otherwise move forward\\n\\treturn front #return the front of the linked list\\n```\n```front```\n```head.next = head.next.next```\n```head = head.next```\n```O(N)```\n```O(1)```\n```while head and head.next```\n```while head is not None and head.next is not None```\n```None```",
                "codeTag": "Python3"
            },
            {
                "id": 1570266,
                "title": "java-faster-than-100",
                "content": "\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode curr = head;\\n        if(head == null) return null;\\n\\t\\t\\n\\t\\t// if the head.next == null it means that the list contains only one node (head) \\n\\t\\t//so there is no duplicates  we will simply return the head of the list\\n\\t\\t\\n        if(head.next == null) return head;\\n        else{\\n            while(curr.next != null){\\n\\t\\t\\t//we compare the data of the current node with the next node if they are equal\\n\\t\\t\\t//we remove the next node \\n                if(curr.val == curr.next.val) \\n                    curr.next = curr.next.next;\\n                else\\n\\t\\t\\t\\t//if they are not equal we simply move forward\\n                    curr=curr.next;\\n            }\\n        }\\n        return head;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode curr = head;\\n        if(head == null) return null;\\n\\t\\t\\n\\t\\t// if the head.next == null it means that the list contains only one node (head) \\n\\t\\t//so there is no duplicates  we will simply return the head of the list\\n\\t\\t\\n        if(head.next == null) return head;\\n        else{\\n            while(curr.next != null){\\n\\t\\t\\t//we compare the data of the current node with the next node if they are equal\\n\\t\\t\\t//we remove the next node \\n                if(curr.val == curr.next.val) \\n                    curr.next = curr.next.next;\\n                else\\n\\t\\t\\t\\t//if they are not equal we simply move forward\\n                    curr=curr.next;\\n            }\\n        }\\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1342775,
                "title": "short-c-solution-using-recursion",
                "content": "Base case is head==NULL or head->next==NULL hence, we already have an empty list or list with a single element (no duplicates)\\nDecide what will be the next of the current head by recursively calling the function deleteDupliactes.\\nWhy this will work?\\nBecause as soon as we hit the base case, we will get an unique value for the tail. Now that unique value is passed as a next element for the previous element. If the value is same as previous elements value (compared during returning of function),  we will return the unique value itself, if the value is different, return the previous element which will have next element as this unique value.\\nExample:\\nA->B->C, going deep into recursion, first we get C, we compare with B, if(B!=C) we get A->next = B\\ni.e. A->B->C but if (B==C) we get A->next = C, hence A->C. This will also checked for values between A and C and so on.\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL || head->next ==NULL)\\n            return head;\\n        head->next = deleteDuplicates(head->next);\\n        return head->val==head->next->val ? head->next : head;\\n    }\\n};\\n```\\nTime complexity = O(N)\\nSpace complexity = O(1)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL || head->next ==NULL)\\n            return head;\\n        head->next = deleteDuplicates(head->next);\\n        return head->val==head->next->val ? head->next : head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28790,
                "title": "python-109ms-why-my-solution-is-fast-than-others",
                "content": "I just use a while loop to find duplicates. And my runtime is 109ms.\\n\\nA common runtime in python is 200ms ~ 400ms.\\n\\n    # Definition for singly-linked list.\\n    # class ListNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution:\\n        # @param head, a ListNode\\n        # @return a ListNode\\n        def deleteDuplicates(self, head):\\n            if head == None:\\n                return head\\n                \\n            node = head\\n            \\n            while node.next:\\n                if node.val == node.next.val:\\n                    node.next = node.next.next\\n                else:\\n                    node = node.next\\n                    \\n            return head",
                "solutionTags": [],
                "code": "I just use a while loop to find duplicates. And my runtime is 109ms.\\n\\nA common runtime in python is 200ms ~ 400ms.\\n\\n    # Definition for singly-linked list.\\n    # class ListNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.next = None\\n    \\n    class Solution:\\n        # @param head, a ListNode\\n        # @return a ListNode\\n        def deleteDuplicates(self, head):\\n            if head == None:\\n                return head\\n                \\n            node = head\\n            \\n            while node.next:\\n                if node.val == node.next.val:\\n                    node.next = node.next.next\\n                else:\\n                    node = node.next\\n                    \\n            return head",
                "codeTag": "Java"
            },
            {
                "id": 28620,
                "title": "share-a-recursive-solution-in-python",
                "content": "There is straight forward iterative solution, but it turns out recursive is quite few lines and not too hard to understand.\\n\\n    class Solution:\\n        # @param head, a ListNode\\n        # @return a ListNode\\n        def deleteDuplicates(self, head):\\n            if head and head.next and head.val != head.next.val:\\n                head.next = self.deleteDuplicates(head.next)\\n            elif head and head.next:\\n                head = self.deleteDuplicates(head.next)\\n            return head",
                "solutionTags": [],
                "code": "There is straight forward iterative solution, but it turns out recursive is quite few lines and not too hard to understand.\\n\\n    class Solution:\\n        # @param head, a ListNode\\n        # @return a ListNode\\n        def deleteDuplicates(self, head):\\n            if head and head.next and head.val != head.next.val:\\n                head.next = self.deleteDuplicates(head.next)\\n            elif head and head.next:\\n                head = self.deleteDuplicates(head.next)\\n            return head",
                "codeTag": "Java"
            },
            {
                "id": 2290759,
                "title": "python-beats-94-explained-with-diagrams",
                "content": "**Runtime: 42 ms, faster than 94.70% of Python3 online submissions for Remove Duplicates from Sorted List.**\\n**Memory Usage: 13.8 MB, less than 70.70% of Python3 online submissions for Remove Duplicates from Sorted List.**\\n\\nThe theme to solve this question is just like how we solve regular linked list problems. \\n\\nWe go with initializing two variables start and node with head then we move node to start.next\\n\\nLike in this example:-\\n![image](https://assets.leetcode.com/users/images/3c2f7589-5374-43a1-9c56-c0e8f203a2f6_1657981559.5628524.png)\\n now `start` is 1 and `node` is 1(2nd one)\\n we loop through the list and check if `start==node` and if that is true like in this case, what we need to do is set `start.next=node.next` now since the First `1` in the above diagram now points to `2` and the next thing we need to take care of is that we need to change this as I have illustated in the following pictures:-\\n \\n ![image](https://assets.leetcode.com/users/images/ecaeab50-b851-4dfa-94c7-7614a0402709_1658518230.7136285.jpeg)\\n ![image](https://assets.leetcode.com/users/images/94b27264-6072-4f8a-b1a3-705ac89a2012_1658518253.6033578.jpeg)\\n ![image](https://assets.leetcode.com/users/images/54f6551d-388c-43f3-9d1a-561c08359025_1658518264.8918567.jpeg)\\n\\n \\nFrom here it\\'s cake walk, you need to continue the loop and that\\'s it. The Probelm is Solved!!\\n\\n**Code**\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if not head or not head.next:\\n            return head \\n        start=node=head\\n        node=head.next\\n        while start and node:\\n            if start.val==node.val:\\n                start.next=node.next\\n                node.next=None\\n                node=start.next\\n            else:\\n                start=start.next\\n                node=node.next\\n        return head\\n```\\n\\n\\n_______________________________________________________________________________________________\\n_________________________________________________________________________________________________\\nEdit 1:\\nthe line `node.next=None` can be omitted as we wont ever reach that node\\n_________________________________________________________________________________________________\\n_________________________________________________________________________________________________\\n\\n\\nIf you liked my efforts then pls pls **UPVOTE** the post, it will encourage me to do more of this stuff!\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Iterator"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if not head or not head.next:\\n            return head \\n        start=node=head\\n        node=head.next\\n        while start and node:\\n            if start.val==node.val:\\n                start.next=node.next\\n                node.next=None\\n                node=start.next\\n            else:\\n                start=start.next\\n                node=node.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1914980,
                "title": "easy-solution-one-pointer-two-while-loops",
                "content": "The outer `while` loops over distinct values, the inner `while` skips duplicates.\\n```csharp\\npublic class Solution\\n{\\n    public ListNode DeleteDuplicates(ListNode head)\\n    {\\n        ListNode n = head;\\n\\n        while (n is not null)\\n        {\\n            while (n.val == n.next?.val)\\n            {\\n                n.next = n.next.next;\\n            }\\n            n = n.next;\\n        }\\n\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```csharp\\npublic class Solution\\n{\\n    public ListNode DeleteDuplicates(ListNode head)\\n    {\\n        ListNode n = head;\\n\\n        while (n is not null)\\n        {\\n            while (n.val == n.next?.val)\\n            {\\n                n.next = n.next.next;\\n            }\\n            n = n.next;\\n        }\\n\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28785,
                "title": "clear-java-solution",
                "content": "    public class Solution {\\n        public ListNode deleteDuplicates(ListNode head) {\\n            if(head == null) return null;\\n            ListNode pre = head;\\n            ListNode cur = head.next;\\n            while(cur != null){\\n                if(cur.val == pre.val){\\n                    pre.next = cur.next;\\n                    cur = cur.next;\\n                }\\n                else{\\n                    pre = pre.next;\\n                    cur = pre.next;\\n                }\\n            }\\n            return head;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public ListNode deleteDuplicates(ListNode head) {\\n            if(head == null) return null;\\n            ListNode pre = head;\\n            ListNode cur = head.next;\\n            while(cur != null){\\n                if(cur.val == pre.val){\\n                    pre.next = cur.next;\\n                    cur = cur.next;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 28800,
                "title": "python-recursive-and-iterative-solutions",
                "content": "```\\ndef deleteDuplicates(self, head):\\n\\tif not head or not head.next:\\n\\t\\treturn head\\n\\th = self.deleteDuplicates(head.next)\\n\\thead.next = h if head.val != h.val else h.next\\n\\treturn head\\n```\\n\\t\\t\\n\\tdef deleteDuplicates1(self, head):\\n        node = head\\n        while node and node.next:\\n            if node.val == node.next.val:\\n                node.next = node.next.next\\n            else:\\n                node = node.next\\n        return head\\n        \\n    def deleteDuplicates(self, head):\\n        dic = {}\\n        node = head\\n        while node:\\n            dic[node.val] = dic.get(node.val, 0) + 1\\n            node = node.next\\n        node = head\\n        while node:\\n            tmp = node\\n            for _ in xrange(dic[node.val]):\\n                tmp = tmp.next\\n            node.next = tmp\\n            node = node.next\\n        return head",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef deleteDuplicates(self, head):\\n\\tif not head or not head.next:\\n\\t\\treturn head\\n\\th = self.deleteDuplicates(head.next)\\n\\thead.next = h if head.val != h.val else h.next\\n\\treturn head\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2693121,
                "title": "java-solution-diagram",
                "content": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head == null || head.next == null)return head;\\n        head.next = deleteDuplicates(head.next);\\n        return head.val == head.next.val ? head.next : head;\\n}\\n    }\\n```\\n\\n\\n**![image](https://assets.leetcode.com/users/images/1f497680-383f-44c3-b9a5-7087f7d1c43e_1665552943.6387627.png)**\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head == null || head.next == null)return head;\\n        head.next = deleteDuplicates(head.next);\\n        return head.val == head.next.val ? head.next : head;\\n}\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1149146,
                "title": "easy-c-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode*temp = head;\\n        \\n        if(!head) return head;\\n        \\n        while(head->next) {\\n            if(head->val == head->next->val) {\\n                head->next = head->next->next;\\n            }\\n            else{\\n                head = head->next;\\n            }\\n        }\\n        return temp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode*temp = head;\\n        \\n        if(!head) return head;\\n        \\n        while(head->next) {\\n            if(head->val == head->next->val) {\\n                head->next = head->next->next;\\n            }\\n            else{\\n                head = head->next;\\n            }\\n        }\\n        return temp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3746631,
                "title": "simple-and-easy-beats-100",
                "content": "# upvote if you feel it easy\\uD83D\\uDE0A\\u2764\\n# Code\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = head;\\n        while(temp!=null && temp.next != null) {\\n            if(temp.val == temp.next.val) {\\n                temp.next = temp.next.next;\\n            }else{\\n                temp = temp.next;\\n            }\\n        }\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = head;\\n        while(temp!=null && temp.next != null) {\\n            if(temp.val == temp.next.val) {\\n                temp.next = temp.next.next;\\n            }else{\\n                temp = temp.next;\\n            }\\n        }\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3475241,
                "title": "python-c-with-clear-explanation",
                "content": "## Below you will find the code implementation for both C and Python.\\n\\n# Approach:\\n1. In order to eliminate the duplicate nodes, we have to iterate over the linked list and compare for the duplicate values.\\n2. Create a **tem**porary **ref**erence (`curr`) to the **hea**d **nod**e.\\n3. **Ite**rate until you reach **NULL**.\\n`while(curr != NULL && curr->next != NULL)`\\n4. Check if the **cur**rent **nod**e **val**ue **is equal** to the **nex**t **nod**e **val**ue.\\n`if(curr->val == curr->next->val)`\\n5. If **$yes$**, **ski**p the **nex**t **nod**e by **poi**nting the **nex**t of the **cur**rent **nod**e to the **nex**t of the **nex**t **nod**e.\\n`curr->next = curr->next->next;`\\n6. If **$no$**, then we have a **new** **val**ue, so **mov**e the **poi**nter to the **nex**t of the **cur**rent **nod**e.\\n`curr = curr->next;`\\n7. **Ret**urn `head` since we are using the same linked list.\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n\\n```C []\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    struct ListNode* curr = head;\\n\\n    while(curr != NULL && curr->next != NULL){\\n        if(curr->val == curr->next->val)\\n            curr->next = curr->next->next;\\n        else\\n            curr = curr->next;\\n    }\\n\\n    return head;\\n}\\n```\\n```python []\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n                \\n```\\n\\n### Please consider upvoting if you liked it or comment if you have an alternative approach! Thank you!",
                "solutionTags": [
                    "C"
                ],
                "code": "```C []\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    struct ListNode* curr = head;\\n\\n    while(curr != NULL && curr->next != NULL){\\n        if(curr->val == curr->next->val)\\n            curr->next = curr->next->next;\\n        else\\n            curr = curr->next;\\n    }\\n\\n    return head;\\n}\\n```\n```python []\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3393864,
                "title": "c-solution",
                "content": "# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    struct ListNode* new_list = head;\\n    struct ListNode* temp = head;\\n    while (temp != NULL && temp->next != NULL) {\\n        if (temp->val == temp->next->val) {\\n            temp->next = temp->next->next;\\n        } else {\\n            temp = temp->next;\\n        }\\n    }\\n    return new_list;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    struct ListNode* new_list = head;\\n    struct ListNode* temp = head;\\n    while (temp != NULL && temp->next != NULL) {\\n        if (temp->val == temp->next->val) {\\n            temp->next = temp->next->next;\\n        } else {\\n            temp = temp->next;\\n        }\\n    }\\n    return new_list;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3101800,
                "title": "easy-simple-code-in-c-with-100-testcase-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate a node temp which is equal to head \\nrun a loop until the temp!=NULL temp->next!=NUll which means until tail appears .\\nif(temp->val == temp->next->val)//i.e if temp and next node is equal then make temp->next equal to temp->next->next\\ntemp->next=temp->next->next;\\nelse\\ntemp=temp->next;  //itterate the node to next.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* temp = head;\\n        while(temp !=NULL && temp->next!=NULL){\\n            if(temp->val == temp->next->val){\\n                temp->next=temp->next->next;\\n               \\n            }\\n            else{\\n                temp=temp->next;\\n            }\\n        } \\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* temp = head;\\n        while(temp !=NULL && temp->next!=NULL){\\n            if(temp->val == temp->next->val){\\n                temp->next=temp->next->next;\\n               \\n            }\\n            else{\\n                temp=temp->next;\\n            }\\n        } \\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3078821,
                "title": "javascript-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nvar deleteDuplicates = function(head) {\\n    var current = head;\\n\\n    while(current) {\\n        if(current.next!==null && current.val==current.next.val) {\\n            current.next = current.next.next;\\n        }\\n        else {\\n            current = current.next;\\n        }\\n    }\\n    return head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar deleteDuplicates = function(head) {\\n    var current = head;\\n\\n    while(current) {\\n        if(current.next!==null && current.val==current.next.val) {\\n            current.next = current.next.next;\\n        }\\n        else {\\n            current = current.next;\\n        }\\n    }\\n    return head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2821993,
                "title": "python-98-89-faster-6-lines-o-n-solution",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        temp=head\\n        while temp:\\n            while temp.next!=None and temp.val == temp.next.val:\\n                temp.next=temp.next.next\\n            temp=temp.next\\n        return head\\n```\\n\\n**Upvote if you like the solution or ask if there is any query**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        temp=head\\n        while temp:\\n            while temp.next!=None and temp.val == temp.next.val:\\n                temp.next=temp.next.next\\n            temp=temp.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2595755,
                "title": "python-solution-easy-explained-faster-than-89-79",
                "content": "If you like the solution, your upvote is appreciated! \\uD83E\\uDD1D\\n\\nExplanation:\\n\\nIn the first while loop, we continue as long as the current node and the next node exist.\\n\\nIn the second while loop, we continue to replace the next value, if it is the same as the current value. In a sense, we skip the next value if it is the same.\\n\\nWhen we reach the end of the linked list, and current node or next node is None, we can return the linked list from the beginning (head).\\n\\nAnd that is it!\\n\\nIf you did not yet, upvote to make my day \\uD83C\\uDF1E\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        \\n        current = head\\n        \\n    \\n        while current != None and current.next != None:\\n              while current.val == current.next.val:\\n                    current.next = current.next.next\\n                    if current.next == None:\\n                        break\\n              current = current.next\\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        \\n        current = head\\n        \\n    \\n        while current != None and current.next != None:\\n              while current.val == current.next.val:\\n                    current.next = current.next.next\\n                    if current.next == None:\\n                        break\\n              current = current.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2177026,
                "title": "c-java-explained-w-visual",
                "content": "Runtime Complexity: **`O(n)`**\\nSpace Complexity: **`O(1)`** (in-place)\\n\\n**There are two main actions to know:**\\n\\n#### (1) Traversal with a pointer: ```ptr = ptr.next;```\\n#### (2) Deletion of a target node: ```prev.next = target.next;``` or ```prev.next = prev.next.next;```\\n\\nWe will iterate through the list with a pointer `ListNode` `ptr` to accomplish our task. To check if a duplicate for `ptr.val` exists, we simply have to see if `ptr.next.val` is equal to `ptr.val`, because the array is sorted and duplicates are contiguous.\\n\\nThe following code is identical for both C# and Java:\\n```\\nif(head == null){return null;} //Don\\'t forget this edge case\\nListNode ptr = head; //Helps for returning at the end\\n\\nwhile(ptr.next != null){ //Terminates if there is no next node(end of list)\\n\\tif(ptr.next.val == ptr.val){ //Check for duplicate next node\\n\\t\\tptr.next = ptr.next.next; //Delete next node\\n\\t}\\n\\telse{\\n\\t\\tptr = ptr.next; //Advance if no duplicate is found\\n\\t}\\n}\\nreturn head; //Return the original start of list\\n```\\n\\nThe effect of our code is as such:\\n![image](https://assets.leetcode.com/users/images/081e8010-3642-4eff-bcba-68c30d95c893_1655785996.077856.png)\\n\\n\\n> Please upvote if this helps in any way!",
                "solutionTags": [
                    "Java",
                    "C#"
                ],
                "code": "```ptr = ptr.next;```\n```prev.next = target.next;```\n```prev.next = prev.next.next;```\n```\\nif(head == null){return null;} //Don\\'t forget this edge case\\nListNode ptr = head; //Helps for returning at the end\\n\\nwhile(ptr.next != null){ //Terminates if there is no next node(end of list)\\n\\tif(ptr.next.val == ptr.val){ //Check for duplicate next node\\n\\t\\tptr.next = ptr.next.next; //Delete next node\\n\\t}\\n\\telse{\\n\\t\\tptr = ptr.next; //Advance if no duplicate is found\\n\\t}\\n}\\nreturn head; //Return the original start of list\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2142759,
                "title": "java-0ms-recursive-best-solution",
                "content": "# Please Upvote If You Find This Helpful\\n![image](https://assets.leetcode.com/users/images/84fe7943-54b9-442c-be63-2b148540f196_1655030408.0951629.png)\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if (head == null || head.next == null) return head;\\n        while (head.next != null && head.val == head.next.val) head.next = head.next.next;\\n        head.next = deleteDuplicates(head.next);\\n        return head;\\n    }\\n}\\n```\\n# Please Upvote If You Find This Helpful",
                "solutionTags": [
                    "Java",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if (head == null || head.next == null) return head;\\n        while (head.next != null && head.val == head.next.val) head.next = head.next.next;\\n        head.next = deleteDuplicates(head.next);\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2122525,
                "title": "js-simple-cutting",
                "content": "Overwrite `next` with `next.next` to cut next node when `current.next` exist, and `current.val` equals `current.next.val`.\\nIf not, continue normal traverse: `current = current.next;`\\n\\n![image](https://assets.leetcode.com/users/images/679e51b1-f16f-4b7f-8081-b7c097254645_1654615175.1876688.jpeg)\\n\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n  let current = head;\\n  \\n  while (current) {\\n    if (current.next && current.val === current.next.val) {\\n      current.next = current.next.next;\\n    } else {\\n      current = current.next;\\n    }\\n  }\\n  \\n  return head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n  let current = head;\\n  \\n  while (current) {\\n    if (current.next && current.val === current.next.val) {\\n      current.next = current.next.next;\\n    } else {\\n      current = current.next;\\n    }\\n  }\\n  \\n  return head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1792789,
                "title": "python-java-simple-implementation",
                "content": "**Python 3**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\t\\t# current element\\n        e = head\\n        while e:\\n\\t\\t\\t# loop until current element\\'s value is different to it\\'s next element\\'s value\\n            while e.next and e.next.val == e.val:\\n                e.next = e.next.next\\n            e = e.next\\n                \\n        return head\\t\\t\\n```\\n**Java**\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode e = head;\\n        while (e != null){\\n            while (e.next != null && e.next.val == e.val){\\n                e.next = e.next.next;\\n            }\\n            e = e.next;\\n        }\\n        \\n        return head;\\n    }\\n}\\n```\\n* Time complexity: O(n)\\n* Space complexity: O(1)",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\t\\t# current element\\n        e = head\\n        while e:\\n\\t\\t\\t# loop until current element\\'s value is different to it\\'s next element\\'s value\\n            while e.next and e.next.val == e.val:\\n                e.next = e.next.next\\n            e = e.next\\n                \\n        return head\\t\\t\\n```\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode e = head;\\n        while (e != null){\\n            while (e.next != null && e.next.val == e.val){\\n                e.next = e.next.next;\\n            }\\n            e = e.next;\\n        }\\n        \\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1736671,
                "title": "c-easy-implementation",
                "content": "**please upvote if you like my solution**\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    if(head==NULL)return NULL;\\n    struct ListNode* temp=head,*nextnode;\\n    while(temp->next!=0){\\n        if(temp->val==temp->next->val){\\n            nextnode=temp->next->next;\\n            free(temp->next);\\n            temp->next=nextnode;\\n        }\\n        else\\n        temp=temp->next;\\n    }\\n    return head;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    if(head==NULL)return NULL;\\n    struct ListNode* temp=head,*nextnode;\\n    while(temp->next!=0){\\n        if(temp->val==temp->next->val){\\n            nextnode=temp->next->next;\\n            free(temp->next);\\n            temp->next=nextnode;\\n        }\\n        else\\n        temp=temp->next;\\n    }\\n    return head;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646445,
                "title": "concise-explanation-with-c-code",
                "content": "Suppose the Linked List is  \\n1 -> 2 -> 2 -> 3 -> 3\\n\\nWe first take a temporary pointer and point to the Head of the List, then we traverse the List. \\nIf at any moment we find the value of the next of the temporary pointer with itself is same, we simply delete the next of the temporary pointer and go on traversing our list.\\n\\n# Code:-\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL) return head;\\n        ListNode *temp = head;\\n        while(temp->next) {\\n            if(temp->val == temp->next->val) {\\n                ListNode *link = temp->next;\\n                temp->next = temp->next->next; \\n                delete link;\\n            }\\n            else {\\n                temp = temp->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```\\n\\nRead below for more clarification:-\\nfor list:- **1 -> 2 -> 2 -> 3 -> 3**\\n# Step 1:-\\ntemp = 1\\ntemp->next = 2,\\nhere both are different hence we go in the else part.\\nThe List Now becomes:-\\n**1->2->2->3->3**\\n\\n# Step 2:-\\ntemp = 2\\ntemp->next = 2\\nhere as both are same, we store the temp->next in **link** node(so that we can free memory later) and disrupt the connection of temp(2) with temp->next(2) and make temp with temp->next->next(3).\\nAfter this step, we need to free the memory of the deleted Node.\\nThe List Now becomes:-\\n**1->2->3->3**\\n\\n# Step 3:-\\ntemp = 2\\ntemp->next = 3,\\nhere both are different hence we go in the else part.\\nThe List Now becomes:-\\n**1->2->3->3**\\n\\n# Step 4:-\\ntemp = 3\\ntemp->next = 3\\nHere, again as both are same, we just follow the same procedure in **Step2**.\\nThe List Now becomes:-\\n**1->2->3**\\n\\n# Step 5:-\\ntemp=3\\ntemp->next = NULL\\nNow our while condition becomes false, hence we move out of the loop.\\n\\n\\n# \\uD83D\\uDC80DANGER\\uD83D\\uDC80:-\\nWe must provide a check condition at the beginning of our code, to handle the case of **[]**, else we are bound the get a Run Time Error.\\n\\nAt the end, we return the Head with the modified Linked List.\\n\\nHappy Coding, \\nsayak04.\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL) return head;\\n        ListNode *temp = head;\\n        while(temp->next) {\\n            if(temp->val == temp->next->val) {\\n                ListNode *link = temp->next;\\n                temp->next = temp->next->next; \\n                delete link;\\n            }\\n            else {\\n                temp = temp->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1636022,
                "title": "c-4-lines-of-most-simple-iterative-and-recurrsive-solution",
                "content": "I added both iterative and simple recursive solution in simplest manner.\\nOnly one line difference in both soluton\\n1. Iterative Solution (faster)\\n```\\n        ListNode* curr = head;\\n        while(curr != NULL && curr -> next != NULL) {\\n            if(curr -> val == curr -> next -> val) {\\n                curr -> next = curr -> next -> next;\\n            } else {\\n                curr = curr -> next;\\n            }\\n        }\\n        return head;\\n```\\n2. Recursive Solution (2 times slower than iterative)\\n```\\nListNode* curr = head;\\nif(curr != NULL && curr -> next != NULL) {\\n                if(curr -> val == curr -> next -> val) {\\n                        curr -> next = curr -> next -> next;\\n                } else {\\n                    curr = curr -> next;\\n                }\\n                deleteDuplicates(curr);\\n            }\\n        return head;\\n```\\n**Upvote if this helped!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n        ListNode* curr = head;\\n        while(curr != NULL && curr -> next != NULL) {\\n            if(curr -> val == curr -> next -> val) {\\n                curr -> next = curr -> next -> next;\\n            } else {\\n                curr = curr -> next;\\n            }\\n        }\\n        return head;\\n```\n```\\nListNode* curr = head;\\nif(curr != NULL && curr -> next != NULL) {\\n                if(curr -> val == curr -> next -> val) {\\n                        curr -> next = curr -> next -> next;\\n                } else {\\n                    curr = curr -> next;\\n                }\\n                deleteDuplicates(curr);\\n            }\\n        return head;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1356619,
                "title": "go-simple-solution-with-recursion-0-ms",
                "content": "```\\nfunc deleteDuplicates(head *ListNode) *ListNode {\\n\\tif head == nil || head.Next == nil {\\n\\t\\treturn head\\n\\t} else if head.Val == head.Next.Val {\\n\\t\\thead = deleteDuplicates(head.Next)\\n\\t\\treturn head\\n\\t} else {\\n\\t\\thead.Next = deleteDuplicates(head.Next)\\n\\t\\treturn head\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Recursion"
                ],
                "code": "```\\nfunc deleteDuplicates(head *ListNode) *ListNode {\\n\\tif head == nil || head.Next == nil {\\n\\t\\treturn head\\n\\t} else if head.Val == head.Next.Val {\\n\\t\\thead = deleteDuplicates(head.Next)\\n\\t\\treturn head\\n\\t} else {\\n\\t\\thead.Next = deleteDuplicates(head.Next)\\n\\t\\treturn head\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 346260,
                "title": "python-straight-forward-methods",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        \\n        current = head\\n        while current!=None and current.next!=None:\\n            if current.val==current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        \\n        current = head\\n        while current!=None and current.next!=None:\\n            if current.val==current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293968,
                "title": "c-straightforward-solution",
                "content": "```\\npublic class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        var root = head;\\n        while (head != null) {\\n            var pre = head;\\n            while (head != null && head.val == pre.val)\\n                head= head.next;\\n            pre.next = head;\\n        }\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        var root = head;\\n        while (head != null) {\\n            var pre = head;\\n            while (head != null && head.val == pre.val)\\n                head= head.next;\\n            pre.next = head;\\n        }\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917809,
                "title": "remove-duplicates-from-the-linked-list-runtime-beats-85-11-brute-force-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs the values are ``sorted``, we can just compare the current value with the next value to check for ``duplicates``. Traversing through the linked list and checking for this condition in each node will solve the problem.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Start with assigning the current node to the head of the linked list\\n- Traverse through the link list and ``compare`` the ``current`` node value with the ``next`` node value. If the values are same then ``current.next`` should point to ``current.next.next``. This will skip the next node\\n- While traversal we should also check if  ``current.next`` exists. If not then terminate the loop\\n- After succesful traversal the derived link list will contain no duplicates\\n- Return the ``head``\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        current = head\\n        while current and current.next:\\n            if current.val == current.next.val: current.next = current.next.next\\n            else: current = current.next\\n        return head\\n```",
                "solutionTags": [
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        current = head\\n        while current and current.next:\\n            if current.val == current.next.val: current.next = current.next.next\\n            else: current = current.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3283672,
                "title": "easy-solution-in-c-o-n-time",
                "content": "# Intuition\\nWe can solve this problem by traversing the linked list and keeping track of the current node and the next node. If the value of the current node is equal to the value of the next node, we know that the next node is a duplicate and we need to remove it. We can remove the next node by changing the next pointer of the current node to point to the node after the next node. We continue this process until we reach the end of the linked list.\\n\\n# Approach\\n- Start at the head of the linked list.\\n- While the current node and the next node are not null:\\n    a. If the value of the current node is equal to the value of the next node, remove the next node by changing the next pointer of the current node to point to the node after the next node.\\n    b. If the values are not equal, move on to the next pair of nodes.\\n- Return the head of the modified linked list.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n O(n)\\n\\n- Space complexity:\\n O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n            if(head==NULL){\\n            return NULL;\\n        }\\n       ListNode* curr = head;\\n       while(curr != NULL){\\n           if(curr->next != NULL && curr->val == curr->next->val ){\\n               ListNode* temp = curr->next;\\n               curr->next = curr->next->next;\\n               delete temp;\\n           }\\n           else{\\n           curr = curr->next;\\n           }\\n       } \\n       return head;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n            if(head==NULL){\\n            return NULL;\\n        }\\n       ListNode* curr = head;\\n       while(curr != NULL){\\n           if(curr->next != NULL && curr->val == curr->next->val ){\\n               ListNode* temp = curr->next;\\n               curr->next = curr->next->next;\\n               delete temp;\\n           }\\n           else{\\n           curr = curr->next;\\n           }\\n       } \\n       return head;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3185214,
                "title": "beats-94-95-83-remove-duplicates-from-sorted-list-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nBeats\\n94.95%\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        # Check if the linked list is empty\\n        if not head:\\n            return None\\n        \\n        # Initialize two pointers: current and previous\\n        prev = head\\n        current = head.next\\n        \\n        while current:\\n            # If the current node\\'s value is equal to the previous node\\'s value, delete the current node\\n            if current.val == prev.val:\\n                prev.next = current.next\\n                current = current.next\\n            # If the current node\\'s value is different, move the pointers to the next node\\n            else:\\n                prev = current\\n                current = current.next\\n        \\n        return head\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        # Check if the linked list is empty\\n        if not head:\\n            return None\\n        \\n        # Initialize two pointers: current and previous\\n        prev = head\\n        current = head.next\\n        \\n        while current:\\n            # If the current node\\'s value is equal to the previous node\\'s value, delete the current node\\n            if current.val == prev.val:\\n                prev.next = current.next\\n                current = current.next\\n            # If the current node\\'s value is different, move the pointers to the next node\\n            else:\\n                prev = current\\n                current = current.next\\n        \\n        return head\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3115484,
                "title": "simple-c-solution",
                "content": "```\\npublic class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        \\n        if(head == null)\\n            return null;\\n\\n        if(head.next == null)\\n            return head;\\n\\n        ListNode prevNode = head;\\n        for(ListNode node = head.next; node != null; node = node.next)\\n        {\\n            if(node.val == prevNode.val)\\n            {\\n                prevNode.next = node.next;\\n            }\\n            else \\n            {\\n                prevNode = node;\\n            }\\n        }\\n\\n        return head;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        \\n        if(head == null)\\n            return null;\\n\\n        if(head.next == null)\\n            return head;\\n\\n        ListNode prevNode = head;\\n        for(ListNode node = head.next; node != null; node = node.next)\\n        {\\n            if(node.val == prevNode.val)\\n            {\\n                prevNode.next = node.next;\\n            }\\n            else \\n            {\\n                prevNode = node;\\n            }\\n        }\\n\\n        return head;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086107,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* c=head;\\n        ListNode* p=new ListNode(1);\\n        ListNode* k=p;\\n        while(c)\\n        {\\n            while(c->next && c->val==c->next->val)\\n            c=c->next;\\n            // cout<<\"f\";\\n            p->next=c;\\n            p=p->next;\\n            c=c->next;\\n        }\\n        p->next=NULL;\\n        return k->next;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* c=head;\\n        ListNode* p=new ListNode(1);\\n        ListNode* k=p;\\n        while(c)\\n        {\\n            while(c->next && c->val==c->next->val)\\n            c=c->next;\\n            // cout<<\"f\";\\n            p->next=c;\\n            p=p->next;\\n            c=c->next;\\n        }\\n        p->next=NULL;\\n        return k->next;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3070363,
                "title": "o-n-o-1-python-solution-explained",
                "content": "Hello **Tenno Leetcoders**,\\n\\nFor this problem, we want to remove nodes with duplicated values and return a new sorted linked list\\n\\n### Iterative Step\\n\\n\\t1) One of the edge cases, we need to watch out for is when our `head` is `None`  then we simply return `None`\\n\\n\\t2) Our first node will become our current head \\n\\n\\t3) We will only perform removal process if current.next has a node and check for the following:\\n\\t\\n\\t\\t- if current head value equals to next node value, then remove the duplicated node by setting next node \\n\\t\\tto the node after the duplicated node \\n\\t\\t\\n\\t\\t-  If not equal, we will check the next node \\n\\t\\n\\t4) We will then return the de-duped linked list by returning the head\\n\\n### Code\\n```\\n   def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        if not head: return None\\n        \\n        current = head\\n        print(current)\\n         \\n        while current.next:\\n            \\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next   \\n                \\n        return head\\n```\\n\\n\\n#### Time Complexity: O(n)\\n\\n#### Space Complexity: O(1)\\n\\n\\n ***Upvote if this tenno\\'s discussion helped you in some type of way***\\n  \\n***Warframe\\'s short clip of the day***\\n![image](https://assets.leetcode.com/users/images/1175511c-ddd4-40cd-a397-ea689aec52bd_1674066252.4141765.gif)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Iterator"
                ],
                "code": "```\\n   def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        if not head: return None\\n        \\n        current = head\\n        print(current)\\n         \\n        while current.next:\\n            \\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next   \\n                \\n        return head\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2332700,
                "title": "java-best-and-easy-solution-1-ms",
                "content": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode list = head;\\n         \\n         while(list != null) {\\n        \\t if (list.next == null) {\\n        \\t\\t break;\\n        \\t }\\n        \\t if (list.val == list.next.val) {\\n        \\t\\t list.next = list.next.next;\\n        \\t }\\n           else {\\n        \\t\\t list = list.next;\\n        \\t }\\n         }\\n         \\n         return head;  \\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Linked List",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode list = head;\\n         \\n         while(list != null) {\\n        \\t if (list.next == null) {\\n        \\t\\t break;\\n        \\t }\\n        \\t if (list.val == list.next.val) {\\n        \\t\\t list.next = list.next.next;\\n        \\t }\\n           else {\\n        \\t\\t list = list.next;\\n        \\t }\\n         }\\n         \\n         return head;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1893349,
                "title": "100-fastest-typescript-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n  if (!head) return null\\n  if (!head.next) return head\\n\\n  let prev = head\\n  let curr = head.next\\n\\n  while (curr) {\\n    while (curr && curr.val === prev.val) { curr = curr.next as ListNode }\\n\\n    prev.next = curr\\n    prev = curr\\n\\n    if (curr) { curr = curr.next as ListNode }\\n  }\\n\\n  return head\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n  if (!head) return null\\n  if (!head.next) return head\\n\\n  let prev = head\\n  let curr = head.next\\n\\n  while (curr) {\\n    while (curr && curr.val === prev.val) { curr = curr.next as ListNode }\\n\\n    prev.next = curr\\n    prev = curr\\n\\n    if (curr) { curr = curr.next as ListNode }\\n  }\\n\\n  return head\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1797468,
                "title": "python-simple-python-solution-using-iterative-approach",
                "content": "# If It is Useful to Understand Please Upvote Me \\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\tclass Solution:\\n\\t\\tdef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\n\\t\\t\\tnode = head\\n\\n\\t\\t\\twhile node!= None and node.next != None:\\n\\n\\t\\t\\t\\tif node.val == node.next.val:\\n\\n\\t\\t\\t\\t\\tnode.next=node.next.next\\n\\n\\t\\t\\t\\telse:\\n\\n\\t\\t\\t\\t\\tnode=node.next\\n\\n\\t\\t\\treturn head",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Iterator"
                ],
                "code": "# If It is Useful to Understand Please Upvote Me \\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\tclass Solution:\\n\\t\\tdef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\n\\t\\t\\tnode = head\\n\\n\\t\\t\\twhile node!= None and node.next != None:\\n\\n\\t\\t\\t\\tif node.val == node.next.val:\\n\\n\\t\\t\\t\\t\\tnode.next=node.next.next\\n\\n\\t\\t\\t\\telse:\\n\\n\\t\\t\\t\\t\\tnode=node.next\\n\\n\\t\\t\\treturn head",
                "codeTag": "Java"
            },
            {
                "id": 1448498,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut result_list = ListNode::new(0);\\n        let mut result_list_iterator = &mut result_list;\\n        let mut input_list_iterator = head.as_ref();\\n        let mut previous_val = i32::MIN;\\n        \\n        while let Some(node) = input_list_iterator {\\n            if node.val != previous_val {\\n                result_list_iterator.next = Some(Box::new(ListNode::new(node.val)));\\n                result_list_iterator = result_list_iterator.next.as_mut().unwrap();\\n                previous_val = node.val;\\n            }\\n            input_list_iterator = node.next.as_ref();\\n        }\\n        \\n        result_list.next\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut result_list = ListNode::new(0);\\n        let mut result_list_iterator = &mut result_list;\\n        let mut input_list_iterator = head.as_ref();\\n        let mut previous_val = i32::MIN;\\n        \\n        while let Some(node) = input_list_iterator {\\n            if node.val != previous_val {\\n                result_list_iterator.next = Some(Box::new(ListNode::new(node.val)));\\n                result_list_iterator = result_list_iterator.next.as_mut().unwrap();\\n                previous_val = node.val;\\n            }\\n            input_list_iterator = node.next.as_ref();\\n        }\\n        \\n        result_list.next\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1445853,
                "title": "recursive-c",
                "content": "...\\nListNode* deleteDuplicate(ListNode* head)\\n{\\n\\n       if(head==NULL || head->next==NULL)          \\n        {                                           \\n         return head;                               \\n        }\\n        \\n        head->next  =  deleteDuplicates(head->next);\\n        if(head->val==head->next->val)\\n        {\\n          return head->next;\\n        }\\n        \\n        return head; \\n}\\n\\n...\\n",
                "solutionTags": [],
                "code": "...\\nListNode* deleteDuplicate(ListNode* head)\\n{\\n\\n       if(head==NULL || head->next==NULL)          \\n        {                                           \\n         return head;                               \\n        }\\n        \\n        head->next  =  deleteDuplicates(head->next);\\n        if(head->val==head->next->val)\\n        {\\n          return head->next;\\n        }\\n        \\n        return head; \\n}\\n\\n...\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1223275,
                "title": "good-code-without-memory-leak-c-ez-to-understnad",
                "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        if(head==NULL || head->next==NULL){\\n            return head;\\n        }\\n        \\n        ListNode *curr=head;\\n        \\n        while(curr!=NULL){\\n            \\n            if(curr->next!=NULL && curr->val==curr->next->val){\\n                \\n                ListNode *temp=curr->next;\\n                curr->next = curr->next->next;\\n                \\n                delete temp;\\n                \\n                \\n            }\\n            \\n            else{\\n                curr=curr->next;\\n            }\\n            \\n            \\n            \\n            \\n        }\\n        return head;\\n        \\n        \\n    }\\n};",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        if(head==NULL || head->next==NULL){\\n            return head;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1078121,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        if (head == null || head.next == null)\\n            return head;\\n        \\n        ListNode node1 = head,\\n                 node2 = head.next;\\n        \\n        while (node2 != null)\\n            if (node1.val == node2.val)\\n            {\\n                node1.next = node2.next;\\n                node2.next = null;\\n                node2 = node1.next;\\n            }\\n            else\\n            {\\n                node1 = node2;\\n                node2 = node2?.next;\\n            }\\n        \\n        return head;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        if (head == null || head.next == null)\\n            return head;\\n        \\n        ListNode node1 = head,\\n                 node2 = head.next;\\n        \\n        while (node2 != null)\\n            if (node1.val == node2.val)\\n            {\\n                node1.next = node2.next;\\n                node2.next = null;\\n                node2 = node1.next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 680569,
                "title": "easy-c-solution",
                "content": "```\\npublic class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        var temp =head;\\n        while(head != null && head.next != null)\\n        {\\n            if(head.val == head.next.val){\\n                head.next = head.next.next;\\n            }\\n            else{\\n                head = head.next;\\n            }\\n        }\\n        return temp;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode DeleteDuplicates(ListNode head) {\\n        var temp =head;\\n        while(head != null && head.next != null)\\n        {\\n            if(head.val == head.next.val){\\n                head.next = head.next.next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 386405,
                "title": "4ms-c-solution",
                "content": "```\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    struct ListNode* cur = head;\\n    while (cur && cur->next) {\\n        if(cur->val == cur->next->val)\\n            cur->next = cur->next->next;\\n        else\\n            cur = cur->next;\\n    }\\n    return head;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    struct ListNode* cur = head;\\n    while (cur && cur->next) {\\n        if(cur->val == cur->next->val)\\n            cur->next = cur->next->next;\\n        else\\n            cur = cur->next;\\n    }\\n    return head;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 189606,
                "title": "4-simple-solutions-javascript",
                "content": "**Solution #1**\\nThis solution **CAN NOT** be used if the array is not sorted.\\n\\nO(1) Space\\nO(n) Time\\n\\n```\\nvar deleteDuplicates = function(head) {\\n    let cur = head;\\n    \\n    while (cur && cur.next) {\\n        if (cur.val === cur.next.val) {\\n            // skip duplicates\\t\\t\\t\\t\\n            cur.next = cur.next.next;\\n        } else {\\n            cur = cur.next;\\n        }\\n    }\\n    \\n    return head;\\n}\\n```\\n\\n**Solution #2**\\n\\nfast and slow\\nO(1) Space\\nO(n) Time\\n\\n ```\\n\\n var deleteDuplicates = function(head) {\\n\\t let preHead = new ListNode();\\n\\t preHead.next = head;\\n\\n\\t let cur = preHead.next;\\n\\t let prev = preHead;\\n\\n\\t while (cur) {\\n\\t\\t\\t // when dups are found don\\'t move prev.\\n\\t\\t\\t if (cur.val === prev.val) {\\n\\t\\t\\t\\t\\t prev.next = cur.next;\\n\\t\\t\\t } else {\\n\\t\\t\\t\\t\\t prev = prev.next;\\n\\t\\t\\t }\\n\\t\\t\\t cur = cur.next;\\n\\t }\\n\\n\\t return preHead.next;\\n }\\n ```\\n\\n**Solution #3**\\nthis solution can be used even if the array is not sorted.\\n\\nO(1) Space\\nO(n2) Time\\n\\n```\\n\\n var deleteDuplicates = function(head) {\\n    \\n    let current = head;\\n    \\n    while (current) {\\n        let runner = current;\\n        \\n        // remove dups after the current node \\n        while (runner.next) {\\n            if (runner.val === runner.next.val) {\\n                // skip Dups\\n                runner.next = runner.next.next;\\n            } else {\\n                runner = runner.next;\\n            }\\n        }\\n        current = current.next;   \\n    }\\n    \\n    return head;\\n}\\n```\\n\\n\\n**Solution #4**\\nUsing Hash Table\\n\\nthis solution can be used even if the array is not sorted.\\n\\nO(n) Space\\nO(n) Time\\n\\n```\\nvar deleteDuplicates = function(head) {\\n    const dups = {};\\n    let cur = head;\\n    let prev;\\n    while (cur) {\\n        if (!dups[cur.val]) {\\n            dups[cur.val] = true;\\n            prev = cur;\\n        } else {\\n            prev.next = cur.next;\\n        }\\n        cur = cur.next;\\n    }\\n    \\n    return head;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar deleteDuplicates = function(head) {\\n    let cur = head;\\n    \\n    while (cur && cur.next) {\\n        if (cur.val === cur.next.val) {\\n            // skip duplicates\\t\\t\\t\\t\\n            cur.next = cur.next.next;\\n        } else {\\n            cur = cur.next;\\n        }\\n    }\\n    \\n    return head;\\n}\\n```\n```\\n\\n var deleteDuplicates = function(head) {\\n\\t let preHead = new ListNode();\\n\\t preHead.next = head;\\n\\n\\t let cur = preHead.next;\\n\\t let prev = preHead;\\n\\n\\t while (cur) {\\n\\t\\t\\t // when dups are found don\\'t move prev.\\n\\t\\t\\t if (cur.val === prev.val) {\\n\\t\\t\\t\\t\\t prev.next = cur.next;\\n\\t\\t\\t } else {\\n\\t\\t\\t\\t\\t prev = prev.next;\\n\\t\\t\\t }\\n\\t\\t\\t cur = cur.next;\\n\\t }\\n\\n\\t return preHead.next;\\n }\\n ```\n```\\n\\n var deleteDuplicates = function(head) {\\n    \\n    let current = head;\\n    \\n    while (current) {\\n        let runner = current;\\n        \\n        // remove dups after the current node \\n        while (runner.next) {\\n            if (runner.val === runner.next.val) {\\n                // skip Dups\\n                runner.next = runner.next.next;\\n            } else {\\n                runner = runner.next;\\n            }\\n        }\\n        current = current.next;   \\n    }\\n    \\n    return head;\\n}\\n```\n```\\nvar deleteDuplicates = function(head) {\\n    const dups = {};\\n    let cur = head;\\n    let prev;\\n    while (cur) {\\n        if (!dups[cur.val]) {\\n            dups[cur.val] = true;\\n            prev = cur;\\n        } else {\\n            prev.next = cur.next;\\n        }\\n        cur = cur.next;\\n    }\\n    \\n    return head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 28812,
                "title": "c-c-simple-solution",
                "content": "C++ version\\n\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* node = head;\\n        while(node != NULL){\\n           if((node->next != NULL) && (node->next->val == node->val))\\n           {\\n               ListNode* oldNext = node->next;\\n               node->next = node->next->next;\\n               delete oldNext;\\n           }\\n           else\\n               node = node->next;\\n       } \\n       return head;\\n    }\\n\\t\\nC# version\\n\\n    public ListNode DeleteDuplicates(ListNode head) {\\n         ListNode node = head;\\n        while(node != null){\\n           if((node.next != null) && (node.next.val == node.val))\\n               node.next = node.next.next;\\n           else\\n               node = node.next;\\n       } \\n       return head;       \\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "C++ version\\n\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* node = head;\\n        while(node != NULL){\\n           if((node->next != NULL) && (node->next->val == node->val))\\n           {\\n               ListNode* oldNext = node->next;\\n               node->next = node->next->next;\\n               delete oldNext;\\n           }\\n           else\\n               node = node->next;\\n       } \\n       return head;\\n    }\\n\\t\\nC# version\\n\\n    public ListNode DeleteDuplicates(ListNode head) {\\n         ListNode node = head;\\n        while(node != null){\\n           if((node.next != null) && (node.next.val == node.val))\\n               node.next = node.next.next;\\n           else\\n               node = node.next;\\n       } \\n       return head;       \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 28773,
                "title": "two-pointers-java-solution",
                "content": "        public ListNode deleteDuplicates(ListNode head) {\\n    \\t\\tif(head==null || head.next==null) return head;\\n    \\t\\tListNode p = head;\\n    \\t\\tListNode curr = p.next;\\n    \\t\\twhile(curr!=null) {\\n    \\t\\t\\tif(curr.val!=p.val) {\\n    \\t\\t\\t\\tp.next=curr;\\n    \\t\\t\\t\\tp=curr;\\n    \\t\\t\\t}\\n    \\t\\t\\tcurr=curr.next;\\n    \\t\\t}\\n    \\t\\tp.next=curr;\\n    \\t\\treturn head;\\n    \\t}",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "        public ListNode deleteDuplicates(ListNode head) {\\n    \\t\\tif(head==null || head.next==null) return head;\\n    \\t\\tListNode p = head;\\n    \\t\\tListNode curr = p.next;\\n    \\t\\twhile(curr!=null) {\\n    \\t\\t\\tif(curr.val!=p.val) {\\n    \\t\\t\\t\\tp.next=curr;\\n    \\t\\t\\t\\tp=curr;\\n    \\t\\t\\t}\\n    \\t\\t\\tcurr=curr.next;\\n    \\t\\t}\\n    \\t\\tp.next=curr;\\n    \\t\\treturn head;\\n    \\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3558535,
                "title": "simple-java-solution-beats-100",
                "content": "# Code\\n```\\npublic class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode list = head;         \\n        while(list != null) {\\n            if (list.next == null) break; \\n            if (list.val == list.next.val) list.next = list.next.next;\\n            else list = list.next;\\n        }         \\n        return head;\\n    }\\n}\\n```\\n**Please upvote if you like the solution.\\nHappy Coding!** \\uD83D\\uDE0A",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\npublic class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode list = head;         \\n        while(list != null) {\\n            if (list.next == null) break; \\n            if (list.val == list.next.val) list.next = list.next.next;\\n            else list = list.next;\\n        }         \\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3506654,
                "title": "fast-ts-js-solution-beats-97-19",
                "content": "![image.png](https://assets.leetcode.com/users/images/320f510c-a43a-4577-93ae-4bc05025084a_1683684477.138928.png)\\n\\nAs it is sorted we know that the next val can be similar. \\n\\nHence, we check for that and shift the pointer `->` `next`.\\n\\n# Code\\n```tsx\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n    let node = head\\n\\n    while(node !== null){\\n        if(node.next !== null){\\n            if(node.val === node.next.val){\\n                node.next = node.next.next\\n                continue\\n            }\\n        }\\n\\n        node = node.next\\n    }\\n\\n    return head\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```tsx\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n    let node = head\\n\\n    while(node !== null){\\n        if(node.next !== null){\\n            if(node.val === node.next.val){\\n                node.next = node.next.next\\n                continue\\n            }\\n        }\\n\\n        node = node.next\\n    }\\n\\n    return head\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3451851,
                "title": "easy-solution",
                "content": "# Approach\\n![image.png](https://assets.leetcode.com/users/images/feca6847-02cc-4730-911b-6254abae6b57_1682368667.526796.png)\\n\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if (head == null) {\\n            return null;\\n        }\\n\\n        ListNode current = head;\\n\\n        while (current != null && current.next != null) {\\n            if (current.val == current.next.val) {\\n                current.next = current.next.next;\\n            } else {\\n                current = current.next;\\n            }\\n        }\\n\\n        return head;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if (head == null) {\\n            return null;\\n        }\\n\\n        ListNode current = head;\\n\\n        while (current != null && current.next != null) {\\n            if (current.val == current.next.val) {\\n                current.next = current.next.next;\\n            } else {\\n                current = current.next;\\n            }\\n        }\\n\\n        return head;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2998601,
                "title": "simple-fast-and-efficient-c-solution",
                "content": "# Intuition \\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf the next value is same, then simply connect the current node to the next-to-next node and repeat this process until you reach the end which is NULL\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst, I am handling the edge case where the first node is empty because not only that is a good practice but leetcode always has such test cases too : )\\n# Complexity\\n- Time complexity: O(n) (Worst Case) (Since we have to go through the entire list)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) (Since we are not creating new nodes)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        // Handling the Edge Case of empty list\\n        if(head == NULL) \\n            return head;\\n        ListNode* temp = head;\\n        // This is our temporary variable \\n        // We will use it to iterate through the list\\n        // While the head pointer remains intact\\n\\n        while(temp->next != NULL){\\n            // Since we have to compare the next node\\'s value\\n            // Our main condition is whether next node is NULL\\n            if(temp->next->val == temp->val){\\n                temp->next = temp->next->next;\\n                // Skip over the node connecting to next one\\n            }\\n            else{\\n                temp = temp->next; // Simply move through the list\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        // Handling the Edge Case of empty list\\n        if(head == NULL) \\n            return head;\\n        ListNode* temp = head;\\n        // This is our temporary variable \\n        // We will use it to iterate through the list\\n        // While the head pointer remains intact\\n\\n        while(temp->next != NULL){\\n            // Since we have to compare the next node\\'s value\\n            // Our main condition is whether next node is NULL\\n            if(temp->next->val == temp->val){\\n                temp->next = temp->next->next;\\n                // Skip over the node connecting to next one\\n            }\\n            else{\\n                temp = temp->next; // Simply move through the list\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2884254,
                "title": "python-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        current = head\\n        while current and current.next: \\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        current = head\\n        while current and current.next: \\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2863725,
                "title": "javascript-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\n\\nvar deleteDuplicates = function(head) {\\n    if(head===null) return head;\\n    let node  = head;\\n    while(node && node.next) {\\n        if(node.next.val === node.val) {\\n            node.next = node.next.next\\n        }else {\\n            node = node.next\\n        }\\n    }\\n    return head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\n\\nvar deleteDuplicates = function(head) {\\n    if(head===null) return head;\\n    let node  = head;\\n    while(node && node.next) {\\n        if(node.next.val === node.val) {\\n            node.next = node.next.next\\n        }else {\\n            node = node.next\\n        }\\n    }\\n    return head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2862948,
                "title": "easy-to-understand-cpp-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL || head->next==NULL){\\n            return head;\\n        }\\n        ListNode* prev=head;\\n        ListNode* nnext=head;\\n        while(nnext!=NULL && prev->next!=NULL){\\n            nnext=prev->next;\\n            if(nnext->val==prev->val){\\n                prev->next=prev->next->next;\\n                delete nnext;\\n                nnext=prev->next;\\n                continue;\\n            }\\n            prev=nnext;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL || head->next==NULL){\\n            return head;\\n        }\\n        ListNode* prev=head;\\n        ListNode* nnext=head;\\n        while(nnext!=NULL && prev->next!=NULL){\\n            nnext=prev->next;\\n            if(nnext->val==prev->val){\\n                prev->next=prev->next->next;\\n                delete nnext;\\n                nnext=prev->next;\\n                continue;\\n            }\\n            prev=nnext;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2754975,
                "title": "java-runtime-0ms-faster-than-100-memory-usage-less-than-95-98",
                "content": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if (head == null) return null;\\n\\n        ListNode sentinel = new ListNode(0, head);\\n        ListNode pred = sentinel;\\n\\n        while (head != null) {\\n            if (head.next != null && head.val == head.next.val) {\\n                pred.next = head.next;\\n            } else {\\n                pred = pred.next;\\n            }\\n            head = head.next;\\n        }\\n        return sentinel.next;\\n    }\\n}\\n```\\n\\n![image](https://assets.leetcode.com/users/images/986282c2-03ac-4cbb-9bbf-4b52311cd57e_1667028644.6378608.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if (head == null) return null;\\n\\n        ListNode sentinel = new ListNode(0, head);\\n        ListNode pred = sentinel;\\n\\n        while (head != null) {\\n            if (head.next != null && head.val == head.next.val) {\\n                pred.next = head.next;\\n            } else {\\n                pred = pred.next;\\n            }\\n            head = head.next;\\n        }\\n        return sentinel.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2732826,
                "title": "c-java-0-ms-100-00-faster-4-lines-code",
                "content": "````\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode *ans = head;\\n        while(ans && ans->next){\\n            if(ans->val == ans->next->val) ans->next = ans->next->next;\\n            else ans = ans->next;\\n        }\\n        return head;\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Linked List"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode *ans = head;\\n        while(ans && ans->next){\\n            if(ans->val == ans->next->val) ans->next = ans->next->next;\\n            else ans = ans->next;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2460238,
                "title": "java-most-decisive-solution",
                "content": "```\\npublic class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head == null || head.next == null)\\n            return head;\\n \\n        ListNode j = head;\\n \\n        while( j!= null && j.next != null){\\n            if(j.val == j.next.val){\\n                j.next = j.next.next;\\n            }else{\\n                j = j.next; \\n            }\\n        }\\n \\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head == null || head.next == null)\\n            return head;\\n \\n        ListNode j = head;\\n \\n        while( j!= null && j.next != null){\\n            if(j.val == j.next.val){\\n                j.next = j.next.next;\\n            }else{\\n                j = j.next; \\n            }\\n        }\\n \\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2184653,
                "title": "python-easy-solution-explained-beginners",
                "content": "**Try to read explaination, mainly in the note, you will get very clear understanding how to do these kind of problems.**\\n* Since given linked list is in sorted manner, it is guaranteed that duplicates will be together.\\n* So, we check the current node value with the next node\\'s value\\n\\t* if it is True:\\n\\t\\t* we simply point current node\\'s next with next node\\'s next \\n\\t* else:\\n\\t\\t* we simply move our pointer to next node.\\n\\n**NOTE** -\\n* we are not moving our currrent pointer to next after finding duplicate and changing current\\'s next to next node\\'s next. we are doing it only if we donot find any duplicates. **why**?\\n\\t* it will work for every case, but it will fail for the case if we have duplicates at the end.\\n\\t* let\\'s take an example of [1, 1, 2, 3, 3]\\n\\t* while head.next:\\n\\t\\t* head.val == head.next.val; simply point head.next = head.next.next \\n\\t\\t* and if we move head pointer to head.next, that is fine currpointer is at 2. head.val != head.next.val, move head pointer to next\\n\\t\\t* head.val == head.next.val, simply point head.next = head.next.next. and if we move head pointer to head.next, now current head is at None and our LL is 1->2->3. and when we are checking while loop we get an error that None doesn\\'t have next.\\n\\t\\t* so if we donot move our pointer to next if we find the duplicate then we will be able to cover all the cases.\\n* Now, you can get doubt what if we have while condition as while head:\\n\\t* that\\'s completely normal, here we are comparing current\\'s value with it\\'s next value. so at first we have to check whether curr.next is present or not.\\n* after every thing is done simply return the head that we stored in a temp, since we are moving our head pointer.\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if not head:\\n            return\\n        temp = head\\n        while head.next:\\n            if head.val == head.next.val:\\n                head.next = head.next.next\\n            else:\\n                head = head.next\\n        return temp\\n```\\n**Kindly Upvote if it helps :)**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if not head:\\n            return\\n        temp = head\\n        while head.next:\\n            if head.val == head.next.val:\\n                head.next = head.next.next\\n            else:\\n                head = head.next\\n        return temp\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2119715,
                "title": "javascript-efficient-solution-meme",
                "content": "The key idea is traverse through list, and compare next node value with current, but step to the next node only if value is different\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    if (!head) return head;\\n    \\n    const headPointer = head;\\n    \\n    while (head !== null) {\\n        if (head.next !== null && head.val === head.next.val) {\\n            head.next = head.next.next;\\n        } else {\\n            head = head.next;\\n        }\\n    }\\n    \\n    return headPointer;\\n};\\n```\\n\\n**If you like solution or meme, upvote for motivate me**\\n\\nMeme#13 *see my other solutions for more memes!\\n\\n![image](https://assets.leetcode.com/users/images/acb34c8e-1feb-46e6-bf1b-63f75af2b4a9_1654544828.9435894.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    if (!head) return head;\\n    \\n    const headPointer = head;\\n    \\n    while (head !== null) {\\n        if (head.next !== null && head.val === head.next.val) {\\n            head.next = head.next.next;\\n        } else {\\n            head = head.next;\\n        }\\n    }\\n    \\n    return headPointer;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2106100,
                "title": "c-simple-solution",
                "content": "**upvote if you liked the solution(^ _^)**\\n\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL) return head;\\n        ListNode* temp= head;\\n        while(temp->next!=NULL){\\n            if(temp->val!= temp->next->val) temp = temp->next;\\n            else\\n                temp->next= temp->next->next;\\n        }\\n        return head;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL) return head;\\n        ListNode* temp= head;\\n        while(temp->next!=NULL){\\n            if(temp->val!= temp->next->val) temp = temp->next;\\n            else\\n                temp->next= temp->next->next;\\n        }\\n        return head;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1704166,
                "title": "python-3-30ms-faster-than-98-iterative-5-lines-solution-easy-approach",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        cur=head\\n        while cur and cur.next:\\n            if cur.val==cur.next.val:\\n                cur.next=cur.next.next\\n                continue\\n            cur=cur.next\\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        cur=head\\n        while cur and cur.next:\\n            if cur.val==cur.next.val:\\n                cur.next=cur.next.next\\n                continue\\n            cur=cur.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1631411,
                "title": "iterative-simple-and-easy-c",
                "content": "Implementation\\n\\n**Iterative Approach\\nTime Complexity = O(N), Space Complexity = O(1)**\\n\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* cur = head;\\n        while(cur){            \\n            if(cur->next && cur->next->val == cur->val) cur->next = cur->next->next;\\n            else cur = cur->next;\\n        }\\n        return head;\\n    }\\n};\\n```\\nIf you find any issue in understanding the solution then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding **:)**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* cur = head;\\n        while(cur){            \\n            if(cur->next && cur->next->val == cur->val) cur->next = cur->next->next;\\n            else cur = cur->next;\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1570831,
                "title": "scala-solution",
                "content": "```\\nobject Solution {\\n def deleteDuplicates(head: ListNode): ListNode = {\\n    head match {\\n      case h if h == null => h\\n      case h if h.next == null => h\\n      case h if h.next.x == h.x => deleteDuplicates(h.next)\\n      case h => new ListNode(h.x, deleteDuplicates(h.next))\\n    }\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n def deleteDuplicates(head: ListNode): ListNode = {\\n    head match {\\n      case h if h == null => h\\n      case h if h.next == null => h\\n      case h if h.next.x == h.x => deleteDuplicates(h.next)\\n      case h => new ListNode(h.x, deleteDuplicates(h.next))\\n    }\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1511046,
                "title": "python-simplest-solution",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        tempHead = head\\n        while head and head.next:\\n            if head.val == head.next.val:\\n                head.next = head.next.next\\n            else:\\n                head = head.next\\n        return tempHead\\n            \\n```\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        tempHead = head\\n        while head and head.next:\\n            if head.val == head.next.val:\\n                head.next = head.next.next\\n            else:\\n                head = head.next\\n        return tempHead\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1354556,
                "title": "python-solution-for-remove-duplicates-from-sorted-list",
                "content": "**Method 1**\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        l1 = head\\n        values = set()\\n        while l1:\\n            values.add(l1.val)\\n            l1 = l1.next\\n            \\n        dummy = current = ListNode(0)\\n        values = sorted(values)\\n        for i in values:\\n            current.next = ListNode(val=int(i))\\n            current = current.next\\n                  \\n        current.next = None\\n        return dummy.next\\n```\\n\\n**Method 2**\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        if not head:\\n            return None\\n        \\n        curr = head\\n        while curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr=curr.next\\n        return head\\n```\\n\\t \\nIf you like it, please **UPVOTE** it motivates me to write more of these posts !!\\nHappy Coding :)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        l1 = head\\n        values = set()\\n        while l1:\\n            values.add(l1.val)\\n            l1 = l1.next\\n            \\n        dummy = current = ListNode(0)\\n        values = sorted(values)\\n        for i in values:\\n            current.next = ListNode(val=int(i))\\n            current = current.next\\n                  \\n        current.next = None\\n        return dummy.next\\n```\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        if not head:\\n            return None\\n        \\n        curr = head\\n        while curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr=curr.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1117432,
                "title": "faster-than-100-c-short-solution-without-memory-leak",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head)\\n    {\\n        ListNode *temp=head;\\n        while(temp)\\n        {\\n            int element=temp->val;\\n            while(temp->next && element==temp->next->val) //checks if node after temp is its duplicate\\n\\t\\t\\t//since nodes are deleted U don\\'t need to move temp (temp=temp->next) \\n            {\\n                ListNode* m=temp->next;\\n                temp->next=m->next;\\n                delete m;\\n            }\\n            temp=temp->next;\\n        }\\n        return head;\\n    }\\n}; \\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head)\\n    {\\n        ListNode *temp=head;\\n        while(temp)\\n        {\\n            int element=temp->val;\\n            while(temp->next && element==temp->next->val) //checks if node after temp is its duplicate\\n\\t\\t\\t//since nodes are deleted U don\\'t need to move temp (temp=temp->next) \\n            {\\n                ListNode* m=temp->next;\\n                temp->next=m->next;\\n                delete m;\\n            }\\n            temp=temp->next;\\n        }\\n        return head;\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 972872,
                "title": "simple-easy-solution-by-python-3",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        curr = head\\n        while curr:\\n            if curr.next and curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        curr = head\\n        while curr:\\n            if curr.next and curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 869704,
                "title": "easy-python-beats-98-explained-with-comments",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        if not head: return\\n\\t\\t# We\\'ll track the prev and current nodes.\\n        prev = head\\n        cur = head.next\\n\\t\\t# Set the prev.next to None (we update this when we find the next != node)\\n        prev.next = None\\n        while cur:\\n\\t\\t    # If the vals of the two nodes are the same advance cur.\\n            if cur.val == prev.val:\\n                cur = cur.next\\n\\t\\t\\t# Otherwise we know they are different vals.\\n            else:\\n\\t\\t\\t    # We set our prevs next to the current node.\\n                prev.next = cur\\n\\t\\t\\t\\t# We advance cur.\\n                cur = cur.next\\n\\t\\t\\t\\t# We advance prev.\\n                prev = prev.next\\n\\t\\t\\t\\t# Then set prev.next to None until we find another node.\\n                prev.next = None\\n                \\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        if not head: return\\n\\t\\t# We\\'ll track the prev and current nodes.\\n        prev = head\\n        cur = head.next\\n\\t\\t# Set the prev.next to None (we update this when we find the next != node)\\n        prev.next = None\\n        while cur:\\n\\t\\t    # If the vals of the two nodes are the same advance cur.\\n            if cur.val == prev.val:\\n                cur = cur.next\\n\\t\\t\\t# Otherwise we know they are different vals.\\n            else:\\n\\t\\t\\t    # We set our prevs next to the current node.\\n                prev.next = cur\\n\\t\\t\\t\\t# We advance cur.\\n                cur = cur.next\\n\\t\\t\\t\\t# We advance prev.\\n                prev = prev.next\\n\\t\\t\\t\\t# Then set prev.next to None until we find another node.\\n                prev.next = None\\n                \\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 738168,
                "title": "c-simplest-solution-beats-98",
                "content": "```\\nListNode* deleteDuplicates(ListNode* head) {\\n        ListNode *temp=head;\\n        while(temp) {\\n        \\twhile(temp->next && temp->val==temp->next->val) {\\n                ListNode *t=temp->next->next;\\n                delete temp->next;\\n        \\t\\ttemp->next=t;\\n        \\t}\\n        \\ttemp=temp->next;\\n        }\\n        return head;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Iterator"
                ],
                "code": "```\\nListNode* deleteDuplicates(ListNode* head) {\\n        ListNode *temp=head;\\n        while(temp) {\\n        \\twhile(temp->next && temp->val==temp->next->val) {\\n                ListNode *t=temp->next->next;\\n                delete temp->next;\\n        \\t\\ttemp->next=t;\\n        \\t}\\n        \\ttemp=temp->next;\\n        }\\n        return head;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 502590,
                "title": "recursive-solution-for-concept-building",
                "content": "class Solution:\\n    \\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        \\n            if head is None:\\n                return\\n    \\n            if head.next is not None:\\n        \\n                if head.val == head.next.val:\\n            \\n                    temp = head.next.next\\n                    head.next = None\\n                    head.next = temp\\n                    self.deleteDuplicates(head)\\n                else:\\n            \\n                    self.deleteDuplicates(head.next)\\n            \\n            return head\\n                                      \\n        \\n            \\n            \\n        \\n        \\n        \\n            \\n            \\n        \\n        \\n\\t\\t\\n#steps:\\n#1) check if head is None > \\n#2) check if head.next is not None> \\n#above two condition helps not to call on None type object\\n#3) compare 1st element of LL to 2nd(head.val == head.val.next)\\n#4) if they are same store the next.next element of LL in temp\\n#5) break the LL by assigning head.next = None\\n#6) now assign head.next to temp \\n#7) now call on self.deleteDuplicates(head) \\n#you wont choose head.next because it fails for  1->1->1->NONE\\n#8) WHEN next element is not same : more forward >self.deleteDuplicates(head.next)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "class Solution:\\n    \\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\\n        \\n            if head is None:\\n                return\\n    \\n            if head.next is not None:\\n        \\n                if head.val == head.next.val:\\n            \\n                    temp = head.next.next\\n                    head.next = None\\n                    head.next = temp\\n                    self.deleteDuplicates(head)\\n                else:\\n            \\n                    self.deleteDuplicates(head.next)\\n            \\n            return head\\n                                      \\n        \\n            \\n            \\n        \\n        \\n        \\n            \\n            \\n        \\n        \\n\\t\\t\\n#steps:\\n#1) check if head is None > \\n#2) check if head.next is not None> \\n#above two condition helps not to call on None type object\\n#3) compare 1st element of LL to 2nd(head.val == head.val.next)\\n#4) if they are same store the next.next element of LL in temp\\n#5) break the LL by assigning head.next = None\\n#6) now assign head.next to temp \\n#7) now call on self.deleteDuplicates(head) \\n#you wont choose head.next because it fails for  1->1->1->NONE\\n#8) WHEN next element is not same : more forward >self.deleteDuplicates(head.next)\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 275378,
                "title": "javascript-solution-simple",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    if (!head) return head;\\n    \\n    let curr = head;\\n    \\n    while(curr.next) {\\n        if (curr.val === curr.next.val) {\\n            curr.next = curr.next.next;\\n        } else {\\n            curr = curr.next;\\n        }\\n    }\\n    \\n    return head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    if (!head) return head;\\n    \\n    let curr = head;\\n    \\n    while(curr.next) {\\n        if (curr.val === curr.next.val) {\\n            curr.next = curr.next.next;\\n        } else {\\n            curr = curr.next;\\n        }\\n    }\\n    \\n    return head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 241787,
                "title": "python-3-pointer-listnode-100-96",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: \\'ListNode\\') -> \\'ListNode\\':\\n        now = head\\n        while head and now.next:\\n            if now.val == now.next.val:\\n                now.next = now.next.next\\n            else:\\n                now = now.next\\n        return head\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: \\'ListNode\\') -> \\'ListNode\\':\\n        now = head\\n        while head and now.next:\\n            if now.val == now.next.val:\\n                now.next = now.next.next\\n            else:\\n                now = now.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 28618,
                "title": "iterative-python-solution-beats-99-8",
                "content": "```\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        current = head\\n        while current and current.next: \\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def deleteDuplicates(self, head):\\n        \"\"\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        current = head\\n        while current and current.next: \\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 28623,
                "title": "recursive-solution-in-swift-and-my-illustration",
                "content": "Here is my swift code and my illustration for someone who can hardly understand recursive as me ... :)\\n\\n```\\nfunc deleteDuplicates(_ head: ListNode?) -> ListNode? {\\n    if head == nil || head?.next == nil { return head }\\n    head!.next = deleteDuplicates(head!.next)\\n    return head!.val == head!.next?.val ? head!.next : head\\n}\\n```\\n![](https://windsuzu.github.io/leetcode-83/remove_nodes.gif)",
                "solutionTags": [],
                "code": "```\\nfunc deleteDuplicates(_ head: ListNode?) -> ListNode? {\\n    if head == nil || head?.next == nil { return head }\\n    head!.next = deleteDuplicates(head!.next)\\n    return head!.val == head!.next?.val ? head!.next : head\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3969975,
                "title": "100-faster-java-c-short-and-easy-for-understanding",
                "content": "\\n\\n# Approach\\n- Create ListNode Current for point nodes\\n- Initialy Current point to head\\n\\n- Iterate while loop until last Node\\n- if next node value is erqual to current node value than skip next node and jump to next node of next node.\\n  else next node value are different than current node value than make current node = next node\\n- Example 1:\\n  1 -> 1 -> 2\\n  initialy current node is first 1\\n  next node of current node is second 1\\n  both have same values so we update current.next for skip next element\\n current.next(second 1)=current.next.next(2) \\n 1 -> 2 \\n\\n# Complexity\\n- Time complexity: O(n);\\n\\n- Space complexity: O(1);\\n\\n# C++ Code\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) \\n    {\\n        ListNode* Current=head;\\n\\n        while(Current!=NULL && Current->next!=NULL)\\n        {\\n            // if next node value is silmilar to current node\\n            // skip next node and update current.next\\n\\n            if(Current->val==Current->next->val)\\n            {\\n                Current->next=Current->next->next;\\n            }\\n            else\\n            {\\n                Current=Current->next;\\n            }\\n        }\\n        return head;  \\n    }\\n};\\n```\\n\\n# Java Code\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) \\n    {\\n        ListNode Current=head;\\n\\n        while(Current!=null && Current.next!=null)\\n        {\\n            // if next node value is silmilar to current node\\n            // skip next node and update current.next\\n            if(Current.val==Current.next.val)\\n            {\\n                Current.next=Current.next.next;\\n            }\\n            else\\n            {\\n                Current=Current.next;\\n            }\\n        }\\n        return head;    \\n    }\\n}\\n```\\n\\nUpvote if code is usefull for you.",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) \\n    {\\n        ListNode* Current=head;\\n\\n        while(Current!=NULL && Current->next!=NULL)\\n        {\\n            // if next node value is silmilar to current node\\n            // skip next node and update current.next\\n\\n            if(Current->val==Current->next->val)\\n            {\\n                Current->next=Current->next->next;\\n            }\\n            else\\n            {\\n                Current=Current->next;\\n            }\\n        }\\n        return head;  \\n    }\\n};\\n```\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) \\n    {\\n        ListNode Current=head;\\n\\n        while(Current!=null && Current.next!=null)\\n        {\\n            // if next node value is silmilar to current node\\n            // skip next node and update current.next\\n            if(Current.val==Current.next.val)\\n            {\\n                Current.next=Current.next.next;\\n            }\\n            else\\n            {\\n                Current=Current.next;\\n            }\\n        }\\n        return head;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917726,
                "title": "easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        \\n        return head\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        \\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916584,
                "title": "python3-beats-90-efficient-removal-of-duplicates-from-a-sorted-linked-list",
                "content": "# Intuition\\nOur goal is to remove duplicate nodes while maintaining the order. Since the list is sorted, duplicate nodes will be adjacent to each other. We just need to skip them.\\n\\n# Approach\\n1. We start with a pointer called `curr` that initially points to the `head` of the linked list.\\n1. We use a while loop to iterate through the linked list as long as `curr` is not None and `curr.next` is not None. This loop will help us traverse the linked list and examine each pair of adjacent nodes.\\n1. Inside the loop, we compare the value of the current node `curr `with the value of the next node `curr.next`.\\n1. If the values are equal, it means we\\'ve found a duplicate node. In this case, we **update the next pointer of the current node** `curr` **to skip the next node and directly point to the node after the duplicate.** This effectively removes the duplicate node from the linked list.\\n1. If the values are not equal i.e. not duplicates, we move the `curr` **pointer** **one step forward** to examine the next pair of nodes.\\n1. The loop continues until we reach the end of the linked list or until we\\'ve checked all pairs of adjacent nodes.\\n1. Finally, we return the head of the modified linked list.\\n\\n# Complexity\\n- Time complexity:\\nThe algorithm iterates through the entire linked list once. Thus, the time complexity is $$O(n)$$, where n is the number of nodes in the linked list.\\n\\n- Space complexity:\\nWe are using only a constant amount of extra space to store the curr pointer. No additional data structures are used, so the space complexity is $$O(1)$$.\\n\\n# Code\\n```\\n\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        \\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List",
                    "Sort"
                ],
                "code": "```\\n\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        \\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3789177,
                "title": "c-solution-o-1-space-optimized-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL  ||  head->next==NULL) return head;\\n\\n        ListNode*prev=NULL;\\n        ListNode*temp=NULL;\\n        ListNode*curr=head;\\n\\n        while(curr!=NULL){\\n            if(prev==NULL){\\n                prev=curr;\\n                temp=prev;\\n                curr=curr->next;\\n                continue;\\n            }\\n            if(curr->val == prev->val){\\n                curr=curr->next;\\n                if(curr==NULL) prev->next=NULL;\\n            }\\n            else{\\n                prev->next=curr;\\n                prev=curr;\\n                curr=curr->next;\\n            }\\n        }\\n        return temp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL  ||  head->next==NULL) return head;\\n\\n        ListNode*prev=NULL;\\n        ListNode*temp=NULL;\\n        ListNode*curr=head;\\n\\n        while(curr!=NULL){\\n            if(prev==NULL){\\n                prev=curr;\\n                temp=prev;\\n                curr=curr->next;\\n                continue;\\n            }\\n            if(curr->val == prev->val){\\n                curr=curr->next;\\n                if(curr==NULL) prev->next=NULL;\\n            }\\n            else{\\n                prev->next=curr;\\n                prev=curr;\\n                curr=curr->next;\\n            }\\n        }\\n        return temp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3761114,
                "title": "siimple-linked-list-solution-easy-to-understand-simple-logic",
                "content": "\\n\\n\\n    class Solution {\\n    public:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL or head->next==NULL)return head;\\n        ListNode* p=head;\\n        while(p!=NULL and p->next!=NULL){\\n            if(p->val==p->next->val){\\n                p->next=p->next->next;\\n            }\\n            else{\\n                p=p->next;\\n            }\\n        }\\n        return head;\\n      }\\n    };",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\n    public:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL or head->next==NULL)return head;\\n        ListNode* p=head;\\n        while(p!=NULL and p->next!=NULL){\\n            if(p->val==p->next->val){\\n                p->next=p->next->next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3459803,
                "title": "100-simple-and-easy-code-for-removing-duplicates",
                "content": "# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n        while(current != null && current.next != null) {\\n            if(current.val == current.next.val) {\\n                current.next = current.next.next;\\n            }\\n            else {\\n                current = current.next;\\n            }\\n        }\\n        return head;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n        while(current != null && current.next != null) {\\n            if(current.val == current.next.val) {\\n                current.next = current.next.next;\\n            }\\n            else {\\n                current = current.next;\\n            }\\n        }\\n        return head;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446457,
                "title": "two-pointer-approach-with-explanation-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nRemove the duplicates from the linked list !!\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize two pointers, prev and curr, with the first and the second nodes of the linked list, respectively.\\n2. While curr is not NULL, compare the value of curr and prev nodes.\\n3. If they have the same value, update prev->next to curr->next and move curr to the next node.\\n4. If they have different values, move both prev and curr to their next nodes.\\n5. Return the head of the modified linked list.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head == NULL)\\n        {\\n            return head;\\n        }\\n\\n        ListNode* curr = head->next;\\n        ListNode* prev = head;\\n\\n        if(curr == NULL || prev == NULL)\\n        {\\n            return head;\\n        }\\n\\n        while(curr != NULL)\\n        {\\n            if(curr->val == prev->val)\\n            {\\n                curr = curr->next;\\n                prev->next = curr;\\n            }\\n            else\\n            {\\n                prev = curr;\\n                curr = curr->next;\\n            }\\n        }\\n\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Linked List",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head == NULL)\\n        {\\n            return head;\\n        }\\n\\n        ListNode* curr = head->next;\\n        ListNode* prev = head;\\n\\n        if(curr == NULL || prev == NULL)\\n        {\\n            return head;\\n        }\\n\\n        while(curr != NULL)\\n        {\\n            if(curr->val == prev->val)\\n            {\\n                curr = curr->next;\\n                prev->next = curr;\\n            }\\n            else\\n            {\\n                prev = curr;\\n                curr = curr->next;\\n            }\\n        }\\n\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436205,
                "title": "easy-python3-solution-with-explanation",
                "content": "# Explanation \\n\\n- Set curr to the head and iterate till `curr` and `curr.next` is not None\\n- if `curr` node and `curr.next` have same value then just skip that node and set `curr.next = curr.next.next` else `curr = curr.next` and just return the `head`\\n\\n# Code\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n```",
                "solutionTags": [
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val == curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334014,
                "title": "easiest-solution-ever-in-5-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nPlsssssss Up Vote! -> \\uD83D\\uDE2D\\n# Code\\n```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = head;\\n        while (temp != null) {\\n            while(temp.next != null && temp.next.val == temp.val) \\n                temp.next = temp.next.next;\\n            temp = temp.next;\\n        } return head;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = head;\\n        while (temp != null) {\\n            while(temp.next != null && temp.next.val == temp.val) \\n                temp.next = temp.next.next;\\n            temp = temp.next;\\n        } return head;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3332247,
                "title": "different-solutions-using-map-and-iterative-way",
                "content": "**1. Using Hasmap to store the occurence of all nodes values(i.e. frequency) , and then again traverse to find frequency>1 , if yes remove that node.**\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\nListNode *deleteDuplicates(ListNode *head) {\\n    \\n    if(head == NULL || head->next == NULL) return head;   // if head is null or head ka next is null (i.e only one element ) then return head .\\n\\n    ListNode* temp = head;\\n\\n    map<int,int> m;\\n\\n    while(temp != nullptr){\\n        m[temp->val]++;\\n        temp = temp->next;\\n    }\\n    temp = head;\\n    while(temp != nullptr){\\n        \\n        if(m[temp->val]>1){              // If frquency is greater than 1 , then remove that node and decrease the frequency\\n            m[temp->val]--;\\n            ListNode* del = temp->next;\\n            temp->next = del->next;    // remove the connection of temp node using a new node del which is pointing to temp ka next.\\n            delete del;\\n        }else{\\n            temp = temp->next;\\n        }\\n        \\n        \\n\\n    }\\n    \\n    return head;\\n\\n}\\n};\\n```\\n2. Iterative Approach .\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\nListNode *deleteDuplicates(ListNode *head) {\\n\\n    ListNode* temp = head;\\n\\n    \\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }\\n\\n    while(temp->next != nullptr){\\n\\n        if(temp->val == temp->next->val){\\n            ListNode* del = temp->next;\\n            temp->next = del->next;\\n            delete del;\\n        }else{\\n            temp = temp->next;\\n        }\\n\\n        \\n    }\\n\\nreturn head;\\n\\n}\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\nListNode *deleteDuplicates(ListNode *head) {\\n    \\n    if(head == NULL || head->next == NULL) return head;   // if head is null or head ka next is null (i.e only one element ) then return head .\\n\\n    ListNode* temp = head;\\n\\n    map<int,int> m;\\n\\n    while(temp != nullptr){\\n        m[temp->val]++;\\n        temp = temp->next;\\n    }\\n    temp = head;\\n    while(temp != nullptr){\\n        \\n        if(m[temp->val]>1){              // If frquency is greater than 1 , then remove that node and decrease the frequency\\n            m[temp->val]--;\\n            ListNode* del = temp->next;\\n            temp->next = del->next;    // remove the connection of temp node using a new node del which is pointing to temp ka next.\\n            delete del;\\n        }else{\\n            temp = temp->next;\\n        }\\n        \\n        \\n\\n    }\\n    \\n    return head;\\n\\n}\\n};\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\nListNode *deleteDuplicates(ListNode *head) {\\n\\n    ListNode* temp = head;\\n\\n    \\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }\\n\\n    while(temp->next != nullptr){\\n\\n        if(temp->val == temp->next->val){\\n            ListNode* del = temp->next;\\n            temp->next = del->next;\\n            delete del;\\n        }else{\\n            temp = temp->next;\\n        }\\n\\n        \\n    }\\n\\nreturn head;\\n\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142463,
                "title": "easy-c-solution-linked-list-best-solution-optimized",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can solve this question using Linked list.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can easily understand the approache by seeing the code which is easy to understand with comments.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime Complexity :O(N), because we are traversing over the elements exactly one. Thus the time complexity is linear.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace Complexity : O(1), because we have used constant elements. Thus the space complexity is constant.\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n \\n /*\\n\\n    Time Complexity :O(N), because we are traversing over the elements exactly one. Thus the time complexity is\\n    linear.\\n\\n    Space Complexity : O(1), because we have used constant elements. Thus the space complexity is constant.\\n\\n    Using Linklist.\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head == NULL){\\n            return head;\\n        }\\n        ListNode* curr = head;\\n        while(curr->next != NULL){\\n            if(curr->val == curr->next->val){\\n                curr->next = curr->next->next;\\n            }\\n            else{\\n                curr = curr->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n \\n /*\\n\\n    Time Complexity :O(N), because we are traversing over the elements exactly one. Thus the time complexity is\\n    linear.\\n\\n    Space Complexity : O(1), because we have used constant elements. Thus the space complexity is constant.\\n\\n    Using Linklist.\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head == NULL){\\n            return head;\\n        }\\n        ListNode* curr = head;\\n        while(curr->next != NULL){\\n            if(curr->val == curr->next->val){\\n                curr->next = curr->next->next;\\n            }\\n            else{\\n                curr = curr->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3030179,
                "title": "updated-step-wise-java-beats-100-runtime-100-space-easy-to-understand",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe list is already sorted so we only need to check the consecutive ListNode values.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n    1. Check the base condition.\\n    2. Traverse the list to access the element.\\n    3. Compare the consecutive node values. \\n    4. Remove the duplicate elements.\\n    5. Finally, return the head node.\\nFollow the code below to understand the solution.\\n\\n              **If this solution helped you, give it an up-vote to help others** \\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n\\n        //Step: 1\\n        //if the list is empty, return null.\\n        if(head == null) return head;\\n        \\n        //initialize preNode from head.\\n        ListNode preNode = head;\\n\\n        //initialize curNode from head.next.\\n        ListNode preNode = head.next;\\n\\n\\n        //Step: 2\\n        //Traverse till the last node.\\n        while(curNode != null)\\n        {\\n            //Step: 3\\n            //if the consecutive nodes have duplicate value.\\n            if(preNode.val==curNode.val)\\n            {\\n                //Step: 4\\n                //change the pointers to delete curNode.\\n                preNode.next=curNode.next;\\n            }\\n            //if the values are not duplicate.\\n            else\\n            {\\n                //Simply, update the preNode to curNode.\\n                preNode=curNode;\\n            }\\n            //curNode reference will get updated in both cases.\\n            //So, write it out of if-else block.\\n            curNode=curNode.next;\\n        }\\n\\n        //Step: 5\\n        //Finally, return the head node.\\n        return head;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n\\n        //Step: 1\\n        //if the list is empty, return null.\\n        if(head == null) return head;\\n        \\n        //initialize preNode from head.\\n        ListNode preNode = head;\\n\\n        //initialize curNode from head.next.\\n        ListNode preNode = head.next;\\n\\n\\n        //Step: 2\\n        //Traverse till the last node.\\n        while(curNode != null)\\n        {\\n            //Step: 3\\n            //if the consecutive nodes have duplicate value.\\n            if(preNode.val==curNode.val)\\n            {\\n                //Step: 4\\n                //change the pointers to delete curNode.\\n                preNode.next=curNode.next;\\n            }\\n            //if the values are not duplicate.\\n            else\\n            {\\n                //Simply, update the preNode to curNode.\\n                preNode=curNode;\\n            }\\n            //curNode reference will get updated in both cases.\\n            //So, write it out of if-else block.\\n            curNode=curNode.next;\\n        }\\n\\n        //Step: 5\\n        //Finally, return the head node.\\n        return head;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005436,
                "title": "easy-java-solution-beats-100",
                "content": "Hope this helps.\\nDo Upvote if you like it !!\\n\\nThanks :)\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode node) {\\n        if(node==null){\\n            return node;\\n        }\\n        ListNode head=node;\\n        while(node.next!=null){\\n            if(node.val==node.next.val){\\n                node.next=node.next .next;\\n            }\\n            else{\\n                node=node.next;\\n            }\\n        }\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode node) {\\n        if(node==null){\\n            return node;\\n        }\\n        ListNode head=node;\\n        while(node.next!=null){\\n            if(node.val==node.next.val){\\n                node.next=node.next .next;\\n            }\\n            else{\\n                node=node.next;\\n            }\\n        }\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2974847,
                "title": "c-solution-using-recursion",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head == NULL || head->next == NULL)\\n            return head;\\n        ListNode* ans = deleteDuplicates(head->next);\\n        if(head->val == ans->val)\\n            head->next = ans->next;\\n        return head;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head == NULL || head->next == NULL)\\n            return head;\\n        ListNode* ans = deleteDuplicates(head->next);\\n        if(head->val == ans->val)\\n            head->next = ans->next;\\n        return head;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2954526,
                "title": "my-first-easy-solution-0ms-100-java",
                "content": "- 166/166 cases passed (0 ms)\\n- Your runtime beats 100 % of java submissions\\n- Your memory usage beats 83.92 % of java submissions (42 MB)\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\n        ListNode out=new ListNode(),t=out;\\n\\n        while(head!=null){\\n            while(head.next!=null && head.val==head.next.val)\\n                head=head.next;\\n            t.next=new ListNode(head.val);\\n            t=t.next;\\n            head=head.next;    \\n        }\\n        return out.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\n        ListNode out=new ListNode(),t=out;\\n\\n        while(head!=null){\\n            while(head.next!=null && head.val==head.next.val)\\n                head=head.next;\\n            t.next=new ListNode(head.val);\\n            t=t.next;\\n            head=head.next;    \\n        }\\n        return out.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2809763,
                "title": "java-easy-solution-with-explanation",
                "content": "\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        //First we check if the head is null or not \\n        // if the head is null we simply return the head \\n        if(head == null) return head;\\n        ListNode node = head; \\n        //Here we perform a while loop until the node value is null \\n        while(node.next != null){\\n            //Through a if else condition we check if the value of the current node is equal to the value of the next node \\n            //if the value of the current node is same as the next one we simply skip the next node by \"node.next = node.next.next\"\\n            if(node.val == node.next.val) node.next = node.next.next;\\n            else node = node.next;\\n        }\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        //First we check if the head is null or not \\n        // if the head is null we simply return the head \\n        if(head == null) return head;\\n        ListNode node = head; \\n        //Here we perform a while loop until the node value is null \\n        while(node.next != null){\\n            //Through a if else condition we check if the value of the current node is equal to the value of the next node \\n            //if the value of the current node is same as the next one we simply skip the next node by \"node.next = node.next.next\"\\n            if(node.val == node.next.val) node.next = node.next.next;\\n            else node = node.next;\\n        }\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805997,
                "title": "java",
                "content": "If you like it pls upvote\\n```\\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode listNode = head;\\n\\n        while (listNode != null && listNode.next != null) {\\n            if (listNode.val == listNode.next.val)  {\\n                listNode.next = listNode.next.next;\\n            } else {\\n                listNode = listNode.next;\\n            }\\n        }\\n        return head;\\n    }\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode listNode = head;\\n\\n        while (listNode != null && listNode.next != null) {\\n            if (listNode.val == listNode.next.val)  {\\n                listNode.next = listNode.next.next;\\n            } else {\\n                listNode = listNode.next;\\n            }\\n        }\\n        return head;\\n    }\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2790045,
                "title": "easy-solution-faster-than-97-of-solution",
                "content": "# Intuition\\nWe will link node to the next element which is not the duplicate\\n\\n# Approach\\nTake two pointer q and p , p will move faster and q will remain at head only. p will move until q->val==p->val;\\n\\n# Complexity\\n- Time complexity:\\nO(n);\\n\\n- Space complexity:\\nNone\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        struct ListNode *p=head;\\n        struct ListNode *q=head;\\n       while(p){\\n       while( p && q && p->val==q->val){\\n           p=p->next;\\n       }\\n       q->next=p;\\n       q=p;\\n       if(p){\\n       p=p->next;\\n       }\\n       }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        struct ListNode *p=head;\\n        struct ListNode *q=head;\\n       while(p){\\n       while( p && q && p->val==q->val){\\n           p=p->next;\\n       }\\n       q->next=p;\\n       q=p;\\n       if(p){\\n       p=p->next;\\n       }\\n       }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2728818,
                "title": "c-easy-solution",
                "content": "class Solution\\n{\\n    public:\\n        ListNode* deleteDuplicates(ListNode *head)\\n        {\\n            if (head == NULL)\\n                return head;\\n\\n            ListNode *curr = head;\\n            while (curr->next != NULL)\\n            {\\n                if (curr->val == curr->next->val)\\n                {\\n                    ListNode *temp = curr->next;\\n                    curr->next = curr->next->next;\\n                    delete temp;\\n                }\\n                else\\n                    curr = curr->next;\\n            }\\n            return head;\\n        }\\n};",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "class Solution\\n{\\n    public:\\n        ListNode* deleteDuplicates(ListNode *head)\\n        {\\n            if (head == NULL)\\n                return head;\\n\\n            ListNode *curr = head;\\n            while (curr->next != NULL)\\n            {\\n                if (curr->val == curr->next->val)\\n                {\\n                    ListNode *temp = curr->next;\\n                    curr->next = curr->next->next;\\n                    delete temp;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2721853,
                "title": "linear-python-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if head is None:\\n            return head\\n        pt=head\\n        prev=pt\\n        pt=pt.next\\n        while pt:\\n            if pt.val==prev.val:\\n                prev.next=pt.next\\n                pt=pt.next\\n            else:\\n                prev=pt\\n                pt=pt.next\\n        return head\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if head is None:\\n            return head\\n        pt=head\\n        prev=pt\\n        pt=pt.next\\n        while pt:\\n            if pt.val==prev.val:\\n                prev.next=pt.next\\n                pt=pt.next\\n            else:\\n                prev=pt\\n                pt=pt.next\\n        return head\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2663946,
                "title": "simple-and-efficient-approach-in-python",
                "content": "Hi Leets! I have solved it using a simple and efficient way. The algorithm I thought is that we will traverse through the linked list and if our current node is equal to the next node then we will just skip the next node and go to the next node of next. Through this we will be skipping the same nodes.\\n```\\n\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if head is None:\\n            return head\\n        current = head\\n        nxt = head.next\\n        while nxt is not None:\\n            if current.val == nxt.val:\\n                current.next = nxt.next\\n                nxt = current  # If there are more than two same elements we will check them again\\n            current = nxt\\n            nxt = nxt.next\\n        return head\\n```\\nIf any queries feel free to ask :)",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\n\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if head is None:\\n            return head\\n        current = head\\n        nxt = head.next\\n        while nxt is not None:\\n            if current.val == nxt.val:\\n                current.next = nxt.next\\n                nxt = current  # If there are more than two same elements we will check them again\\n            current = nxt\\n            nxt = nxt.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2637753,
                "title": "o-n-100-faster-iterative",
                "content": "***Approach : i will traverse over the list if i find value of current node equal to value of next node i will jump to curr->next->node (equals to deleting the curr->next node ).***\\n\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        if(head==nullptr)\\n            return head;\\n        \\n        ListNode *temp=head;\\n        \\n        while(temp){\\n            \\n                if(temp->next != nullptr and temp->val == temp->next->val){\\n                    temp->next = temp->next->next;\\n                }\\n                else{\\n                    temp=temp->next;\\n                }    \\n        }\\n\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        if(head==nullptr)\\n            return head;\\n        \\n        ListNode *temp=head;\\n        \\n        while(temp){\\n            \\n                if(temp->next != nullptr and temp->val == temp->next->val){\\n                    temp->next = temp->next->next;\\n                }\\n                else{\\n                    temp=temp->next;\\n                }    \\n        }\\n\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2637683,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head \\n        while curr :\\n            while curr.next and curr.next.val == curr.val:\\n                curr.next = curr.next.next\\n            curr = curr.next\\n        return head\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head \\n        while curr :\\n            while curr.next and curr.next.val == curr.val:\\n                curr.next = curr.next.next\\n            curr = curr.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2508423,
                "title": "simple-and-easy-java-solution-100-faster",
                "content": "```\\n\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n        while (current != null && current.next != null) {\\n            if (current.next.val == current.val) current.next = current.next.next;\\n            else current = current.next;\\n        }\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\n\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n        while (current != null && current.next != null) {\\n            if (current.next.val == current.val) current.next = current.next.next;\\n            else current = current.next;\\n        }\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2248548,
                "title": "python-solution-explained-time-o-n-space-o-1",
                "content": "# Explaination:\\nThis problem is asking us to delete all duplicate nodes, so after we visit a node, if there are any other nodes with the same value, delete them and only keep the first instance of that node.\\n**Example:** 1->1->2->3\\nAs you can see `1` appears twice, we want to remove the duplicate, that would be the second `1`. \\nAfter removing it the result should look like: 1->2->3\\n\\n**Solution Breakdown:**\\n1. We create a variable `current` and initialize it to be the `head` of our linked list input\\n2. We setup our `while` loop to keep iterating while `current` and `current.next` are **NOT** `None`. The reason we do this is because we want to check the `current` node and one node after the `current` node and we want to compare their values to see if they are the same.\\n3. If the `current` node value is the same as the `current.next` value, we found a duplicate, so we change the pointer to skip the `.next` node and point to the node AFTER `current.next`. The reason why we do this is because we want to get rid of duplicates. So 1->1->2->3, the first `1` in that list will now skip the second `1` and point to the `2` like 1->2->3.\\n4. Notice how we don\\'t update `current`, we only update `current.next`, this is because there can be more duplicates. Imagine our input was 1->1->1->2->3. After updating `current.next` it would become 1->1->2->3, we deleted the second `1` in the list and pointed the first `1` to the third `1`. But if we update our current to be `current.next.next` we will end up not deleting the third `1` which is also a duplicate. `current` would point to that `1` and the next node after would be `2`, then our `if` statement would not catch the duplicate. Since we didn\\'t update the `current` we are still at the first `1` so `current.val` will be `1` and `current.next.val` will be `1` now we can delete that last one to make the list 1->2->3.\\n5. If `current` and `current.next` do not have the same values, we just update `current` like normal and set it to `current.next`\\n6. We return `head` after we finish.\\n\\n**Time O(N) | Space O(1):**\\nTime is O(N) because at most we are just going through the entire linked list once\\nSpace is O(1) because we don\\'t have anything saved in memory which is scaling with our input. We only have a variable which we use to update pointers.\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        current = head\\n        \\n        while current and current.next:\\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        current = head\\n        \\n        while current and current.next:\\n            if current.val == current.next.val:\\n                current.next = current.next.next\\n            else:\\n                current = current.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2078592,
                "title": "my-sweet-o-n-solution-c",
                "content": "we have to traverse the linkedlist and have to ignore the duplicates by changing the link\\nby accessing the `prev` and `ptr->next` pointer which are neighbours of duplicate elements ,those pointer will help to remove the duplicate .\\n\\n\\n```\\n    ListNode *deleteDuplicates(ListNode *head)\\n    {\\n        ListNode *ptr = head;\\n        ListNode *prev = ptr;\\n        if (!head)\\n        {\\n            return NULL;\\n        }\\n        while (ptr->next)\\n        {\\n            if (ptr->val == ptr->next->val)\\n            {\\n                ptr = ptr->next;\\n            }\\n            else\\n            {\\n                prev->next = ptr->next;\\n                ptr = ptr->next;\\n                prev = ptr;\\n            }\\n        }\\n        prev->next = NULL;\\n        return h;\\n    }\\n```\\n##### Feel free to ask any **doubts** in the comment section.\\n##### If you like this solution, do **UPVOTE**.\\n##### Happy Coding :)",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\n    ListNode *deleteDuplicates(ListNode *head)\\n    {\\n        ListNode *ptr = head;\\n        ListNode *prev = ptr;\\n        if (!head)\\n        {\\n            return NULL;\\n        }\\n        while (ptr->next)\\n        {\\n            if (ptr->val == ptr->next->val)\\n            {\\n                ptr = ptr->next;\\n            }\\n            else\\n            {\\n                prev->next = ptr->next;\\n                ptr = ptr->next;\\n                prev = ptr;\\n            }\\n        }\\n        prev->next = NULL;\\n        return h;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2077456,
                "title": "rust-typescript",
                "content": "Runtime: 3 ms, faster than 55.95% of Rust online submissions for Remove Duplicates from Sorted List.\\nMemory Usage: 2.1 MB, less than 72.62% of Rust online submissions for Remove Duplicates from Sorted List.\\n\\n```\\ntype Node = Option<Box<ListNode>>;\\nimpl Solution {\\n    pub fn delete_duplicates(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n        if head.is_none() { return None }        \\n        let mut curr_node = head.as_mut().unwrap();\\n        \\n        while let Some(node) = curr_node.next.as_mut() { \\n            if curr_node.val == node.val { \\n                curr_node.next = node.next.take()\\n            } else  { \\n                curr_node = curr_node.next.as_mut().unwrap()\\n            }\\n        }\\n        head \\n    }\\n}\\n```\\n\\n#### TypeScript \\nRuntime: 121 ms, faster than 31.50% of TypeScript online submissions for Remove Duplicates from Sorted List.\\nMemory Usage: 45 MB, less than 67.89% of TypeScript online submissions for Remove Duplicates from Sorted List.\\n```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n    if (!head) { return null; }\\n    \\n    let curr_node: ListNode = head;\\n    while (curr_node.next) { \\n        if (curr_node.val === curr_node.next.val) { \\n            curr_node.next = curr_node.next.next\\n        } else { \\n            curr_node = curr_node.next\\n        }\\n    }\\n    return head \\n};\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\ntype Node = Option<Box<ListNode>>;\\nimpl Solution {\\n    pub fn delete_duplicates(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n        if head.is_none() { return None }        \\n        let mut curr_node = head.as_mut().unwrap();\\n        \\n        while let Some(node) = curr_node.next.as_mut() { \\n            if curr_node.val == node.val { \\n                curr_node.next = node.next.take()\\n            } else  { \\n                curr_node = curr_node.next.as_mut().unwrap()\\n            }\\n        }\\n        head \\n    }\\n}\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n    if (!head) { return null; }\\n    \\n    let curr_node: ListNode = head;\\n    while (curr_node.next) { \\n        if (curr_node.val === curr_node.next.val) { \\n            curr_node.next = curr_node.next.next\\n        } else { \\n            curr_node = curr_node.next\\n        }\\n    }\\n    return head \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1877373,
                "title": "simple-typescript-o-n-with-one-pointer",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n    let p = head;\\n    while(p && p.next) {\\n        if(p.val === p.next.val) {\\n            p.next = p.next.next;\\n        } else {\\n            p = p.next;\\n        }\\n    } \\n    return head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\\n    let p = head;\\n    while(p && p.next) {\\n        if(p.val === p.next.val) {\\n            p.next = p.next.next;\\n        } else {\\n            p = p.next;\\n        }\\n    } \\n    return head;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1837194,
                "title": "java-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n\\t\\n\\twhile(current != null && current.next != null){\\n\\t  if(current.val == current.next.val){\\n\\t      current.next = current.next.next;\\n\\t  }else{\\n\\t      current = current.next;\\n\\t  }\\n\\t}\\n\\treturn head;\\n    }\\n}\\n```\\nPerform a dry run for better understanding .\\nHappy coding,\\nUpvote if helped !",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode current = head;\\n\\t\\n\\twhile(current != null && current.next != null){\\n\\t  if(current.val == current.next.val){\\n\\t      current.next = current.next.next;\\n\\t  }else{\\n\\t      current = current.next;\\n\\t  }\\n\\t}\\n\\treturn head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1807742,
                "title": "python-3-faster-than-98-o-n",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if head==None:\\n            return head\\n        ptr = head\\n        while(ptr.next!=None):\\n            if ptr.val==ptr.next.val:\\n                ptr.next = ptr.next.next\\n            else:\\n                ptr = ptr.next\\n        return head\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        if head==None:\\n            return head\\n        ptr = head\\n        while(ptr.next!=None):\\n            if ptr.val==ptr.next.val:\\n                ptr.next = ptr.next.next\\n            else:\\n                ptr = ptr.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1779974,
                "title": "python-simple-and-efficient",
                "content": "```\\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        itr = head\\n        \\n        if itr is None:\\n            return itr\\n        \\n        while itr.next:\\n            if itr.val == itr.next.val:\\n                itr.next = itr.next.next\\n            else:\\n                itr = itr.next\\n        \\n        return head\\n```",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\ndef deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        itr = head\\n        \\n        if itr is None:\\n            return itr\\n        \\n        while itr.next:\\n            if itr.val == itr.next.val:\\n                itr.next = itr.next.next\\n            else:\\n                itr = itr.next\\n        \\n        return head\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1769910,
                "title": "o-n-tc-and-o-1-space-algorithm-iterative",
                "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        ListNode* temp=head;\\n        \\n        while(temp!=NULL && temp->next!=NULL){\\n            if(temp->next->val==temp->val){\\n                temp->next=temp->next->next;\\n                continue;\\n            }\\n            temp=temp->next;            \\n        }\\n        \\n        return head;\\n        \\n    }\\n};\\n\\n",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        ListNode* temp=head;\\n        \\n        while(temp!=NULL && temp->next!=NULL){\\n            if(temp->next->val==temp->val){\\n                temp->next=temp->next->next;\\n                continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1759668,
                "title": "java-solution-with-dry-run",
                "content": "```\\n/*\\n curr\\n  1 --------> 2---------> 3 ----------> 3 ------->null\\n  \\n  curr.val = 1 , curr.next.val =2   1!=2 so move curr to it\\'s next \\n\\n\\n\\n            curr\\n  1 --------> 2---------> 3 ----------> 3 ------->null\\n\\ncurr.val = 2 , curr.next.val =3   2!=3 so move curr to it\\'s next \\n\\n\\n                        curr\\n  1 --------> 2---------> 3     3 ------->null\\n                          |________________|\\n  curr.val = 3 , curr.next.val =3   3==3 so move curr.next to it\\'s next\\'s next\\n  As we found the duplicate element hence breaking the link of duplicate elements\\n\\n\\nNow curr.next is pointing to null it means , we have removed all duplicate elements till curr and now we can return head of list\\n\\nFinal List\\n\\nhead\\n  1----------->2---------->3------>null\\n\\n*/\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\n        if(head == null) return null;\\n        \\n        ListNode curr = head;\\n        \\n        while(curr.next != null)\\n        {\\n            if(curr.val == curr.next.val)\\n            {\\n                curr.next = curr.next.next;\\n            }\\n            else\\n                curr = curr.next;\\n        }\\n        return head;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\n        if(head == null) return null;\\n        \\n        ListNode curr = head;\\n        \\n        while(curr.next != null)\\n        {\\n            if(curr.val == curr.next.val)\\n            {\\n                curr.next = curr.next.next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1664584,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val==curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        curr = head\\n        while curr and curr.next:\\n            if curr.val==curr.next.val:\\n                curr.next = curr.next.next\\n            else:\\n                curr = curr.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1626515,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head==null){\\n            return head;\\n        }\\n        ListNode temp=head;\\n        while(temp.next!=null){\\n            if(temp.val==temp.next.val){\\n                temp.next=temp.next.next;\\n            }else{\\n                temp=temp.next;\\n            }\\n        }\\n        return head;\\n    }\\n}",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head==null){\\n            return head;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1584417,
                "title": "javascript-o-n-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    let curr = head;\\n    while(curr&&curr.next){\\n        if(curr.val === curr.next.val){\\n            curr.next = curr.next.next;\\n        }else{\\n            curr=curr.next;   \\n        }        \\n    }\\n    return head;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar deleteDuplicates = function(head) {\\n    let curr = head;\\n    while(curr&&curr.next){\\n        if(curr.val === curr.next.val){\\n            curr.next = curr.next.next;\\n        }else{\\n            curr=curr.next;   \\n        }        \\n    }\\n    return head;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1495686,
                "title": "c-solution-o-n-t-c",
                "content": "Upvote if you like the solution ->\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* temp=head;\\n        while(temp!=NULL &&temp->next!=NULL){\\n            if(temp->val==temp->next->val){\\n                temp->next=temp->next->next;\\n            }else{\\n                temp=temp->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* temp=head;\\n        while(temp!=NULL &&temp->next!=NULL){\\n            if(temp->val==temp->next->val){\\n                temp->next=temp->next->next;\\n            }else{\\n                temp=temp->next;\\n            }\\n        }\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1494834,
                "title": "short-clean-java-solution",
                "content": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head == null || head.next == null)    return head;\\n        if(head.val==head.next.val) head=deleteDuplicates(head.next);\\n        head.next =deleteDuplicates(head.next);\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        if(head == null || head.next == null)    return head;\\n        if(head.val==head.next.val) head=deleteDuplicates(head.next);\\n        head.next =deleteDuplicates(head.next);\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1450058,
                "title": "c-iterative-and-recursive-solutions",
                "content": "#### Iterative Solution\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tListNode* deleteDuplicates(ListNode* head) {\\n\\t\\t\\tListNode* curr = head;\\n\\t\\t\\tListNode* temp = NULL;\\n\\t\\t\\twhile(curr && curr -> next){\\n\\t\\t\\t\\tif(curr -> val == curr -> next -> val){\\n\\t\\t\\t\\t\\ttemp = curr -> next;\\n\\t\\t\\t\\t\\tcurr -> next = curr -> next -> next;\\n\\t\\t\\t\\t\\tdelete temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tcurr = curr -> next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn head;\\n\\t\\t}\\n\\t};\\n#### Recursive Solution\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tListNode* deleteDuplicates(ListNode* head) {\\n\\t\\t\\tif(!head || !(head -> next)){\\n\\t\\t\\t\\treturn head;\\n\\t\\t\\t}\\n\\t\\t\\tif(head -> val == head -> next -> val){\\n\\t\\t\\t\\tListNode* temp = head -> next;\\n\\t\\t\\t\\thead -> next = head -> next -> next;\\n\\t\\t\\t\\tdelete temp;\\n\\t\\t\\t\\tdeleteDuplicates(head);\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\tdeleteDuplicates(head -> next);\\n\\t\\t\\t}\\n\\t\\t\\treturn head;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tListNode* deleteDuplicates(ListNode* head) {\\n\\t\\t\\tListNode* curr = head;\\n\\t\\t\\tListNode* temp = NULL;\\n\\t\\t\\twhile(curr && curr -> next){\\n\\t\\t\\t\\tif(curr -> val == curr -> next -> val){\\n\\t\\t\\t\\t\\ttemp = curr -> next;\\n\\t\\t\\t\\t\\tcurr -> next = curr -> next -> next;\\n\\t\\t\\t\\t\\tdelete temp;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1435205,
                "title": "elixir-304-ms-50-9-mb-recursion-pattern-matching",
                "content": "```elixir\\ndefmodule Solution do\\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def delete_duplicates(nil), do: nil\\n  def delete_duplicates(%ListNode{val: _, next: nil} = current_node), do: current_node\\n                               \\n  def delete_duplicates(%ListNode{val: val, next: %ListNode{val: val, next: _} = next_node} = _current_node) do \\n    delete_duplicates(next_node)                      \\n  end\\n      \\n  def delete_duplicates(%ListNode{val: _, next: next_node} = current_node) do\\n    %ListNode{current_node | next: delete_duplicates(next_node)}\\n  end\\nend\\n```",
                "solutionTags": [],
                "code": "```elixir\\ndefmodule Solution do\\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def delete_duplicates(nil), do: nil\\n  def delete_duplicates(%ListNode{val: _, next: nil} = current_node), do: current_node\\n                               \\n  def delete_duplicates(%ListNode{val: val, next: %ListNode{val: val, next: _} = next_node} = _current_node) do \\n    delete_duplicates(next_node)                      \\n  end\\n      \\n  def delete_duplicates(%ListNode{val: _, next: next_node} = current_node) do\\n    %ListNode{current_node | next: delete_duplicates(next_node)}\\n  end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1348034,
                "title": "c-code",
                "content": "Runtime: 4 ms, faster than 94.60% of C online submissions for Remove Duplicates from Sorted List.\\nMemory Usage: 6.5 MB, less than 66.03% of C online submissions for Remove Duplicates from Sorted List.\\n\\n```\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    if(head==NULL || head->next == NULL)return head;\\n    struct ListNode *temp=head->next,*lastValidElement=head;\\n    while(temp!=NULL){\\n        if(temp->val != lastValidElement->val){\\n            lastValidElement->next=temp;\\n            lastValidElement=temp;\\n        }\\n        temp=temp->next;\\n    }\\n    lastValidElement->next=temp;\\n    return head;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nstruct ListNode* deleteDuplicates(struct ListNode* head){\\n    if(head==NULL || head->next == NULL)return head;\\n    struct ListNode *temp=head->next,*lastValidElement=head;\\n    while(temp!=NULL){\\n        if(temp->val != lastValidElement->val){\\n            lastValidElement->next=temp;\\n            lastValidElement=temp;\\n        }\\n        temp=temp->next;\\n    }\\n    lastValidElement->next=temp;\\n    return head;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1113182,
                "title": "c-83-remove-duplicates-from-sorted-list",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* node = head; \\n        while (node) \\n            if (node->next && node->val == node->next->val) node->next = node->next->next; \\n            else node = node->next; \\n        return head; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* node = head; \\n        while (node) \\n            if (node->next && node->val == node->next->val) node->next = node->next->next; \\n            else node = node->next; \\n        return head; \\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1568765,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1572757,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1669069,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1571190,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1805936,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1571189,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2059381,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2051834,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2047974,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2046475,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1568765,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1572757,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1669069,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1571190,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1805936,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 1571189,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2059381,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2051834,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2047974,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2046475,
                "content": [
                    {
                        "username": "samiksha_9",
                        "content": "Hi. \\n\\nI\\'m new to python programming. It\\'d be very helpful if someone can explain why do we use Optional?\\n\\n\\'\\'\\'\\n def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n\\'\\'\\'\\n\\n**Here, why do we use Optional[ListNode]? How is it useful? **\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "https://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/\\nCheck here\\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In Python, the [Optional] type is used to represent values that can either be of some type T or None. It is often used as a function parameter or return type to indicate that the function can handle or return None values in addition to values of type T. This can be useful for representing the absence of a value, or to indicate that a function may not always return a value of type T."
                    },
                    {
                        "username": "apollo_codes",
                        "content": "It is so that head can have None value, so Optional provides an option of having its value as None other than than of the mentioned type"
                    },
                    {
                        "username": "hj414",
                        "content": "[@yaroslav-repeta](/yaroslav-repeta) Can you please explain with some example? still didn\\'t understand, i am new to new to python CP. "
                    },
                    {
                        "username": "yaroslav-repeta",
                        "content": "It\\'s just an edge case that you\\'re likely need to handle on interview."
                    },
                    {
                        "username": "anlunx",
                        "content": "Why give a null test case?"
                    },
                    {
                        "username": "arobe91594",
                        "content": "From the constraints given, the number of elements in the input list includes 0. It is actually very important to handle those sorts of edge cases, especially if your function is going to handle user-generated or otherwise unfiltered data. Many vulnerabilities come from developers not considering edge cases."
                    },
                    {
                        "username": "rashmi_jain18",
                        "content": "Hello everyone, I am not able to understand that any changes done to current(temp pointer to the node) changes value in head. Can anyone explain\\n        var current = head;\\n        while (current.next != null) {\\n            if (current.next.val == current.val) {\\n                current.next = current.next.next;\\n            } \\n            else {\\n                current = current.next;\\n            }\\n        }\\n\\nIs it because its reference type? \\n        "
                    },
                    {
                        "username": "Aaditya720",
                        "content": "firstly you have to take a temp variable like `LinstNode current = head` then as you say about the reference, the current var has head reference that help us to traverse through all the list without interrupting the main content "
                    },
                    {
                        "username": "techguyash",
                        "content": "I tried same kind of solution But it didnt work for me too."
                    },
                    {
                        "username": "yixing",
                        "content": "In an interview, will that matter if we forget to delete the duplicate nodes? It appears we do not need to delete here."
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "I Tryed the problem without excluding the duplicate pointers, it wont work, aparently it causes Time Limit Exceed. Anyways, it is important to deal properly with memory allocation. Memory leak can generate serious implications in your application."
                    },
                    {
                        "username": "arobe91594",
                        "content": "It is language-specific and it probably depends on the interviewer. If you are developing a c++ solution, the interviewer would probably care, but not so much in a C# solution. That being said, from the problem description, it is unclear how the input data was allocated, so blindly calling delete on a pointer is not a great option either.\\n\\nYou would need more context to know how to properly handle allocation."
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "**\\u2705Below code is in python same approach for C++ and JAVA\\nPlease UPVOTE if u like the CODE (^_^)**\\n\\n**Time Complexity O(n)**\\n\\n```\\nclass Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        n=head\\n        if head is None:\\n            return None\\n        while n is not None and n.next is not None:\\n            #print(n.val)\\n            if n.val==n.next.val:\\n                n.next=n.next.next\\n            else:\\n                n=n.next\\n        return head\\n   ```"
                    },
                    {
                        "username": "subhajitrajak",
                        "content": "[@AnkitModak](/AnkitModak) because if you don\\'t assign a new node at the beginning, then at the end the head node will point to null or for your case \"none\" in python. That\\'s why you need a dummy head like n"
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Hello, \\nCan you tell me why n = head works, but if I dont assign it to a variable, it doesnt?\\n"
                    },
                    {
                        "username": "Kaltu",
                        "content": "# \\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post **any solutions** in this discussion."
                    },
                    {
                        "username": "kaiwensun",
                        "content": "![0_1472570012478_upload-707c3bc5-254d-4e5b-960f-7e3589b92fed](/uploads/files/1472570018113-upload-707c3bc5-254d-4e5b-960f-7e3589b92fed.png) \\nI bet most C/C++ coders didn't free memory of deleted nodes in their accepted solutions. But Java is still faster than C/C++..."
                    },
                    {
                        "username": "arobe91594",
                        "content": "For C/C++ solutions, there is not enough information in the problem description to assume that the memory for those nodes was dynamically allocated, so trying to free the memory is not necessarily the correct approach. That said, ignoring memory allocation is not a habit which new C/C++ programmers should form."
                    },
                    {
                        "username": "Niraj_Deore",
                        "content": "Does the question guarantee that there will be only 2 similar adjacent elements ??\\n\\nBeacause ,if there might be case like  [1->2->2->2->3] we need to use 2 loops."
                    },
                    {
                        "username": "abrumm",
                        "content": "You would still only need one loop if you are using a while and comparing the current and next value of the linked list. \\nExplanation: [1->2->2->2->3] as my linked list\\ncurrent = head; -> val 1\\nPass 1: Is 1 == 2? No, so move current to current.next which is 2\\nPass 2: Is 2 == 2? Yes, so we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 3: Is 2 == 2? Yes, so again we now we need to remove this. So we move our current.next pointer to the value after that\\nPass 4: Is 2 == 3? No, we move current to current.next\\nThere should be no pass five because current.next will be null since we are at the end of our linked list"
                    },
                    {
                        "username": "Aaryan_0001",
                        "content": "Simple Approach \\n\\nIn this approach we will only use single pointer and iterate over the list while checking for duplicate nodes and deleting them simultanously also.\\n\\n1. Initialize a pointer to head, here I used \\'temp\\' and iterate it over the linked list.\\n\\n2. In each each iteration check if data of next node of temp and data of current node of temp are equal or not , if both data are equal then we have a duplicate value , so update the next node of \\'temp\\' to temp->next->next;\\n\\n3. While we update the next value of temp if duplicate value is found we also need to delete the node where duplicate value exist, NOTE:- It will be better practice if you store the node to be deleted in another variable and then delete this variable instead of directly deleting the node to be delected bcoz it may lead to errors.\\n\\n4. But if the next value of temp is not equal to temp i.e no duplicate value then move the temp to next position , repeat this process and when the loop terminates you will get your list without duplicate values."
                    },
                    {
                        "username": "leetcancode",
                        "content": "Additional tests:\\n[1,1,1]\\n[1,2,2]\\n[1,1,2,3,3]\\n[1,1,2,2,3,3]\\n[1,2,2,3]\\n[1]\\n[]\\n[1,1]"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "I used two pointers and got the answer from my head, it works but i don\\'t know why "
                    }
                ]
            },
            {
                "id": 2018890,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 2009520,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1996312,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1996151,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1994408,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1991819,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1933403,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1930282,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1914738,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1895135,
                "content": [
                    {
                        "username": "user3502Cr",
                        "content": "This was particularly annoying with edge cases. The original definition for ListNode doesnt let you distinguish between geniune 0 starting points and fake ones.\\nI had to redefine ListNode to get the right answer:\\nfunction ListNode(val, next) {\\n    this.val = (val===undefined ? null : val) //0 changed to null\\n    this.next = (next===undefined ? null : next)\\n  }"
                    },
                    {
                        "username": "prashant1000",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n      if (head==null) return head;\\n       ListNode prv= null;\\n       ListNode curr= head;\\n\\n       while(curr!=null){\\n           prv= curr;\\n           curr= curr.next;\\n           if(prv.val == curr.val){\\n               prv.next= curr.next;\\n               curr=curr.next;\\n           }\\n       } \\n\\n       return head;\\n    }\\n}\\n\\nwhat\\'s wrong in this solution??"
                    },
                    {
                        "username": "huynhcam",
                        "content": "I think in line \"curr= curr.next;\"\\nnew \"curr\" must be not null"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me: this challenge encourages the use of recursion and backtracking. It also revolves around the concept of combinations, which is a fundamental principle in combinatorics. "
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem helps reinforce your understanding of linked lists, a fundamental data structure in computer science. It helps you understand how nodes are connected and how changing these connections can modify the list."
                    },
                    {
                        "username": "Socrii13",
                        "content": "Can some please help me out to rectify the code or logical part i have done wrong out here \n\n   set<int>s;\n        ListNode*curr=head;\n        while(curr!=NULL)\n        {\n            s.insert(curr->val);\n            curr=curr->next;\n        }   \n        ListNode*fill=head;\n        for(auto it:s)\n        {\n            int t=it;\n            fill->val=t;\n            fill=fill->next;            \n        } \n        fill=NULL;       \n        return head ;\ntest case : [1,1,2,2,2,3,3,5,5]\noutput I am getting : [1,2,3,5,2]\ndesired [1,2,3,5]"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "You\\'re trying to remove duplicates from a linked list. The logic you used with the set is correct for deduplication. However, the problem arises in the second part of the code where you\\'re trying to update the list with the values from the set. The error in your code is that you\\'re not updating the next pointer of the last node in the new list to NULL, leading to a loop back to the previous values.\\n\\nTo possibly fix the issue, after you\\'ve updated the list from the set values, set the next pointer of the last node to NULL. "
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "The below code would suggest an approach that beats 100%, here we look for the node which is the last among duplicates and put it as next to our prev node with different value. Hope this helps\n```\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* prev = head;\n        ListNode* curr = head;\n        if(head == NULL) return head;\n        while(curr != nullptr){\n            while(curr->next != NULL && curr->next->val == curr->val){\n                curr = curr->next;\n            }\n            prev->next = curr->next;\n            curr = prev->next;\n            // curr = curr->next;\n            prev = prev->next;\n        }\n        \n        return head;\n    }\n};\n```"
                    },
                    {
                        "username": "peacfulJsCyberPsycho",
                        "content": "why run test cases my code was passed  succesful but in case with Submit appear new error \"is not valid value for the expected return type ListNode\"  "
                    },
                    {
                        "username": "ViniMolz",
                        "content": "Could your code be returning like a null value? Or another value your code cannot handle? Also, there are many other tests that leetcode uses when you want to submit your code. I already passed all run test cases but got stuck with the extra test cases when submitting."
                    },
                    {
                        "username": "mridulsaggi",
                        "content": "if(head->next==NULL or head==NULL){\\n             return head;\\n         }\\nwrote this condition still showing error of null member access. why?"
                    },
                    {
                        "username": "MananM5911",
                        "content": "it's because currently HEAD == null, so you cannot check HEAD.NEXT == null. You can simply just remove the first check and you are good to go!"
                    },
                    {
                        "username": "dmallett",
                        "content": "Change your if statement to check if head is null before checking if head->next is null. Right now, when head is null and you go to check head->next you\\'ll get a seg fault. Here if head is null it will never get to the second condition: if (head == NULL || head->next == NULL)."
                    },
                    {
                        "username": "vxlkx",
                        "content": "As far as I know we\\'re supposed to \"delete\" the duplicate nodes by unlinking it from the previous node (at least in python). Are there more effective ways?"
                    },
                    {
                        "username": "staaceyD",
                        "content": "[@dmallett](/dmallett) yes, python do have garbage collector, so just unlinking nodes should be fine"
                    },
                    {
                        "username": "dmallett",
                        "content": "Unlinking it is O(1) since we already have a pointer to the node we\\'re deleting. I think it\\'s the most effective thing. I don\\'t know much about python, does it have garbage collection? At least in my c++ solution I had a separate pointer to the duplicate node and called delete on it."
                    },
                    {
                        "username": "juleshwar",
                        "content": "## Testcases I used to test my code\\n```\\n[1,1,2]\\n[1,1,2,3,3]\\n[1,1,1,1]\\n[1,2,3,4,4]\\n[1]\\n[1,1,1,1,1,2,3,3,3,4,4]\\n[-99,-30,-30,-30,1,1,1,2,2,2,2,2,33,33,33,33]\\n[]\\n```"
                    }
                ]
            },
            {
                "id": 1891177,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1884913,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1806864,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1805944,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1804752,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1800759,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1792814,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1779291,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1771755,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1761387,
                "content": [
                    {
                        "username": "forbiddenlogic",
                        "content": "What to do about the NULL test case? I am unable to submit because it gives runtime error for the not satisfying the NULL test case"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "In that case return nothing (NULL or None or head).\\nIn python for example:\\nif not head: return"
                    },
                    {
                        "username": "gow8004",
                        "content": "Ggg"
                    },
                    {
                        "username": "siddharth_jain",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (head==NULL || head->next == NULL){\\n            return head;\\n        }\\n        ListNode* prev = head;\\n        ListNode* temp = head->next;\\n\\n        while(temp!=NULL){\\n            if(prev->val==temp->val){\\n                temp=temp->next;\\n            }else{\\n                prev->next=temp;\\n                prev=temp;\\n                temp=temp->next;\\n            }\\n\\n        }\\n\\n        prev->next=temp;\\n        prev=temp;\\n\\n        return head;\\n\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Nagadinesh99",
                        "content": "In Python why do we need to store in temp, **temp=head**\\n\\ni have Tried with out using temp, then i am not getting the answer\\n\\nIf i have using the temp i am getting the ans\\n\\nPlease can any one explain to me"
                    },
                    {
                        "username": "tulasi33",
                        "content": "without using temp, we are going to perform actual modifications to the head which means we may lost the starting point of the linked list. So, in order to maintain the actual head as it is and keep on changing the nodes we use another one temp which contains the head as it\\'s initial value.\\n"
                    },
                    {
                        "username": "indexmefastcom",
                        "content": "In Java solution, why we must create a temp variable called current and assign it to head? Can anyone please explain it to me?"
                    },
                    {
                        "username": "aliusaid55",
                        "content": "because we need to read the whole list if we move out the head we could lost the track of previous nodes \\n"
                    },
                    {
                        "username": "TanishaShrivas",
                        "content": "if you dont assign a pointer to the head, you will lose track of the head :)"
                    },
                    {
                        "username": "Anshul_b07",
                        "content": "That\\'s because if you return the variable that you used for iterating over the list, the variable will only contain the Node that you visited last while traversing."
                    },
                    {
                        "username": "yash_3698",
                        "content": "class Solution:\\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \\n        t1=head\\n        while t1.next:\\n            if t1.next.val==t1.val:\\n                t1.next=t1.next.next\\n            else:\\n                t1=t1.val\\n        return head   \\ngetting error int oj has no attriute next"
                    },
                    {
                        "username": "Kiyotaka_7",
                        "content": "What is wrong in my code it isn\\'t working properly....????\\n\\n\\n `struct ListNode* deleteDuplicates(struct ListNode* head){\\n\\n    if(head == NULL || head->next == NULL){\\n        return head;\\n    }else{\\n        struct ListNode* temp =head;\\n\\n        while(!temp->next){\\n            if(temp->val == temp->next->val){\\n                temp->next = temp->next->next;\\n                struct ListNode *del = temp->next;\\n                free(del);\\n            }\\n        }\\n        temp = temp->next;\\n    }\\n    return head;\\n}`\\n"
                    },
                    {
                        "username": "yousefbeiruty61",
                        "content": "Why my code  is not working where is the problem?\\n\\n `class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        \\tMap <Integer,Integer>map=new HashMap<>();\\n\\t\\n\\tListNode curr=head;\\n\\twhile(curr.next!=null){\\n\\tif(map.containsKey(curr.val)){\\n\\t   map.put(curr.val,map.get(curr.val)+1); \\n\\t}else{\\n\\t    map.put(curr.val,1);\\n\\t}\\n\\t curr=curr.next;\\n\\t}\\n\\tcurr=head;\\n\\twhile(curr.next!=null){\\n\\t    if(map.containsKey(curr.val) && map.get(curr.val)>1){\\n\\t        remove(curr);\\n\\t        int value=map.get(curr.val);\\n\\t        value--;\\n\\t        map.put(curr.val,value);\\n\\t    }\\n\\t     curr=curr.next;\\n\\t}\\n\\treturn head;\\n    }\\n\\n    void remove(ListNode del){\\n        ListNode temp=del;\\n        temp.val=del.next.val;\\n        temp.next=temp.next.next;\\n    }\\n}`"
                    },
                    {
                        "username": "DigDug",
                        "content": " I find it hard to think of a good way to create a node and its next counterpart in the same loop. Is that even possible or is there a more efficient approach"
                    },
                    {
                        "username": "mritunjay12",
                        "content": "class Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* curr = head;\\n        while(curr != NULL && curr->next != NULL){\\n            if(curr -> val == curr->next->val){  \\n                // same\\n                ListNode* temp = curr->next;\\n                curr->next = temp->next;\\n                //curr->next == curr->next->next;\\n                delete(temp);\\n\\n            }else{\\n                curr= curr->next;\\n            }\\n        }\\n        return head;\\n    } \\n\\nvery easy and simple code in c++ :)"
                    }
                ]
            },
            {
                "id": 1760992,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1757025,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1751092,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1743305,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1742504,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1735792,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1735520,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1735051,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1734963,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1734960,
                "content": [
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-list/solutions/3030179/simple-java-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "The_Finder",
                        "content": "class Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n       ListNode tmp = head;\\n       if( tmp==null || tmp.next==null){\\n         return tmp;\\n       }\\n         \\n         while(head.val==tmp.next.val){\\n             tmp= tmp.next;\\n             if(tmp.next ==null) break;\\n         }\\n         head.next = tmp.next;\\n        \\n         ListNode ans = deleteDuplicates(tmp.next);\\n         return head;\\n      \\n    }\\n}"
                    },
                    {
                        "username": "sarthak2511",
                        "content": "MY C++ solution Using two pointers Remove Duplicates from Sorted List\\n\\nclass Solution {\\npublic:\\nListNode* deleteDuplicates(ListNode* head) {\\nListNode*current=head;\\nif(head==NULL) return NULL;\\nif(head->next==NULL) return head;\\n\\n    ListNode*front= head->next;\\n    while(front!=NULL){\\n        if(current->val==front->val){\\n            current->next= front->next;\\n            front=current->next;\\n        }\\n        else {\\n            front = front->next;\\n            current= current->next;\\n        }\\n    }\\n    return head;\\n}\\n};"
                    },
                    {
                        "username": "priyankakumari6709",
                        "content": "MY C++ SOLUTION\\n\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if(head==NULL)\\n         return head;\\n        ListNode *current=head;\\n        while(current->next!=NULL)\\n        {\\n            if(current->val==current->next->val)\\n            {\\n                current->next=current->next->next;\\n            }\\n            else\\n            {\\n                current=current->next;\\n            }\\n        }\\n        return head;\\n    }\\n};"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "Python Code\\n\\n\\nhttps://siteinvokers.com/remove-duplicates-from-sorted-list-leet-code-83/"
                    },
                    {
                        "username": "appukumar",
                        "content": "We have not used the sorted  hint in this problem Why? please anyone tell me"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Okay so here\\'s my code. \\n\\n`if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(prev.next != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`\\n\\nHowever, when I first tried it in stead of using while(prev.next != null) I wrote while(curr != null) and it gave me an NullPointerException. Does anyone know why? \\n\\nThanks."
                    },
                    {
                        "username": "iamsuteerth",
                        "content": "You are accessing the next element with the declaration of curr = head.next\\nBecause of this, if the LinkedList is having only ONE element, then NullPointerException will be thrown.\\nYou can try a different approach\\nThis involves only ONE temporary variable\\n\\n```java\\nif (head == null) return head;\\nListNode curr = head;\\nwhile ( curr.next != null ) {\\n    if ( curr.next.val == curr.val )\\n        curr.next = curr.next.next;\\n    else\\n        curr = curr.next;\\n}\\nreturn head\\n```"
                    },
                    {
                        "username": "surajha",
                        "content": "i think you should put a condition to check that is head is null or not because i have got the same problem and its is solved when i put \\n\\nif(head==null){\\n                return null;\\n            }\\n\\nthis before the while loop to check the condition , i hope this will solve your problem\\n"
                    },
                    {
                        "username": "isaachin7",
                        "content": "Hey, relatively new to Linked Nodes so I just wanted to ask a question. \\n\\nI got a NullPointerException when I did this. Anyone know why?\\n\\n `if(head == null ) {\\n            return head;\\n        }\\n\\n        ListNode prev = head;\\n        ListNode curr = head.next;\\n        while(curr != null) {\\n            if(prev.next.val == prev.val) {\\n                prev.next = prev.next.next;\\n            } else {\\n                prev = prev.next;\\n                curr = curr.next;\\n            }\\n        }\\n        return head;`"
                    }
                ]
            },
            {
                "id": 1734831,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1728794,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1725799,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1717545,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1716382,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1710022,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1700982,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1694676,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1692816,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            },
            {
                "id": 1686376,
                "content": [
                    {
                        "username": "hari_aravi",
                        "content": "why won\\'t set (head) work as a solution for this problem?"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Because it4s a linked list not a list."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/83_remove_duplicate_from_sorted.cpp"
                    },
                    {
                        "username": "durundeashok",
                        "content": "Simple logic is the \\ntaje a temp node pointing to the head of the linked list \\nthen iterate if val of two consecative node is same then delete one \\nelse iterate to next of node\\nlastly return the head node of the llinked list \\n"
                    },
                    {
                        "username": "joelkalonji",
                        "content": "In the code, the use of Optional[ListNode] as the type for the head parameter and the return value of the deleteDuplicates method indicates that the function can handle ListNode objects as input, as well as None values. This allows the function to work correctly even if the input is None, and it allows the caller of the function to check if the returned value is None to determine if the input list was empty."
                    },
                    {
                        "username": "techguyash",
                        "content": "Why is this not working\\n\\n\\t\\tListNode temp=head;\\n\\t\\tListNode tail=temp.next;\\n\\n\\t\\t\\twhile(temp!=null && tail!=null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(temp.val== tail.val)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttemp.next=tail.next;\\n\\t\\t\\t\\t\\tListNode todel=tail;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t\\ttodel=null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\ttemp=temp.next;\\n\\t\\t\\t\\t\\ttail=tail.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\\n"
                    },
                    {
                        "username": "shashank1719",
                        "content": "You are making question too much complicated, you can solve by using one pointer only."
                    },
                    {
                        "username": "Axnjr",
                        "content": "var deleteDuplicates = function(head) {\\n    var nw = head\\n    while(nw != null){\\n        if(nw.val === nw.next.val){ // cannot read null\\n            nw.next=nw.next.next\\n        }\\n        nw = nw.next\\n    }\\n    console.log(head)\\n};\\n\\nWhat\\'s wrong in it ?"
                    },
                    {
                        "username": "__shalini__",
                        "content": "you have missed to check if nw.next != null .. following should work\\nif(nw.next != null  && nw.val == nw.next.val){ // cannot read null\\nnw.next=nw.next.next;\\n}\\nelse nw = nw.next;\\n}"
                    },
                    {
                        "username": "priyanshujangid221133",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\\n        \\n        //  case\\n        if(head == NULL || head->next == NULL)\\n           return head;\\n        \\n        ListNode* temp = head->next;\\n        ListNode* curr = head;\\n\\n        while(temp!=NULL){\\n            \\n            if(curr->val != temp->val){\\n              curr->next = temp;\\n              curr = curr->next;\\n            }\\n            temp = temp->next;\\n        }\\n        //  last ma current ma temp copy karana padaga\\n        curr->next = temp;\\n        return head;\\n    }"
                    },
                    {
                        "username": "deleted_user",
                        "content": "ListNode* deleteDuplicates(ListNode* head) {\n\n\"jo bhi line comment  hein wo thik hein but leetcode accept nii kar raha \" dont know why.\n\n        //if(head==NULL && head->next==NULL){\n         //   return head;\n      //  }\n        ListNode*curr=head;\n        while(curr!=NULL){\n            if(curr->next!=NULL && curr->val==curr->next->val){\n               // delete(curr->next);\n                curr->next=curr->next->next; \n            }\n            else{\n                curr=curr->next;\n            }\n        }\n        return head;\n    }\n      "
                    },
                    {
                        "username": "kumar_apurv",
                        "content": "Hi\\nI am trying to solve this problem using hashmap\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode temp = new ListNode(0);\\n        ListNode curr = temp;\\n        HashMap<Integer,Integer> map = new HashMap();\\n        int i =0;\\n        while(head!=null)\\n        {\\n            map.put(head.val,map.getOrDefault(head.val,0)+1);\\n            head = head.next;\\n        }\\n        for(int j : map.keySet())\\n        {\\n            temp= map.get(j); // error\\n            temp = temp.next;\\n        }\\n        System.out.println(map);\\n        return curr.next;\\n    }\\n}\\n and I am getting an error.Can anyone tell me mistake I am making\\n"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Line 18: Char 41: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:27:41\\n\\nWhy this error occurs and how to deal with it?\\n"
                    },
                    {
                        "username": "kripasindhu-007",
                        "content": "You are trying to access that node of the list that is NULL. Pleases check the condition till where the loop is running."
                    }
                ]
            }
        ]
    },
    {
        "title": "Customers Who Never Order",
        "question_content": "<p>Table: <code>Customers</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID and name of a customer.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Orders</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\ncustomerId is a foreign key (reference columns) of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find all customers who never order anything.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n<strong>Output:</strong> \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>\n",
        "solutions": [
            {
                "id": 53579,
                "title": "three-accepted-solutions",
                "content": "    SELECT A.Name from Customers A\\n    WHERE NOT EXISTS (SELECT 1 FROM Orders B WHERE A.Id = B.CustomerId)\\n\\n    SELECT A.Name from Customers A\\n    LEFT JOIN Orders B on  a.Id = B.CustomerId\\n    WHERE b.CustomerId is NULL\\n\\n    SELECT A.Name from Customers A\\n    WHERE A.Id NOT IN (SELECT B.CustomerId from Orders B)",
                "solutionTags": [],
                "code": "    SELECT A.Name from Customers A\\n    WHERE NOT EXISTS (SELECT 1 FROM Orders B WHERE A.Id = B.CustomerId)\\n\\n    SELECT A.Name from Customers A\\n    LEFT JOIN Orders B on  a.Id = B.CustomerId\\n    WHERE b.CustomerId is NULL\\n\\n    SELECT A.Name from Customers A\\n    WHERE A.Id NOT IN (SELECT B.CustomerId from Orders B)",
                "codeTag": "Unknown"
            },
            {
                "id": 3202156,
                "title": "to-the-point-solution-without-join",
                "content": "**Please Upvote if you like the approach**\\n![meme.gif](https://assets.leetcode.com/users/images/24e0fc7d-4d6f-4c01-9441-db1d4ef79f3a_1681319548.2573514.gif)\\n\\n# Code\\n```\\nSELECT name as Customers\\nfrom Customers\\nwhere id not in (\\n    select customerId\\n    from Orders\\n);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name as Customers\\nfrom Customers\\nwhere id not in (\\n    select customerId\\n    from Orders\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1308782,
                "title": "faster-easy",
                "content": "***Do upvote if you like the solution to keep me motivated*** \\uD83D\\uDE0A\\u270C\\n```\\nSELECT Name AS Customers\\nFROM CUSTOMERS\\nLEFT JOIN ORDERS\\nON ORDERS.CustomerID = Customers.Id\\nWHERE Orders.CustomerID IS NULL\\n```\\n",
                "solutionTags": [],
                "code": "```\\nSELECT Name AS Customers\\nFROM CUSTOMERS\\nLEFT JOIN ORDERS\\nON ORDERS.CustomerID = Customers.Id\\nWHERE Orders.CustomerID IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2446610,
                "title": "easy-solution",
                "content": "select name as customers from customers\\nwhere id not in (select customerId from orders);\\n\\n#upvote is appreciated.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select name as customers from customers\\nwhere id not in (select customerId from orders);\\n\\n#upvote is appreciated.",
                "codeTag": "Unknown"
            },
            {
                "id": 3848456,
                "title": "easy-pandas-2-methods-with-detailed-explanation",
                "content": "\\n# Code -1\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    # Select the customers whose \\'id\\' is not present in the orders DataFrame\\'s \\'customerId\\' column.\\n    df = customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\n\\n    # Build a DataFrame that only contains the \\'name\\' column and rename it as \\'Customers\\'.\\n    df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n\\n    return df\\n\\n```\\n# Explanation\\n- df = customers[\\\\~customers[\\'id\\'].isin(orders[\\'customerId\\'])]: In this line, we use boolean indexing to filter the rows from the \\'customers\\' DataFrame. The condition \\\\~customers[\\'id\\'].isin(orders[\\'customerId\\']) checks if the \\'id\\' column in the \\'customers\\' DataFrame is not present in the \\'customerId\\' column of the \\'orders\\' DataFrame. The tilde (~) operator negates the result, so we select only the rows where the \\'id\\' is not found in the \\'customerId\\' column of the \\'orders\\' DataFrame.\\n\\n- df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'}): After filtering, we create a new DataFrame df containing only the \\'name\\' column. The [[\\'name\\']] part is used to select only the \\'name\\' column and keep it as a DataFrame. Then, we rename this column from \\'name\\' to \\'Customers\\' using the rename function. The resulting DataFrame df contains the names of customers who never placed any orders, and the column is labeled as \\'Customers\\'.\\n\\n\\nIn summary, the find_customers function takes two DataFrames, \\'customers\\' and \\'orders\\', and filters the \\'customers\\' DataFrame to find customers whose \\'id\\' is not present in the \\'orders\\' DataFrame\\'s \\'customerId\\' column. It then returns a new DataFrame with the names of these customers, labeled as \\'Customers\\'. This function effectively finds customers who never placed any orders.\\n\\n# Code -2\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    # Merge the customers DataFrame with the orders DataFrame using a left join on \\'id\\' and \\'customerId\\'\\n    merged_df = customers.merge(orders, how=\\'left\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    \\n    # Use the \\'customerId\\' column to create a boolean mask for customers who never placed any orders\\n    mask = merged_df[\\'customerId\\'].isna()\\n    \\n    # Filter the rows using the boolean mask\\n    result_df = merged_df[mask]\\n    \\n    # Select only the \\'name\\' column from the result DataFrame and rename it as \\'Customers\\'\\n    result_df = result_df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n    \\n    return result_df\\n```\\n# Approach\\n- We first merge the \\'customers\\' DataFrame with the \\'orders\\' DataFrame using a left join. This allows us to have a DataFrame where each row represents a customer and includes any orders they may have placed.\\n\\n- We create a boolean mask named mask by checking if the \\'customerId\\' column in the merged DataFrame is null. This mask will be True for customers who never placed any orders and False for customers who placed orders.\\n\\n- We use the boolean mask mask to filter the rows from the \\'customers\\' DataFrame, selecting only those customers who never placed any orders.\\n\\n- We select only the \\'name\\' column from the filtered DataFrame and rename it as \\'Customers\\'.\\n\\n- Finally, we return the resulting DataFrame containing the names of customers who never placed any orders, labeled as \\'Customers\\'.\\n\\nThis approach achieves the same goal of finding customers who never placed any orders but uses a different technique involving a left join and boolean masking.\\n![upvote img.jpg](https://assets.leetcode.com/users/images/441daa56-1fa3-4101-a22b-1bbfd544f186_1690899691.199999.jpeg)\\n\\n",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    # Select the customers whose \\'id\\' is not present in the orders DataFrame\\'s \\'customerId\\' column.\\n    df = customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\n\\n    # Build a DataFrame that only contains the \\'name\\' column and rename it as \\'Customers\\'.\\n    df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n\\n    return df\\n\\n```\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    # Merge the customers DataFrame with the orders DataFrame using a left join on \\'id\\' and \\'customerId\\'\\n    merged_df = customers.merge(orders, how=\\'left\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    \\n    # Use the \\'customerId\\' column to create a boolean mask for customers who never placed any orders\\n    mask = merged_df[\\'customerId\\'].isna()\\n    \\n    # Filter the rows using the boolean mask\\n    result_df = merged_df[mask]\\n    \\n    # Select only the \\'name\\' column from the result DataFrame and rename it as \\'Customers\\'\\n    result_df = result_df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n    \\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2943074,
                "title": "left-join",
                "content": "# ***Please Upvote if it helps \\uD83E\\uDEF0***\\n# Code :-\\n```\\n# Write your MySQL query statement below\\nSELECT c.name AS Customers \\nFROM Customers c LEFT JOIN Orders o \\nON c.id=o.customerId \\nWHERE o.customerId IS NULL;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT c.name AS Customers \\nFROM Customers c LEFT JOIN Orders o \\nON c.id=o.customerId \\nWHERE o.customerId IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2620211,
                "title": "easy-joins-with-attached-document",
                "content": "\\n```\\nSELECT Customers.name AS Customers\\nFROM Customers\\nLEFT JOIN Orders\\nON Customers.id = Orders.customerId\\nWHERE Orders.customerId is null;\\n```\\n![image](https://assets.leetcode.com/users/images/430549df-fb7e-456e-af18-8f68072bdd3e_1664069167.1572943.png)\\n",
                "solutionTags": [],
                "code": "```\\nSELECT Customers.name AS Customers\\nFROM Customers\\nLEFT JOIN Orders\\nON Customers.id = Orders.customerId\\nWHERE Orders.customerId is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3349089,
                "title": "fundamental-approach-sql-select",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name AS \"Customers\"\\nFROM Customers WHERE Customers.id not in (\\n    SELECT customerId FROM Orders\\n);\\n// Please consider upvoting, if the solution helped! Thank you :)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name AS \"Customers\"\\nFROM Customers WHERE Customers.id not in (\\n    SELECT customerId FROM Orders\\n);\\n// Please consider upvoting, if the solution helped! Thank you :)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 141590,
                "title": "mysql-solution-using-not-in",
                "content": "```\\nselect name as Customers from customers where id not in (select customerid from orders);\\n```",
                "solutionTags": [],
                "code": "```\\nselect name as Customers from customers where id not in (select customerid from orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53576,
                "title": "a-solution-using-not-in-and-another-one-using-left-join",
                "content": "605 ms\\n\\n    SELECT Name as Customers from Customers\\n    LEFT JOIN Orders\\n    ON Customers.Id = Orders.CustomerId\\n    WHERE Orders.CustomerId IS NULL;\\n\\n675ms\\n\\n    SELECT Name as Customers from Customers\\n    WHERE Id NOT IN (SELECT CustomerId from Orders);",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "605 ms\\n\\n    SELECT Name as Customers from Customers\\n    LEFT JOIN Orders\\n    ON Customers.Id = Orders.CustomerId\\n    WHERE Orders.CustomerId IS NULL;\\n\\n675ms\\n\\n    SELECT Name as Customers from Customers\\n    WHERE Id NOT IN (SELECT CustomerId from Orders);",
                "codeTag": "Unknown"
            },
            {
                "id": 1924410,
                "title": "easy-and-straight-forward-sql-query",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT Customers.name AS Customers \\nFROM Customers\\nWHERE Customers.id NOT IN \\n(\\n   SELECT customerId from Orders\\n);\\n```\\n**Please don\\'t forget to upvote me.**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Customers.name AS Customers \\nFROM Customers\\nWHERE Customers.id NOT IN \\n(\\n   SELECT customerId from Orders\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2386051,
                "title": "2-different-solutions-easy-to-understand",
                "content": "```\\n# 1.\\nSELECT c.name  as Customers\\nFROM Customers c LEFT JOIN Orders o\\nON c.id = o.customerId\\nwhere o.customerId is NULL;\\n\\n# 2.\\nSELECT c.name as Customers from Customers c\\nWHERE c.id not in (select o.customerId from Orders o);\\n```\\n**If you have any doubts, feel free to ask...\\nIf you understand the concept. Don\\'t Forget to upvote \\uD83D\\uDE0A\\nand PLEASE DO UPVOTE**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# 1.\\nSELECT c.name  as Customers\\nFROM Customers c LEFT JOIN Orders o\\nON c.id = o.customerId\\nwhere o.customerId is NULL;\\n\\n# 2.\\nSELECT c.name as Customers from Customers c\\nWHERE c.id not in (select o.customerId from Orders o);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2748434,
                "title": "2-ways-exists-nested-mysql",
                "content": "## Here are two ways of solving the query:\\n\\n1. Using EXISTS:\\n\\n```MySQL []\\nSELECT name AS Customers FROM Customers A WHERE NOT EXISTS (SELECT * FROM Orders B WHERE A.id = B.customerId);\\n```\\n\\n2. Using nested Query\\n\\n```MySQL []\\nSELECT name as customers FROM Customers WHERE id not in (SELECT customerId FROM Orders);\\n```\\n\\n`Another Note:`\\n`\\nRemember, mySQL is case-insensitive. Typing the table names in lower case or all upper case makes on difference. Same goes for data contents within the table.\\n`\\n\\n*Leave a upvote if it helped!*\\n\\nConnect on LinkedIn: https://www.linkedin.com/in/gourab-roy-824652172/",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```MySQL []\\nSELECT name AS Customers FROM Customers A WHERE NOT EXISTS (SELECT * FROM Orders B WHERE A.id = B.customerId);\\n```\n```MySQL []\\nSELECT name as customers FROM Customers WHERE id not in (SELECT customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3844182,
                "title": "5-easy-solutions-mysql-pandas-beats-100-in-both-time-and-space",
                "content": "# Code\\n```\\n# Solution 1\\nSELECT name as Customers\\nFROM Customers C\\nWHERE C.Id NOT IN (SELECT O.CustomerId from Orders O)\\n\\n# Solution 2\\nSELECT name as Customers\\nFROM Customers A LEFT JOIN Orders B on  A.Id = B.CustomerId\\nWHERE B.CustomerId is NULL\\n\\n# Solution 3\\nSELECT name as Customers\\nFROM Customers A\\nWHERE NOT EXISTS (SELECT name FROM Orders B WHERE A.Id = B.CustomerId)\\n```\\n```\\n# Solution 1\\nimport pandas as pd\\n\\ndef customers_who_never_order(customers: pd.DataFrame, orders: pd.DataFrame)->pd.DataFrame:\\n    # Select the rows which `id` is not present in orders[\\'customerId\\'].\\n    df = customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\n\\n    # Build a dataframe that only contains the column `name` \\n    # and rename the column `name` as `Customers`.\\n    df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n    return df\\n\\n# Solution 2\\nimport pandas as pd\\n\\ndef customers_who_never_order(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = customers.merge(orders, left_on=\\'id\\', right_on=\\'customerId\\', how=\\'left\\')\\n    df = df[df[\\'customerId\\'].isna()]\\n    df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n    return df\\n```\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Solution 1\\nSELECT name as Customers\\nFROM Customers C\\nWHERE C.Id NOT IN (SELECT O.CustomerId from Orders O)\\n\\n# Solution 2\\nSELECT name as Customers\\nFROM Customers A LEFT JOIN Orders B on  A.Id = B.CustomerId\\nWHERE B.CustomerId is NULL\\n\\n# Solution 3\\nSELECT name as Customers\\nFROM Customers A\\nWHERE NOT EXISTS (SELECT name FROM Orders B WHERE A.Id = B.CustomerId)\\n```\n```\\n# Solution 1\\nimport pandas as pd\\n\\ndef customers_who_never_order(customers: pd.DataFrame, orders: pd.DataFrame)->pd.DataFrame:\\n    # Select the rows which `id` is not present in orders[\\'customerId\\'].\\n    df = customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\n\\n    # Build a dataframe that only contains the column `name` \\n    # and rename the column `name` as `Customers`.\\n    df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n    return df\\n\\n# Solution 2\\nimport pandas as pd\\n\\ndef customers_who_never_order(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = customers.merge(orders, left_on=\\'id\\', right_on=\\'customerId\\', how=\\'left\\')\\n    df = df[df[\\'customerId\\'].isna()]\\n    df = df[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 53586,
                "title": "here-are-3-solutions",
                "content": "select c.Name from Customers c\\nwhere c.Id not in (select customerId from Orders)\\n\\nselect c.Name from Customers c\\nwhere (select count(*) from Orders o where o.customerId=c.id)=0 \\n\\nselect c.Name from Customers c\\nwhere not exists (select * from Orders o where o.customerId=c.id)",
                "solutionTags": [],
                "code": "select c.Name from Customers c\\nwhere c.Id not in (select customerId from Orders)\\n\\nselect c.Name from Customers c\\nwhere (select count(*) from Orders o where o.customerId=c.id)=0 \\n\\nselect c.Name from Customers c\\nwhere not exists (select * from Orders o where o.customerId=c.id)",
                "codeTag": "Unknown"
            },
            {
                "id": 2686691,
                "title": "easy-fast-142ms",
                "content": "**Upvote if you like the solution**\\u270C\\uFE0F\\n```\\nselect c.name as Customers \\nfrom Customers c\\nwhere c.id not in (select customerId from Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect c.name as Customers \\nfrom Customers c\\nwhere c.id not in (select customerId from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 802374,
                "title": "sql-simplest-solution",
                "content": "```\\nSELECT Name as Customers\\nFROM Customers\\nWHERE Id not in (SELECT CustomerId \\n                 FROM Orders)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT Name as Customers\\nFROM Customers\\nWHERE Id not in (SELECT CustomerId \\n                 FROM Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3423831,
                "title": "awesome-code-sql",
                "content": "\\n# Code\\n```\\nselect name as Customers from customers where id not in\\n(\\n    select customerId from orders \\n)\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers from customers where id not in\\n(\\n    select customerId from orders \\n)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3827162,
                "title": "100-easy-fast-clean-solution",
                "content": "# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT name AS Customers FROM Customers WHERE \\n\\nCustomers.id NOT IN (SELECT customerId FROM Orders)\\n```\\nIF THIS WILL BE HELPFUL TO YOU,PLEASE UPVOTE !\\n\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/311f5496-d288-43d3-9257-702d7c37edb3_1690525082.0344095.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT name AS Customers FROM Customers WHERE \\n\\nCustomers.id NOT IN (SELECT customerId FROM Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3214813,
                "title": "183-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nTo find the customers who never ordered anything, we can use a LEFT JOIN between the Customers table and the Orders table. This will give us all customers with NULL orders. Here is the SQL query for this problem:\\n\\n```\\nSELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o ON c.id = o.customerId\\nWHERE o.id IS NULL;\\n\\n```\\nThis query selects the name column from the Customers table and left joins it with the Orders table on the customer ID. Then, it uses a WHERE clause to filter out the customers who have placed an order by checking for NULL values in the Orders table. Finally, the result is sorted by the customer name.\\n\\nThe output of the given input will be:\\n```\\n+-----------+\\n| Customers |\\n+-----------+\\n| Henry     |\\n| Max       |\\n+-----------+\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o ON c.id = o.customerId\\nWHERE o.id IS NULL;\\n\\n```\n```\\n+-----------+\\n| Customers |\\n+-----------+\\n| Henry     |\\n| Max       |\\n+-----------+\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1987574,
                "title": "2-simple-sql-solutions",
                "content": "Solution 1.\\nMore concise but less common.\\n```\\nSELECT name AS Customers FROM Customers \\nWHERE id not in (SELECT customerId FROM Orders)\\n```\\n\\nSolution 2.\\nLonger but more common and readable.\\n```\\nSELECT name AS Customers FROM Customers \\nLEFT JOIN Orders\\n    ON Customers.id = Orders.customerId\\nWHERE Orders.id IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Customers FROM Customers \\nWHERE id not in (SELECT customerId FROM Orders)\\n```\n```\\nSELECT name AS Customers FROM Customers \\nLEFT JOIN Orders\\n    ON Customers.id = Orders.customerId\\nWHERE Orders.id IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538676,
                "title": "simle-accepted-solution",
                "content": "```\\nselect Name as Customers\\nfrom Customers c\\nwhere c.Id not in (select CustomerId  from Orders)\\n```\\n\\n**Like it ? lease upvote !**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect Name as Customers\\nfrom Customers c\\nwhere c.Id not in (select CustomerId  from Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2681035,
                "title": "mysql-solution",
                "content": "\\nSelection of only those people whose id does not fall into the selection of people who made orders.\\n```\\nSELECT name AS \\'Customers\\'\\n    FROM Customers\\n    WHERE id NOT IN (\\n        SELECT C.id\\n        FROM Customers AS C INNER JOIN Orders AS O\\n        ON O.customerId = C.id\\n    )\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS \\'Customers\\'\\n    FROM Customers\\n    WHERE id NOT IN (\\n        SELECT C.id\\n        FROM Customers AS C INNER JOIN Orders AS O\\n        ON O.customerId = C.id\\n    )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2555890,
                "title": "easiest-solution-mysql-beginners",
                "content": "```\\nSELECT name as Customers FROM Customers\\nWHERE Customers.ID NOT IN (SELECT customerID FROM Orders);\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT name as Customers FROM Customers\\nWHERE Customers.ID NOT IN (SELECT customerID FROM Orders);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2539636,
                "title": "mysql-easy-in-solution",
                "content": "```\\nselect name as Customers from customers where id not in\\n(select customerId from orders)\\n```",
                "solutionTags": [],
                "code": "```\\nselect name as Customers from customers where id not in\\n(select customerId from orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2421034,
                "title": "mysql-2-different-approach-one-line-solution-beginner-level-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome**.*\\n______________________\\n\\u2705 **MySQL Code :**\\n***Approach 1:***\\n```\\nSELECT name AS Customers FROM Customers LEFT JOIN Orders ON (Orders.customerId = Customers.id) WHERE Orders.id IS NULL\\n```\\n__________________________________\\n***Approach 2***:\\n\\n```\\nSELECT A.Name AS Customers FROM Customers A WHERE A.Id NOT IN (SELECT B.CustomerId FROM Orders B)`\\n```\\n______________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Customers FROM Customers LEFT JOIN Orders ON (Orders.customerId = Customers.id) WHERE Orders.id IS NULL\\n```\n```\\nSELECT A.Name AS Customers FROM Customers A WHERE A.Id NOT IN (SELECT B.CustomerId FROM Orders B)`\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2191010,
                "title": "simple-mysql-solution-using-left-join",
                "content": "```\\nSELECT Name AS \\'Customers\\' FROM Customers c LEFT JOIN Orders o ON c.Id = o.CustomerId WHERE o.CustomerId IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Name AS \\'Customers\\' FROM Customers c LEFT JOIN Orders o ON c.Id = o.CustomerId WHERE o.CustomerId IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3060535,
                "title": "mysql-left-join-and-alias-easy-to-understand",
                "content": "![image](https://assets.leetcode.com/users/images/655a025e-5fb4-4805-b327-85635052fcd5_1673896280.457174.png)\\n\\n\\n\\tSELECT c.name AS Customers FROM \\n\\t(customers AS c LEFT JOIN orders AS o ON c.id = o.customerId) WHERE o.id IS NULL;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/655a025e-5fb4-4805-b327-85635052fcd5_1673896280.457174.png)\\n\\n\\n\\tSELECT c.name AS Customers FROM \\n\\t(customers AS c LEFT JOIN orders AS o ON c.id = o.customerId) WHERE o.id IS NULL;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2427793,
                "title": "mysql-not-in-clause-solution",
                "content": "```\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN\\n(\\nSELECT customerId FROM Orders\\n)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN\\n(\\nSELECT customerId FROM Orders\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53596,
                "title": "share-my-first-db-answer",
                "content": "I learn database from  a Standford tutorial.\\n\\nhttps://www.youtube.com/watch?v=D-k-h0GuFmE&list=PL6hGtHedy2Z4EkgY76QOcueU8lAC4o6c3\\n\\n    select Name as Customers\\n    from Customers\\n    where Id not in\\n    (select CustomerId as Id from Orders);",
                "solutionTags": [],
                "code": "I learn database from  a Standford tutorial.\\n\\nhttps://www.youtube.com/watch?v=D-k-h0GuFmE&list=PL6hGtHedy2Z4EkgY76QOcueU8lAC4o6c3\\n\\n    select Name as Customers\\n    from Customers\\n    where Id not in\\n    (select CustomerId as Id from Orders);",
                "codeTag": "Unknown"
            },
            {
                "id": 3525501,
                "title": "mysql-solution-for-customers-who-never-order-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe query aims to find customers who are not present in the Orders table, indicating that they have not placed any orders.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The subquery (Select CustomerId from Orders) retrieves the customer IDs from the Orders table.\\n2. The main query Select Name as Customers from Customers selects the names (Name) of customers from the Customers table.\\n3. The where clause where Id not in (Select CustomerId from Orders) filters the customers based on their IDs, excluding those IDs that are present in the subquery result.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the SQL query depends on the size of the Customers and Orders tables and the efficiency of the database engine\\'s query optimization and execution. Assuming proper indexing and optimization, the time complexity can vary but is typically in the order of O(n log n) or O(n), where n is the number of rows in the Customers table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the SQL query is determined by the memory required to store the result set, which in this case is the names of customers who have not placed any orders. The space complexity is proportional to the number of rows returned by the query.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect Name as Customers from Customers where Id not in \\n(\\n    Select CustomerId from Orders\\n)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect Name as Customers from Customers where Id not in \\n(\\n    Select CustomerId from Orders\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3042783,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect name as \\'Customers\\' from Customers\\nwhere id not in (select customerid from Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as \\'Customers\\' from Customers\\nwhere id not in (select customerid from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2728751,
                "title": "customers-that-dont-order",
                "content": "# Intuition\\nRequires Join\\n\\n# Approach\\nFigure out which join is to be used and then where condition\\n\\n# Complexity\\n- Time complexity:\\nBegginer\\n\\n- Space complexity:\\n4 lines\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect customers.name as Customers from customers\\nleft join orders\\non customers.id = orders.customerid\\nwhere orders.customerid is null;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect customers.name as Customers from customers\\nleft join orders\\non customers.id = orders.customerid\\nwhere orders.customerid is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2229410,
                "title": "two-simple-solutions-nested-query-left-join",
                "content": "```\\n#Nested Query:\\nSELECT name AS Customers FROM Customers \\nWHERE id NOT IN ( SELECT customerId FROM orders );\\n```\\n\\n```\\n# Left Join\\nSELECT c.name AS Customers \\nFROM Customers c LEFT JOIN Orders o\\nON c.id=o.CustomerId\\nWHERE o.id is NULL;\\n```\\n\\n**Please UpVote if it was Helpful :)**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n#Nested Query:\\nSELECT name AS Customers FROM Customers \\nWHERE id NOT IN ( SELECT customerId FROM orders );\\n```\n```\\n# Left Join\\nSELECT c.name AS Customers \\nFROM Customers c LEFT JOIN Orders o\\nON c.id=o.CustomerId\\nWHERE o.id is NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2177956,
                "title": "customers-who-never-order",
                "content": "```\\nSELECT\\n    name as Customers\\nFROM \\n    Customers\\nwhere \\n    id NOT IN (SELECT customerId FROM Orders);\\n```\\nUpvote IF IT Help",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    name as Customers\\nFROM \\n    Customers\\nwhere \\n    id NOT IN (SELECT customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1967367,
                "title": "mysql-using-not-in",
                "content": "```\\nselect c1.name as Customers \\n  from Customers  c1\\n         Where c1.id not in ( select  O.customerId \\n                      from Orders O );\\n\\t\\t\\t\\t\\t  \\n\\t\\tIF Helpful Please Like And Upvoke\\t\\t\\t  \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect c1.name as Customers \\n  from Customers  c1\\n         Where c1.id not in ( select  O.customerId \\n                      from Orders O );\\n\\t\\t\\t\\t\\t  \\n\\t\\tIF Helpful Please Like And Upvoke\\t\\t\\t  \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1803873,
                "title": "best-easiest-simplest-mysql-using-subquery-183-customers-who-never-order",
                "content": "```\\nselect name as Customers from customers where id NOT IN \\n(select customerId from Orders);\\n\\n\\n#pls upvote if you find solution easy to understand..Thanks..!!\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers from customers where id NOT IN \\n(select customerId from Orders);\\n\\n\\n#pls upvote if you find solution easy to understand..Thanks..!!\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917184,
                "title": "simple-python-pandas-solution",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    never_o=pd.DataFrame()\\n    never_o[\\'Customers\\']=customers[~customers.id.isin(orders.customerId)][\\'name\\']\\n    return never_o\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    never_o=pd.DataFrame()\\n    never_o[\\'Customers\\']=customers[~customers.id.isin(orders.customerId)][\\'name\\']\\n    return never_o\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3848527,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n^2)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    return customers[\\n        ~customers[\\'id\\'].isin(orders[\\'customerId\\'])\\n    ][[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n```\\n```SQL []\\nSELECT name AS \\'Customers\\'\\n  FROM Customers\\n WHERE id NOT IN (\\n    SELECT customerId\\n      FROM Orders\\n);\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to **upvote** for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Pandas"
                ],
                "code": "```Python []\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    return customers[\\n        ~customers[\\'id\\'].isin(orders[\\'customerId\\'])\\n    ][[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n```\n```SQL []\\nSELECT name AS \\'Customers\\'\\n  FROM Customers\\n WHERE id NOT IN (\\n    SELECT customerId\\n      FROM Orders\\n);\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3486442,
                "title": "used-two-approach-one-using-simple-where-and-one-using-join",
                "content": "# upvote if you like the solution\\n\\n# best approach\\nselect name as customers from customers\\nwhere id not in (select customerId from orders);\\n\\n# using joins\\nSELECT customers.name AS customers\\nFROM customers\\nLEFT JOIN orders\\nON customers.id = orders.customerId\\nWHERE orders.customerId IS NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# upvote if you like the solution\\n\\n# best approach\\nselect name as customers from customers\\nwhere id not in (select customerId from orders);\\n\\n# using joins\\nSELECT customers.name AS customers\\nFROM customers\\nLEFT JOIN orders\\nON customers.id = orders.customerId\\nWHERE orders.customerId IS NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2479390,
                "title": "mysql-2-solutions-very-easy-nested-query-join",
                "content": "\\uD83D\\uDE4B\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F Hello, here are my solutions to the problem.\\nPlease upvote to motivate me post future solutions. HAPPY CODING \\u2764\\uFE0F\\nAny suggestions and improvements are always welcome.\\nSolution 1: Join, long, not good \\uD83E\\uDD26\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n\\u2705 Runtime: 591 ms, faster than 50.77% of MySQL.\\n\\n```\\nselect name as Customers\\nfrom Customers a\\nleft join Orders b\\non a.id = b.customerId\\nwhere customerId is null\\n```\\nSolution 2: Nested query \\uD83C\\uDFAF\\n\\u2705 Runtime: 495 ms, faster than 69.10% of MySQL.\\n\\n```\\nselect name as Customers \\nfrom Customers \\nwhere id not in (select customerId from Orders)\\n```\\nIf you like the solutions, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers\\nfrom Customers a\\nleft join Orders b\\non a.id = b.customerId\\nwhere customerId is null\\n```\n```\\nselect name as Customers \\nfrom Customers \\nwhere id not in (select customerId from Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2282032,
                "title": "3-simple-solutions-1-not-in-2-not-exists-3-left-join",
                "content": "**1. Using NOT IN**\\nselect name as Customers from customers c\\nwhere c.id not in (select customerId from orders)\\n\\n**2. Using NOT EXISTS**\\nselect name as Customers from customers c\\nwhere not exists (select 1 from orders o where c.id = o.customerId)\\n\\n**3. LEFT JOIN**\\nselect name as Customers from customers c\\nleft join orders o\\non c.id = o.customerId\\nwhere o.customerId is null",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**1. Using NOT IN**\\nselect name as Customers from customers c\\nwhere c.id not in (select customerId from orders)\\n\\n**2. Using NOT EXISTS**\\nselect name as Customers from customers c\\nwhere not exists (select 1 from orders o where c.id = o.customerId)\\n\\n**3. LEFT JOIN**\\nselect name as Customers from customers c\\nleft join orders o\\non c.id = o.customerId\\nwhere o.customerId is null",
                "codeTag": "Unknown"
            },
            {
                "id": 2273370,
                "title": "mysql-beginner-friendly-fully-explained-sub-query-concept",
                "content": "**Please Upvote If you like it :)**\\nConcept Of the Day - **Subquery**\\n* The subquery can be nested inside a SELECT, INSERT, UPDATE, or DELETE statement or inside another subquery.\\n* A subquery is usually added within the WHERE Clause of another SQL SELECT statement.\\n\\nHere Subquery is present in where clause\\n### Solution\\n```\\nselect name as Customers from Customers where id not in (select customerId from Orders)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers from Customers where id not in (select customerId from Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2149872,
                "title": "a-solution-using-not-in-easy-to-understand",
                "content": "\\tSELECT Name as Customers from Customers\\n\\tWHERE id NOT IN(SELECT customerId from Orders)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\tSELECT Name as Customers from Customers\\n\\tWHERE id NOT IN(SELECT customerId from Orders)",
                "codeTag": "Unknown"
            },
            {
                "id": 1960828,
                "title": "mysql-solution",
                "content": "# Solution\\n```\\nselect name as Customers\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id\\nwhere Orders.id is null\\n```\\nBy using **left join** we can see customer, who has never make orders. Orders.id will be **null**, because **join** will not find rows for them in Orders.\\nIf you find this **solution** and **explanation** helpful, please **upvote** it for others people.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id\\nwhere Orders.id is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1606227,
                "title": "easy-to-understand",
                "content": "```\\nselect c.name as \\'Customers\\'\\nfrom Customers as c\\nwhere (select count(*) from Orders where Orders.customerID=c.id)=0;",
                "solutionTags": [],
                "code": "```\\nselect c.name as \\'Customers\\'\\nfrom Customers as c\\nwhere (select count(*) from Orders where Orders.customerID=c.id)=0;",
                "codeTag": "Unknown"
            },
            {
                "id": 1179274,
                "title": "several-ways-to-solve-this-type-of-questions-in-a-not-in-b",
                "content": "Genrally this type of questions contain more than one table (sometimes one table but comparing among fields), and the goal is to find records in table A but not in table B. More complicated questions are looking for records in table A but not in table B with certian critera (e.g. range of time, overlaps, flags, distinct values).\\n\\nSimilar questions: 1084, 1581, 1809, 577, 1350, 1607, 607\\n\\nSimilar type of questions: \\nhttps://leetcode.com/problems/customers-who-bought-products-a-and-b-but-not-c/discuss/1220534/four-solutions-for-this-type-of-questions-in-a-and-b-andnot-c\\n\\nSolution 1: Use left outer join\\n```\\nSELECT customers.Name as Customers\\n  FROM customers\\n  LEFT JOIN Orders\\n    ON customers.id = Orders.CustomerId\\n WHERE customerId IS NULL\\n```\\n\\nSolution 2: Put records not needed in a subquery. Then select records from table A WHERE the records are NOT IN/EXIST in the records selected by the subquery. \\n```\\nSELECT customers.Name as Customers\\n  FROM customers\\n WHERE ID not in (SELECT CustomerId FROM Orders)\\n```\\nSolution 3: Create a flag using SUM(CASE WHEN). And select all records with the corresponding flag. \\n```\\nSELECT Name AS Customers\\n  FROM(\\nSelect Customers.id, Name, SUM(CASE WHEN Customers.id = Orders.Customerid THEN 1 ELSE 0 END) AS score\\n  FROM Customers\\n  LEFT JOIN Orders\\n    ON Customers.id = Orders.CustomerId\\n GROUP BY 1,2)a\\n WHERE a.score = 0\\n ```\\n\\nSolution 4: If there\\'s a range or there are multiple records for one id, using GROUP BY + HAVING (criteria) to evaluate the aggregated results. This solution does not really apply to this question..",
                "solutionTags": [],
                "code": "```\\nSELECT customers.Name as Customers\\n  FROM customers\\n  LEFT JOIN Orders\\n    ON customers.id = Orders.CustomerId\\n WHERE customerId IS NULL\\n```\n```\\nSELECT customers.Name as Customers\\n  FROM customers\\n WHERE ID not in (SELECT CustomerId FROM Orders)\\n```\n```\\nSELECT Name AS Customers\\n  FROM(\\nSelect Customers.id, Name, SUM(CASE WHEN Customers.id = Orders.Customerid THEN 1 ELSE 0 END) AS score\\n  FROM Customers\\n  LEFT JOIN Orders\\n    ON Customers.id = Orders.CustomerId\\n GROUP BY 1,2)a\\n WHERE a.score = 0\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 964998,
                "title": "left-join-simple",
                "content": "select customers.name as customers from customers left join orders on Customers.Id=Orders.CustomerId\\nwhere orders.Id is null",
                "solutionTags": [],
                "code": "select customers.name as customers from customers left join orders on Customers.Id=Orders.CustomerId\\nwhere orders.Id is null",
                "codeTag": "Unknown"
            },
            {
                "id": 839191,
                "title": "mysql-simple-solution-beats-100-in-less-space-self-explanatory",
                "content": "```\\n# Write your MySQL query statement below\\nselect\\n    c.Name as \\'Customers\\'\\nfrom Customers c\\nwhere not exists (select o.CustomerId\\nfrom Orders o\\nwhere c.Id = o.CustomerId);\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    c.Name as \\'Customers\\'\\nfrom Customers c\\nwhere not exists (select o.CustomerId\\nfrom Orders o\\nwhere c.Id = o.CustomerId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53604,
                "title": "just-a-solution",
                "content": "    select Name as Customers from Customers where Customers.id not in (select CustomerId from Orders);",
                "solutionTags": [],
                "code": "    select Name as Customers from Customers where Customers.id not in (select CustomerId from Orders);",
                "codeTag": "Unknown"
            },
            {
                "id": 4055429,
                "title": "pandas-sql-easy-customers-who-never-order-easy-explained",
                "content": "First Approach\\n[See the Accepted and Successful Submission Detail](https://leetcode.com/submissions/detail/1051717047/)\\n\\n```\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # Perform a left join between \\'Customers\\' and \\'Orders\\'\\n    merged = customers.merge(orders, left_on=\\'id\\', right_on=\\'customerId\\', how=\\'left\\')\\n\\n    # Filter rows where \\'customerId\\' in \\'Orders\\' is null\\n    null_customerID = merged[merged[\\'customerId\\'].isnull()]\\n    \\n    # # We select the \\'name\\' column and rename the column from \\'name\\' to \\'customers\\' within the selected DataFrame. So, the resulting DataFrame will have a \\'customers\\' column containing the data from the original \\'name\\' column, but it does not change the original DataFrame. \\n    renamed_column = null_customerID[[\\'name\\']].rename(columns={\\'name\\': \\'customers\\'})\\n\\n    return renamed_column\\n```\\n\\nSecond Approach\\n[See the Accepted and Successful Submission Detail](https://leetcode.com/submissions/detail/1051717306/)\\n\\n```\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, extract customer id\\n        customer_id = customers[\\'id\\']\\n    # Then, extract the column named \\'customerId\\' from the orders DataFrame.\\n        orders_made_by_customer = orders[\\'customerId\\']\\n\\n    # Extract names of customers whose IDs are not in the \\'customerId\\' column of \\'Orders\\'\\n        customer_notIn_orderList = customers[~customer_id.isin(orders_made_by_customer)]\\n\\n    # We select the \\'name\\' column and rename the column from \\'name\\' to \\'customers\\' within the selected DataFrame. So, the resulting DataFrame will have a \\'customers\\' column containing the data from the original \\'name\\' column, but it does not change the original DataFrame. \\n        renamed_column = customer_notIn_orderList[[\\'name\\']].rename(columns={\\'name\\': \\'customers\\'})\\n\\n        return renamed_column\\n\\n```\\n\\n**SQL**\\n[See the Accepted and Successful Submission Detail](https://leetcode.com/submissions/detail/1061394161/)\\n\\n```\\nSELECT name AS Customers\\nFROM Customers \\nWHERE Customers.id not in (\\n    SELECT customerId \\n    FROM Orders\\n);\\n```\\n\\n```\\n-- Select the \"name\" column from the \"Customers\" table and rename it as \"Customers\"\\nSELECT name AS Customers\\n\\n-- Specify the source table as \"Customers\" from which data will be retrieved\\nFROM Customers \\n\\n-- Begin a conditional clause to filter rows\\nWHERE Customers.id not in (\\n    -- Subquery: Select the \"customerId\" column from the \"Orders\" table\\n    SELECT customerId \\n    FROM Orders\\n);\\n-- Close the conditional clause\\n```\\n\\n![image](https://assets.leetcode.com/users/images/357e507c-e995-46f4-84b1-d7221c426fda_1695221986.4232628.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # Perform a left join between \\'Customers\\' and \\'Orders\\'\\n    merged = customers.merge(orders, left_on=\\'id\\', right_on=\\'customerId\\', how=\\'left\\')\\n\\n    # Filter rows where \\'customerId\\' in \\'Orders\\' is null\\n    null_customerID = merged[merged[\\'customerId\\'].isnull()]\\n    \\n    # # We select the \\'name\\' column and rename the column from \\'name\\' to \\'customers\\' within the selected DataFrame. So, the resulting DataFrame will have a \\'customers\\' column containing the data from the original \\'name\\' column, but it does not change the original DataFrame. \\n    renamed_column = null_customerID[[\\'name\\']].rename(columns={\\'name\\': \\'customers\\'})\\n\\n    return renamed_column\\n```\n```\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, extract customer id\\n        customer_id = customers[\\'id\\']\\n    # Then, extract the column named \\'customerId\\' from the orders DataFrame.\\n        orders_made_by_customer = orders[\\'customerId\\']\\n\\n    # Extract names of customers whose IDs are not in the \\'customerId\\' column of \\'Orders\\'\\n        customer_notIn_orderList = customers[~customer_id.isin(orders_made_by_customer)]\\n\\n    # We select the \\'name\\' column and rename the column from \\'name\\' to \\'customers\\' within the selected DataFrame. So, the resulting DataFrame will have a \\'customers\\' column containing the data from the original \\'name\\' column, but it does not change the original DataFrame. \\n        renamed_column = customer_notIn_orderList[[\\'name\\']].rename(columns={\\'name\\': \\'customers\\'})\\n\\n        return renamed_column\\n\\n```\n```\\nSELECT name AS Customers\\nFROM Customers \\nWHERE Customers.id not in (\\n    SELECT customerId \\n    FROM Orders\\n);\\n```\n```\\n-- Select the \"name\" column from the \"Customers\" table and rename it as \"Customers\"\\nSELECT name AS Customers\\n\\n-- Specify the source table as \"Customers\" from which data will be retrieved\\nFROM Customers \\n\\n-- Begin a conditional clause to filter rows\\nWHERE Customers.id not in (\\n    -- Subquery: Select the \"customerId\" column from the \"Orders\" table\\n    SELECT customerId \\n    FROM Orders\\n);\\n-- Close the conditional clause\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3813558,
                "title": "an-easy-to-understand-solution",
                "content": "# Code\\n```\\nSELECT name as Customers FROM Customers WHERE id NOT IN (SELECT customerId FROM Orders); \\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT name as Customers FROM Customers WHERE id NOT IN (SELECT customerId FROM Orders); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3272942,
                "title": "sql-server-clean-easy",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT customerId FROM Orders)\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT customerId FROM Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3242502,
                "title": "easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nSELECT name  AS Customers FROM Customers WHERE id not in (SELECT customerId FROM Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nSELECT name  AS Customers FROM Customers WHERE id not in (SELECT customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2781976,
                "title": "easy-mysql-beginner-solution",
                "content": "\\n# Code\\n```\\nselect name as Customers\\nfrom Customers c\\nwhere id not in (select customerId from Orders);\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nselect name as Customers\\nfrom Customers c\\nwhere id not in (select customerId from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2731902,
                "title": "simple-one-line-solution-mysql",
                "content": "SELECT name AS Customers FROM Customers WHERE id NOT IN ( Select customerId From Orders);\\n\\n#header is Customer in the required output ,thus using as in the query.",
                "solutionTags": [],
                "code": "SELECT name AS Customers FROM Customers WHERE id NOT IN ( Select customerId From Orders);\\n\\n#header is Customer in the required output ,thus using as in the query.",
                "codeTag": "Unknown"
            },
            {
                "id": 2664616,
                "title": "mysql-not-in",
                "content": "select name as customers\\nfrom customers\\nwhere id not in (select customerid from orders)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select name as customers\\nfrom customers\\nwhere id not in (select customerid from orders)",
                "codeTag": "Unknown"
            },
            {
                "id": 2624561,
                "title": "you-can-do-it-with-both-sub-query-and-join",
                "content": "/* Write your T-SQL query statement below */\\n\\nselect Customers.name as Customers\\nfrom Customers\\nleft join Orders on Customers.id= Orders.customerId\\nwhere Orders.customerId is null\\n\\n    \\n-- sub query \\nSELECT c.Name as Customers\\nFROM Customers c\\nWHERE c.id not in (\\nSELECT o.CustomerId FROM Orders o\\n);",
                "solutionTags": [],
                "code": "/* Write your T-SQL query statement below */\\n\\nselect Customers.name as Customers\\nfrom Customers\\nleft join Orders on Customers.id= Orders.customerId\\nwhere Orders.customerId is null\\n\\n    \\n-- sub query \\nSELECT c.Name as Customers\\nFROM Customers c\\nWHERE c.id not in (\\nSELECT o.CustomerId FROM Orders o\\n);",
                "codeTag": "Unknown"
            },
            {
                "id": 2523693,
                "title": "simple-solution-with-each-step-explanation",
                "content": "```select name as Customers from Customers where id not in (select customerId from Orders);```\\n\\n\\nname as Customers: We are creating a Alias name for name in Customer Table as Customers.\\n\\n(select customerId from Orders): First Select Customerid from Orders.\\n\\nThen check with Customer Table. So, as My final result is from Customer table. \\n\\n where id not in: This will give the result which ids are not in Orders table.\\n \\n \\n Give it a upvote if you like this solution.\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```select name as Customers from Customers where id not in (select customerId from Orders);```",
                "codeTag": "Unknown"
            },
            {
                "id": 2432908,
                "title": "mssql-one-liner-simple-easy",
                "content": "```\\nselect name as Customers from Customers where id not in (select customerId from Orders);\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect name as Customers from Customers where id not in (select customerId from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2384314,
                "title": "faster-than-99-67-subquery",
                "content": "```\\nselect name as customers from Customers where id not in (select customerId from Orders);\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect name as customers from Customers where id not in (select customerId from Orders);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2348671,
                "title": "easy-2-liner-sql-solution",
                "content": "\\n* SELECT Name AS Customers FROM CUSTOMERS LEFT JOIN ORDERS ON ORDERS.CustomerID = Customers.Id\\n* WHERE Orders.CustomerID IS NULL",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "\\n* SELECT Name AS Customers FROM CUSTOMERS LEFT JOIN ORDERS ON ORDERS.CustomerID = Customers.Id\\n* WHERE Orders.CustomerID IS NULL",
                "codeTag": "Unknown"
            },
            {
                "id": 2088820,
                "title": "sql-left-join",
                "content": "```\\nSELECT NAME AS \\'CUSTOMERS\\'FROM CUSTOMERS LEFT JOIN ORDERS\\nON CUSTOMERS.ID = ORDERS.CUSTOMERID\\nWHERE ORDERS.CUSTOMERID IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT NAME AS \\'CUSTOMERS\\'FROM CUSTOMERS LEFT JOIN ORDERS\\nON CUSTOMERS.ID = ORDERS.CUSTOMERID\\nWHERE ORDERS.CUSTOMERID IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2042319,
                "title": "accepted-solution-for-mysql-clean-simple-code",
                "content": "```\\nSELECT name AS Customers FROM Customers \\nWHERE id NOT IN (SELECT customerId FROM Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Customers FROM Customers \\nWHERE id NOT IN (SELECT customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2001365,
                "title": "simple-sql-query",
                "content": "```\\nselect c.name as Customers\\nfrom Customers c\\nwhere c.id Not In (select customerId from Orders );",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect c.name as Customers\\nfrom Customers c\\nwhere c.id Not In (select customerId from Orders );",
                "codeTag": "Unknown"
            },
            {
                "id": 1965700,
                "title": "183-customers-who-never-order",
                "content": "```\\nselect name as customers from customers AS c\\nleft join orders AS O\\nON c.ID = o.customerID where o.customerId is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as customers from customers AS c\\nleft join orders AS O\\nON c.ID = o.customerID where o.customerId is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1333510,
                "title": "easy-solution-using-sub-query",
                "content": "**Approach**\\n* Since we have the CustomerId column as a foreign key in the Orders table, we need to find all those customers whose Id is not present in CustomerId column of Orders table. \\n* This in turn means that they haven\\'t ordered anything.\\n* So, first we write a sub-query to find all the CustomerIds present in the orders table (Find customers who have ordered something)\\n* Then we filter those Ids from the Customers table which are not a part of the above list of Ids.\\n\\n\\n**QUERY**\\n\\n```\\nselect Name as Customers from Customers C where C.Id not in (select CustomerId from Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect Name as Customers from Customers C where C.Id not in (select CustomerId from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1071249,
                "title": "a-very-intuitive-and-simple-solution-memory-0b-less-than-100-00",
                "content": "```\\nSELECT Name as Customers \\nFROM Customers\\nWHERE id not in (SELECT CustomerId  FROM Orders)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Name as Customers \\nFROM Customers\\nWHERE id not in (SELECT CustomerId  FROM Orders)",
                "codeTag": "Unknown"
            },
            {
                "id": 1025460,
                "title": "mysql-left-join",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT\\n    c.name AS customers\\nFROM\\n    customers AS c\\nLEFT JOIN \\n    orders AS o\\nON o.customerid = c.id\\nWHERE\\n    o.customerid IS NULL\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    c.name AS customers\\nFROM\\n    customers AS c\\nLEFT JOIN \\n    orders AS o\\nON o.customerid = c.id\\nWHERE\\n    o.customerid IS NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53582,
                "title": "a-very-simple-solutions-beats-100-runtime-474-ms",
                "content": "select Name as Customers from Customers where id not in(select CustomerId from Orders);",
                "solutionTags": [],
                "code": "select Name as Customers from Customers where id not in(select CustomerId from Orders);",
                "codeTag": "Unknown"
            },
            {
                "id": 53575,
                "title": "using-distinct-beats-99-of-the-solutions",
                "content": "    select \\n    Name \\n    from \\n    (\\n        select \\n        c.Name, \\n        o.CustomerId\\n        from Customers c \\n        left join (select distinct CustomerId from Orders) o \\n        on c.Id=o.CustomerId \\n    ) t \\n    where t.CustomerId is null\\n    ;",
                "solutionTags": [],
                "code": "    select \\n    Name \\n    from \\n    (\\n        select \\n        c.Name, \\n        o.CustomerId\\n        from Customers c \\n        left join (select distinct CustomerId from Orders) o \\n        on c.Id=o.CustomerId \\n    ) t \\n    where t.CustomerId is null\\n    ;",
                "codeTag": "Unknown"
            },
            {
                "id": 4051574,
                "title": "using-isin-and-negating-it",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n* we just need to select the indicies which are not existing in the orders list\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* First you have to know isin() function:\\n    * it takes a list as input, and loop over the calling object, and for each element, it check if this element exist in the provided list or not. \\n    * if it exist, it set its index to True, else it set it as False.\\n    * Then it return list of binary (or bool True, False or 1,0)\\n* Then you have to know that we do not have isnotin() but to apply its logic, we use isin() then prefix it with **~** telda symbol. \\n* Then you have to know rename() method, which we use it to change the name of the pd.Series column name.\\n* Last function to know is .loc[firstParam, secondParam], it takes two parameters\\n    * firstParam: it should be a list of indicies, where you want to select.\\n    * secondParam: it should be a list of columns, that you want to select from.  \\n* Then now you are ready to solve the problem easily, by just \\n    1. get the customers Id column.\\n    2. then apply on it isin() \\n    3. pass to isin(orders.customerId) to search for all the customers who did an order.\\n    4. then use telda **~** to get the customers who did not order.\\n    5. then pass this list to the first parameter of loc method.\\n    6. then the second parameter should be the **name** column, to retrieve the name of the customers who did not order any thing.\\n    7. then you have to use the rename method to change the column name from name to **Customers**.\\n    8. Then just create a dataframe object, and put inside it this coulmn to match the return type of the functio\\n    9. Then return that dataframe.\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    \\n\\n    return pd.DataFrame(customers.loc[~customers.id.isin(orders.customerId), \\'name\\'].rename(\\'Customers\\'))\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    \\n\\n    return pd.DataFrame(customers.loc[~customers.id.isin(orders.customerId), \\'name\\'].rename(\\'Customers\\'))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3891231,
                "title": "pandas-solution-for-beginners",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n\\n\\tcustomers = customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\n\\n\\tresult = customers[[\\'name\\']].rename(columns = {\\'name\\': \\'Customers\\'})\\n\\n\\treturn result\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n\\n\\tcustomers = customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\n\\n\\tresult = customers[[\\'name\\']].rename(columns = {\\'name\\': \\'Customers\\'})\\n\\n\\treturn result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3864013,
                "title": "pandas-left-anti-join",
                "content": "Left anti join selects only the rows that are present in left dataFrame as per the join-condition.\\n\\nIn other words, \\n`left-anti-join  == (left-join AND  .isna())`\\n\\nHere we are using  the pandas\\' inbuilt `_merge` indicator\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n\\n    joined_df = pd.merge(customers, orders, left_on=\"id\", right_on=\"customerId\", how=\"outer\", indicator=True)\\n    \\n    return joined_df[joined_df[\"_merge\"] == \"left_only\"][[\"name\"]].rename(columns={\"name\": \"Customers\"})\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n\\n    joined_df = pd.merge(customers, orders, left_on=\"id\", right_on=\"customerId\", how=\"outer\", indicator=True)\\n    \\n    return joined_df[joined_df[\"_merge\"] == \"left_only\"][[\"name\"]].rename(columns={\"name\": \"Customers\"})\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3859541,
                "title": "eassy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name as Customers FROM Customers A LEFT JOIN Orders B on  A.Id = B.CustomerId WHERE B.CustomerId is NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name as Customers FROM Customers A LEFT JOIN Orders B on  A.Id = B.CustomerId WHERE B.CustomerId is NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3851559,
                "title": "python-easy-solutions",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    cust_order = orders[\\'customerId\\'].unique()\\n    cust_without_order = customers[~customers[\\'id\\'].isin(cust_order)]\\n    return cust_without_order[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    cust_order = orders[\\'customerId\\'].unique()\\n    cust_without_order = customers[~customers[\\'id\\'].isin(cust_order)]\\n    return cust_without_order[[\\'name\\']].rename(columns={\\'name\\': \\'Customers\\'})\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3851554,
                "title": "1-line",
                "content": "\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    return (customers.loc[~customers[\"id\"].isin(orders[\"customerId\"]), [\"name\"]].rename(columns={\"name\":\"Customers\"}))\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    return (customers.loc[~customers[\"id\"].isin(orders[\"customerId\"]), [\"name\"]].rename(columns={\"name\":\"Customers\"}))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3849621,
                "title": "my-solution",
                "content": "\\n# Code\\n```\\nselect name as Customers \\nfrom Customers c left join Orders o\\non c.id = o.customerId\\nwhere customerId is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers \\nfrom Customers c left join Orders o\\non c.id = o.customerId\\nwhere customerId is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3539806,
                "title": "sub-query-with-easy-understanding-for-beginners",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT name as Customers FROM Customers\\nwhere id NOT IN \\n(Select customerId FROM Orders);\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT name as Customers FROM Customers\\nwhere id NOT IN \\n(Select customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3480948,
                "title": "two-approaches-1-left-join-2-not-in",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect c.Name as customers from customers as c left join \\norders as o on c.id=o.customerid where o.customerid IS NULL;\\n\\n```\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Name as customers from customers where \\nid not in(select customerid from orders);\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect c.Name as customers from customers as c left join \\norders as o on c.id=o.customerid where o.customerid IS NULL;\\n\\n```\n```\\n# Write your MySQL query statement below\\nselect Name as customers from customers where \\nid not in(select customerid from orders);\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3290902,
                "title": "easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT NAME AS CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN\\n(SELECT CUSTOMERID FROM ORDERS);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT NAME AS CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN\\n(SELECT CUSTOMERID FROM ORDERS);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3064622,
                "title": "it-is-very-simple-we-just-have-to-check-the-table-and-write-the-query-acc-to-it",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name as customers from Customers\\nwhere id not in ( select customerId from Orders);\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as customers from Customers\\nwhere id not in ( select customerId from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2890110,
                "title": "mysql-left-join",
                "content": "https://leetcode.com/submissions/detail/855952677/   \\n```\\n# Write your MySQL query statement below\\nselect c.name as \\'Customers\\'\\n\\tfrom Customers as c\\n\\tleft join Orders as o\\n\\ton c.id = o.customerId\\n\\twhere o.customerID is null\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect c.name as \\'Customers\\'\\n\\tfrom Customers as c\\n\\tleft join Orders as o\\n\\ton c.id = o.customerId\\n\\twhere o.customerID is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2835582,
                "title": "easiest-solution-mysql-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name as customers from customers where id not in (select customerId from orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as customers from customers where id not in (select customerId from orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2725901,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name as Customers from Customers where id NOT in(select customerId from Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as Customers from Customers where id NOT in(select customerId from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2665764,
                "title": "mysql-using-join",
                "content": "\\t\\t#MySQL \\n\\t\\tSELECT NAME AS CUSTOMERS FROM CUSTOMERS\\n\\t\\tLEFT JOIN ORDERS\\n\\t\\tON CUSTOMERS.ID=ORDERS.customerId\\n\\t\\tWHERE ORDERS.customerId IS NULL;",
                "solutionTags": [],
                "code": "\\t\\t#MySQL \\n\\t\\tSELECT NAME AS CUSTOMERS FROM CUSTOMERS\\n\\t\\tLEFT JOIN ORDERS\\n\\t\\tON CUSTOMERS.ID=ORDERS.customerId\\n\\t\\tWHERE ORDERS.customerId IS NULL;",
                "codeTag": "Unknown"
            },
            {
                "id": 2618447,
                "title": "2-easy-and-simple-solutions",
                "content": "SELECT customers.name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN\\n(\\n    SELECT Customerid FROM Orders\\n);\\n\\n/*\\nSELECT name AS Customers\\nFROM Customers C\\nLEFT JOIN Orders O\\nON C.Id = O.CustomerId\\nWHERE O.CustomerId IS NULL;\\n*/",
                "solutionTags": [],
                "code": "SELECT customers.name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN\\n(\\n    SELECT Customerid FROM Orders\\n);\\n\\n/*\\nSELECT name AS Customers\\nFROM Customers C\\nLEFT JOIN Orders O\\nON C.Id = O.CustomerId\\nWHERE O.CustomerId IS NULL;\\n*/",
                "codeTag": "Unknown"
            },
            {
                "id": 2497581,
                "title": "multiple-solutions",
                "content": "## Solution 1: `NOT IN` + second `SELECT`\\n\\n```sql\\nSELECT Customers.name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN (SELECT customerId FROM Orders)\\n```\\n\\n## Solution 2: `LEFT JOIN` + `IS NULL`\\n\\n```sql\\nSELECT Customers.name AS Customers\\nFROM Customers\\nLEFT JOIN Orders\\nON Customers.id = Orders.customerId\\nWHERE Orders.customerId IS NULL\\n```",
                "solutionTags": [],
                "code": "```sql\\nSELECT Customers.name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN (SELECT customerId FROM Orders)\\n```\n```sql\\nSELECT Customers.name AS Customers\\nFROM Customers\\nLEFT JOIN Orders\\nON Customers.id = Orders.customerId\\nWHERE Orders.customerId IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2497309,
                "title": "easy-mysql-solution-simple-to-understand",
                "content": "\\tSELECT Name AS Customers\\n\\tFROM CUSTOMERS\\n\\tLEFT JOIN ORDERS\\n\\tON ORDERS.CustomerID = Customers.Id\\n\\tWHERE Orders.CustomerID IS NULL\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\tSELECT Name AS Customers\\n\\tFROM CUSTOMERS\\n\\tLEFT JOIN ORDERS\\n\\tON ORDERS.CustomerID = Customers.Id\\n\\tWHERE Orders.CustomerID IS NULL\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "codeTag": "Unknown"
            },
            {
                "id": 2490927,
                "title": "mysql-solution-easy-understanding-nested-select-query",
                "content": "```\\nselect name as Customers \\nfrom Customers\\nwhere id not in (select customerId from Orders )\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers \\nfrom Customers\\nwhere id not in (select customerId from Orders )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2478520,
                "title": "simple-one-line-solution",
                "content": "```\\nselect name as Customers from Customers where Customers.id not in (select customerId from Orders)\\n```",
                "solutionTags": [],
                "code": "```\\nselect name as Customers from Customers where Customers.id not in (select customerId from Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2415017,
                "title": "mysql-easy-2-lines",
                "content": "```\\nselect name as Customers from customers where  id not in(\\nselect customerId from Orders );",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers from customers where  id not in(\\nselect customerId from Orders );",
                "codeTag": "Unknown"
            },
            {
                "id": 2409713,
                "title": "easy-solution-of-customers-who-never-order-using-left-join",
                "content": "SELECT c.name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id=o.customerId\\nWHERE o.customerID is NULL;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT c.name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id=o.customerId\\nWHERE o.customerID is NULL;",
                "codeTag": "Unknown"
            },
            {
                "id": 2376105,
                "title": "mysql-left-join-good-luck",
                "content": "```\\n# Write your MySQL query statement below\\n\\n/**\\nHERE Two Tables Customers/ Orders\\nid is the primary key of both tables. So JOIN key is Customers.id = Orders.customerId\\nCustomer table indicates the ID and name of a customer.\\nOrders table indicates the ID of an order and the ID of the customer who ordered it.\\n\\nPROBLEM:  report all customers who never order anything\\n\\nSTEPS: \\nLEFT JOIN the Customers table with Orders table\\nand filter the customerId of Orders table is NULL\\n*/\\n\\nSELECT \\n\\n    name AS Customers\\n    \\nFROM Customers c\\nLEFT JOIN Orders o\\nON c.id = o.customerId \\nwhere o.customerId is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n/**\\nHERE Two Tables Customers/ Orders\\nid is the primary key of both tables. So JOIN key is Customers.id = Orders.customerId\\nCustomer table indicates the ID and name of a customer.\\nOrders table indicates the ID of an order and the ID of the customer who ordered it.\\n\\nPROBLEM:  report all customers who never order anything\\n\\nSTEPS: \\nLEFT JOIN the Customers table with Orders table\\nand filter the customerId of Orders table is NULL\\n*/\\n\\nSELECT \\n\\n    name AS Customers\\n    \\nFROM Customers c\\nLEFT JOIN Orders o\\nON c.id = o.customerId \\nwhere o.customerId is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2359101,
                "title": "mssql-solution",
                "content": "SELECT NAME AS CUSTOMERS \\nFROM CUSTOMERS\\nLEFT JOIN ORDERS\\nON CUSTOMERS.ID=ORDERS.CUSTOMERID\\nWHERE ORDERS.ID IS NULL",
                "solutionTags": [],
                "code": "SELECT NAME AS CUSTOMERS \\nFROM CUSTOMERS\\nLEFT JOIN ORDERS\\nON CUSTOMERS.ID=ORDERS.CUSTOMERID\\nWHERE ORDERS.ID IS NULL",
                "codeTag": "Unknown"
            },
            {
                "id": 2358605,
                "title": "simple-solution-using-not-in",
                "content": "```\\nSELECT Customers.name AS Customers \\nFROM Customers\\nWHERE Customers.id NOT IN \\n(\\n   SELECT customerId from Orders\\n);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Customers.name AS Customers \\nFROM Customers\\nWHERE Customers.id NOT IN \\n(\\n   SELECT customerId from Orders\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2325557,
                "title": "simple-nested-subquery",
                "content": "```\\nSelect name as \\'customers\\' from customers where id not in (select customerId from orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect name as \\'customers\\' from customers where id not in (select customerId from orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2321900,
                "title": "mysql-easy-to-understand",
                "content": "```\\nSELECT name AS Customers FROM Customers\\n    WHERE Customers.id \\n        NOT IN (SELECT Orders.customerId FROM Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Customers FROM Customers\\n    WHERE Customers.id \\n        NOT IN (SELECT Orders.customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2232432,
                "title": "faster-tham-98-66-easy-to-understand-without-join",
                "content": "If this post was helpful in any way please upvote this post\\n\\n```\\nselect name as \"Customers\"\\nfrom Customers\\nwhere id not in (\\nselect customerId\\nfrom Orders\\n);\\n```\\n\\n![image](https://assets.leetcode.com/users/images/ff3b7a1e-13df-4743-8bdc-c88ad48fe51f_1656853304.0357132.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as \"Customers\"\\nfrom Customers\\nwhere id not in (\\nselect customerId\\nfrom Orders\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2216505,
                "title": "183-customers-who-never-order",
                "content": "```\\n\\nselect name as Customers from Customers where id not in(select customerId from Orders);\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n\\nselect name as Customers from Customers where id not in(select customerId from Orders);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2198090,
                "title": "top-96-21-solution",
                "content": "Solution of the Day!\\n\\n```\\nselect name \\'Customers\\' from customers \\nwhere id not in (select customerid from orders);\\n```\\nPS:- You can get the same result if you  do have the premium subscription.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name \\'Customers\\' from customers \\nwhere id not in (select customerid from orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2129337,
                "title": "join-notes",
                "content": "Add of two tables\\n1. union (combine two tables by rows and only save repeated rows once) \\n\\n```\\nselect id, col from table 1\\nunion\\nselect id, col from table 2;\\n```\\n\\n2. union all (combine two tables by rows and save repeated rows ) \\n```\\n\\nselect id, col from table 1\\nunion all\\nselect id, col from table 2;\\n```\\n\\n3. inner join\\nJoin is like a cross-product of rows of tables and inner join is selcting the same id\\n\\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a **inner join** table2 as b\\non a.col1 = b.col1\\n```\\n\\n4. left join \\n\\nA \\\\ B with the intersection of A and B\\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a left join table2 as b\\non a.col1 = b.col1\\n```\\n\\n(if the value in a.col1 is not in b.col, assume it exists and the value is null in table 2)\\n\\nonly A \\\\ B \\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a left join table2 as b\\non b.col1 is null; \\n```\\n\\nonly select the value in a.col1 and not in b.col\\n\\n5. right join \\n\\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a right join table2 as b\\non a.col1 = b.col1\\n```\\n\\n(if the value in b.col1 is not in a.col, assume it exists and the value is Null in table1)\\n\\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a right join table2 as b\\non a.col1 is null; \\n```\\n\\n6. outer join \\n\\n```\\n SELECT * \\n    -> FROM Table_A\\n    -> LEFT JOIN Table_B \\n    -> ON Table_A.PK = Table_B.PK\\n    -> UNION ALL\\n    -> SELECT *\\n    -> FROM Table_A\\n    -> RIGHT JOIN Table_B \\n    -> ON Table_A.PK = Table_B.PK\\n    -> WHERE Table_A.PK IS NULL;\\n```\\n\\n7. outer join exclude inner join\\n\\n\\tQUESTION 1965\\n```\\n SELECT * \\n    -> FROM Table_A\\n    -> LEFT JOIN Table_B\\n    -> ON Table_A.PK = Table_B.PK\\n    -> WHERE Table_B.PK IS NULL\\n    -> UNION ALL\\n    -> SELECT *\\n    -> FROM Table_A\\n    -> RIGHT JOIN Table_B\\n    -> ON Table_A.PK = Table_B.PK\\n    -> WHERE Table_A.PK IS NULL;\\n```\\n\\nref \\n\\nhttps://zhuanlan.zhihu.com/p/108582096 \\nhttps://zhuanlan.zhihu.com/p/29234064",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect id, col from table 1\\nunion\\nselect id, col from table 2;\\n```\n```\\n\\nselect id, col from table 1\\nunion all\\nselect id, col from table 2;\\n```\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a **inner join** table2 as b\\non a.col1 = b.col1\\n```\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a left join table2 as b\\non a.col1 = b.col1\\n```\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a left join table2 as b\\non b.col1 is null; \\n```\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a right join table2 as b\\non a.col1 = b.col1\\n```\n```\\nselect a.col1, a.col2, b.col2\\nfrom table1 as a right join table2 as b\\non a.col1 is null; \\n```\n```\\n SELECT * \\n    -> FROM Table_A\\n    -> LEFT JOIN Table_B \\n    -> ON Table_A.PK = Table_B.PK\\n    -> UNION ALL\\n    -> SELECT *\\n    -> FROM Table_A\\n    -> RIGHT JOIN Table_B \\n    -> ON Table_A.PK = Table_B.PK\\n    -> WHERE Table_A.PK IS NULL;\\n```\n```\\n SELECT * \\n    -> FROM Table_A\\n    -> LEFT JOIN Table_B\\n    -> ON Table_A.PK = Table_B.PK\\n    -> WHERE Table_B.PK IS NULL\\n    -> UNION ALL\\n    -> SELECT *\\n    -> FROM Table_A\\n    -> RIGHT JOIN Table_B\\n    -> ON Table_A.PK = Table_B.PK\\n    -> WHERE Table_A.PK IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2117698,
                "title": "sql-solution-using-left-join",
                "content": "**Please do upvote if this is useful!**\\n```\\n# Write your MySQL query statement below\\nSelect Customers.name as Customers \\nfrom Customers \\nleft join Orders \\non Orders.customerId=Customers.id \\nwhere Orders.id is null;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**Please do upvote if this is useful!**\\n```\\n# Write your MySQL query statement below\\nSelect Customers.name as Customers \\nfrom Customers \\nleft join Orders \\non Orders.customerId=Customers.id \\nwhere Orders.id is null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2117664,
                "title": "easy-sql-solution",
                "content": "**Please do upvote if you find this solution helpful**\\n\\nFirstly, all the customerId\\'s are going to be fetched from orders table and after that we gonna select all the id \\'s from customers table which are not in the array.\\n```\\nSelect Customers.name as Customers\\nfrom Customers \\nwhere Customers.id NOT IN \\n(\\nSelect customerId\\nfrom Orders\\n);",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**Please do upvote if you find this solution helpful**\\n\\nFirstly, all the customerId\\'s are going to be fetched from orders table and after that we gonna select all the id \\'s from customers table which are not in the array.\\n```\\nSelect Customers.name as Customers\\nfrom Customers \\nwhere Customers.id NOT IN \\n(\\nSelect customerId\\nfrom Orders\\n);",
                "codeTag": "Unknown"
            },
            {
                "id": 2029223,
                "title": "183-customers-who-never-order",
                "content": "```\\nSELECT name AS Customers\\nFROM Customers\\n     LEFT JOIN\\n     Orders\\nON Customers.id = Orders.customerId\\nWHERE Orders.customerId IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Customers\\nFROM Customers\\n     LEFT JOIN\\n     Orders\\nON Customers.id = Orders.customerId\\nWHERE Orders.customerId IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1973606,
                "title": "2-solutions-sol-1-not-in-sol-2-left-join-98-53-time-63-88-time",
                "content": "```\\n# Solution 1: using NOT IN\\nselect name as Customers from customers where id not in (\\n    select customerId from Orders \\n);\\n\\n# Solution 2: using LEFT JOIN\\nselect name as Customers from customers \\nleft join \\norders on customers.id = orders.customerId where orders.customerId is null;\\n```",
                "solutionTags": [],
                "code": "```\\n# Solution 1: using NOT IN\\nselect name as Customers from customers where id not in (\\n    select customerId from Orders \\n);\\n\\n# Solution 2: using LEFT JOIN\\nselect name as Customers from customers \\nleft join \\norders on customers.id = orders.customerId where orders.customerId is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1950753,
                "title": "ms-sql-solution",
                "content": "select customers.name as Customers\\nfrom customers \\nleft join \\norders\\non customers.id= orders.customerid\\nwhere orders.customerid is null",
                "solutionTags": [],
                "code": "select customers.name as Customers\\nfrom customers \\nleft join \\norders\\non customers.id= orders.customerid\\nwhere orders.customerid is null",
                "codeTag": "Unknown"
            },
            {
                "id": 1943532,
                "title": "customers-who-never-order-easy-solution",
                "content": "```\\nSELECT NAME AS \\'CUSTOMERS\\' FROM CUSTOMERS\\nWHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT NAME AS \\'CUSTOMERS\\' FROM CUSTOMERS\\nWHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1878238,
                "title": "two-different-ways-to-solve",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT name AS Customers FROM Customers LEFT JOIN Orders ON (Orders.customerId = Customers.id) WHERE Orders.id IS NULL\\n```\\n\\n\\n\\n```\\n# Write your MySQL query statement below\\nSELECT name AS Customers FROM Customers AS c WHERE c.id NOT IN (SELECT customerId FROM Orders)\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name AS Customers FROM Customers LEFT JOIN Orders ON (Orders.customerId = Customers.id) WHERE Orders.id IS NULL\\n```\n```\\n# Write your MySQL query statement below\\nSELECT name AS Customers FROM Customers AS c WHERE c.id NOT IN (SELECT customerId FROM Orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1857072,
                "title": "simple-solution",
                "content": "```\\nselect name as Customers from Customers where id not in (select distinct customerId from Orders );\\n```",
                "solutionTags": [],
                "code": "```\\nselect name as Customers from Customers where id not in (select distinct customerId from Orders );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1608458,
                "title": "easiest-solution",
                "content": "select name as Customers \\nfrom Customers\\nwhere id  not in (select customerId from orders)",
                "solutionTags": [],
                "code": "select name as Customers \\nfrom Customers\\nwhere id  not in (select customerId from orders)",
                "codeTag": "Unknown"
            },
            {
                "id": 1383500,
                "title": "mysql-faster-96-using-left-join-and-cte",
                "content": "```# Write your MySQL query statement below\\nWITH null_selector AS\\n  (SELECT t.*,\\n          i.CustomerId\\n   FROM Customers AS t\\n   LEFT JOIN Orders AS i ON t.Id = i.CustomerId)\\nSELECT Name AS Customers\\nFROM null_selector\\nWHERE CustomerId IS NULL\\n```",
                "solutionTags": [],
                "code": "```# Write your MySQL query statement below\\nWITH null_selector AS\\n  (SELECT t.*,\\n          i.CustomerId\\n   FROM Customers AS t\\n   LEFT JOIN Orders AS i ON t.Id = i.CustomerId)\\nSELECT Name AS Customers\\nFROM null_selector\\nWHERE CustomerId IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1297239,
                "title": "mysql-3-ways-exists-not-in-left-join",
                "content": "```\\n#select name Customers from Customers where Id not in (select CustomerId from Orders)\\n#select name Customers from Customers left join Orders on Customers.Id=Orders.CustomerId where Orders.Id is null;\\nselect name Customers from Customers where not exists (select CustomerId from Orders where Orders.CustomerId=Customers.Id)\\n```",
                "solutionTags": [],
                "code": "```\\n#select name Customers from Customers where Id not in (select CustomerId from Orders)\\n#select name Customers from Customers left join Orders on Customers.Id=Orders.CustomerId where Orders.Id is null;\\nselect name Customers from Customers where not exists (select CustomerId from Orders where Orders.CustomerId=Customers.Id)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1232712,
                "title": "using-left-join",
                "content": "```\\nSelect c.Name Customers from Customers c left join orders o on(c.id = o.customerId) where o.Customerid is NULL;\\n```",
                "solutionTags": [],
                "code": "```\\nSelect c.Name Customers from Customers c left join orders o on(c.id = o.customerId) where o.Customerid is NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 862014,
                "title": "i-use-left-outer-join",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nSELECT C1.Name AS Customers\\nFROM Customers C1\\nLEFT OUTER JOIN Orders O1 ON C1.Id = O1.CustomerId\\nWHERE O1.CustomerId IS NULL\\nORDER BY Customers ASC\\n```\\n\\u4F7F\\u7528\\u4E86\\u5DE6\\u8FDE\\u63A5\\uFF0C\\u68C0\\u67E5\\u7A7A\\u503C\\uFF0C\\u6700\\u540E\\u5347\\u5E8F\\u6392\\u5217\\n\\u770B\\u4E86\\u7B54\\u6848\\u611F\\u89C9\\u7528existsye\\'ke\\'y",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT C1.Name AS Customers\\nFROM Customers C1\\nLEFT OUTER JOIN Orders O1 ON C1.Id = O1.CustomerId\\nWHERE O1.CustomerId IS NULL\\nORDER BY Customers ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 644024,
                "title": "ms-sql-solution",
                "content": "```\\nSELECT c.Name as Customers\\nFROM Customers c\\n--Bring in all Customer Id\\'s regardless if there is a corrsponding value in the Orders Table\\nLEFT OUTER JOIN Orders o\\nON c.Id = o.CustomerId\\n--Drop all the values where CustomerId is not NULL i.e. those customers had placed an order\\nWHERE CustomerId IS NULL\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT c.Name as Customers\\nFROM Customers c\\n--Bring in all Customer Id\\'s regardless if there is a corrsponding value in the Orders Table\\nLEFT OUTER JOIN Orders o\\nON c.Id = o.CustomerId\\n--Drop all the values where CustomerId is not NULL i.e. those customers had placed an order\\nWHERE CustomerId IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 623598,
                "title": "better-than-88-not-in",
                "content": "select name as customers from customers where id not in (select customerid from orders)\\n",
                "solutionTags": [],
                "code": "select name as customers from customers where id not in (select customerid from orders)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 502668,
                "title": "ms-sql-server-solution-using-not-exists",
                "content": "```\\nSELECT\\n c.Name AS \\'Customers\\'\\nFROM\\n Customers c\\nWHERE\\n NOT EXISTS (SELECT 1 FROM Orders o WHERE o.CustomerId = c.Id)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n c.Name AS \\'Customers\\'\\nFROM\\n Customers c\\nWHERE\\n NOT EXISTS (SELECT 1 FROM Orders o WHERE o.CustomerId = c.Id)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 280442,
                "title": "left-join-faster",
                "content": "SELECT ct.Name as Customers\\nFROM Customers as ct\\nLeft JOIN Orders od\\nOn ct.Id=od.CustomerId\\nwhere od.CustomerId is null\\n",
                "solutionTags": [],
                "code": "SELECT ct.Name as Customers\\nFROM Customers as ct\\nLeft JOIN Orders od\\nOn ct.Id=od.CustomerId\\nwhere od.CustomerId is null\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 53568,
                "title": "my-solution-with-not-exists",
                "content": "SELECT Name AS Customers\\nFROM Customers\\nWHERE NOT EXISTS\\n(SELECT CustomerID FROM Orders WHERE Customers.ID=Orders.CustomerID)",
                "solutionTags": [],
                "code": "SELECT Name AS Customers\\nFROM Customers\\nWHERE NOT EXISTS\\n(SELECT CustomerID FROM Orders WHERE Customers.ID=Orders.CustomerID)",
                "codeTag": "Unknown"
            },
            {
                "id": 53569,
                "title": "here-is-my-one-line-solution",
                "content": "```\\nSELECT Name AS Customers FROM Customers  WHERE Id NOT IN (SELECT CustomerId FROM Orders);\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT Name AS Customers FROM Customers  WHERE Id NOT IN (SELECT CustomerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008183,
                "title": "easy-merge-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere we need to find the cutomers who never ordered anything this can be found by merging both the table using outer join on \\'customerId\\'.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe need to rename the id column from the customer table column as \\'customerId\\' inorder to match with the column names on both tables. It is also required as per the output that we need to rename the name of the \\'names\\' column as \\'Customers\\'.\\n\\nAfter joining both the tables we can check for the Customers with null values in the order id column.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    nOrd = pd.merge(customers.rename(columns = {\\'id\\': \\'customerId\\', \\'name\\': \\'Customers\\'}), orders, on = \\'customerId\\', how = \\'outer\\')\\n    filDf = nOrd[nOrd[\\'id\\'].isnull()]\\n    return filDf[[\\'Customers\\']]\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    nOrd = pd.merge(customers.rename(columns = {\\'id\\': \\'customerId\\', \\'name\\': \\'Customers\\'}), orders, on = \\'customerId\\', how = \\'outer\\')\\n    filDf = nOrd[nOrd[\\'id\\'].isnull()]\\n    return filDf[[\\'Customers\\']]\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3972622,
                "title": "183-customers-who-never-order-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect name as Customers from Customers where id NOT IN (select DISTINCT customerId from Orders )\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as Customers from Customers where id NOT IN (select DISTINCT customerId from Orders )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944249,
                "title": "easy-solution-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT NAME Customers FROM CUSTOMERS WHERE ID NOT IN(SELECT CUSTOMERID FROM ORDERS);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT NAME Customers FROM CUSTOMERS WHERE ID NOT IN(SELECT CUSTOMERID FROM ORDERS);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3864240,
                "title": "easy-to-understand-solution-for-beginners-using-pandas",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nchanged name of id and name column to customerId and Customers to merge the table order to customers on column customerId merge is same as merge in mysql you have to define the merge type whether outer inner left right etc. then filtered replaced null values with 0 to represent that customer have 0 orders using fillna() which is used to fill in your data inplace of null. after that we save our filtered out data in a new dataframe and return customers column from it\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    customers.rename(columns={\"id\":\"customerId\",\"name\":\"Customers\"}, inplace=True)\\n    new_df = pd.merge(customers,orders,how=\"left\", on=\"customerId\")\\n    new_df[\"id\"].fillna(0, inplace=True)\\n    df = new_df[(new_df[\"id\"]==0)]\\n    return df[[\"Customers\"]]\\n```",
                "solutionTags": [
                    "Python3",
                    "Database",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    customers.rename(columns={\"id\":\"customerId\",\"name\":\"Customers\"}, inplace=True)\\n    new_df = pd.merge(customers,orders,how=\"left\", on=\"customerId\")\\n    new_df[\"id\"].fillna(0, inplace=True)\\n    df = new_df[(new_df[\"id\"]==0)]\\n    return df[[\"Customers\"]]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3845188,
                "title": "simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef customers_who_never_order(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df=pd.DataFrame()\\n    x=orders[\\'customerId\\'].unique()\\n    df[\\'Customers\\']=customers[~customers[\\'id\\'].isin(x)][[\\'name\\']]\\n    return df\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef customers_who_never_order(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df=pd.DataFrame()\\n    x=orders[\\'customerId\\'].unique()\\n    df[\\'Customers\\']=customers[~customers[\\'id\\'].isin(x)][[\\'name\\']]\\n    return df\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3829372,
                "title": "customers-who-never-order-mysql-solution-code",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect name as Customers from Customers\\nwhere id not in(select customerId  from Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as Customers from Customers\\nwhere id not in(select customerId  from Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3643402,
                "title": "sql-solution-cant-get-any-easier",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name AS Customers \\nFROM Customers\\nWHERE id NOT IN (SELECT customerId AS id FROM Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name AS Customers \\nFROM Customers\\nWHERE id NOT IN (SELECT customerId AS id FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3613799,
                "title": "fastest-solution-with-two-liner-code",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe goal is to find the customers who never placed an order. To achieve this, we can utilize a LEFT JOIN operation to match customers with orders. If a customer doesn\\'t have a corresponding order (i.e., the customerId is NULL), it means they never placed an order.\\n\\n# Approach\\n1. Select the name column from the Customers table as Customers.\\n1. Perform a LEFT JOIN operation between the Customers and Orders tables using the customerId as the join condition.\\n1. Filter out the rows where the customerId in the Orders table is NULL. These are the customers who never placed an order.\\n1. Return the result, which will be the list of customer names (Customers) who never placed an order.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution depends on the size of the Customers and Orders tables. In the worst case, we may need to compare every customer with every order, resulting in a time complexity of $$O(n*m)$$, where n is the number of customers and m is the number of orders.\\n- Space complexity:\\nThe space complexity of this solution depends on the size of the result set, which is the list of customers who never placed an order. In the worst case, if no customer placed an order, the result set will contain all customers, resulting in a space complexity of $$O(n)$$, where n is the number of customers.\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect c.name as Customers from Customers c\\nleft join Orders o on o.customerId=c.id where o.customerId is null\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/506e2db4-8d2b-4cc9-801d-7ee4961e238d_1686230333.1361094.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect c.name as Customers from Customers c\\nleft join Orders o on o.customerId=c.id where o.customerId is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3218328,
                "title": "mysql-easy-approach",
                "content": "Here is my MYSQL code for this problem.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect c.name as Customers from Customers as c left join Orders as o on c.id=o.customerId where o.id is NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect c.name as Customers from Customers as c left join Orders as o on c.id=o.customerId where o.id is NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2675277,
                "title": "most-intutive-answer",
                "content": "We will simply do left outer join and select those customer\\'s name from customer table that have null values in order table columns (like order id would be null for them).\\n\\nSELECT c.name AS  Customers FROM Customers c LEFT JOIN Orders o ON c.id=o.customerId WHERE o.id IS NULL",
                "solutionTags": [],
                "code": "We will simply do left outer join and select those customer\\'s name from customer table that have null values in order table columns (like order id would be null for them).\\n\\nSELECT c.name AS  Customers FROM Customers c LEFT JOIN Orders o ON c.id=o.customerId WHERE o.id IS NULL",
                "codeTag": "Unknown"
            },
            {
                "id": 2650448,
                "title": "mysql-simple-solution-using-aggregation-100-less-memory",
                "content": "```\\nselect name as Customers\\nfrom Customers left join Orders\\non Customers.id = Orders.customerId\\ngroup by Customers.id\\nhaving count(Orders.id) = 0\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers\\nfrom Customers left join Orders\\non Customers.id = Orders.customerId\\ngroup by Customers.id\\nhaving count(Orders.id) = 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2646304,
                "title": "might-be-the-easiest",
                "content": "```\\nselect name as Customers from Customers  where id not in (select customerid from Orders );\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Customers from Customers  where id not in (select customerid from Orders );\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2642578,
                "title": "mysql-query",
                "content": "`SELECT C.name as Customers from Customers C\\nWhere id NOT IN (SELECT customerId from Orders);`",
                "solutionTags": [],
                "code": "`SELECT C.name as Customers from Customers C\\nWhere id NOT IN (SELECT customerId from Orders);`",
                "codeTag": "Unknown"
            },
            {
                "id": 2623606,
                "title": "inner-join-failed",
                "content": "Could someone please let me know what mistake I have made for the below to fail submission?\\n\\n```SELECT c.name FROM Customers c WHERE c.id NOT IN (SELECT c.id FROM Customers c INNER JOIN Orders o ON c.id = o.customerId);```",
                "solutionTags": [],
                "code": "```SELECT c.name FROM Customers c WHERE c.id NOT IN (SELECT c.id FROM Customers c INNER JOIN Orders o ON c.id = o.customerId);```",
                "codeTag": "Unknown"
            },
            {
                "id": 2599343,
                "title": "simple-subquery-solution-filtering-not-on-the-basis-of-names-of-customers-but-their-ids",
                "content": "SELECT name as Customers from customers\\nWHERE id not in\\n        (SELECT c.id \\n        from Customers c\\n        JOIN orders o\\n        ON c.id= o.customerId\\n        )",
                "solutionTags": [],
                "code": "SELECT name as Customers from customers\\nWHERE id not in\\n        (SELECT c.id \\n        from Customers c\\n        JOIN orders o\\n        ON c.id= o.customerId\\n        )",
                "codeTag": "Unknown"
            },
            {
                "id": 2593979,
                "title": "customers-who-never-order",
                "content": "Easy solution \\nMysql\\n\\nselect name as customers\\nfrom customers \\nleft join orders on customers.id = orders.customerId \\nwhere customerId is null;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Easy solution \\nMysql\\n\\nselect name as customers\\nfrom customers \\nleft join orders on customers.id = orders.customerId \\nwhere customerId is null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2585057,
                "title": "left-join-simple-solution",
                "content": "SELECT c.name Customers\\nFROM Customers c\\nLEFT JOIN Orders O\\nON c.id = o.customerId\\nWHERE c.Id NOT IN (SELECT customerID FROM orders )",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT c.name Customers\\nFROM Customers c\\nLEFT JOIN Orders O\\nON c.id = o.customerId\\nWHERE c.Id NOT IN (SELECT customerID FROM orders )",
                "codeTag": "Unknown"
            },
            {
                "id": 2584697,
                "title": "simple-easy-query-for-begineers",
                "content": "**IF THIS QUERY HELPS YOU THEN PLEASE UPVOTE**\\t\\n\\t\\n\\tSelect name as Customers from Customers where id not in (select customerId from orders)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**IF THIS QUERY HELPS YOU THEN PLEASE UPVOTE**\\t\\n\\t\\n\\tSelect name as Customers from Customers where id not in (select customerId from orders)",
                "codeTag": "Unknown"
            },
            {
                "id": 2579129,
                "title": "left-join-solution",
                "content": "```\\nSELECT name AS Customers FROM Customers \\nLEFT JOIN Orders\\nON Customers.id=Orders.customerId\\nWHERE Orders.id IS NULL\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name AS Customers FROM Customers \\nLEFT JOIN Orders\\nON Customers.id=Orders.customerId\\nWHERE Orders.id IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2568317,
                "title": "easy-straight-forward-solution-must-try",
                "content": "SELECT Name AS Customers\\nFROM CUSTOMERS\\nLEFT JOIN ORDERS\\nON ORDERS.CustomerID = Customers.Id\\nWHERE Orders.CustomerID IS NULL",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "SELECT Name AS Customers\\nFROM CUSTOMERS\\nLEFT JOIN ORDERS\\nON ORDERS.CustomerID = Customers.Id\\nWHERE Orders.CustomerID IS NULL",
                "codeTag": "Unknown"
            },
            {
                "id": 2529364,
                "title": "simple-and-easy-solution-mysql",
                "content": "select name Customers from customers left join orders on customers.id = orders.customerid where orders.id is null\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select name Customers from customers left join orders on customers.id = orders.customerid where orders.id is null\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2512981,
                "title": "easy-solution-using-joins",
                "content": "**#Solution using Left Join**\\n\\nSELECT name AS Customers\\nFROM Customers AS C\\nLEFT JOIN Orders AS O\\nON C.id = O.customerId\\nWHERE O.CustomerId IS NULL\\n;\\n\\n**LEFT JOIN** returns all the matching rows + non matching rows from the left table.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**#Solution using Left Join**\\n\\nSELECT name AS Customers\\nFROM Customers AS C\\nLEFT JOIN Orders AS O\\nON C.id = O.customerId\\nWHERE O.CustomerId IS NULL\\n;\\n\\n**LEFT JOIN** returns all the matching rows + non matching rows from the left table.",
                "codeTag": "Unknown"
            },
            {
                "id": 2505100,
                "title": "the-easiest-and-best-solution-must-watch",
                "content": "SELECT name as Customers \\nFROM customers \\nLEFT JOIN orders ON customers.id=orders.customerid\\nWHERE orders.customerID is NULL;",
                "solutionTags": [],
                "code": "SELECT name as Customers \\nFROM customers \\nLEFT JOIN orders ON customers.id=orders.customerid\\nWHERE orders.customerID is NULL;",
                "codeTag": "Unknown"
            },
            {
                "id": 2488304,
                "title": "oracle-subquery",
                "content": "```\\nSELECT c.name as Customers\\nFROM Customers c \\nWHERE id NOT IN (SELECT customerID FROM Orders);",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT c.name as Customers\\nFROM Customers c \\nWHERE id NOT IN (SELECT customerID FROM Orders);",
                "codeTag": "Unknown"
            },
            {
                "id": 2485532,
                "title": "mysql-solution-fast-easy",
                "content": "please upvote \\uD83D\\uDD3C\\n```\\nSELECT name AS Customers FROM Customers\\nWHERE  id NOT IN \\n\\t(SELECT customerId FROM Orders) \\n```\\nplease upvote \\uD83D\\uDD3C",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Customers FROM Customers\\nWHERE  id NOT IN \\n\\t(SELECT customerId FROM Orders) \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2474382,
                "title": "customers-who-never-ordered-simple-approach",
                "content": "```\\nSELECT Customers.name AS Customers FROM Customers WHERE Customers.id NOT IN (SELECT customerId FROM Orders);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Customers.name AS Customers FROM Customers WHERE Customers.id NOT IN (SELECT customerId FROM Orders);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2474238,
                "title": "mysql-query-easy-and-complete-explanation",
                "content": "This is an example of Nested Query\\n\\nIn SQL SELECT we first need to give the names of COLUMN which we need in output and use \"as\" to change it\\'s output name to \"Customers\" \\nAnd then FROM -- To indicate the table name, from where we are taking data\\nFinally WHERE -- To specify the condition over row values of mentioned columns\\n\\t\\t\\t\\t\\t\\nInside this WHERE we are checking the nested condition:\\n1. SELECT the customerId column from Orders table this will give rows of all the customers who orders\\n2. Now we need to take negative of above output -- \"NOT IN\" the rows we got from inner query to get customers who don\\'t order\\n\\n\\n\\t\\tSELECT Customers.name as Customers\\n\\t\\tFROM Customers\\n\\t\\tWHERE Customers.id NOT IN (\\n\\t\\t\\tSELECT Orders.customerId\\n\\t\\t\\tFROM Orders\\n\\t\\t);",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "This is an example of Nested Query\\n\\nIn SQL SELECT we first need to give the names of COLUMN which we need in output and use \"as\" to change it\\'s output name to \"Customers\" \\nAnd then FROM -- To indicate the table name, from where we are taking data\\nFinally WHERE -- To specify the condition over row values of mentioned columns\\n\\t\\t\\t\\t\\t\\nInside this WHERE we are checking the nested condition:\\n1. SELECT the customerId column from Orders table this will give rows of all the customers who orders\\n2. Now we need to take negative of above output -- \"NOT IN\" the rows we got from inner query to get customers who don\\'t order\\n\\n\\n\\t\\tSELECT Customers.name as Customers\\n\\t\\tFROM Customers\\n\\t\\tWHERE Customers.id NOT IN (\\n\\t\\t\\tSELECT Orders.customerId\\n\\t\\t\\tFROM Orders\\n\\t\\t);",
                "codeTag": "Unknown"
            },
            {
                "id": 2473694,
                "title": "one-line-mysql-solution",
                "content": "```\\nselect name customers from customers where id not in (select customerId from orders)\\n```",
                "solutionTags": [],
                "code": "```\\nselect name customers from customers where id not in (select customerId from orders)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2461900,
                "title": "using-exists-and-subquery",
                "content": "SELECT name AS Customers\\nFROM customers c\\nWHERE NOT EXISTS (SELECT customerId FROM orders WHERE customerId = c.id)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT name AS Customers\\nFROM customers c\\nWHERE NOT EXISTS (SELECT customerId FROM orders WHERE customerId = c.id)",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1565450,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1570798,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1575089,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1572484,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1746396,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1574977,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1576224,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1671966,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1759999,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 2010074,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1565450,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1570798,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1575089,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1572484,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1746396,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1574977,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1576224,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1671966,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1759999,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 2010074,
                "content": [
                    {
                        "username": "fuxian",
                        "content": "You all know that in() and not in() have some limitation on number of the list. So, if you will be challenged with interviewed by guys with practical experience"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "You can easily do this: \\n# Write your MySQL query statement below\\n\\nselect c.name as Customers\\nfrom customers c left join orders o on c.id = o.customerId\\nwhere o.customerId is null;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Left outer join is used to join two tables. If there is not values exist in second table then it inserts null value in that column. And that is the value \"null\" we need to find in join. :-)\\n\\nselect name as Customers from Customers c1 left outer join Orders o1\\non c1.id = o1.customerId where o1.id is null"
                    },
                    {
                        "username": "prOcenT",
                        "content": "MS SQL\\n\\nselect Name as Customers\\nfrom Customers\\nwhere Id not in (select CustomerId from Orders)"
                    },
                    {
                        "username": "liujiayi0531",
                        "content": "# Write your MySQL query statement below\\nSelect Name as \\'Customers\\' from (Customers left join Orders on Customers.Id = Orders.CustomerId)\\nwhere CustomerId is null"
                    },
                    {
                        "username": "Sanushgowda",
                        "content": "SELECT c.name AS Customers\\nFROM Customers c\\nLEFT JOIN Orders o\\n    ON c.id = o.customerId\\nWHERE o.customerId is NULL;"
                    },
                    {
                        "username": "Simplevolk",
                        "content": "cool answer"
                    },
                    {
                        "username": "Aman_j1",
                        "content": "\\'\\'\\'\\n\\nselect name as customers \\nfrom customers\\nwhere id not in \\n(select customerid from orders);\\n\\n\\'\\'\\'"
                    },
                    {
                        "username": "xingchengyusi",
                        "content": "First time I tried this problem use `WHERE Orders.customerId = NULL` not `WHERE Orders.customerId IS NULL`. So that I search some reasons of this error.\\n\\n1. `NULL` is an special markers to indicate a data value not exists, not a data value. So that cannot use `=` to check for equality of.\\n2. However, if I want to assign an variable, using `=` is Ok.\\n\\nRefs:\\n[w3schools](https://www.w3schools.com/SQL/sql_null_values.asp)\\n[wiki](https://en.wikipedia.org/wiki/Null_%28SQL%29)"
                    },
                    {
                        "username": "i00lii",
                        "content": "Hi, \n\nIs anybody know why the version with inner select `select ... from ... where id not in (select ...)` is faster than single select `select ... join ... where customerId in null` according to the acceptance time distribution? \n\nI thought single select is more friendy for the database and it's more preffered. Is it happenes due to small amount of records is the database? \n"
                    },
                    {
                        "username": "miapeng911",
                        "content": "SELECT name AS Customers\\nFROM Customers AS c\\nLEFT JOIN Orders AS o\\nON c.id = o.customerId\\nWHERE customerId IS NULL;"
                    },
                    {
                        "username": "edithi",
                        "content": "To implement the find_customers function, which identifies customers who have never placed an order, you can follow a series of steps. First, perform a left join between the Customers and Orders DataFrames using the appropriate key columns (id and customerId). This merge operation combines the two DataFrames and associates each customer with their orders, if any. Next, employ boolean indexing to filter out the rows where the customerId is null. This step effectively identifies customers who haven\\'t placed an order since their corresponding customerId is absent in the merged DataFrame. After filtering, select the name column to retain only the customer names. To match the expected output format, you may need to rename the column to \\'Customers\\'. Finally, return the resulting DataFrame containing the names of customers who have never placed an order. By following these steps, you can efficiently filter and extract the desired information to identify customers without any orders."
                    }
                ]
            },
            {
                "id": 1977273,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 1575472,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 1574420,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 1573538,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 1572976,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 1572669,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 2076422,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 2037665,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 2015291,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 2014483,
                "content": [
                    {
                        "username": "Sreenibhogi",
                        "content": "It says Wrong Answer although the output is same.\\nselect name \"Customers \"\\nFROM Customers\\nWHERE id NOT IN (select customerId  from Orders)\\n\\nOutput\\n| Customers  |\\n| ---------- |\\n| Max        |\\n| Henry      |\\n\\nExpected\\n| Customers |\\n| --------- |\\n| Henry     |\\n| Max       |"
                    },
                    {
                        "username": "faizrazadec",
                        "content": "hey, did you sort out this problem, i was facing the same problem"
                    },
                    {
                        "username": "Samiudeen",
                        "content": "\\nselect customers.Name as Customers from customers where customers.id not in (select customerid from orders) ;"
                    },
                    {
                        "username": "user6859B",
                        "content": "\\nSELECT NAME CUSTOMERS FROM CUSTOMERS WHERE ID NOT IN (SELECT CUSTOMERID FROM ORDERS);\\n"
                    },
                    {
                        "username": "rj007",
                        "content": "\\'\\'\\'\\nselect name as Customers\\nfrom customers c\\nwhere id not in (select customerid\\n                from orders)\\n\\t\\t\\t\\t\\'\\'\\'"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(05): #183. Customers Who Never Order](https://medium.com/@s9811219/\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB-leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-05-183-customers-who-never-order-ce749c706d3)\\n\\nWelcome to kindly clap & like in medium. Let\\'s discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1567397119.png)\\n"
                    },
                    {
                        "username": "CodeJedi",
                        "content": "183. submission marked wrong even though its correct.\\n\\nThis an easy sql statement, but the web site keeps stating my answer is wrong even though it is correct.\\nThe \"correct\" answer shown apparently includes the name \"James\", but \"James\" is NOT a name in this question..."
                    },
                    {
                        "username": "user5460vN",
                        "content": "\\nselect name as Customers\\nfrom Customers \\nleft join Orders\\non Customers.id = Orders.customerId\\nwhere Orders.id is null"
                    },
                    {
                        "username": "Jingwei_Too123",
                        "content": "I was surprise this solution is wrong \\n\\nimport pandas as pd\\n\\ndef find_customers(customers: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(customers, orders, how=\\'outer\\', left_on=\\'id\\', right_on=\\'customerId\\')\\n    df = df[df[\\'customerId\\'] != df[\\'customerId\\']]\\n    df.rename(columns={\\'name\\':\\'Customers\\'}, inplace=True)\\n\\n    return df[\\'Customers\\'].to_frame()"
                    },
                    {
                        "username": "ersujansharma",
                        "content": "SELECT name as Customers from customers LEFT JOIN orders on Customers.id = orders.customerId WHERE customerID is null\\n is the best simple solution that i get."
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "``SELECT name AS Customers FROM Customers\\nWHERE Customers.id NOT IN (\\n  SELECT DISTINCT customerId FROM Orders\\n);``\\n\\nthis worked for me."
                    }
                ]
            },
            {
                "id": 2009128,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 2006716,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 2005756,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 2005227,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 2000043,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 1997060,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 1943020,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 1937016,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 1897317,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 1895263,
                "content": [
                    {
                        "username": "vishalkumarrajput",
                        "content": "SELECT name as Customers\\nFROM Customers C\\nLEFT JOIN Orders O ON C.id = O.customerId\\nWHERE O.id IS NULL;"
                    },
                    {
                        "username": "shreyashbhandarig28",
                        "content": "customers[~customers[\\'id\\'].isin(orders[\\'customerId\\'])]\\ntry this out for those who are doing the challenge using pandas"
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "(Pandas) \\nWithout using Join, just use condition to find out the no order customers, then create a dataframe of the column name \"Customers\" and no order customers then return the dataframe."
                    },
                    {
                        "username": "faizrazadec",
                        "content": "I\\'m facing an issue, that when i run my code, they said it\\'s corect and accepted, but when i click on submit it shows that \"wrong answer\"\\nwill anyone help me to solve problem"
                    },
                    {
                        "username": "Sohail17",
                        "content": "the code might not be passing all the testcases after submission , provide the code here\\n"
                    },
                    {
                        "username": "PhoshokoML",
                        "content": "I feel like in some way using the \".issuperset()\" function associated with sets could optimize the speed but I have no angle of using it"
                    },
                    {
                        "username": "knock_knock47",
                        "content": "good to think for the problem using pandas!!\\n"
                    },
                    {
                        "username": "F-said",
                        "content": "In vs Join\\n\\nHey y\\'all, can anyone provide some insight on the performance between IN subqueries and the LEFT JOIN query?\\n\\nFor this type of problem, which query would be preferred? I know the SQL engine does some query optimization in the backend, but is there any objective way to figure out which query would be objectively \"better\"? Thanks for your knowledge."
                    },
                    {
                        "username": "ShubhamSingh1998",
                        "content": "select name as Customers from Customers \\nleft join Orders using(id)\\nwhere id not in(select customerId from Orders); \\n\\ntry my Solution and thank me later."
                    },
                    {
                        "username": "user5582li",
                        "content": "SELECT name as Customers\\n FROM Customers\\n WHERE Customers.id NOT IN(SELECT Customers.id from Customers\\n JOIN Orders ON Customers.id = Orders.customerId);"
                    },
                    {
                        "username": "Ishani_56",
                        "content": "Why cannot we use except operator"
                    }
                ]
            },
            {
                "id": 1891442,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1890701,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1887638,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1885973,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1881574,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1869547,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1866813,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1860967,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1860079,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1844767,
                "content": [
                    {
                        "username": "lex8390",
                        "content": "Can be solved using either a subquery combined with operators or with a left join. In the first case, the query excludes certain values from the subquery and in the second case, the query searches for certain values. "
                    },
                    {
                        "username": "eparfitt1002",
                        "content": "Anti Join not supported ?? "
                    },
                    {
                        "username": "sumukhi27",
                        "content": "yeah except is also not supported"
                    },
                    {
                        "username": "prachi_ag",
                        "content": "# Write your MySQL query statement below:\\nThis worked for me:\\nSELECT name as Customers from Customers where id not in (select customerId from orders );"
                    },
                    {
                        "username": "sumukhi27",
                        "content": "Why is using \\'EXCEPT\\' giving error?"
                    },
                    {
                        "username": "Mohsin_Rajpoot",
                        "content": "can someone define why this produce wrong results\\nselect name from Customers,Orders\\nwhere (Customer.id != Orders.customerId;"
                    },
                    {
                        "username": "4ebyrek",
                        "content": "select Customers.name as Customers\\nfrom Customers \\nleft join Orders on Customers.id = Orders.customerId\\nwhere orders.Id is null;"
                    },
                    {
                        "username": "AKASH_Chauhan",
                        "content": "I did this with hit and trial(not sure it someone else already did) and it worked, but will this work with large no. of rows and also how to improve this one.? And if there are expert here please share your approach so that all can improve their understanding and learn new ways.\\n# Write your MySQL query statement below\\nwith t1 as (select name, customers.id, count(customerid) as COU \\nfrom customers \\nleft join orders \\non orders.customerid = customers.id \\ngroup by name, customers.id)\\n\\nselect name as Customers from t1 where COU<1"
                    },
                    {
                        "username": "bossbhai",
                        "content": "select name as customers from customers where id in (2,4)"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nselect c.name as Customers from Customers as c where c.id not in (select o.customerId from orders as o)"
                    },
                    {
                        "username": "samridhi01",
                        "content": "this one  is a example of nested sub query. "
                    },
                    {
                        "username": "amanjhabak7",
                        "content": "Hello I have been trying this code but it\\'s not getting me those remaining Customers\\n\\nwith cte as (\\n  select c.id,c.name, o.customerId as oC\\n  from Customers as c\\n  left join Orders as o\\n  on c.id = o.customerId\\n)\\n\\nselect name,id,oC as Customers\\nfrom cte\\nwhere id!=oC"
                    }
                ]
            },
            {
                "id": 1840370,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1833648,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1826700,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1811649,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1810669,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1803045,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1794840,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1793529,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1793413,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1792640,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id ,name from Customers),\\ncte2 as (select id,customerId from Orders)\\n\\nselect name as Customers from\\ncte a \\nleft join cte2 b on a.id=b.customerId\\nwhere b.customerID is null"
                    },
                    {
                        "username": "ZongyuWu",
                        "content": "Anyone know why the following query fails?\\n`\\nSELECT name AS Customers\\nFROM Customers\\nWHERE Customers.id NOT IN Orders.CustomerId;\\n`"
                    },
                    {
                        "username": "fseifishahpar",
                        "content": "select name as Customers from Customers c\\nwhere c.id not in (select customerId from Orders);"
                    },
                    {
                        "username": "007gabrisati",
                        "content": "Doesn\\'t LeetCode recognize EXCEPT as table1 minus table2?\\n"
                    },
                    {
                        "username": "Sandhya615",
                        "content": "# Write your MySQL query statement below\\nselect name as Customers from Customers left join Orders on Customers.id = Orders.customerId\\nwhere Orders.id is null ;\\n"
                    },
                    {
                        "username": "akshatkant1311",
                        "content": "select name from Customers\\nMINUS\\nselect name from Customers where id in (\\n    select customerid from Orders \\n) Can anyone tell whats wrong????"
                    },
                    {
                        "username": "Ili_K",
                        "content": "Can someone please explain why I get \"Not unique table/alias: \\'Customers\\'\" when I use the statement:\\n\\nSELECT name\\nFROM Customers\\nLEFT OUTER JOIN Customers ON Customers.id=Orders.customerId\\nWHERE Orders.id=null\\n;"
                    },
                    {
                        "username": "alirabbi3112",
                        "content": "Here is my Solution with no join but using Not in operator. \\nIn this section \" SELECT Customers.name as Customers\\nFROM Customers \" I get the name from Customer table then in where clause compare which not in order table which will shown \"WHERE Customers.id NOT IN (SELECT Orders.customerId FROM Orders);\""
                    },
                    {
                        "username": "saurabhskukreja",
                        "content": "Still learning joins but I thought Inner join would help in this case . \\nBecause we need to find whats not common. \\n\\nSo I wrote a query like this :\\n\\nSelect c1.name from Customers c1\\nInner join Orders o1\\non c1.id != o1.customerId\\n\\nCan someone explain why this does not work "
                    },
                    {
                        "username": "AkhilPamarthy",
                        "content": "Find Customer Referee"
                    }
                ]
            },
            {
                "id": 1787299,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1783701,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1776543,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1776049,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1774757,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1774196,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1772113,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1761588,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1758819,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1758090,
                "content": [
                    {
                        "username": "user1897wM",
                        "content": "select name as \"Customers\" from Customers where name not in (\\nselect c.name from Customers c  join Orders o on c.id = o.customerId )\\n\\nwhy this is showing wrong answers"
                    },
                    {
                        "username": "healer290401",
                        "content": "SELECT DISTINCT a.name AS Customers \\nFROM Customers a, Orders b\\nWHERE a.name NOT IN (SELECT a.name FROM Customers a INNER JOIN Orders b ON a.id = b.customerId)"
                    },
                    {
                        "username": "smarthood",
                        "content": "I think this will work!!!\\n\\nSELECT name as Customers\\nfrom Customers\\nWhere id NOT in (select customerId from Orders)"
                    },
                    {
                        "username": "azaraatif",
                        "content": "\\nselect name \\'Customers\\' from Customers \\nwhere id not in (select distinct customerId   from Orders  )\\norder by name;"
                    },
                    {
                        "username": "Hopkins666",
                        "content": "Why can\\'t I use the table I created from Select query?\\n\\nCreate Table YYY AS \\nselect count(order_number) from Orders \\nGroup by customer_number\\n\\nSelect * from YYY\\n"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name as Customers\\nfrom Customers\\nwhere id not in (select customerId from Orders)`"
                    },
                    {
                        "username": "xuyiouqd",
                        "content": "Can anybody tell me why my answer is correct but marked as wrong?\\nselect name\\nfrom (select Customers.id, Customers.name, Orders.id, Orders.customerId\\nfrom Customers\\nleft join Orders on Orders.customerId = Customers.id) \\nwhere customerId is null"
                    },
                    {
                        "username": "victor971125",
                        "content": "Why does it not work when I use Join instead of left join?"
                    },
                    {
                        "username": "anewanu",
                        "content": "\\nSELECT NAME FROM CUSTOMERS\\nWHERE NOT EXISTS(SELECT CUSTOMERS.NAME \\nFROM CUSTOMERS\\nINNER JOIN ORDERS \\nON CUSTOMERS.ID = ORDERS.CUSTOMERID);\\n\\n\\nWhy this query doesn\\'t give the right output but if subquery is executed individually it returns the desired output? Want to know the flow of this query!"
                    },
                    {
                        "username": "jamesbond098989",
                        "content": "WHERE statement should be used after the JOIN statement and use left join instead of inner join."
                    },
                    {
                        "username": "abdullakh",
                        "content": "Make sure the names are in the correct order (ascending) in your answer guys!"
                    }
                ]
            },
            {
                "id": 1754303,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1748721,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1742708,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1735414,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1730207,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1725672,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1718399,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1718011,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1710834,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            },
            {
                "id": 1710638,
                "content": [
                    {
                        "username": "user0160Kj",
                        "content": "select name as Customers from Customers where\\nname+id not in (select name+c.id from Customers as c\\njoin Orders on Orders.customerId = c.id)\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "select\\n    name as Customers\\nfrom Customers\\nwhere \\n    id \\n        NOT IN\\n    (select customerId from Orders)"
                    },
                    {
                        "username": "khalmatay",
                        "content": "SELECT name\\nFrom Customers\\nEXCEPT\\nSELECT name\\nFrom Customers,Orders\\nWhere Customers.id=Orders.customerId\\nWhy is don\\'t work?"
                    },
                    {
                        "username": "kavyas1989",
                        "content": "This is my solution where first i just tried to use left join as we need to consider every column from employee table to make decision , then i got table where i had null values in customer id column fr\\'om orders table then i tried to select those record where customer has not ordered  anything with the help of is null\" operator\\n\\n\\nwith ordered as (select c.* , o.customerId\\nfrom customers c left join orders o\\non c.id = o.customerId )\\n\\nselect name as customers \\nfrom ordered \\nwhere ordered.customerID is null;"
                    },
                    {
                        "username": "Sohail17",
                        "content": "select name Customers from Customers C\\nLEFT JOIN ORDERS O\\nON C.ID=O.CUSTOMERID\\nWHERE O.CUSTOMERID IS NULL\\n \\n\\nIsn\\'t this similar or using with clause is more efficient and faster ?"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "\\nselect name as Customers\\nfrom Customers\\nwhere id NOT IN(select customerId from Orders)"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# LEFT JOIN \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/customers-who-never-order/solutions/2943074/left-join/?orderBy=most_votes"
                    },
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name AS Customers FROM Customers \\nWHERE ID NOT IN (SELECT customerId FROM Orders  )"
                    },
                    {
                        "username": "sharryy",
                        "content": "You should always take care while using IN() and NOT IN() in any query with NULL values. Because it evaluates to unknown and ignores the record. Better to use NOT EXISTS to avoid this because NOT EXISTS always returns true or false."
                    },
                    {
                        "username": "pcoder007",
                        "content": "Here is a simple solution\\n\\n\\n\\nselect name as customers\\nfrom\\n(\\n    select name\\n    from customers\\n    left join orders\\n    on customers.id = orders.customerid\\n    where orders.customerid is null\\n) a"
                    },
                    {
                        "username": "liutsewei",
                        "content": "\\nSELECT name AS Customers\\nFROM Customers\\nWHERE id NOT IN (SELECT DISTINCT(customerId)\\n                FROM Orders)"
                    }
                ]
            }
        ]
    },
    {
        "title": "Move Zeroes",
        "question_content": "<p>Given an integer array <code>nums</code>, move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\n\n<p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1,0,3,12]\n<strong>Output:</strong> [1,3,12,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you minimize the total number of operations done?",
        "solutions": [
            {
                "id": 172432,
                "title": "the-easiest-but-unusual-snowball-java-solution-beats-100-o-n-clear-explanation",
                "content": "The idea is that we go through the array and gather all zeros on our road.\\n![image](https://assets.leetcode.com/users/olsh/image_1537442610.png)\\n\\nLet\\'s take our example:\\nthe first step - we meet 0. \\nOkay, just remember that now the size of our snowball is 1. Go further.\\n![image](https://assets.leetcode.com/users/olsh/image_1537442825.png)\\n\\nNext step - we encounter 1. Swap the most left 0 of our snowball with element 1.\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537444682.png)\\n\\n\\n\\nNext step - we encounter 0 again! \\n\\n\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537443824.png)\\n\\n\\nOur ball gets bigger, now its size = 2.\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537443928.png)\\n\\n\\nNext step - 3. Swap again with the most left zero.\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537444816.png)\\n\\n\\nLooks like our zeros roll all the time\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537444189.png)\\n\\nNext step - 12. Swap again:\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537444465.png)\\n\\n\\nWe reached finish! Congratulations!\\n\\n![image](https://assets.leetcode.com/users/olsh/image_1537444540.png)\\n\\n\\nHere\\'s the code\\n\\n```\\nclass Solution {\\n     public void moveZeroes(int[] nums) {\\n        int snowBallSize = 0; \\n        for (int i=0;i<nums.length;i++){\\n\\t        if (nums[i]==0){\\n                snowBallSize++; \\n            }\\n            else if (snowBallSize > 0) {\\n\\t            int t = nums[i];\\n\\t            nums[i]=0;\\n\\t            nums[i-snowBallSize]=t;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n     public void moveZeroes(int[] nums) {\\n        int snowBallSize = 0; \\n        for (int i=0;i<nums.length;i++){\\n\\t        if (nums[i]==0){\\n                snowBallSize++; \\n            }\\n            else if (snowBallSize > 0) {\\n\\t            int t = nums[i];\\n\\t            nums[i]=0;\\n\\t            nums[i-snowBallSize]=t;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72011,
                "title": "simple-o-n-java-solution-using-insert-index",
                "content": " \\n    // Shift non-zero values as far forward as possible\\n    // Fill remaining space with zeros\\n\\n    public void moveZeroes(int[] nums) {\\n        if (nums == null || nums.length == 0) return;        \\n\\n        int insertPos = 0;\\n        for (int num: nums) {\\n            if (num != 0) nums[insertPos++] = num;\\n        }        \\n\\n        while (insertPos < nums.length) {\\n            nums[insertPos++] = 0;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": " \\n    // Shift non-zero values as far forward as possible\\n    // Fill remaining space with zeros\\n\\n    public void moveZeroes(int[] nums) {\\n        if (nums == null || nums.length == 0) return;        \\n\\n        int insertPos = 0;\\n        for (int num: nums) {\\n            if (num != 0) nums[insertPos++] = num;\\n        }        \\n\\n        while (insertPos < nums.length) {\\n            nums[insertPos++] = 0;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 562911,
                "title": "two-pointers-technique-python-o-n-time-o-1-space",
                "content": "Hi there! Here is my solution to this problem that uses two pointers technique.\\n\\n**Code:**\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: list) -> None:\\n        slow = 0\\n        for fast in range(len(nums)):\\n            if nums[fast] != 0 and nums[slow] == 0:\\n                nums[slow], nums[fast] = nums[fast], nums[slow]\\n\\n            # wait while we find a non-zero element to\\n            # swap with you\\n            if nums[slow] != 0:\\n                slow += 1\\n```\\n\\n**Algorithm complexity:**\\n*Time complexity: O(n)*. Our fast pointer does not visit the same spot twice.\\n*Space complexity: O(1)*. All operations are made in-place\\n\\nIf you like my solution, I will really appreciate your upvoting. It will help other python-developers to find it faster. And as always, I wish you an enjoyable time on LeetCode.\\n\\n**Special thanks for the next comments:**\\n[**stanley98745**](https://leetcode.com/problems/move-zeroes/discuss/562911/two-pointers-technique-python-on-time-o1-space/513985)",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: list) -> None:\\n        slow = 0\\n        for fast in range(len(nums)):\\n            if nums[fast] != 0 and nums[slow] == 0:\\n                nums[slow], nums[fast] = nums[fast], nums[slow]\\n\\n            # wait while we find a non-zero element to\\n            # swap with you\\n            if nums[slow] != 0:\\n                slow += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72005,
                "title": "my-simple-c-solution",
                "content": "    class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            int j = 0;\\n            // move all the nonzero elements advance\\n            for (int i = 0; i < nums.size(); i++) {\\n                if (nums[i] != 0) {\\n                    nums[j++] = nums[i];\\n                }\\n            }\\n            for (;j < nums.size(); j++) {\\n                nums[j] = 0;\\n            }\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            int j = 0;\\n            // move all the nonzero elements advance\\n            for (int i = 0; i < nums.size(); i++) {\\n                if (nums[i] != 0) {\\n                    nums[j++] = nums[i];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 72000,
                "title": "1ms-java-solution",
                "content": "public class Solution {\\n    \\n    public void moveZeroes(int[] nums) {\\n\\n        int j = 0;\\n        for(int i = 0; i < nums.length; i++) {\\n            if(nums[i] != 0) {\\n                int temp = nums[j];\\n                nums[j] = nums[i];\\n                nums[i] = temp;\\n                j++;\\n            }\\n        }\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n    public void moveZeroes(int[] nums) {\\n\\n        int j = 0;\\n        for(int i = 0; i < nums.length; i++) {\\n            if(nums[i] != 0) {\\n                int temp = nums[j];\\n                nums[j] = nums[i];\\n                nums[i] = temp;\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 72012,
                "title": "python-short-in-place-solution-with-comments",
                "content": "    \\n    # in-place\\n    def moveZeroes(self, nums):\\n        zero = 0  # records the position of \"0\"\\n        for i in xrange(len(nums)):\\n            if nums[i] != 0:\\n                nums[i], nums[zero] = nums[zero], nums[i]\\n                zero += 1",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "    \\n    # in-place\\n    def moveZeroes(self, nums):\\n        zero = 0  # records the position of \"0\"\\n        for i in xrange(len(nums)):\\n            if nums[i] != 0:\\n                nums[i], nums[zero] = nums[zero], nums[i]\\n                zero += 1",
                "codeTag": "Python3"
            },
            {
                "id": 1592151,
                "title": "python-solution-super-simple-clear-explanation",
                "content": "# 1. Solution\\n\\n```\\n    def moveZeroes(self, nums):\\n        n = len(nums)\\n        i = 0\\n        for j in range(n):\\n            if (nums[j] != 0):\\n                nums[i], nums[j] = nums[j], nums[i]\\n                i += 1\\n```\\n\\n\\n# 2. Main idea\\n* We use` i` to keep track of position of the first zero in the list (which changes as we go).\\n* We use` j `to keep track of the first non-zero value after the first zero (which is pointed by `i`).\\n* Each time we have` i` correctly points to a zero and `j` correctly points to the first non-zero after `i`, we swap the values that store at `i` and `j`.\\n* By doing this, we move zeros towards the end of the list gradually until `j` reaches the end.\\n* And when it does, we are done.\\n\\n# 3. Remarks\\n* No return value needed, since we are doing in-place modification.\\n* We use` nums[i], nums[j] = nums[j], nums[i]` to achieve the in-place modification because Python allows you to swaps values in a list using syntax: `x, y = y, x`.\\n\\n****Please upvote if you find this post useful, and welcome to any further discussion!***",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\n    def moveZeroes(self, nums):\\n        n = len(nums)\\n        i = 0\\n        for j in range(n):\\n            if (nums[j] != 0):\\n                nums[i], nums[j] = nums[j], nums[i]\\n                i += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 208755,
                "title": "python-solution",
                "content": "We initialize two pointers `i = 0`, `j = 0`. Iterate `j` over `range(len(nums))`, and if `nums[j] != 0`, we swap `nums[i]` and `nums[j]`, and increment `i` by `1`. It is easy to see the loop invariant that `nums[:i+1]` contains all nonzero elements in `nums[:j+1]` with relative order preserved. Hence when `j` reaches `len(nums)-1`, `nums[:i+1]` contains all nonzero elements in `nums` with relative order preserved.\\n\\nTime complexity: `O(n)`, space complexity: `O(1)`.\\n\\n```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        for j in range(len(nums)):\\n            if nums[j] != 0:\\n                nums[i], nums[j] = nums[j], nums[i]\\n                i += 1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        for j in range(len(nums)):\\n            if nums[j] != 0:\\n                nums[i], nums[j] = nums[j], nums[i]\\n                i += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 809349,
                "title": "simple-c-solutions-know-your-stl",
                "content": "It is easy to create your own solution to this problem, take this for instance:\\n```C++\\nvoid moveZeroes(vector<int>& nums)\\n{\\n\\tfor(int i=0,next=0;i<nums.size();++i)\\n\\t\\tif(nums[i])\\n\\t\\t\\tswap(nums[i],nums[next++]);\\n}\\n```\\nand an interviewer would probably ask you to do so even if you bring up one of the other solutions I mention here, but it is also important to know your STL. An interviewer might be more impressed with this solution that uses std::stable_parition:\\n```C++\\nvoid moveZeroes(vector<int>& nums)\\n{\\n    stable_partition(begin(nums),end(nums),[](int i){return i;});\\n}\\n```\\nBut you can even avoid using a lambda if you know your STL extremely well\\u2014check this out:\\n```C++\\nvoid moveZeroes(vector<int>& nums)\\n{\\n    stable_partition(rbegin(nums),rend(nums),logical_not<int>());\\n}\\n```\\nstd::logical_not is template function object that returns `!argument` for whatever is passed in. If the number is non-zero it will return false and if it is zero it will return true. This is the reverse of what the lambda does in the previous solution and so would move all the zeroes to the front, but to fix this we can just use the reverse iterators for the vector.",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```C++\\nvoid moveZeroes(vector<int>& nums)\\n{\\n\\tfor(int i=0,next=0;i<nums.size();++i)\\n\\t\\tif(nums[i])\\n\\t\\t\\tswap(nums[i],nums[next++]);\\n}\\n```\n```C++\\nvoid moveZeroes(vector<int>& nums)\\n{\\n    stable_partition(begin(nums),end(nums),[](int i){return i;});\\n}\\n```\n```C++\\nvoid moveZeroes(vector<int>& nums)\\n{\\n    stable_partition(rbegin(nums),rend(nums),logical_not<int>());\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3549476,
                "title": "easy-java-solution-beats-99-9",
                "content": "# Approach\\nThis code is for a method called `moveZeroes` that takes an array of integers called `nums` as input and moves all the zeros to the end of the array while keeping the order of the non-zero elements unchanged. Let\\'s break down the code step by step:\\n\\n1. Initialize a variable `i` to 0. This variable will be used to keep track of the index where the next non-zero element should be placed.\\n\\n2. Start a loop that iterates over each element `num` in the `nums` array.\\n\\n3. Check if the current element `num` is not equal to 0 (which means it\\'s a non-zero element).\\n\\n4. If the current element is non-zero, assign it to the position `nums[i]` in the array, and then increment `i` by 1. This moves the non-zero element to the left side of the array.\\n\\n5. After processing all the elements in the array, there might be some remaining positions towards the end of the array that need to be filled with zeros. \\n\\n6. Start another loop that continues from the last value of `i` until the end of the array (`nums.length`). \\n\\n7. Set the value of `nums[i]` to 0, effectively placing zeros in the remaining positions at the end of the array.\\n\\n8. Increment `i` by 1 in each iteration to move to the next position in the array.\\n\\n9. Once this loop is completed, all the non-zero elements have been moved to the front of the array, and any remaining positions towards the end of the array have been filled with zeros.\\n\\nThe code rearranges the array in-place, meaning it modifies the original `nums` array without creating a new one. After calling this `moveZeroes` method, the array `nums` will have all the zeros moved to the end while preserving the order of the non-zero elements.\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int i = 0; \\n        for (int num:nums){\\n            if(num != 0){\\n                nums[i] = num;\\n                i++;\\n            }\\n        }\\n        while(i<nums.length){\\n            nums[i] = 0;\\n            i++;\\n        }\\n    }\\n}\\n```\\n**Please upvote if you like the solution.\\nHappy Coding!** \\uD83D\\uDE0A",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int i = 0; \\n        for (int num:nums){\\n            if(num != 0){\\n                nums[i] = num;\\n                i++;\\n            }\\n        }\\n        while(i<nums.length){\\n            nums[i] = 0;\\n            i++;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 979820,
                "title": "two-pointer-visual-python",
                "content": "This problem uses a two pointer stratgey. The code is unintuitive . so i have provided a visual walkthrough. \\n\\n```python\\n def moveZeroes(self, nums: List[int]) -> None:\\n        i = 0\\n        for j in range(len(nums)):\\n            if nums[j] != 0:\\n                nums[i], nums[j] = nums[j], nums[i]\\n                i += 1\\n```\\n\\n![image](https://assets.leetcode.com/users/images/2490959a-5e63-46d0-b1f4-0393fe78e4d2_1608510556.5769494.png)\\n\\n[code courtesy of ZitaoWang](https://leetcode.com/problems/move-zeroes/discuss/208755/Python-solution)\\n",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "```python\\n def moveZeroes(self, nums: List[int]) -> None:\\n        i = 0\\n        for j in range(len(nums)):\\n            if nums[j] != 0:\\n                nums[i], nums[j] = nums[j], nums[i]\\n                i += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 72045,
                "title": "c-accepted-code",
                "content": "    void moveZeroes(vector<int>& nums) {\\n        int last = 0, cur = 0;\\n        \\n        while(cur < nums.size()) {\\n            if(nums[cur] != 0) {\\n                swap(nums[last], nums[cur]);\\n                last++;\\n            }\\n            \\n            cur++;\\n        }\\n    }",
                "solutionTags": [],
                "code": "    void moveZeroes(vector<int>& nums) {\\n        int last = 0, cur = 0;\\n        \\n        while(cur < nums.size()) {\\n            if(nums[cur] != 0) {\\n                swap(nums[last], nums[cur]);\\n                last++;\\n            }\\n            \\n            cur++;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3424746,
                "title": "easy-to-understand-code-c",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis solution aims to move all the zeros in a given vector nums to the end of the vector while preserving the relative order of the non-zero elements. Let\\'s break down the solution step by step:\\n\\nInitialize variables:\\n\\nn stores the size of the vector nums.\\nstart represents the index where the next non-zero element should be placed.\\nend represents the index of the last element in the vector.\\nmid is used to iterate through the vector from the beginning to the end.\\nStart the while loop: The loop continues until mid reaches the index of the last element (end).\\n\\nCheck if the element at the current index mid is non-zero:\\n\\nIf nums[mid] is not equal to 0, it means it is a non-zero element.\\nIn this case, we need to move this non-zero element to the front of the vector.\\nTo achieve this, we swap the elements at indices start and mid, effectively moving the non-zero element to the position indicated by start.\\nIncrement start by 1: After swapping the elements, we increment start to prepare for the next non-zero element that we might encounter later in the vector.\\n\\nIncrement mid by 1: Regardless of whether the element at mid was non-zero or zero, we always increment mid by 1 to move on to the next element in the vector.\\n\\nRepeat steps 3-5 until mid exceeds end: This loop continues until we have iterated through all the elements in the vector.\\n\\nAfter the loop finishes, all the non-zero elements will be placed at the beginning of the vector, and all the zeros will be at the end. The relative order of the non-zero elements will remain the same as in the original vector.\\n\\nIt\\'s worth noting that this solution operates in-place, meaning it modifies the original vector without using any extra space.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n= nums.size();\\n        int start=0, end=n-1,mid=0;\\n        while(mid<=end){\\n            if(nums[mid]!=0){\\n                swap(nums[start],nums[mid]);                  \\n                    start++;\\n            }\\n            mid++;\\n        }\\n    }\\n};\\n```\\n![upvote 1.jpeg](https://assets.leetcode.com/users/images/b3a0cacd-6403-44e6-a08a-f5c947c9c49c_1681675209.6594658.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n= nums.size();\\n        int start=0, end=n-1,mid=0;\\n        while(mid<=end){\\n            if(nums[mid]!=0){\\n                swap(nums[start],nums[mid]);                  \\n                    start++;\\n            }\\n            mid++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72128,
                "title": "0ms-java-solution",
                "content": "   Insert the non-zero number first, then insert the zeroes.\\n\\n\\n     public class Solution{\\n        \\tpublic void moveZeroes(int[] nums){\\n        \\t\\tint index=0;\\n        \\t\\tfor (int i=0;i<nums.length;i++){\\n        \\t\\t\\tif (nums[i]!=0) nums[index++]=nums[i];\\n        \\t\\t}\\n        \\t\\twhile(index<nums.length){\\n        \\t\\t\\tnums[index++]=0;\\n        \\t\\t}\\n        \\t}\\n        \\n        }",
                "solutionTags": [],
                "code": "class Solution{\\n        \\tpublic void moveZeroes(int[] nums){\\n        \\t\\tint index=0;\\n        \\t\\tfor (int i=0;i<nums.length;i++){\\n        \\t\\t\\tif (nums[i]!=0) nums[index++]=nums[i];\\n        \\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 72132,
                "title": "one-line-c-code-20ms",
                "content": "The idea comes from the c++ erase/remove idiom.\\n\\n    class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            fill(remove(nums.begin(), nums.end(),0), nums.end(), 0);\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            fill(remove(nums.begin(), nums.end(),0), nums.end(), 0);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3960034,
                "title": "three-simple-java-solutions-runtime-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code 1\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) \\n   {\\n        int i = 0;\\n        for (int num : nums)\\n        {\\n            if (num != 0)\\n            {\\n                nums[i] = num;\\n                i++;\\n            }\\n        }\\n\\n        while (i <= nums.length - 1)\\n        {\\n            nums[i] = 0;\\n            i++;\\n        }\\n\\n    }\\n}\\n```\\n\\n# code 2\\n\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonZeroIndex = 0;\\n\\n    for (int i = 0; i < nums.length; i++) {\\n        if (nums[i] != 0) {\\n            if (i != nonZeroIndex) { \\n                int temp = nums[nonZeroIndex];\\n                nums[nonZeroIndex] = nums[i];\\n                nums[i] = temp;\\n            }\\n            nonZeroIndex++;\\n        }\\n    }\\n    }\\n}\\n```\\n\\n# code 3\\nI don\\'t think it\\'s the best  => runtime 50ms\\n\\nIt moves non-zero elements to the left while maintaining their order and zeroes to the right\\n\\n\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) \\n   {\\n        int temp = -1;\\n\\n        for (int i = 0  ; i <= nums.length - 1 ; i++)\\n        {\\n            if (temp == -1 && nums[i] == 0)\\n            {\\n                temp = i;\\n            }else if (temp != -1 && nums[i] != 0){\\n                nums[temp] = nums[i];\\n                nums[i] = 0;\\n                i = temp;\\n                temp = -1;\\n            }\\n        }\\n\\n    }\\n}\\n```\\n\\n![e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg](https://assets.leetcode.com/users/images/209f8226-6751-4d01-99bc-1b4a509bfb01_1692992097.3519738.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) \\n   {\\n        int i = 0;\\n        for (int num : nums)\\n        {\\n            if (num != 0)\\n            {\\n                nums[i] = num;\\n                i++;\\n            }\\n        }\\n\\n        while (i <= nums.length - 1)\\n        {\\n            nums[i] = 0;\\n            i++;\\n        }\\n\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonZeroIndex = 0;\\n\\n    for (int i = 0; i < nums.length; i++) {\\n        if (nums[i] != 0) {\\n            if (i != nonZeroIndex) { \\n                int temp = nums[nonZeroIndex];\\n                nums[nonZeroIndex] = nums[i];\\n                nums[i] = temp;\\n            }\\n            nonZeroIndex++;\\n        }\\n    }\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) \\n   {\\n        int temp = -1;\\n\\n        for (int i = 0  ; i <= nums.length - 1 ; i++)\\n        {\\n            if (temp == -1 && nums[i] == 0)\\n            {\\n                temp = i;\\n            }else if (temp != -1 && nums[i] != 0){\\n                nums[temp] = nums[i];\\n                nums[i] = 0;\\n                i = temp;\\n                temp = -1;\\n            }\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2685367,
                "title": "js-es6-two-pointers-93-with-explanation",
                "content": "![image](https://assets.leetcode.com/users/images/432c5704-6859-43e8-acd9-c3c8b9786b68_1665392777.2844386.png)\\n\\n**Two pointers** is the use of two different pointers (usually to keep track of array or string indexes) to solve a problem with specified indexes in order to save time and space.\\n\\nTo solve this problem, we create two pointers low = 0, and high = low + 1. Now while high < array length - 1, we keep iterating. If the symbol under the low index = 0, we stop the low and move only the high until it hits a number not equal to 0 (!==0). As soon as the high finds a non-zero, we swap low and high (that is, swap a number with zero), and only then start moving the low again.\\n\\nI hope the picture below will give you a clearer understanding :)\\n\\n![image](https://assets.leetcode.com/users/images/993ea39e-c1f6-45e8-98ec-23fd6168dd1c_1665395049.1154604.png)\\n\\n```\\nlet moveZeroes = function (nums) {\\n    let low = 0;\\n    let high = low + 1;\\n\\n    while (high <= nums.length - 1) {\\n        if (nums[low] !== 0) {\\n            low++;\\n            high++;\\n        } else {\\n            if (nums[high] !== 0) {\\n                [nums[low], nums[high]] = [nums[high], nums[low]];\\n                low++;\\n            }\\n            high++;\\n        }\\n    }\\n};\\n```\\n\\nI hope I was able to explain clearly. **Happy coding!** \\uD83D\\uDE43",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nlet moveZeroes = function (nums) {\\n    let low = 0;\\n    let high = low + 1;\\n\\n    while (high <= nums.length - 1) {\\n        if (nums[low] !== 0) {\\n            low++;\\n            high++;\\n        } else {\\n            if (nums[high] !== 0) {\\n                [nums[low], nums[high]] = [nums[high], nums[low]];\\n                low++;\\n            }\\n            high++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 72364,
                "title": "javascript-124ms",
                "content": "var moveZeroes = function(nums) {\\n\\n    //two pointers\\n    var pos = 0;\\n    for (var i = 0; i < nums.length; i++) {\\n        if (nums[i] !== 0) {\\n            nums[pos++] = nums[i];\\n        }\\n    }\\n    for (i = pos; i < nums.length; i++) {\\n        nums[i] = 0;\\n    }\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var moveZeroes = function(nums) {\\n\\n    //two pointers\\n    var pos = 0;\\n    for (var i = 0; i < nums.length; i++) {\\n        if (nums[i] !== 0) {\\n            nums[pos++] = nums[i];\\n        }\\n    }\\n    for (i = pos; i < nums.length; i++) {\\n        nums[i] = 0;\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1630405,
                "title": "easy-c-solution-with-two-pointer-approach-line-by-line-explanation",
                "content": "Here I\\'ve used two pointers approach.\\nSteps:\\n1. Declare 2 pointers i and j.\\n2. Initialize i at 0 and j at 1.\\n3. Run the while loop until j is less than n (size of the array).\\n4. Now use if-else statements to compare.\\n5. If the value at both i and j index is 0, move the j pointer by 1 position.\\n6. If the value at i is 0 and value at j index is not zero, swap both the values and move both the pointers by 1 position.\\n7. In else case, move both the pointers by 1 position.\\n\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n = nums.size();\\n        int i = 0;\\n        int j = 1;\\n        while(j<n){\\n            if(nums[i]==0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            else if(nums[i]==0 && nums[j]==0){\\n                j++;\\n            }\\n            else{\\n                i++;\\n                j++;\\n            }\\n        }\\n    }\\n};\\n```\\n\\nFeel free to like and comment if you find this solution helpful, thanks.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n = nums.size();\\n        int i = 0;\\n        int j = 1;\\n        while(j<n){\\n            if(nums[i]==0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            else if(nums[i]==0 && nums[j]==0){\\n                j++;\\n            }\\n            else{\\n                i++;\\n                j++;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72422,
                "title": "javascript-solution",
                "content": "    function moveZeroes(nums) {\\n      var idx = 0;\\n      for (var i = 0; i < nums.length; i++) {\\n        if (nums[i] !== 0) {\\n          nums[idx] = nums[i];\\n          nums[i] = idx === i ? nums[i] : 0;\\n          idx++;\\n        }\\n      }\\n    }",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    function moveZeroes(nums) {\\n      var idx = 0;\\n      for (var i = 0; i < nums.length; i++) {\\n        if (nums[i] !== 0) {\\n          nums[idx] = nums[i];\\n          nums[i] = idx === i ? nums[i] : 0;\\n          idx++;\\n        }\\n      }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 72074,
                "title": "share-my-one-line-python-solution",
                "content": "nums.sort(key= lambda x: 1 if x == 0 else 0)",
                "solutionTags": [
                    "Python"
                ],
                "code": "nums.sort(key= lambda x: 1 if x == 0 else 0)",
                "codeTag": "Unknown"
            },
            {
                "id": 3882065,
                "title": "simple-c-solution",
                "content": "# Using Extra Space\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        vector<int> temp(nums.size(),0);\\n        int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                temp[k++]=nums[i];\\n            }\\n        }\\n        nums=temp;\\n    }\\n};\\n```\\n# In-Place\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                nums[k++]=nums[i];\\n            }\\n        }\\n        for(int i=k;i<nums.size();i++){\\n            nums[i]=0;\\n        }\\n```\\n# In-Place using Two Pointers\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0,j=0;\\n        while(i<nums.size() && j<nums.size()){\\n            if(nums[j]!=0){\\n                swap(nums[i++],nums[j++]);\\n            }\\n            else{\\n                j++;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        vector<int> temp(nums.size(),0);\\n        int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                temp[k++]=nums[i];\\n            }\\n        }\\n        nums=temp;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                nums[k++]=nums[i];\\n            }\\n        }\\n        for(int i=k;i<nums.size();i++){\\n            nums[i]=0;\\n        }\\n```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0,j=0;\\n        while(i<nums.size() && j<nums.size()){\\n            if(nums[j]!=0){\\n                swap(nums[i++],nums[j++]);\\n            }\\n            else{\\n                j++;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1496643,
                "title": "java-tc-o-n-sc-o-1-one-pass-with-minimum-number-of-write-operations",
                "content": "```java\\n/**\\n * Find Non Zero element to swap. Keep index of Leftmost Zero.\\n *\\n * Total number of write operations = Number of Non-Zero elements that need to\\n *                                    be moved\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Length of input array.\\n */\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        if (nums == null) {\\n            throw new IllegalArgumentException(\"Input array is null\");\\n        }\\n        if (nums.length <= 1) {\\n            return;\\n        }\\n\\n        int insertPos = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                if (insertPos != i) {\\n                    nums[insertPos] = nums[i];\\n                    nums[i] = 0;\\n                }\\n                insertPos++;\\n            }\\n        }\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```java\\n/**\\n * Find Non Zero element to swap. Keep index of Leftmost Zero.\\n *\\n * Total number of write operations = Number of Non-Zero elements that need to\\n *                                    be moved\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Length of input array.\\n */\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        if (nums == null) {\\n            throw new IllegalArgumentException(\"Input array is null\");\\n        }\\n        if (nums.length <= 1) {\\n            return;\\n        }\\n\\n        int insertPos = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                if (insertPos != i) {\\n                    nums[insertPos] = nums[i];\\n                    nums[i] = 0;\\n                }\\n                insertPos++;\\n            }\\n        }\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72070,
                "title": "simple-javascript-solution",
                "content": "The idea is remove each 0 and add 0 at the end of array, so I use reverse iterate to do it!\\n\\n    var moveZeroes = function(nums) {       \\n        for(var i = nums.length;i--;){\\n            if(nums[i]===0){\\n                nums.splice(i,1)\\n                nums.push(0);\\n            }\\n        }\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "The idea is remove each 0 and add 0 at the end of array, so I use reverse iterate to do it!\\n\\n    var moveZeroes = function(nums) {       \\n        for(var i = nums.length;i--;){\\n            if(nums[i]===0){\\n                nums.splice(i,1)\\n                nums.push(0);\\n            }\\n        }\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 1126849,
                "title": "swift-move-zeroes",
                "content": "**Accepted solution + tests from the problem** \\uD83D\\uDE09\\n\\n```swift\\nclass Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        var i = 0, zero = 0\\n        while i < nums.count - zero {\\n            if nums[i] == 0 {\\n                zero += 1\\n                nums.append(0)\\n                nums.remove(at: i)\\n            } else {\\n                i += 1\\n            }\\n        }\\n    }\\n}\\n\\nfunc tests() {\\n    let s = Solution()\\n    var example1 = [0,1,0,3,12]\\n    s.moveZeroes(&example1)\\n    assert(example1 == [1,3,12,0,0]) // good\\n    \\n    var example2 = [0]\\n    s.moveZeroes(&example2)\\n    assert(example2 == [0]) // good\\n}\\n\\ntests()\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        var i = 0, zero = 0\\n        while i < nums.count - zero {\\n            if nums[i] == 0 {\\n                zero += 1\\n                nums.append(0)\\n                nums.remove(at: i)\\n            } else {\\n                i += 1\\n            }\\n        }\\n    }\\n}\\n\\nfunc tests() {\\n    let s = Solution()\\n    var example1 = [0,1,0,3,12]\\n    s.moveZeroes(&example1)\\n    assert(example1 == [1,3,12,0,0]) // good\\n    \\n    var example2 = [0]\\n    s.moveZeroes(&example2)\\n    assert(example2 == [0]) // good\\n}\\n\\ntests()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 549079,
                "title": "javascript-swap-array-elements",
                "content": "Find non zero numbers and count it.\\nThe count is index of non zero numbers.\\n\\n```\\nvar moveZeroes = function(nums) {\\n  let j = 0  // nonzero count\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] !== 0) {\\n\\t  // swap elements\\n      [nums[j], nums[i]] = [nums[i], nums[j]]\\n      j++\\n    }\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar moveZeroes = function(nums) {\\n  let j = 0  // nonzero count\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] !== 0) {\\n\\t  // swap elements\\n      [nums[j], nums[i]] = [nums[i], nums[j]]\\n      j++\\n    }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 258825,
                "title": "c-python-straight-forward-clean-concise",
                "content": "**Python**\\n```python\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        k = 0\\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                nums[k] = nums[i]\\n                k += 1\\n                \\n        while k < len(nums):\\n            nums[k] = 0\\n            k += 1\\n```\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int k = 0;\\n        int n = nums.size();\\n        \\n        for (int i = 0; i < n; i++)\\n            if (nums[i] != 0)\\n                nums[k++] = nums[i];\\n        \\n        for (int i = k; i < n; i++)\\n            nums[i] = 0;\\n    }\\n};\\n```\\n**Complexity**\\n- Time: `O(N)`\\n- Space: `O(1)`",
                "solutionTags": [
                    "C++"
                ],
                "code": "```python\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        k = 0\\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                nums[k] = nums[i]\\n                k += 1\\n                \\n        while k < len(nums):\\n            nums[k] = 0\\n            k += 1\\n```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int k = 0;\\n        int n = nums.size();\\n        \\n        for (int i = 0; i < n; i++)\\n            if (nums[i] != 0)\\n                nums[k++] = nums[i];\\n        \\n        for (int i = k; i < n; i++)\\n            nums[i] = 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2460373,
                "title": "c-100-two-pointer-single-loop-o-n-solution",
                "content": "***Please upvote if you like it!!!***\\n\\n**Approach:- (Use two pointer and swap approach)**\\n1. Take to integer i and j set both as \\'0\\'.\\n2. Take a loop iterate until i and j is less than length of given string.\\n\\t * if nums[j] is equal to 0,then swap(nums[i],nums[j]) and increment i & j by1.\\n\\t * else just increment j++.\\n\\n**~Time Complexity: O(N).**\\n**~Space Complexity: O(1).**\\n\\n**Code:-**\\n\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0,j=0;\\n        while(i<nums.size() && j<nums.size()){\\n            if(nums[j]!=0 ){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }else j++;\\n        }  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0,j=0;\\n        while(i<nums.size() && j<nums.size()){\\n            if(nums[j]!=0 ){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }else j++;\\n        }  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72419,
                "title": "java-short-and-swappy-1ms",
                "content": "\\t\\n\\t\\n\\t\\n\\tpublic class Solution {    \\n\\t    \\n\\t    public void moveZeroes(int[] nums) {\\n\\t        int z = -1;\\n\\t        for (int i=0; i< nums.length; i++) {\\n\\t            int temp = nums[i];\\n\\t            if (temp != 0) {\\n\\t                nums[i]=nums[++z];\\n\\t                nums[z]=temp;\\n\\t            }\\n\\t        }\\n\\t    }\\n\\t\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {    \\n\\t    \\n\\t    public void moveZeroes(int[] nums) {\\n\\t        int z = -1;\\n\\t        for (int i=0; i< nums.length; i++) {\\n\\t            int temp = nums[i];\\n\\t            if (temp != 0) {\\n\\t                nums[i]=nums[++z];\\n\\t                nums[z]=temp;\\n\\t            }",
                "codeTag": "Java"
            },
            {
                "id": 3649978,
                "title": "two-pointer-approach-tc-o-n-sc-o-1-c",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n     O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n     O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        if(nums.size()==1) return;\\n        int l=0, r=0;\\n        while(r<nums.size()){\\n            if(nums[r]!=0){\\n                swap(nums[l],nums[r]);\\n                l++;\\n                \\n            }\\n            r++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        if(nums.size()==1) return;\\n        int l=0, r=0;\\n        while(r<nums.size()){\\n            if(nums[r]!=0){\\n                swap(nums[l],nums[r]);\\n                l++;\\n                \\n            }\\n            r++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3400970,
                "title": "pointers-technique-python",
                "content": "# Intuition\\nHere is my solution to this problem that uses two pointers technique.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n Our fast pointer does not visit the same spot twice.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n    All operations are made in-place\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\nIf you like my solution, I will really appreciate your upvoting. It will help other python-developers to find it faster. And as always, I wish you an enjoyable time on LeetCode.\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: list) -> None:\\n        slow = 0\\n        for fast in range(len(nums)):\\n            if nums[fast] != 0 and nums[slow] == 0:\\n                nums[slow], nums[fast] = nums[fast], nums[slow]\\n\\n            # wait while we find a non-zero element to\\n            # swap with you\\n            if nums[slow] != 0:\\n                slow += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Line Sweep"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: list) -> None:\\n        slow = 0\\n        for fast in range(len(nums)):\\n            if nums[fast] != 0 and nums[slow] == 0:\\n                nums[slow], nums[fast] = nums[fast], nums[slow]\\n\\n            # wait while we find a non-zero element to\\n            # swap with you\\n            if nums[slow] != 0:\\n                slow += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72418,
                "title": "java-o-n-solution",
                "content": "public void moveZeroes(int[] nums) {\\n    int count = 0 , size = nums.length;\\n        \\n    for (int i = 0; i< size; i++) {\\n        if ( nums[i] == 0) { count ++;}\\n         if ( nums[i] != 0) { nums[i - count] = nums[i];}\\n    }\\n    for (int i = 0; i < count; i++ ) {\\n        nums[size - count  + i] = 0;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "public void moveZeroes(int[] nums) {\\n    int count = 0 , size = nums.length;\\n        \\n    for (int i = 0; i< size; i++) {\\n        if ( nums[i] == 0) { count ++;}\\n         if ( nums[i] != 0) { nums[i - count] = nums[i];}\\n    }\\n    for (int i = 0; i < count; i++ ) {\\n        nums[size - count  + i] = 0;\\n    }\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1748937,
                "title": "python-simple-and-clean-python-solution-by-two-approach",
                "content": "# 1. Approach 1 By Removing and Appending at Last\\n# If It is Useful To Understand Please UpVote Me \\uD83D\\uDD3C\\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\tclass Solution:\\n\\t\\tdef moveZeroes(self, nums: List[int]) -> None:\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tDo not return anything, modify nums in-place instead.\\n\\t\\t\\t\"\"\"\\n\\n\\t\\t\\tfor i in nums:\\n\\t\\t\\t\\tif i==0:\\n\\t\\t\\t\\t\\tnums.remove(i)\\n\\t\\t\\t\\t\\tnums.append(0)\\n\\n# 2. Approach 2 By Two Pointers Approach\\n# If It is Useful To Understand Please UpVote Me \\uD83D\\uDD3C\\uD83D\\uDE4F\\uD83D\\uDE4F\\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\tclass Solution:\\n\\t\\tdef moveZeroes(self, nums: List[int]) -> None:\\n\\n\\t\\t\\tp,q=0,0\\n\\t\\t\\twhile q<len(nums):\\n\\t\\t\\t\\tif nums[q]==0:\\n\\t\\t\\t\\t\\tq=q+1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tnums[p],nums[q]=nums[q],nums[p]\\n\\t\\t\\t\\t\\tp=p+1\\n\\t\\t\\t\\t\\tq=q+1\\n\\n\\t\\t\\treturn nums\\n\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "# 1. Approach 1 By Removing and Appending at Last\\n# If It is Useful To Understand Please UpVote Me \\uD83D\\uDD3C\\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\tclass Solution:\\n\\t\\tdef moveZeroes(self, nums: List[int]) -> None:\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tDo not return anything, modify nums in-place instead.\\n\\t\\t\\t\"\"\"\\n\\n\\t\\t\\tfor i in nums:\\n\\t\\t\\t\\tif i==0:\\n\\t\\t\\t\\t\\tnums.remove(i)\\n\\t\\t\\t\\t\\tnums.append(0)\\n\\n# 2. Approach 2 By Two Pointers Approach\\n# If It is Useful To Understand Please UpVote Me \\uD83D\\uDD3C\\uD83D\\uDE4F\\uD83D\\uDE4F\\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\tclass Solution:\\n\\t\\tdef moveZeroes(self, nums: List[int]) -> None:\\n\\n\\t\\t\\tp,q=0,0\\n\\t\\t\\twhile q<len(nums):\\n\\t\\t\\t\\tif nums[q]==0:\\n\\t\\t\\t\\t\\tq=q+1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tnums[p],nums[q]=nums[q],nums[p]\\n\\t\\t\\t\\t\\tp=p+1\\n\\t\\t\\t\\t\\tq=q+1\\n\\n\\t\\t\\treturn nums\\n\\n\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 1040848,
                "title": "python-3-detailed-explanation-that-is-easy-to-grasp",
                "content": "This question definitely sits high on my hate list.\\n\\n**Idea**:\\nStart with two pointers (```l``` and ```r```) both at index zero.\\nThe left poiner (```l```) will look for places where we have a zero. The right pointer (```r```) will look for numbers that can substitute that zero.\\nAfter that, in the main loop, we need to consider all cases.\\nIf we found the zero spot (```nums[l] == 0```), we make a decision:\\nif ```nums[r]``` is a non-zero number, we have everything for a swap. Make this swap and move both pointers forward. If ```nums[r]``` is a zero, it\\'s not good, keep looking by moving ```r```.\\n Finally we have a case when ```nums[l] != 0```. Then we need to leave this cell by moving ```l``` and move ```r``` in order to keep the process going.\\n \\n```\\ndef moveZeroes(nums):\\n    l, r = 0, 0\\n    while r < len(nums):\\n        if nums[l] == 0:\\n            if nums[r] != 0:\\n                nums[l], nums[r] = nums[r], nums[l]\\n                l += 1\\n                r += 1\\n            else:\\n                r += 1\\n        else:\\n            l += 1\\n            r += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```l```\n```r```\n```l```\n```r```\n```nums[l] == 0```\n```nums[r]```\n```nums[r]```\n```r```\n```nums[l] != 0```\n```l```\n```r```\n```\\ndef moveZeroes(nums):\\n    l, r = 0, 0\\n    while r < len(nums):\\n        if nums[l] == 0:\\n            if nums[r] != 0:\\n                nums[l], nums[r] = nums[r], nums[l]\\n                l += 1\\n                r += 1\\n            else:\\n                r += 1\\n        else:\\n            l += 1\\n            r += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 72099,
                "title": "very-simple-python-solutions",
                "content": "\\nSolution 1: traverse and swap last 0 and last non 0\\n\\n    class Solution(object):\\n        def moveZeroes(self, nums):\\n            \"\"\"\\n            :type nums: List[int]\\n            :rtype: void Do not return anything, modify nums in-place instead.\\n            \"\"\"\\n            last0 = 0\\n            for i in range(0,len(nums)):\\n                if (nums[i]!=0):\\n                    nums[i],nums[last0] = nums[last0],nums[i]\\n                    last0+=1\\n        \\nSolution 2 : one-liner from @toontong:  use sort() with customized compare function\\n            \\n    class Solution(object):\\n        def moveZeroes(self, nums):\\n            \"\"\"\\n            :type nums: List[int]\\n            :rtype: void Do not return anything, modify nums in-place instead.\\n            \"\"\"\\n            nums.sort(cmp=lambda a,b: 0 if b else -1)",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\nSolution 1: traverse and swap last 0 and last non 0\\n\\n    class Solution(object):\\n        def moveZeroes(self, nums):\\n            \"\"\"\\n            :type nums: List[int]\\n            :rtype: void Do not return anything, modify nums in-place instead.\\n            \"\"\"\\n            last0 = 0\\n            for i in range(0,len(nums)):\\n                if (nums[i]!=0):\\n                    nums[i],nums[last0] = nums[last0],nums[i]\\n                    last0+=1\\n        \\nSolution 2 : one-liner from @toontong:  use sort() with customized compare function\\n            \\n    class Solution(object):\\n        def moveZeroes(self, nums):\\n            \"\"\"\\n            :type nums: List[int]\\n            :rtype: void Do not return anything, modify nums in-place instead.\\n            \"\"\"\\n            nums.sort(cmp=lambda a,b: 0 if b else -1)",
                "codeTag": "Java"
            },
            {
                "id": 72149,
                "title": "java-solution-of-move-zeroes",
                "content": "public class Solution {\\n\\n    public void moveZeroes(int[] nums) {\\n\\n        if(nums == null || nums.length == 0){\\n            return;\\n        }\\n        \\n        int j = 0;\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] != 0){\\n                nums[j] = nums[i];\\n                j++;\\n            }\\n        }\\n        \\n        for(int m = j; m < nums.length; m++){\\n            nums[m] = 0;\\n        }\\n        \\n        return;\\n    } \\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public void moveZeroes(int[] nums) {\\n\\n        if(nums == null || nums.length == 0){\\n            return;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 812522,
                "title": "javascript-solution-283",
                "content": "```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nlet moveZeroes = function(nums) {\\n        for(let i= nums.length-1; i>=0; i--){\\n            if(nums[i]===0){\\n                nums.push(0) \\n                nums.splice(i,1)\\n            }\\n        }\\n        return nums\\n    };\\n```\\n**Runtime: 80 ms, faster than 80.00% of JavaScript online submissions for Move Zeroes.**\\n\\n**Memory Usage: 38.6 MB, less than 24.75% of JavaScript online submissions for Move Zeroes.**\\n\\n**Feedback Appreciated**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nlet moveZeroes = function(nums) {\\n        for(let i= nums.length-1; i>=0; i--){\\n            if(nums[i]===0){\\n                nums.push(0) \\n                nums.splice(i,1)\\n            }\\n        }\\n        return nums\\n    };\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3190560,
                "title": "python-clean-simple-o-n-solution-with-no-extra-space",
                "content": "\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        k = 0\\n        for i in nums:\\n            if i != 0:\\n                nums[k] = i\\n                k+=1\\n\\n        for i in range(k,len(nums)):\\n            nums[i] = 0\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        k = 0\\n        for i in nums:\\n            if i != 0:\\n                nums[k] = i\\n                k+=1\\n\\n        for i in range(k,len(nums)):\\n            nums[i] = 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2872504,
                "title": "easiest-faang-method-ever",
                "content": "\\n\\n# \\uD83D\\uDDEF\\uFE0FApproach :-\\nSimilar to Dutch National Flag Algorithm\\uD83D\\uDCA1\\n<!-- Describe your approach to solving the problem. -->\\n\\n# \\uD83D\\uDDEF\\uFE0FComplexity :-\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# \\uD83D\\uDDEF\\uFE0FCode :-\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]==0) i++;\\n            else{\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n        }  \\n    }\\n};\\n//Similar to Dutch National Flag Algo \\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]==0) i++;\\n            else{\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n        }  \\n    }\\n};\\n//Similar to Dutch National Flag Algo \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2189498,
                "title": "javascript-simple-solution-o-n-2",
                "content": "```\\nvar moveZeroes = function(nums) {\\n    let size = nums.length;\\n     for (let i = 0; i < size; i++) {\\n         if (nums[i] === 0) {\\n             nums.splice(i, 1);\\n             nums.push(0);\\n             i--;\\n             size--;\\n         }\\n     }\\n    return nums;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar moveZeroes = function(nums) {\\n    let size = nums.length;\\n     for (let i = 0; i < size; i++) {\\n         if (nums[i] === 0) {\\n             nums.splice(i, 1);\\n             nums.push(0);\\n             i--;\\n             size--;\\n         }\\n     }\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 404010,
                "title": "python-easy-solution",
                "content": "\\tclass Solution(object):\\n\\t\\tdef moveZeroes(self, nums):\\n\\t\\t\\ti=0\\n\\t\\t\\tn = len(nums)\\n\\t\\t\\twhile i <n:\\n\\t\\t\\t\\tif nums[i]==0:\\n\\t\\t\\t\\t\\tnums.pop(i)\\n\\t\\t\\t\\t\\tnums.append(0)\\n\\t\\t\\t\\t\\tn-=1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\ti+=1\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tclass Solution(object):\\n\\t\\tdef moveZeroes(self, nums):\\n\\t\\t\\ti=0\\n\\t\\t\\tn = len(nums)\\n\\t\\t\\twhile i <n:\\n\\t\\t\\t\\tif nums[i]==0:\\n\\t\\t\\t\\t\\tnums.pop(i)\\n\\t\\t\\t\\t\\tnums.append(0)\\n\\t\\t\\t\\t\\tn-=1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\ti+=1\\n",
                "codeTag": "Java"
            },
            {
                "id": 72467,
                "title": "c-1-line-or-3-lines-clean-code",
                "content": "    void moveZeroes(vector<int>& nums) {\\n      for (int i = 0, j = 0; i < nums.size(); i++) if(nums[i] != 0) swap(nums[i], nums[j++]);\\n    }\\n\\n     void moveZeroes(vector<int>& nums) {\\n        for (int i = 0, j = 0; i < nums.size(); i++)  {\\n            if (nums[i] != 0) swap(nums[i], nums[j++]);\\n        }\\n    }",
                "solutionTags": [],
                "code": "    void moveZeroes(vector<int>& nums) {\\n      for (int i = 0, j = 0; i < nums.size(); i++) if(nums[i] != 0) swap(nums[i], nums[j++]);\\n    }\\n\\n     void moveZeroes(vector<int>& nums) {\\n        for (int i = 0, j = 0; i < nums.size(); i++)  {\\n            if (nums[i] != 0) swap(nums[i], nums[j++]);\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3031230,
                "title": "1ms-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nStep 1: Iterates the Array if element in the array is non-zero then store it into nums[j].\\nStep 2:Use a while loop & fill remaining elements by zero.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int j = 0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i] != 0){\\n                nums[j] = nums[i];\\n                j++;\\n            }\\n        }\\n        while(j < nums.length){\\n            nums[j] = 0;\\n            j++;\\n        }            \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int j = 0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i] != 0){\\n                nums[j] = nums[i];\\n                j++;\\n            }\\n        }\\n        while(j < nums.length){\\n            nums[j] = 0;\\n            j++;\\n        }            \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72064,
                "title": "8ms-simple-c-solution",
                "content": "    void moveZeroes(int* nums, int numsSize) {\\n        int totalZeros = 0;\\n        \\n        for(int i = 0; i < numsSize; i++) {\\n            if(nums[i] == 0) {\\n                totalZeros++;\\n            }\\n            else {\\n                nums[i - totalZeros] = nums[i];\\n            }\\n        }\\n        \\n        for(int i = (numsSize - totalZeros); i < numsSize; i++) {\\n            nums[i] = 0;\\n        }\\n    }",
                "solutionTags": [],
                "code": "    void moveZeroes(int* nums, int numsSize) {\\n        int totalZeros = 0;\\n        \\n        for(int i = 0; i < numsSize; i++) {\\n            if(nums[i] == 0) {\\n                totalZeros++;\\n            }\\n            else {\\n                nums[i - totalZeros] = nums[i];\\n            }\\n        }\\n        \\n        for(int i = (numsSize - totalZeros); i < numsSize; i++) {\\n            nums[i] = 0;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3950089,
                "title": "python3-beats-99-optimized-in-place-rearrangement",
                "content": "# Solution no. 01\\n\\n---\\n\\n\\n# Intuition\\nWhen approaching this problem, the idea is to perform an in-place modification of the given list of numbers. We can achieve this by first iterating through the list and moving all non-zero elements to the beginning of the list. Once we have moved all non-zero elements, we can fill the remaining positions with zeros. This approach ensures that the original order of non-zero elements is preserved while zeros are pushed to the end of the list.\\n\\n# Approach\\n1. Initialize a variable index to keep track of the position where the next non-zero element should be placed.\\n1. Iterate through each element num in the nums list.\\n   - If num is not equal to zero, assign num to the position index in the nums list and increment index.\\n1. After the iteration, all non-zero elements have been placed at the beginning of the list, and index indicates the position where the first zero should be placed.\\n1. Iterate from index to the end of the list, assigning zero to each position to fill the remaining positions with zeros.\\n\\nBy following this approach, we ensure that all non-zero elements are moved to the start of the list while maintaining their original order, and the remaining positions are filled with zeros.\\n\\n# Complexity\\n- Time complexity:\\n    - The first pass through the list takes O(n) time to move non-zero elements to the start of the list.\\n    - The second pass through the list takes O(n) time to fill the remaining positions with zeros.\\n    - The overall time complexity is dominated by the linear passes through the list, resulting in **O(n)** time complexity.\\n\\n- Space complexity:\\n    - The algorithm only uses a constant amount of extra space, regardless of the input size. Hence Space complexity of this code is **O(1)**\\n    - It modifies the input list in-place without requiring additional data structures.\\n\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        index = 0\\n\\n        # Place non-zero elements at the start of the list\\n        for num in nums:\\n            if num != 0:\\n                nums[index] = num\\n                index += 1\\n\\n        # Fill the remaining positions with zeroes\\n        while index < len(nums):\\n            nums[index] = 0\\n            index += 1\\n```\\n\\n---\\n\\n\\n\\n# Solution no. 02\\n\\n---\\n\\n# Intuition\\nInstead of directly filling the positions with zero after placing non-zero elements, we can maintain a pointer to indicate the position where the next non-zero element should be placed. This way, we only perform assignments when necessary, reducing the total number of assignments.\\n\\n# Approach\\n1. Initialize a variable index to 0, which represents the position where the next non-zero element should be placed.\\n1. Iterate through each element num in the nums list.\\n1. If num is not equal to zero, swap nums[index] and nums[i], and increment index.\\n1. After the iteration, all non-zero elements have been moved to their correct positions, and all positions after index are filled with zeros.\\n1. By swapping non-zero elements with the position index, we achieve the desired result without needing a separate loop to fill remaining positions with zeros.\\n\\nComplexity\\n- Time complexity: \\n    - **O(n)**\\n    - The single pass through the list takes O(n) time.\\n    - The number of assignments is minimized, which improves the constant factors involved in the time complexity.\\n\\n- Space complexity: \\n    - **O(1)**\\n    - The algorithm only uses a constant amount of extra space for variables.\\n    - It modifies the input list in-place without requiring additional data structures.\\n    \\nWhile this alternative approach doesn\\'t change the big-O time and space complexities, it might result in slightly better performance due to the reduced number of assignments.\\n\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        index = 0  \\n       \\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                # If the current element is non-zero, swap it with the element at index\\n                # This effectively moves non-zero elements to the beginning of the list\\n                nums[i], nums[index] = nums[index], nums[i]\\n                index += 1 \\n                \\n```\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        index = 0\\n\\n        # Place non-zero elements at the start of the list\\n        for num in nums:\\n            if num != 0:\\n                nums[index] = num\\n                index += 1\\n\\n        # Fill the remaining positions with zeroes\\n        while index < len(nums):\\n            nums[index] = 0\\n            index += 1\\n```\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        index = 0  \\n       \\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                # If the current element is non-zero, swap it with the element at index\\n                # This effectively moves non-zero elements to the beginning of the list\\n                nums[i], nums[index] = nums[index], nums[i]\\n                index += 1 \\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1581373,
                "title": "javascript-o-n-91",
                "content": "let index = 0;\\n    const length = nums.length;\\n\\n    for (let i = 0; i < length; i++) {\\n        if (nums[i] !== 0) {\\n            nums[index] = nums[i];\\n            index++;\\n        }\\n    }\\n\\n    for (let i = index; i < length; i++) {\\n        nums[i] = 0;\\n    }\\n\\n    return nums;",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "let index = 0;\\n    const length = nums.length;\\n\\n    for (let i = 0; i < length; i++) {\\n        if (nums[i] !== 0) {\\n            nums[index] = nums[i];\\n            index++;\\n        }\\n    }\\n\\n    for (let i = index; i < length; i++) {\\n        nums[i] = 0;\\n    }\\n\\n    return nums;",
                "codeTag": "Unknown"
            },
            {
                "id": 724397,
                "title": "idiomatic-go-solution",
                "content": "```\\nfunc moveZeroes(nums []int)  {\\n    nonZeroIndex := 0\\n    for i := 0; i < len(nums); i++ {\\n        if nums[i] != 0 {\\n            nums[i], nums[nonZeroIndex] = nums[nonZeroIndex], nums[i]\\n            nonZeroIndex++\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc moveZeroes(nums []int)  {\\n    nonZeroIndex := 0\\n    for i := 0; i < len(nums); i++ {\\n        if nums[i] != 0 {\\n            nums[i], nums[nonZeroIndex] = nums[nonZeroIndex], nums[i]\\n            nonZeroIndex++\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1617399,
                "title": "javascript-typescript-really-clean-and-easy-two-pointer-solution",
                "content": "I\\'ve seen a lot of solutions that use splice, which imo is not in the spirit of the excercise and would probably get you in hot water if used during an interview.\\n\\nHere\\'s a really neat two pointer solution:\\n\\n```ts\\nfunction moveZeroes(nums: number[]): void {\\n  let writePointer = 0;\\n  for (let readPointer = 0; readPointer < nums.length; readPointer ++) {\\n    const val = nums[readPointer];\\n    nums[readPointer] = 0;\\n    if (val!==0) {\\n      nums[writePointer] = val;\\n      writePointer ++;\\n    }\\n  }\\n};\\n```\\n\\nExpanation:\\n\\nWe use two pointers, one to track the current value being read in the array, the other to track the position we can write in.\\n\\nIf we have an array without any zeroes, then the write pointer and read pointer will stay in keeping the whole time.\\n\\nHowever, if we do encounter a zero when reading using the read pointer, we simply do not increment the write pointer.\\n\\nThis means the next write of a non zero will lag behind the read pointer, overwriting the zero we found.\\n\\nFor simplicities sake, and to ensure trailing zeroes are maintained properly, we always assign 0 to the index we just read from. \\n\\nIt may be filled in at a later date with a non zero value if one exists. If not it will remain zero, along with all subsequent indexes, satisfying the excercises\\' criteria.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Two Pointers"
                ],
                "code": "```ts\\nfunction moveZeroes(nums: number[]): void {\\n  let writePointer = 0;\\n  for (let readPointer = 0; readPointer < nums.length; readPointer ++) {\\n    const val = nums[readPointer];\\n    nums[readPointer] = 0;\\n    if (val!==0) {\\n      nums[writePointer] = val;\\n      writePointer ++;\\n    }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1554462,
                "title": "0-ms-very-easy-c",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int left=0,right=0,temp;\\n        while(right<nums.size())\\n        {\\n            if(nums[right]==0)\\n                ++right;\\n            else\\n            {\\n                temp=nums[left];\\n                nums[left]=nums[right];\\n                nums[right]=temp;\\n                ++left;\\n                ++right;\\n            }\\n        }       \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1019699,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int size = nums.size();\\n        \\n        int a=0;\\n        \\n        for(int i=0; i<size; i++) {\\n            if(nums[i]!=0) {\\n                swap(nums[i], nums[a]);\\n                a++;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int size = nums.size();\\n        \\n        int a=0;\\n        \\n        for(int i=0; i<size; i++) {\\n            if(nums[i]!=0) {\\n                swap(nums[i], nums[a]);\\n                a++;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1001971,
                "title": "python-easy-solution-o-n-time-o-1-space",
                "content": "```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        c=0\\n        for i in range(len(nums)):\\n            if nums[i]!=0:\\n                nums[c],nums[i]=nums[i],nums[c]\\n                c+=1\\n        return nums\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        c=0\\n        for i in range(len(nums)):\\n            if nums[i]!=0:\\n                nums[c],nums[i]=nums[i],nums[c]\\n                c+=1\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72323,
                "title": "a-o-n-java-solution",
                "content": "public void moveZeroes(int[] nums) {\\n\\n        int count=0;\\n        for (int i = 0; i < nums.length; i++) {\\n\\t\\t\\tif(nums[i]==0)\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tif(count!=0&&nums[i]!=0){\\n\\t\\t\\t\\tnums[i-count]=nums[i];\\n\\t\\t\\t\\tnums[i]=0;\\n\\t\\t\\t}\\n\\t\\t}\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "public void moveZeroes(int[] nums) {\\n\\n        int count=0;\\n        for (int i = 0; i < nums.length; i++) {\\n\\t\\t\\tif(nums[i]==0)\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tif(count!=0&&nums[i]!=0){\\n\\t\\t\\t\\tnums[i-count]=nums[i];\\n\\t\\t\\t\\tnums[i]=0;\\n\\t\\t\\t}\\n\\t\\t}\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 2733623,
                "title": "there-are-6-approaches-best-time-and-space-complexity",
                "content": "# There are six approaches.\\n**if you have any doubt please comment below.**\\n\\n\\n```Approach 1:```\\n\\ncode:\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n                \\n        int index = 0; \\n        for (int i=0;i<nums.size();i++){\\n\\t\\t\\tif (nums[i]==0) index++; \\n\\t\\t\\telse if (index > 0) {\\n\\t\\t\\t\\tint temp = nums[i];\\n\\t\\t\\t\\tnums[i]=0;\\n                nums[i-index]=temp;\\n\\t\\t\\t}\\n        }\\n    }\\n};\\n```\\n\\n\\n```Approach 2:```\\n\\ncode:\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) { \\n\\t\\n         int j = 0;\\n        \\n         for (int i = 0; i < nums.size(); i++) {\\n             if (nums[i] != 0) {\\n                 nums[j++] = nums[i];\\n             }\\n         }\\n         while (j < nums.size()) {\\n             nums[j] = 0;\\n             j++;\\n         }\\n        \\n    }\\n};\\n```\\n\\n```Approach 3:```\\n\\ncode:\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n         int left = 0, right = 1;\\n\\t\\t \\n         while(right<nums.size() && left<right)\\n         {\\n             if(nums[left] == 0 && nums[right] != 0)\\n             {\\n                 int temp = nums[left];\\n                 nums[left++] = nums[right];\\n                 nums[right++] = temp;\\n                \\n             }\\n             else if(nums[left] == 0 && nums[right] == 0){\\n                 right++;\\n             }else if(nums[left] != 0 ){\\n                 left++;\\n                 right++;\\n             }else{\\n                 left++;\\n             }\\n         }\\n    }\\n};\\n```\\n\\n# Now using predefined function :\\n\\n```Approach 4:```\\n\\n\\n--> swap()\\n\\ncode:\\n\\n\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n\\t\\tfor(int i=0,next=0;i<nums.size();++i){\\n\\t\\t\\tif(nums[i] != 0) {\\n\\t\\t\\t\\tswap(nums[i],nums[next++]);\\n\\t\\t\\t}\\n\\t\\t}\\t\\n    }\\n};\\n```\\n# Using STL (only for c++):\\n```Approach 5:```\\n\\ncode:\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n\\t\\n        stable_partition(begin(nums),end(nums),[](int i){return i;});\\n    }\\n};\\n```\\n\\n```Approach 6:```\\n\\ncode:\\n```\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n      \\n        stable_partition(rbegin(nums),rend(nums),logical_not<int>());\\n    }\\n};\\n```\\n\\nHope it will help you\\uD83D\\uDE4C. \\nThank you",
                "solutionTags": [
                    "C"
                ],
                "code": "```Approach 1:```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n                \\n        int index = 0; \\n        for (int i=0;i<nums.size();i++){\\n\\t\\t\\tif (nums[i]==0) index++; \\n\\t\\t\\telse if (index > 0) {\\n\\t\\t\\t\\tint temp = nums[i];\\n\\t\\t\\t\\tnums[i]=0;\\n                nums[i-index]=temp;\\n\\t\\t\\t}\\n        }\\n    }\\n};\\n```\n```Approach 2:```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) { \\n\\t\\n         int j = 0;\\n        \\n         for (int i = 0; i < nums.size(); i++) {\\n             if (nums[i] != 0) {\\n                 nums[j++] = nums[i];\\n             }\\n         }\\n         while (j < nums.size()) {\\n             nums[j] = 0;\\n             j++;\\n         }\\n        \\n    }\\n};\\n```\n```Approach 3:```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n         int left = 0, right = 1;\\n\\t\\t \\n         while(right<nums.size() && left<right)\\n         {\\n             if(nums[left] == 0 && nums[right] != 0)\\n             {\\n                 int temp = nums[left];\\n                 nums[left++] = nums[right];\\n                 nums[right++] = temp;\\n                \\n             }\\n             else if(nums[left] == 0 && nums[right] == 0){\\n                 right++;\\n             }else if(nums[left] != 0 ){\\n                 left++;\\n                 right++;\\n             }else{\\n                 left++;\\n             }\\n         }\\n    }\\n};\\n```\n```Approach 4:```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n\\t\\tfor(int i=0,next=0;i<nums.size();++i){\\n\\t\\t\\tif(nums[i] != 0) {\\n\\t\\t\\t\\tswap(nums[i],nums[next++]);\\n\\t\\t\\t}\\n\\t\\t}\\t\\n    }\\n};\\n```\n```Approach 5:```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n\\t\\n        stable_partition(begin(nums),end(nums),[](int i){return i;});\\n    }\\n};\\n```\n```Approach 6:```\n```\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n      \\n        stable_partition(rbegin(nums),rend(nums),logical_not<int>());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 443317,
                "title": "c-faster-than-98-solutions",
                "content": "```\\n public void MoveZeroes(int[] nums) {\\n        int j = 0;\\n        \\n        for(int i = 0 ; i < nums.Length; i++)\\n            if(nums[i] != 0)\\n                nums[j++] = nums[i];\\n        \\n        while(j < nums.Length)\\n            nums[j++] = 0;\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public void MoveZeroes(int[] nums) {\\n        int j = 0;\\n        \\n        for(int i = 0 ; i < nums.Length; i++)\\n            if(nums[i] != 0)\\n                nums[j++] = nums[i];\\n        \\n        while(j < nums.Length)\\n            nums[j++] = 0;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1662215,
                "title": "multiple-approach-in-c-2pointer-queue-with-easy-explanations",
                "content": "> **If you\\u2019re interested in coding you can join my Discord Server, link in the comment section. Also if you find any mistake please let me know. Thank you!\\u2764\\uFE0F**\\n> \\n\\n---\\n\\n## Explanation:\\n\\n### Solution 01\\n\\n- We are going to use the 2pointers approach.\\n- Take 2 variables i & j.\\n- At any point, if i\\u22600, then it will swap with j & j will be only moved after the swap().\\n- If any point i & j both indicates 0 then only i will move and j will keep track of 0.\\n- **Time complexity:** O(n).\\n\\n### Solution 02\\n\\n- Here I\\u2019ll use a queue to keep track of the indexes of 0.\\n- If the current index has 0, we\\u2019ll push the index***(i)*** to queue.\\n- If the current element is not 0 & the queue have element, then we\\u2019ll take the front element of the queue (mainly the index of the first 0).\\n- Put the current non 0 element to that index & place 0 to the current index. Push the current index to queue because it has 0 now! *[simply we swap the current element with the first index available in the queue & push current index as that have 0 now]*.\\n- Remove the first element using pop(), because queue remove element from front.\\n- **Time complexity:** O(n).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n= nums.size();\\n        int i=0, j=0;\\n        \\n        while(i<n){\\n            if(nums[i]!=0){\\n                swap(nums[i], nums[j]);\\n                i++; j++;\\n            }\\n            else \\n                i++;\\n        }\\n    }\\n};\\n\\n//Solution 02:\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n= nums.size();\\n        queue<int> add;\\n        for(int i=0; i<n; i++){\\n            if(nums[i]==0)\\n                add.push(i);\\n            else{\\n                if(!add.empty()){\\n                    int x=add.front();\\n                    nums[x]=nums[i];\\n                    nums[i]=0;\\n                    add.push(i);\\n                    add.pop();\\n                }\\n            }\\n        }\\n    }\\n};\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Queue"
                ],
                "code": "```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n= nums.size();\\n        int i=0, j=0;\\n        \\n        while(i<n){\\n            if(nums[i]!=0){\\n                swap(nums[i], nums[j]);\\n                i++; j++;\\n            }\\n            else \\n                i++;\\n        }\\n    }\\n};\\n\\n//Solution 02:\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n= nums.size();\\n        queue<int> add;\\n        for(int i=0; i<n; i++){\\n            if(nums[i]==0)\\n                add.push(i);\\n            else{\\n                if(!add.empty()){\\n                    int x=add.front();\\n                    nums[x]=nums[i];\\n                    nums[i]=0;\\n                    add.push(i);\\n                    add.pop();\\n                }\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1505408,
                "title": "simple-o-n-solution-w-minimum-swaps-python",
                "content": "Simple solution with slow & fast pointers, that only starts swapping once the 1st zero is found.\\nAlthough using only the second loop starting from 0 with left = 0 will work, the first loop prevents redundant swaps for inputs like [1, 3, 1, 5, 2, 5, 1, 6, 0, 1, 0, 0, 0, 0], \\n\\nTime: O(n)\\nSpace: O(1)\\n\\n```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        \\n\\t\\t# Set slow pointer to the 1st zero.\\n        for left in range(len(nums)):\\n            if nums[left] == 0:\\n                break\\n        \\n\\t\\t# Swap elements at fast & slow if fast points to a non-zero number (and increment).\\n        for right in range(left + 1, len(nums)):\\n            if nums[right] != 0:\\n                nums[left], nums[right] = nums[right], nums[left]\\n                left += 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        \\n\\t\\t# Set slow pointer to the 1st zero.\\n        for left in range(len(nums)):\\n            if nums[left] == 0:\\n                break\\n        \\n\\t\\t# Swap elements at fast & slow if fast points to a non-zero number (and increment).\\n        for right in range(left + 1, len(nums)):\\n            if nums[right] != 0:\\n                nums[left], nums[right] = nums[right], nums[left]\\n                left += 1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 382795,
                "title": "python-24-ms-faster-than-99-59-of-python-online-submissions-for-move-zeroes",
                "content": "```\\ndef moveZeroes(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n = len(nums)\\n\\n        non_zero = 0\\n        \\n        for i in range(n):\\n            if nums[i] != 0:\\n                nums[non_zero],nums[i] = nums[i],nums[non_zero]\\n                non_zero +=1\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef moveZeroes(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n = len(nums)\\n\\n        non_zero = 0\\n        \\n        for i in range(n):\\n            if nums[i] != 0:\\n                nums[non_zero],nums[i] = nums[i],nums[non_zero]\\n                non_zero +=1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2940146,
                "title": "beats-98-easy-javascrtipt-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = function (nums) {\\n\\n    let j = 0\\n    let i = 1\\n    while (i < nums.length) {\\n        if (nums[j] === 0 && nums[i] !== 0) {\\n            nums[j] = nums[i]\\n            nums[i] = 0\\n            j++\\n        }\\n        if (nums[j] !== 0) {\\n            j++\\n        }\\n        i++\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = function (nums) {\\n\\n    let j = 0\\n    let i = 1\\n    while (i < nums.length) {\\n        if (nums[j] === 0 && nums[i] !== 0) {\\n            nums[j] = nums[i]\\n            nums[i] = 0\\n            j++\\n        }\\n        if (nums[j] !== 0) {\\n            j++\\n        }\\n        i++\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1373967,
                "title": "0ms-rust-solution",
                "content": "Runtime: 0 ms\\nMemory Usage: 2.2 MB\\n\\n## Using [.retain()](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain)\\n## \\n```\\nimpl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n        let mut z = Vec::new();\\n        nums.retain(|x| {\\n         if *x != 0 { true } else { z.push(0); false }\\n        });\\n        &nums.append(&mut z);\\n    }\\n}\\n```\\n## Two lines version using [.drain_filter()](https://github.com/rust-lang/rust/issues/43244) \\n##\\nThere\\'s an unstable nightly feature called **drain_filter** that does exactly what you want:\\n```\\n#![feature(drain_filter)]\\n\\nimpl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n         let mut zeroes = nums.drain_filter(|x| *x == 0).collect::<Vec<_>>();\\n         &nums.append(&mut zeroes);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n        let mut z = Vec::new();\\n        nums.retain(|x| {\\n         if *x != 0 { true } else { z.push(0); false }\\n        });\\n        &nums.append(&mut z);\\n    }\\n}\\n```\n```\\n#![feature(drain_filter)]\\n\\nimpl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n         let mut zeroes = nums.drain_filter(|x| *x == 0).collect::<Vec<_>>();\\n         &nums.append(&mut zeroes);\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 72290,
                "title": "simple-java-solution",
                "content": "        int zeroCount = 0;\\n        for(int i = 0 ; i< nums.length; i++) {\\n            if (nums[i] == 0) {\\n                zeroCount++;\\n            } else if (zeroCount > 0 ){\\n                nums[i-zeroCount] = nums[i];\\n                nums[i] = 0;\\n            }\\n        }",
                "solutionTags": [],
                "code": "        int zeroCount = 0;\\n        for(int i = 0 ; i< nums.length; i++) {\\n            if (nums[i] == 0) {\\n                zeroCount++;\\n            } else if (zeroCount > 0 ){\\n                nums[i-zeroCount] = nums[i];\\n                nums[i] = 0;\\n            }\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 72339,
                "title": "java-concise-in-place-solution",
                "content": "        \\n    public void moveZeroes(int[] nums) {\\n        int zero = 0, l = 0, r = nums.length;\\n        while (l < r) {\\n            if (nums[l] != 0) {\\n                int tmp = nums[zero];\\n                nums[zero++] = nums[l];\\n                nums[l] = tmp;\\n            }\\n            l++;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "        \\n    public void moveZeroes(int[] nums) {\\n        int zero = 0, l = 0, r = nums.length;\\n        while (l < r) {\\n            if (nums[l] != 0) {\\n                int tmp = nums[zero];\\n                nums[zero++] = nums[l];\\n                nums[l] = tmp;\\n            }\\n            l++;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 72342,
                "title": "java-easy-and-simple-solutions",
                "content": "    public class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int movings=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==0) {\\n                movings++;\\n                continue;\\n            }\\n            \\n            int temp=nums[i-movings];\\n            nums[i-movings]=nums[i];\\n            nums[i]=temp;\\n         }\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int movings=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==0) {\\n                movings++;\\n                continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3236411,
                "title": "283-space-96-33-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- We initialize a pointer i to the beginning of the array. This pointer keeps track of where the next non-zero element should be placed.\\n- We loop through the array using another pointer j.\\n- If we encounter a non-zero element, we swap it with the element at the current position of i, effectively moving the non-zero element to the left of any zeroes encountered so far.\\n- We then increment the i pointer to move it to the next position, ready for the next non-zero element.\\n- Since we are modifying the input array in-place, we do not need to return anything.\\n\\n# Complexity\\n- Time complexity:\\n87.10%\\n\\n- Space complexity:\\n96.33%\\n\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # Initialize pointer to the beginning of the array\\n        i = 0\\n        # Loop through the array\\n        for j in range(len(nums)):\\n            # If the current element is non-zero\\n            if nums[j] != 0:\\n                # Swap it with the element at the current pointer\\n                nums[i], nums[j] = nums[j], nums[i]\\n                # Increment the pointer\\n                i += 1\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # Initialize pointer to the beginning of the array\\n        i = 0\\n        # Loop through the array\\n        for j in range(len(nums)):\\n            # If the current element is non-zero\\n            if nums[j] != 0:\\n                # Swap it with the element at the current pointer\\n                nums[i], nums[j] = nums[j], nums[i]\\n                # Increment the pointer\\n                i += 1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2090354,
                "title": "c-easy-2-line-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int count=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[count++]);\\n            }\\n        }\\n    }\\n};\\n```\\n\\n**please upvote if helpful**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int count=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[count++]);\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1598708,
                "title": "concise-simple-4-line-java-solution-o-n-beats-100-clear-explanation",
                "content": "Basically, we are shiftng all the non-zero values to the front of the array ```nums```, & then insert ```0s``` in all the leftover indexes.\\n### For example, let\\'s take an array ```[0,6,9,2,0,5]```.\\n1.  The first ```for``` loop will traverse the whole array and pick all the non-zero elements(```6,9,2,5```) and shift them to the front of the array, maintaining the relative order. We have used the variable ```shifter``` to follow the above process.\\n\\n2.  Sub-result after this traversal : ```[0,6,9,2,0,5]``` **\\u2192** ```[6,9,2,5,0,5]```.\\n**Note:** *We are still having the value ```5``` at the last index because we have just copied the values, not replaced them.*\\n\\n3. Now, we need to insert ```0s``` in the indexes which are not yet traversed to get the final answer. Here, also ```shifter``` will help us as it\\'s value is equal to the required index to start putting ```0s```.\\n\\n4. Final answer :  ```[0,6,9,2,0,5]``` **\\u2192**  ```[6,9,2,5,0,5]``` **\\u2192**  ```[6,9,2,5,0,0]```.\\n\\n``` \\npublic void moveZeroes(int[] nums) {\\n        int shifter= 0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!= 0) nums[shifter++] = nums[i];\\n        }\\n        while(shifter<nums.length) nums[shifter++] =0;\\n    }\\n```\\n\\n*Do upvote, if it helps you* \\uD83D\\uDE00.\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```nums```\n```0s```\n```[0,6,9,2,0,5]```\n```for```\n```6,9,2,5```\n```shifter```\n```[0,6,9,2,0,5]```\n```[6,9,2,5,0,5]```\n```5```\n```0s```\n```shifter```\n```0s```\n```[0,6,9,2,0,5]```\n```[6,9,2,5,0,5]```\n```[6,9,2,5,0,0]```\n``` \\npublic void moveZeroes(int[] nums) {\\n        int shifter= 0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!= 0) nums[shifter++] = nums[i];\\n        }\\n        while(shifter<nums.length) nums[shifter++] =0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 72292,
                "title": "move-zeros-solution-in-java",
                "content": "    public void moveZeroes(int[] nums) {\\n    \\tint i = -1, j = 0;\\n    \\twhile (j < nums.length) {\\n    \\t\\tif (nums[j] != 0) {\\n    \\t\\t\\tswap(++i, j, nums);\\n    \\t\\t}\\n    \\t\\tj++;\\n    \\t}\\n    }\\n    \\n    public void swap(int i, int j, int[] nums) {\\n    \\tint temp = nums[i];\\n    \\tnums[i] = nums[j];\\n    \\tnums[j] = temp;\\n    }",
                "solutionTags": [],
                "code": "    public void moveZeroes(int[] nums) {\\n    \\tint i = -1, j = 0;\\n    \\twhile (j < nums.length) {\\n    \\t\\tif (nums[j] != 0) {\\n    \\t\\t\\tswap(++i, j, nums);\\n    \\t\\t}\\n    \\t\\tj++;\\n    \\t}\\n    }\\n    \\n    public void swap(int i, int j, int[] nums) {\\n    \\tint temp = nums[i];\\n    \\tnums[i] = nums[j];\\n    \\tnums[j] = temp;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4030707,
                "title": "unusual-laconic-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSort in python is stable, so order of equal elements will be not changed\\nhttps://wiki.python.org/moin/HowTo/Sorting#Sort_Stability_and_Complex_Sorts\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nJust sort them pretending that are only 2 types of values!\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n*logn)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        nums.sort(key=lambda x: x == 0)\\n        return nums\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Sort",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        nums.sort(key=lambda x: x == 0)\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2398347,
                "title": "java-simple-0ms-100-faster-two-pointer",
                "content": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i = 0;\\n        for(int j = 0 ; j < n ; j++){\\n            if(nums[j] != 0) {\\n                nums[i] = nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k = i ; k < n ; k++){\\n            nums[k] = 0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i = 0;\\n        for(int j = 0 ; j < n ; j++){\\n            if(nums[j] != 0) {\\n                nums[i] = nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k = i ; k < n ; k++){\\n            nums[k] = 0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1756058,
                "title": "python-two-pointers-with-intuitive-explaination",
                "content": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # Idea: have a slow pointer pointing at the beginning and only move with condition.\\n        # Condition: when iterating nums, if we encounter a nonzero, swap places with the slow and increase slow by 1.\\n        slow = 0\\n        for i in range(len(nums)):\\n            if nums[i]!=0:\\n                nums[i], nums[slow] = nums[slow], nums[i]\\n                slow+=1\\n```",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # Idea: have a slow pointer pointing at the beginning and only move with condition.\\n        # Condition: when iterating nums, if we encounter a nonzero, swap places with the slow and increase slow by 1.\\n        slow = 0\\n        for i in range(len(nums)):\\n            if nums[i]!=0:\\n                nums[i], nums[slow] = nums[slow], nums[i]\\n                slow+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1631442,
                "title": "two-pointer-python-solution",
                "content": "Algorithm:\\n* keep slow pointer on 0 (zero) until fast pointer meet non-zero, i.e. fast pointer move while slow pointer remain on the same value\\n* swap evalues\\n* increment both slow and fast pointers\\n\\nIllustration:\\n\\n```\\n[0,1,0,3,12] -> [1,0,0,3,12] -> [1,0,0,3,12] -> [1, 3, 0, 0, 12] -> [1, 3, 0, 0, 12]  -> [1, 3, 12, 0, 0]\\n | |               | |             |   |               |  |                |      |                 |  | \\n s f               s f             s   f               s  f                s      f                 s  f \\n```\\n         \\nCode:\\n          \\n```\\nslow = 0\\nfast = 1\\nlength = len(nums) - 1\\n        \\nwhile slow <= length and fast <= length:\\n\\tif nums[slow] == 0 and nums[fast] != 0:\\n\\t\\tnums[slow] = nums[fast]\\n        nums[fast] = 0\\n            \\n    if nums[slow] != 0:\\n\\t\\tslow += 1\\n\\n    fast += 1\\n        \\nreturn nums\\n```\\n\\nTime complexity: O(n)\\nSpace complexity: O(1)\\n\\nIf you like, thumps up.",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "```\\n[0,1,0,3,12] -> [1,0,0,3,12] -> [1,0,0,3,12] -> [1, 3, 0, 0, 12] -> [1, 3, 0, 0, 12]  -> [1, 3, 12, 0, 0]\\n | |               | |             |   |               |  |                |      |                 |  | \\n s f               s f             s   f               s  f                s      f                 s  f \\n```\n```\\nslow = 0\\nfast = 1\\nlength = len(nums) - 1\\n        \\nwhile slow <= length and fast <= length:\\n\\tif nums[slow] == 0 and nums[fast] != 0:\\n\\t\\tnums[slow] = nums[fast]\\n        nums[fast] = 0\\n            \\n    if nums[slow] != 0:\\n\\t\\tslow += 1\\n\\n    fast += 1\\n        \\nreturn nums\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1431040,
                "title": "3-solutions-in-python",
                "content": "Using 2 pointers:\\n```\\t\\t\\t\\t\\t\\t\\nclass Solution:\\n    def moveZeroes(self, nums):\\n        left=0\\n        right=0\\n        while right<len(nums):\\n            if nums[right]==0:\\n                right+=1\\n            else:\\n                nums[left],nums[right]=nums[right],nums[left] #swap the numbers\\n                left+=1\\n                right+=1\\n```\\n\\n1 Liner:\\n```\\nclass Solution:\\n    def moveZeroes(self, nums):\\n        nums.sort(key=lambda i: i==0) #returns False (0) if not zero and True (1) if zero. Hence zero follows non-zero numbers\\n```\\n\\nUsing append and remove:\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in range(len(nums)):\\n            if nums[i] == 0:   #check if the number is zero (if yes)\\n                nums.append(0) #add zero to the end of the list\\n                nums.remove(0) #remove the first zero found (from left)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\t\\t\\t\\t\\t\\t\\nclass Solution:\\n    def moveZeroes(self, nums):\\n        left=0\\n        right=0\\n        while right<len(nums):\\n            if nums[right]==0:\\n                right+=1\\n            else:\\n                nums[left],nums[right]=nums[right],nums[left] #swap the numbers\\n                left+=1\\n                right+=1\\n```\n```\\nclass Solution:\\n    def moveZeroes(self, nums):\\n        nums.sort(key=lambda i: i==0) #returns False (0) if not zero and True (1) if zero. Hence zero follows non-zero numbers\\n```\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in range(len(nums)):\\n            if nums[i] == 0:   #check if the number is zero (if yes)\\n                nums.append(0) #add zero to the end of the list\\n                nums.remove(0) #remove the first zero found (from left)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1367010,
                "title": "java-4-line-code-with-two-pointer-technique",
                "content": "Two-Pointer Technique\\n\\n```\\npublic void moveZeroes(int[] nums) {\\n\\tfor (int i = 0, j = 0; j < nums.length; j++) {\\n\\t\\tif (nums[j] != 0) {\\n\\t\\t\\tnums[i] = nums[j];\\n\\t\\t\\tif (i++ != j) nums[j] = 0;\\n\\t\\t}\\n\\t}\\n}\\n```\\n\\nWhy we need `if (i != j) nums[j] = 0;` ?\\n\\tWithout this, we just simply move all the non-zero elements to left. We should also set the last few elements to 0.\\n\\tAttention! We cannot just simply set nums[j] to 0 because we might cover the new nums[i] when i==j.\\n\\t\\nPerformance:\\n0ms (faster than 100%)          O(n)\\n38.9MB (less than 94.91%)   O(1)",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\npublic void moveZeroes(int[] nums) {\\n\\tfor (int i = 0, j = 0; j < nums.length; j++) {\\n\\t\\tif (nums[j] != 0) {\\n\\t\\t\\tnums[i] = nums[j];\\n\\t\\t\\tif (i++ != j) nums[j] = 0;\\n\\t\\t}\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 539283,
                "title": "swift-solution",
                "content": "```swift\\nclass Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        var writeIdx = 0\\n        // Move non-zero items\\n        for num in nums where num != 0 {\\n            nums[writeIdx] = num\\n            writeIdx += 1\\n        }\\n        // Fill the remaining with zero\\n        for i in writeIdx..<nums.count {\\n            nums[i] = 0\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```swift\\nclass Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        var writeIdx = 0\\n        // Move non-zero items\\n        for num in nums where num != 0 {\\n            nums[writeIdx] = num\\n            writeIdx += 1\\n        }\\n        // Fill the remaining with zero\\n        for i in writeIdx..<nums.count {\\n            nums[i] = 0\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 399600,
                "title": "0-ms-java-solution",
                "content": "\\n\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int index = 0;\\n        \\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                nums[index++] = nums[i];\\n            }\\n        }\\n        \\n        for (int i = index; i < nums.length; i++) {\\n            nums[i] = 0;\\n        }\\n        \\n    }\\n}\\n```\\n\\nThis works by setting the left most value to the left most value greater than zero\\nAnd then we write over the values that were already placed to the left with zeros.\\n[1,0,3]\\nindex = 0;\\ni = 0\\nplace value 1 at nums[index]\\n[1,0,3]\\nindex = 1;\\ni = 1\\nvalue at i is 0 so skip\\nindex = 1\\ni = 2\\nplace value of nums[2] at nums[index]\\n[1,3,3]\\nsame thing again\\nnow you see we must write over the last 3 to a 0\\nstart from index and write 0\\'s until the end",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int index = 0;\\n        \\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                nums[index++] = nums[i];\\n            }\\n        }\\n        \\n        for (int i = index; i < nums.length; i++) {\\n            nums[i] = 0;\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 202535,
                "title": "python-3-one-liner",
                "content": "```\\ndef moveZeroes(self, nums):\\n\\tnums.sort(key=lambda x: x == 0)\\n```\\t\\t\\nSince values are ordered from False to True, we just simply check whether a value is 0 and ensure true returns. This can all be done with a simple lambda expression in the sort method of a list.",
                "solutionTags": [],
                "code": "```\\ndef moveZeroes(self, nums):\\n\\tnums.sort(key=lambda x: x == 0)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 144994,
                "title": "c-solution",
                "content": "```\\npublic static void MoveZeros(int[] nums)\\n{\\n\\tif (nums == null || nums.Length <= 1)\\n\\t\\treturn;\\n\\n\\tint curr = 0;\\n\\tint next = 1;\\n\\n\\twhile (next <= nums.Length - 1)\\n\\t{\\n\\t\\tif (nums[curr] == 0)\\n\\t\\t{\\n\\t\\t\\tif (nums[next] == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnext++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tnums[curr] = nums[next];\\n\\t\\t\\t\\tnums[next] = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcurr++;\\n\\t\\tnext++;\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic static void MoveZeros(int[] nums)\\n{\\n\\tif (nums == null || nums.Length <= 1)\\n\\t\\treturn;\\n\\n\\tint curr = 0;\\n\\tint next = 1;\\n\\n\\twhile (next <= nums.Length - 1)\\n\\t{\\n\\t\\tif (nums[curr] == 0)\\n\\t\\t{\\n\\t\\t\\tif (nums[next] == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnext++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tnums[curr] = nums[next];\\n\\t\\t\\t\\tnums[next] = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcurr++;\\n\\t\\tnext++;\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 72372,
                "title": "my-easy-java-solution-in-1ms-with-explanation",
                "content": "public class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n        //if only 1 element is present, return\\n        if(nums.length==1)\\n            return;\\n\\n        int i=0;\\n        \\n        //iterate through the array counting number of zeros\\n        for(int k:nums)\\n        {\\n            if(k==0)\\n                i++;\\n        }\\n            \\n        //if no 0's exists or array only contains zeros , return\\n        if(i==0 || i==nums.length)\\n            return;\\n        \\n        //index to keep track of non-zero elements\\n        int m=0;\\n        \\n        //for loop to move all the non zero elements in order\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n                nums[m++]=nums[j];\\n        }\\n        \\n        //insert the 0's in remaining spaces up till the end\\n        for(int j=nums.length-i;j<nums.length;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        \\n        \\n        \\n        \\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n        //if only 1 element is present, return\\n        if(nums.length==1)\\n            return;\\n\\n        int i=0;\\n        \\n        //iterate through the array counting number of zeros\\n        for(int k:nums)\\n        {\\n            if(k==0)\\n                i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 72527,
                "title": "simple-in-place-java-solution-o-n-time-complexity",
                "content": "\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) {\\n                count++;\\n            } else {\\n                nums[i - count] = nums[i];\\n                if (count != 0) {nums[i] = 0;}\\n            }\\n        }\\n        return;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) {\\n                count++;\\n            } else {\\n                nums[i - count] = nums[i];\\n                if (count != 0) {nums[i] = 0;}\\n            }\\n        }\\n        return;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3477126,
                "title": "beats-99-98-simple-no-excessive-checking-writing-of-zeroes-or-content-o-n-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCopy and move destination synchronously with source or skip zeroes.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFind the first zero-cell. It will be the start for writing.\\n\\nSkip zeros or copy content and move source and destination places synchronously.\\n\\nFill with zeroes to the end.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n- Code complexity: 2 one-purpose vars, 3 cycles, 1 condition\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int dst = -1;\\n        while (++dst < nums.length && nums[dst] != 0); // Find first zero\\n        int src = dst;\\n        while (++src < nums.length)\\n            if (nums[src] != 0)           // Skip\\n                nums[dst++] = nums[src];  // or copy content\\n        while (dst < nums.length)\\n            nums[dst++] = 0;              // Fill with zeroes to the end!\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int dst = -1;\\n        while (++dst < nums.length && nums[dst] != 0); // Find first zero\\n        int src = dst;\\n        while (++src < nums.length)\\n            if (nums[src] != 0)           // Skip\\n                nums[dst++] = nums[src];  // or copy content\\n        while (dst < nums.length)\\n            nums[dst++] = 0;              // Fill with zeroes to the end!\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3269137,
                "title": "single-loop-space-o-1-time-o-n",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = function(nums) {\\n    let gap = 0;\\n    for(let i=0; i<nums.length; i++) {\\n        if(nums[i] === 0) {\\n            gap++;\\n        }\\n        else {\\n            [nums[i-gap], nums[i]] = [nums[i], nums[i-gap]]\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = function(nums) {\\n    let gap = 0;\\n    for(let i=0; i<nums.length; i++) {\\n        if(nums[i] === 0) {\\n            gap++;\\n        }\\n        else {\\n            [nums[i-gap], nums[i]] = [nums[i], nums[i-gap]]\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3248063,
                "title": "c-solution-beats-more-than-87-runtime-and-more-than-81-memory-easy-for-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n![image.png](https://assets.leetcode.com/users/images/d3fbbcc6-1088-4ac1-a69b-74bef8cfcac1_1677768639.8539567.png)\\n\\n\\n# Code\\n```\\npublic class Solution {\\n    public void MoveZeroes(int[] nums) {\\n        int lastZeroPos = 0;\\n\\n        for (int i = 0; i < nums.Length; i++)\\n        {\\n            if (nums[i] != 0)\\n            {\\n                (nums[lastZeroPos], nums[i]) = (nums[i], nums[lastZeroPos]);\\n                lastZeroPos++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Two Pointers"
                ],
                "code": "```\\npublic class Solution {\\n    public void MoveZeroes(int[] nums) {\\n        int lastZeroPos = 0;\\n\\n        for (int i = 0; i < nums.Length; i++)\\n        {\\n            if (nums[i] != 0)\\n            {\\n                (nums[lastZeroPos], nums[i]) = (nums[i], nums[lastZeroPos]);\\n                lastZeroPos++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2975092,
                "title": "simple-java-solution-100-faster",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int idx = 0;   \\n        for(int i = 0; i < nums.length; i++) {\\n            if(nums[i] != 0) {\\n                nums[idx] = nums[i];\\n                idx++;\\n            }\\n        }    \\n        while(idx < nums.length) {\\n            nums[idx] = 0;\\n            idx++;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int idx = 0;   \\n        for(int i = 0; i < nums.length; i++) {\\n            if(nums[i] != 0) {\\n                nums[idx] = nums[i];\\n                idx++;\\n            }\\n        }    \\n        while(idx < nums.length) {\\n            nums[idx] = 0;\\n            idx++;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2499865,
                "title": "python-easy-solution",
                "content": "Solution 1:\\n```\\ndef moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        nums.sort(key=bool, reverse=True)\\n```\\nSolution 2:\\n```\\ndef moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        for index in range(len(nums)):\\n            if nums[index] != 0:\\n                nums[index], nums[i] = nums[i], nums[index]\\n                i += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        nums.sort(key=bool, reverse=True)\\n```\n```\\ndef moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        for index in range(len(nums)):\\n            if nums[index] != 0:\\n                nums[index], nums[i] = nums[i], nums[index]\\n                i += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2026541,
                "title": "c-and-java-solution-using-hashmap-and-iteration",
                "content": "**Algorithm for C**\\n* Create a separate index starting at 0 and insert non-zero num in nums array. And increment index.\\n* Insert 0 at the remaining spaces left\\n* Time Complexity: O(n) | Space Complexity: O(1)\\n\\n**Code for C**\\n```\\nvoid moveZeroes(int* nums, int numsSize){\\n    int index = 0;\\n    for(int i=0; i<numsSize; i++){\\n        if(nums[i] != 0){\\n            nums[index] = nums[i]; index++;\\n        }\\n    }\\n    for(int i=index; i<numsSize; i++){\\n        nums[i] = 0;\\n    }\\n}\\n```\\n\\n**Algorithm for Java**\\n* Insert non-zero element in HashMap.\\n* Insert all the values of HashMap in nums.\\n* Insert zero at the remaining spaces left.\\n* Time Complexity: O(n) | Space Complexity: O(n)\\n\\n**Code for Java**\\n\\n\\n```\\npublic void moveZeroes(int[] nums) {\\n        Map<Integer, Integer> map = new HashMap();\\n        int index=0;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i] != 0) {\\n                map.put(index, nums[i]);\\n                index++;\\n            }\\n        }\\n        int i=0;\\n        for(Map.Entry<Integer, Integer> temp : map.entrySet()){\\n            nums[i] = temp.getValue(); i++;\\n        }\\n        for(int k = i; k<nums.length; k++){\\n            nums[k] = 0;\\n        }\\n    }\\n```\\n\\n**Please upvote if it helped you.**\\n*Feel free to ask any questions/query if any.*",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nvoid moveZeroes(int* nums, int numsSize){\\n    int index = 0;\\n    for(int i=0; i<numsSize; i++){\\n        if(nums[i] != 0){\\n            nums[index] = nums[i]; index++;\\n        }\\n    }\\n    for(int i=index; i<numsSize; i++){\\n        nums[i] = 0;\\n    }\\n}\\n```\n```\\npublic void moveZeroes(int[] nums) {\\n        Map<Integer, Integer> map = new HashMap();\\n        int index=0;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i] != 0) {\\n                map.put(index, nums[i]);\\n                index++;\\n            }\\n        }\\n        int i=0;\\n        for(Map.Entry<Integer, Integer> temp : map.entrySet()){\\n            nums[i] = temp.getValue(); i++;\\n        }\\n        for(int k = i; k<nums.length; k++){\\n            nums[k] = 0;\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1787120,
                "title": "javascript",
                "content": "Runtime: 92 ms, faster than 94.41% of JavaScript online submissions for Move Zeroes.\\nMemory Usage: 47.2 MB, less than 7.35% of JavaScript online submissions for Move Zeroes.\\n```\\nvar moveZeroes = function(nums) {\\n    // O(n) Time Complexity\\n\\t// 2 Pointers\\n    let left = 0;\\n    \\n    for(let i = 0; i < nums.length; i++) {\\n        if(nums[i]!==0) {\\n            [nums[i], nums[left]] = [nums[left], nums[i]];\\n            left++;\\n        }\\n    }\\n\\treturn nums;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "Runtime: 92 ms, faster than 94.41% of JavaScript online submissions for Move Zeroes.\\nMemory Usage: 47.2 MB, less than 7.35% of JavaScript online submissions for Move Zeroes.\\n```\\nvar moveZeroes = function(nums) {\\n    // O(n) Time Complexity\\n\\t// 2 Pointers\\n    let left = 0;\\n    \\n    for(let i = 0; i < nums.length; i++) {\\n        if(nums[i]!==0) {\\n            [nums[i], nums[left]] = [nums[left], nums[i]];\\n            left++;\\n        }\\n    }\\n\\treturn nums;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1643920,
                "title": "python-4-lines-of-code-solution",
                "content": "\\n\\tdef moveZeroes(self, nums: List[int]) -> None:\\n\\n        count=nums.count(0)\\n        \\n        for i in range(0,count):\\n            nums.remove(0)\\n            nums.append(0)",
                "solutionTags": [],
                "code": "\\n\\tdef moveZeroes(self, nums: List[int]) -> None:\\n\\n        count=nums.count(0)\\n        \\n        for i in range(0,count):\\n            nums.remove(0)\\n            nums.append(0)",
                "codeTag": "Python3"
            },
            {
                "id": 190320,
                "title": "python-two-pointers",
                "content": "```\\nclass Solution:\\n    def moveZeroes(self, nums):\\n        k = 0\\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                nums[k] = nums[i]\\n                k += 1\\n        for i in range(k, len(nums)):\\n            nums[i] = 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums):\\n        k = 0\\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                nums[k] = nums[i]\\n                k += 1\\n        for i in range(k, len(nums)):\\n            nums[i] = 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72415,
                "title": "0ms-java-solution",
                "content": "    public void moveZeroes(int[] nums) {\\n            if(nums==null || nums.length==0)\\n                return;\\n            int index=0;\\n            for(int i=0; i<nums.length; i++){\\n                if(nums[i]!=0) nums[index++] = nums[i];\\n            }\\n            \\n            for(int i=index; i<nums.length; i++){\\n                nums[i]=0;\\n            }\\n        }",
                "solutionTags": [],
                "code": "    public void moveZeroes(int[] nums) {\\n            if(nums==null || nums.length==0)\\n                return;\\n            int index=0;\\n            for(int i=0; i<nums.length; i++){\\n                if(nums[i]!=0) nums[index++] = nums[i];\\n            }\\n            \\n            for(int i=index; i<nums.length; i++){\\n                nums[i]=0;\\n            }\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 72434,
                "title": "5-lines-o-n-java-solution-with-no-swapping",
                "content": "**Explanation**\\n\\nThe basic idea is to save all none-zero numbers in place in the front part, then fill 0 into the remaining part. No need to swap in this way. Any advice will be welcome!\\n\\n    public void moveZeroes(int[] nums) {\\n        int p = 0;// Index of none-zero number\\n        for (int i : nums) \\n            if (i != 0) \\n              nums[p++] = i;\\n        while (p < nums.length) nums[p++] = 0;\\n    }",
                "solutionTags": [],
                "code": "**Explanation**\\n\\nThe basic idea is to save all none-zero numbers in place in the front part, then fill 0 into the remaining part. No need to swap in this way. Any advice will be welcome!\\n\\n    public void moveZeroes(int[] nums) {\\n        int p = 0;// Index of none-zero number\\n        for (int i : nums) \\n            if (i != 0) \\n              nums[p++] = i;\\n        while (p < nums.length) nums[p++] = 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 72494,
                "title": "python-1liner-using-inplace-sort",
                "content": "    class Solution(object):\\n        def moveZeroes(s, a):\\n            a.sort(key=lambda x: not x or None)",
                "solutionTags": [],
                "code": "    class Solution(object):\\n        def moveZeroes(s, a):\\n            a.sort(key=lambda x: not x or None)",
                "codeTag": "Java"
            },
            {
                "id": 3997353,
                "title": "move-zeroes",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int nonZero=0;\\n        for(int j=0;j<nums.size();j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[nonZero]);\\n                nonZero++;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int nonZero=0;\\n        for(int j=0;j<nums.size();j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[nonZero]);\\n                nonZero++;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3478594,
                "title": "easy-java-solution-for-beginners",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int a=0;\\n       \\n\\n        for(int i =0;i<nums.length;i++){\\n           if(nums[i]!=0 ){\\n               nums[a]=nums[i];\\n               a++;\\n           }\\n        }\\n\\n        for(int j =a;j<nums.length;j++){\\n            nums[j]=0;\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int a=0;\\n       \\n\\n        for(int i =0;i<nums.length;i++){\\n           if(nums[i]!=0 ){\\n               nums[a]=nums[i];\\n               a++;\\n           }\\n        }\\n\\n        for(int j =a;j<nums.length;j++){\\n            nums[j]=0;\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3393989,
                "title": "easy-js-solution-using-destructuring",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nconst moveZeroes = function(nums) {\\n  let j =0;\\n  for(let i=0; i< nums.length;i++){\\n   if(nums[i] === 0){\\n      j++ ;\\n   } else { \\n     [nums[i-j], nums[i]] = [nums[i], nums[i-j]] \\n   }\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nconst moveZeroes = function(nums) {\\n  let j =0;\\n  for(let i=0; i< nums.length;i++){\\n   if(nums[i] === 0){\\n      j++ ;\\n   } else { \\n     [nums[i-j], nums[i]] = [nums[i], nums[i-j]] \\n   }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3378755,
                "title": "snowball-approach-fastest-proper-explanation",
                "content": "\\n# Approach\\nThe approach used in this solution is called the \"snowball approach\", which is a linear time complexity approach with constant space complexity.\\n\\nIn this approach, we use a variable \"snowball\" to keep track of the number of zeros we have encountered so far. We iterate over the vector and increment the snowball variable whenever we encounter a zero. When we encounter a non-zero element, we check if the snowball variable is greater than zero. If it is, we move the non-zero element to its correct position in the vector by swapping it with the element snowball positions before it. We then set the swapped element to zero.\\n\\nBy the end of the iteration, all the non-zero elements are in their correct positions, and all the zeros are at the end of the vector.****\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n\\n- Space complexity:$$O(1)$$\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public:\\n     void moveZeroes(vector<int>& nums) {\\n        // snowball approach time=O(n) space=o(1)\\n        int snowball=0;\\n\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==0){\\n                snowball++;\\n            }\\n\\n            else if(snowball>0){\\n                nums[i-snowball]=nums[i];\\n                nums[i]=0;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    public:\\n     void moveZeroes(vector<int>& nums) {\\n        // snowball approach time=O(n) space=o(1)\\n        int snowball=0;\\n\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==0){\\n                snowball++;\\n            }\\n\\n            else if(snowball>0){\\n                nums[i-snowball]=nums[i];\\n                nums[i]=0;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3351454,
                "title": "very-easy-java-beats-100-o-n",
                "content": "# Intuition\\nsingle sweep method\\n\\n# Approach\\n1. ind - keep a pointer with you which will keep track of elements>0 \\n\\n2. zero - one more pointer to keep track of no. of zeros in array\\n\\n3. In a single loop whenever a element >0 appears add that element to \\nIth position , else increase the ind pointer and add +1 to zero\\n\\nex-\\narray =  0  5  4  15  0  1\\nindex =  0  1  2  3   4  5\\n\\nzero =0;\\nind =0;\\n-----------------------------\\nloop i=0 i<6 i++\\n-----------------------------\\ni=0\\na[0] =0\\nso, increase ind+1 , ind =1\\nalso increase zero by 1 , zero =1;\\na[1] = 5 ,  >0 hence\\na[0] = a[1];\\nlastly ind++ hence -> ind =2;\\n-----------------------------\\ni=1  ,ind=2, zero =1;\\na[2] = 4 ,>0\\nhence \\na[1] = a[2];\\nsize no change  = 1;\\nlastly ind++ -> ind =3;\\n-----------------------------\\ni=2 , ind =3 , zero =1;\\na[3]= 15 , >0\\na[2] = a[3];\\nsize same =1\\nind++ -> 4;\\n-----------------------------\\ni=3 , ind =4, size =1;\\na[4] =0 \\nhence\\nind++ , ind =5\\na[5] = 1 , >0\\na[3] = a[5]\\nsize +1 , size =2;\\nind++ , ind = 6;\\n--------------------------\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int n =nums.length;\\n        int zero = 0;\\n        int cha =0;\\n        for(int i =0;i<n;i++){\\n            while(cha<n && nums[cha]==0){\\n                cha++;\\n                zero++;\\n            }\\n            if(cha<n)\\n            nums[i] = nums[cha];\\n            cha++;\\n        }\\n\\n        for(int i =n-zero;i<n;i++){\\n            nums[i]=0;\\n        }\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int n =nums.length;\\n        int zero = 0;\\n        int cha =0;\\n        for(int i =0;i<n;i++){\\n            while(cha<n && nums[cha]==0){\\n                cha++;\\n                zero++;\\n            }\\n            if(cha<n)\\n            nums[i] = nums[cha];\\n            cha++;\\n        }\\n\\n        for(int i =n-zero;i<n;i++){\\n            nums[i]=0;\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3250964,
                "title": "brute-force-and-optimal-approches",
                "content": "\\n# 1. Brute force Approach\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in nums:\\n            if i==0:\\n                nums.remove(0)\\n                nums.append(i)\\n```\\n# 2. Optimal Approach\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        left=0\\n        for right in range(len(nums)):\\n            if nums[right]!=0:\\n                nums[right],nums[left]=nums[left],nums[right]\\n                left+=1\\n```\\n# please upvote me it would encourage me alot\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in nums:\\n            if i==0:\\n                nums.remove(0)\\n                nums.append(i)\\n```\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        left=0\\n        for right in range(len(nums)):\\n            if nums[right]!=0:\\n                nums[right],nums[left]=nums[left],nums[right]\\n                left+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3089882,
                "title": "c-easy-god-speed-o-n-complexity",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Constant\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size(),j,i;\\n        j=0;\\n        i=0;\\n        while(j<n){\\n            if(nums[j]!=0){\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n            j++;\\n        }\\n        while(i<n){\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size(),j,i;\\n        j=0;\\n        i=0;\\n        while(j<n){\\n            if(nums[j]!=0){\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n            j++;\\n        }\\n        while(i<n){\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2108395,
                "title": "kotlin-short-and-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n    fun moveZeroes(nums: IntArray): Unit {\\n        var pointer = 0\\n        nums.forEach { if (it != 0) nums[pointer++] = it }\\n        while (pointer < nums.size) nums[pointer++] = 0\\n    }\\n}\\n```\\nPlease upvote, if you like the solution)",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun moveZeroes(nums: IntArray): Unit {\\n        var pointer = 0\\n        nums.forEach { if (it != 0) nums[pointer++] = it }\\n        while (pointer < nums.size) nums[pointer++] = 0\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2071556,
                "title": "python-easy-to-understand-code",
                "content": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in nums:\\n            if i == 0:\\n                nums.remove(0)\\n                nums.append(0)\\n```\\nThe remove() method removes the first matching element (which is passed as an argument) from the list.\\nThe append() method adds an item to the end of the list.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nPlease Upvote if you find this post useful.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in nums:\\n            if i == 0:\\n                nums.remove(0)\\n                nums.append(0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 992211,
                "title": "java-easy-100-faster-solution-with-explaination",
                "content": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int index=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){// we will shift all the non zero values to right\\n                nums[index]=nums[i];\\n                index++;// keep on increasing the index as well\\n            }\\n        }\\n        for(int i= index; i<nums.length;i++){ //now we will replace all the remaing indexes with zero\\n            nums[i]=0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int index=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){// we will shift all the non zero values to right\\n                nums[index]=nums[i];\\n                index++;// keep on increasing the index as well\\n            }\\n        }\\n        for(int i= index; i<nums.length;i++){ //now we will replace all the remaing indexes with zero\\n            nums[i]=0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 562748,
                "title": "so-few-people-use-c-style-pointers",
                "content": "I have to contribute my solution using proper C-style pointer arithmetic:\\n```\\nvoid moveZeroes(int* nums, int numsSize){\\n    int *write = nums, *end = nums + numsSize;\\n    for( int *read = nums; read < end; read++) if (*read) *write++ = *read;\\n    while (write < end) *write++ = 0;\\n}\\n```\\n\\nRuntime: 12 ms, faster than 89.09% of C online submissions for Move Zeroes.\\nMemory Usage: 7.2 MB, less than 100.00% of C online submissions for Move Zeroes.",
                "solutionTags": [],
                "code": "```\\nvoid moveZeroes(int* nums, int numsSize){\\n    int *write = nums, *end = nums + numsSize;\\n    for( int *read = nums; read < end; read++) if (*read) *write++ = *read;\\n    while (write < end) *write++ = 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 218181,
                "title": "python-beat-98",
                "content": "This is my way, very pythonic, although I admit this is a little bit tricky because it use del. In the other language, there is no such method.\\n   ```\\n def moveZeroes(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        length = len(nums)\\n        i,j = 0,0\\n        while(i < length):\\n            if nums[j] == 0:\\n                del nums[j]\\n                nums.append(0)\\n                i += 1\\n                continue\\n            j += 1\\n            i += 1\\n```\\nNotice j is the real index and i is actually the number of operation time.",
                "solutionTags": [],
                "code": "```\\n def moveZeroes(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        length = len(nums)\\n        i,j = 0,0\\n        while(i < length):\\n            if nums[j] == 0:\\n                del nums[j]\\n                nums.append(0)\\n                i += 1\\n                continue\\n            j += 1\\n            i += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 72386,
                "title": "0ms-easy-to-understand-java-solution",
                "content": "    public class Solution {\\n        public void moveZeroes(int[] nums) {\\n            if(nums == null || nums.length < 1) return;\\n            int count = 0;\\n            int numslength = nums.length;\\n            for(int i=0; i<numslength; i++) {\\n                if(nums[i] != 0) {\\n                    nums[count] = nums[i];\\n                    count++;\\n            }\\n        }\\n        \\n        int numofzeros = numslength - count;\\n        for(int i=0; i<numofzeros; i++) nums[count + i] = 0;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n        public void moveZeroes(int[] nums) {\\n            if(nums == null || nums.length < 1) return;\\n            int count = 0;\\n            int numslength = nums.length;\\n            for(int i=0; i<numslength; i++) {\\n                if(nums[i] != 0) {\\n                    nums[count] = nums[i];\\n                    count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 72529,
                "title": "c-two-pointers",
                "content": "    class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            int j = -1;\\n            for(int i = 0;i < nums.size();i++){\\n                if(nums[i] != 0){\\n                    j++;\\n                    nums[j] = nums[i];\\n                }\\n            }\\n            for(int i = j+1;i < nums.size();i++)\\n            nums[i] = 0;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            int j = -1;\\n            for(int i = 0;i < nums.size();i++){\\n                if(nums[i] != 0){\\n                    j++;\\n                    nums[j] = nums[i];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3909891,
                "title": "c-java-solution-using-quicksort-algorithm-with-visual-explanation-o-1-space-complexity",
                "content": "# Approach\\nThis guy definitely explained it better than I could, so, instead of my own explanation, I leave you the video:\\n\\nhttps://youtu.be/aayNRwUN3Do\\n\\n# Code\\n```\\npublic class Solution {\\n    public void MoveZeroes(int[] nums) {\\n        int left = 0;\\n\\n        for (int right = 0; right < nums.Length; right++)\\n        {\\n            if(nums[right] != 0)\\n            {\\n                (nums[left], nums[right]) = (nums[right], nums[left]);\\n                left ++;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n## If you found my solution helpful, please consider giving it an upvote. Happy coding!",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public void MoveZeroes(int[] nums) {\\n        int left = 0;\\n\\n        for (int right = 0; right < nums.Length; right++)\\n        {\\n            if(nums[right] != 0)\\n            {\\n                (nums[left], nums[right]) = (nums[right], nums[left]);\\n                left ++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3747951,
                "title": "c-dutch-national-flag-algo",
                "content": "**Connect with me on LinkedIn**: https://www.linkedin.com/in/abhay5349singh/\\n\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        \\n        // [0,i] => non-zeros, [i+1,j-1] => zeros, [j,n-1] => undefined region\\n        int i=-1, j=0;\\n        while(j<n){\\n            if(a[j] != 0){\\n                i++; // expanding range for non-zeros\\n                swap(a[i],a[j]);\\n            }\\n            j++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        \\n        // [0,i] => non-zeros, [i+1,j-1] => zeros, [j,n-1] => undefined region\\n        int i=-1, j=0;\\n        while(j<n){\\n            if(a[j] != 0){\\n                i++; // expanding range for non-zeros\\n                swap(a[i],a[j]);\\n            }\\n            j++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3389868,
                "title": "c-best-solution-o-n-time-complexity",
                "content": "\\n# Code\\n```\\nvoid moveZeroes(int* nums, int numsSize){\\n    int j = 0;\\n    bool zero = false;\\n    for (int i = 0; i < numsSize; i++) {\\n        if (nums[i] == 0 && !zero) {\\n            zero = !zero;\\n            j = i;\\n        }\\n        else if (nums[i] != 0 && zero) {\\n            nums[j++] = nums[i];\\n            nums[i] = 0;\\n        }\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nvoid moveZeroes(int* nums, int numsSize){\\n    int j = 0;\\n    bool zero = false;\\n    for (int i = 0; i < numsSize; i++) {\\n        if (nums[i] == 0 && !zero) {\\n            zero = !zero;\\n            j = i;\\n        }\\n        else if (nums[i] != 0 && zero) {\\n            nums[j++] = nums[i];\\n            nums[i] = 0;\\n        }\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3322648,
                "title": "brute-force-but-guess-what-no-extra-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nReplacing the original array with all non-zero elements in the front and then adding 0 to all the places left in the array, at the end.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        int j = 0;\\n  for (int i = 0; i < n; i++)\\n  {\\n    if (nums[i] != 0)\\n    {\\n     nums[j] = nums[i];\\n      j++;\\n    }\\n  }\\n  for (int i = j; j < n; j++)\\n  {\\n    nums[j] = 0;\\n  }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        int j = 0;\\n  for (int i = 0; i < n; i++)\\n  {\\n    if (nums[i] != 0)\\n    {\\n     nums[j] = nums[i];\\n      j++;\\n    }\\n  }\\n  for (int i = j; j < n; j++)\\n  {\\n    nums[j] = 0;\\n  }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3224717,
                "title": "very-easy-100-easiest-logic-ever-fully-explained-c-javascript-java",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = (nums) => {\\n  let j = 0;\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] != 0) {\\n      nums[j++] = nums[i];\\n    }\\n  }\\n  for (; j < nums.length; j++) {\\n    nums[j] = 0;\\n  }\\n  return nums;\\n};\\n```\\n```\\nvar moveZeroes = function (nums) {\\n  let m = 0, temp;\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] != 0) {\\n      temp = nums[i];\\n      nums[i] = nums[m];\\n      nums[m] = temp;\\n      m++;\\n    }\\n  }\\n\\n  return nums;\\n}\\n```\\n# Approach\\nWe start loopng from the end of array\\nIf current element is 0, we remove it from array\\nAnd then push to the end\\n\\n```\\nvar moveZeroes = function(nums) {\\n    let end = nums.length;\\n\\tfor (let i = end; i >= 0; i--) { // We loop from the end of array\\n\\t\\tif (nums[i] === 0) { // if current element is 0\\n\\t\\t\\tnums.splice(i, 1); // we remove if from array\\n\\t\\t\\tnums.push(0); // and push to the end\\n\\t\\t}\\n\\t}\\n\\treturn nums;\\n};\\n```\\n##### I am working hard for you guys...\\n##### Please upvote if you found any help with this code...",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = (nums) => {\\n  let j = 0;\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] != 0) {\\n      nums[j++] = nums[i];\\n    }\\n  }\\n  for (; j < nums.length; j++) {\\n    nums[j] = 0;\\n  }\\n  return nums;\\n};\\n```\n```\\nvar moveZeroes = function (nums) {\\n  let m = 0, temp;\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    if (nums[i] != 0) {\\n      temp = nums[i];\\n      nums[i] = nums[m];\\n      nums[m] = temp;\\n      m++;\\n    }\\n  }\\n\\n  return nums;\\n}\\n```\n```\\nvar moveZeroes = function(nums) {\\n    let end = nums.length;\\n\\tfor (let i = end; i >= 0; i--) { // We loop from the end of array\\n\\t\\tif (nums[i] === 0) { // if current element is 0\\n\\t\\t\\tnums.splice(i, 1); // we remove if from array\\n\\t\\t\\tnums.push(0); // and push to the end\\n\\t\\t}\\n\\t}\\n\\treturn nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2767897,
                "title": "just-like-quick-sort-using-pevot-index-tc-n",
                "content": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        pvt=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[pvt]=nums[pvt],nums[i]\\n                pvt+=1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        pvt=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[pvt]=nums[pvt],nums[i]\\n                pvt+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2722767,
                "title": "golang-clearly-explained-two-pointer-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe define the left pointer $l$ that points to the place we will move the next non-zero number to.\\n\\nThe right pointer $r$ would go through the array. Two cases here:\\n\\n1. If nums[r] == 0, do nothing.\\n2. Otherwise, we set nums[l]=nums[r] and increment $l$ by one.\\n\\nAfter the right pointer is done going through the array, the pointer $l$ would be **EXACTLY** at the place we setting elements to zero at. So we just simply move $l$ to the end of the array setting all elements to zero.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc moveZeroes(nums []int)  {\\n    l := 0\\n\\n    for r := range nums {\\n        if nums[r] != 0 {\\n            nums[l] = nums[r]\\n            l++\\n        }\\n    }\\n    for ; l < len(nums); l++ {\\n        nums[l] = 0\\n    }\\n    return\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nfunc moveZeroes(nums []int)  {\\n    l := 0\\n\\n    for r := range nums {\\n        if nums[r] != 0 {\\n            nums[l] = nums[r]\\n            l++\\n        }\\n    }\\n    for ; l < len(nums); l++ {\\n        nums[l] = 0\\n    }\\n    return\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2624674,
                "title": "very-easy-php-solution",
                "content": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return NULL\\n     */\\n    function moveZeroes(&$nums) {\\n        for($i = 0; $i < count($nums); $i++){\\n            if ($nums[$i] === 0) {\\n                unset($nums[$i]);\\n                $nums[]= 0;\\n            }\\n        }\\n        return $nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return NULL\\n     */\\n    function moveZeroes(&$nums) {\\n        for($i = 0; $i < count($nums); $i++){\\n            if ($nums[$i] === 0) {\\n                unset($nums[$i]);\\n                $nums[]= 0;\\n            }\\n        }\\n        return $nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2387606,
                "title": "simple-c-o-1-space-o-n-time-explanation-in-comments",
                "content": "**O(N) time and O(1) space.**\\n\\nWe will use a left pointer to keep track of first leftmost zero\\'s position. Whenever some non-zero element is found we will swap that element with this left pointer position and move the pointer one step ahead in array.\\n\\nLook for code comments for better understanding.\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        int left = 0;\\n        \\n        // Finding first zero to set our left pointer to point to first zero.\\n        while(left < nums.size() && nums[left] != 0)\\n            left++;\\n        \\n        // start iterating now after first found zero.\\n        for(int i=left+1;i<nums.size();i++)\\n        {\\n            // If zero found do nothing and move forward.\\n            if(nums[i] == 0)\\n                continue;\\n            \\n            // If non-zero elm then swap the left pointer pointing to zero with this element and move our left pointer forward.\\n            swap(nums[i],nums[left]);\\n            left++;\\n        }\\n        \\n    }\\n};\\n```\\n\\n# **Happy Coding :)**",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        int left = 0;\\n        \\n        // Finding first zero to set our left pointer to point to first zero.\\n        while(left < nums.size() && nums[left] != 0)\\n            left++;\\n        \\n        // start iterating now after first found zero.\\n        for(int i=left+1;i<nums.size();i++)\\n        {\\n            // If zero found do nothing and move forward.\\n            if(nums[i] == 0)\\n                continue;\\n            \\n            // If non-zero elm then swap the left pointer pointing to zero with this element and move our left pointer forward.\\n            swap(nums[i],nums[left]);\\n            left++;\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2317855,
                "title": "swift-simplest-solution",
                "content": "Please, upvote if you found the solution useful.\\n```\\nclass Solution {\\n\\t/// Time: O(n). Space: O(1)\\n    func moveZeroes(_ nums: inout [Int]) {\\n        var lastNonZeroIndex = 0\\n        for i in 0..<nums.count {\\n            guard nums[i] != 0 else { continue }\\n            nums.swapAt(i, lastNonZeroIndex)\\n            lastNonZeroIndex += 1\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n\\t/// Time: O(n). Space: O(1)\\n    func moveZeroes(_ nums: inout [Int]) {\\n        var lastNonZeroIndex = 0\\n        for i in 0..<nums.count {\\n            guard nums[i] != 0 else { continue }\\n            nums.swapAt(i, lastNonZeroIndex)\\n            lastNonZeroIndex += 1\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1728278,
                "title": "two-pointers-2ms-runtime-java-easy-sol-fast",
                "content": "**Upvote** if it helped you please! \\nEasy and short using ***two pointers*** approach.\\n\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int p1 = 0;\\n        int p2 = 1;\\n        while(p2 < nums.length) {\\n            if(nums[p1] == 0 && nums[p2] != 0) {\\n                nums[p1] = nums[p2];\\n                nums[p2] = 0;\\n                p1++;\\n                p2++;\\n            } else if(nums[p1] == 0 && nums[p2] == 0) {\\n               p2++; \\n            } else {\\n                p1++;\\n                p2++;\\n            }  \\n        }\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int p1 = 0;\\n        int p2 = 1;\\n        while(p2 < nums.length) {\\n            if(nums[p1] == 0 && nums[p2] != 0) {\\n                nums[p1] = nums[p2];\\n                nums[p2] = 0;\\n                p1++;\\n                p2++;\\n            } else if(nums[p1] == 0 && nums[p2] == 0) {\\n               p2++; \\n            } else {\\n                p1++;\\n                p2++;\\n            }  \\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1203079,
                "title": "c-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        for(int i=0,j=0;i<nums.size();i++) if(nums[i]!=0)swap(nums[i],nums[j++]);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        for(int i=0,j=0;i<nums.size();i++) if(nums[i]!=0)swap(nums[i],nums[j++]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 530024,
                "title": "easy-o-n-js-solution",
                "content": "```\\nvar moveZeroes = function(nums) {\\n    let idxForNonZero = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] !== 0) {\\n            [nums[idxForNonZero], nums[i]] = [nums[i], nums[idxForNonZero]];\\n            idxForNonZero++;\\n            // no need to check the swapped number because we are scanning through the array from the left so it is guaranteed that \\n            // the element at the idxForNonZero is zero (not non-zero).\\n        }\\n    }\\n    return nums;  \\n    // Time Complexity: O(n)\\n    // Space Complexity: O(1)\\n};\\n\\n// we want to have two partitions. The first partition has only non-zeros and the second partition has only zeroes.\\n// If we push all non-zeroes to the first partition, zeroes will be automatically moved to the second partition.\\n// So, we keep an index where the next non-zero will go into and this index starts from zero. Every time we encounter a non-zero, \\n// we swap this element with the number at the index for the next non-zero.\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar moveZeroes = function(nums) {\\n    let idxForNonZero = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] !== 0) {\\n            [nums[idxForNonZero], nums[i]] = [nums[i], nums[idxForNonZero]];\\n            idxForNonZero++;\\n            // no need to check the swapped number because we are scanning through the array from the left so it is guaranteed that \\n            // the element at the idxForNonZero is zero (not non-zero).\\n        }\\n    }\\n    return nums;  \\n    // Time Complexity: O(n)\\n    // Space Complexity: O(1)\\n};\\n\\n// we want to have two partitions. The first partition has only non-zeros and the second partition has only zeroes.\\n// If we push all non-zeroes to the first partition, zeroes will be automatically moved to the second partition.\\n// So, we keep an index where the next non-zero will go into and this index starts from zero. Every time we encounter a non-zero, \\n// we swap this element with the number at the index for the next non-zero.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 154240,
                "title": "swift-solution",
                "content": "```class Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        let count = nums.count\\n        nums = nums.filter { $0 != 0}\\n        for _ in 0 ..< (count - nums.count) { nums.append(0) }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```class Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        let count = nums.count\\n        nums = nums.filter { $0 != 0}\\n        for _ in 0 ..< (count - nums.count) { nums.append(0) }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72055,
                "title": "3-line-python-solution",
                "content": "```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        for i in range(len(nums))[::-1]:\\n            if nums[i] == 0:\\n                nums.append(nums.pop(i))\\n```\\nIf we iterate from the front and pop, the rest of the array will shift place and you will skip an element.\\nIf pop from the back then that is avoided by using [::-1] of range.\\npopping from the middle of the list is more expensive because it has to shift all the elements behind, but from the test cases this is pretty fast (probably because the tests are really short).  This is not as efficient as the two pointer solution (https://github.com/kamyu104/LeetCode/blob/master/Python/move-zeroes.py), but very very easy to understand.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        for i in range(len(nums))[::-1]:\\n            if nums[i] == 0:\\n                nums.append(nums.pop(i))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 72295,
                "title": "java-solution-in-0ms-beat-s87-69",
                "content": "    public class Solution {\\n        public void moveZeroes(int[] nums) {\\n            int counter = 0;\\n            int length = nums.length;\\n            for(int j = 0;j<length;j++){\\n                if(nums[j]==0){\\n                    counter++;\\n                }else {\\n                    nums[j-counter]=nums[j];\\n                    \\n                }\\n            }\\n            while(counter>0){\\n                nums[length-counter]=0;\\n                counter--;\\n            }\\n        }\\n    }\\ni think this answer is pretty easy to understand,so there is no comment",
                "solutionTags": [],
                "code": "class Solution {\\n        public void moveZeroes(int[] nums) {\\n            int counter = 0;\\n            int length = nums.length;\\n            for(int j = 0;j<length;j++){\\n                if(nums[j]==0){\\n                    counter++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 72340,
                "title": "c-20ms-solution-explained",
                "content": "The idea is simply. Instead of moving 0s to the end, we move non-zeros to the front.\\n\\n    void moveZeroes(vector<int>& nums) {\\n        int j=0;\\n        for(int i=0;i<nums.size();i++){\\n            if (nums[i]) swap(nums[j++],nums[i]);\\n        }\\n    }",
                "solutionTags": [],
                "code": "The idea is simply. Instead of moving 0s to the end, we move non-zeros to the front.\\n\\n    void moveZeroes(vector<int>& nums) {\\n        int j=0;\\n        for(int i=0;i<nums.size();i++){\\n            if (nums[i]) swap(nums[j++],nums[i]);\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 72311,
                "title": "6-lines-python-borrowed-partition-mechanism-from-quick-sort",
                "content": "    class Solution(object):\\n        def moveZeroes(self, nums):\\n            i = j = 0\\n            while i < len(nums):\\n                if nums[i] != 0:\\n                    nums[i], nums[j] = nums[j], nums[i]\\n                    j += 1\\n                i += 1",
                "solutionTags": [],
                "code": "    class Solution(object):\\n        def moveZeroes(self, nums):\\n            i = j = 0\\n            while i < len(nums):\\n                if nums[i] != 0:\\n                    nums[i], nums[j] = nums[j], nums[i]\\n                    j += 1\\n                i += 1",
                "codeTag": "Java"
            },
            {
                "id": 72521,
                "title": "java-o-n-solution-in-place-without-basecase",
                "content": "    public class Solution {\\n        public void moveZeroes(int[] nums) {\\n            int rightPos = 0, curr = 0;\\n            while(curr < nums.length) {\\n                if(nums[curr]!=0) nums[rightPos++] = nums[curr];\\n                curr++;\\n            }\\n            while(rightPos < nums.length) {\\n                nums[rightPos++] = 0;\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public void moveZeroes(int[] nums) {\\n            int rightPos = 0, curr = 0;\\n            while(curr < nums.length) {\\n                if(nums[curr]!=0) nums[rightPos++] = nums[curr];\\n                curr++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4001789,
                "title": "two-pointer-solution-with-step-by-step-explanation",
                "content": "# Intuition\\nFor this problem we will use two pointer algorithm.\\n\\n# Approach\\nFirst we declare left and right pointers at 0 index position, then we start to iterate over nums array and look for two possible scenarios either right ponter points to zero in this scenario we just scip to next right pointer index, and if right pointer is pointing to non zero value, in this case we swap right and left numbers, the main takeaway is that left and right will be swapping until they found first zero, then left will be pointing to zero and right will go and find non zero number to swap with left, and repeat until right pointer will reach end of nums array.  \\n\\n# Complexity\\n- Time complexity:\\nO(n) - Since we iterate only once for each num in nums Array\\n\\n- Space complexity:\\nO(1) - since we create only two int pointers and we mutate original array.\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        // declare left pointer\\n        int left = 0;\\n        // iterate over nums array with right pointer\\n        for(int right = 0; right < nums.length; right++) {\\n            // if right pointer is non zero:\\n            if(nums[right] != 0) {\\n                // create tmp variable to store right num\\n                int tmp = nums[right];\\n                // swap right num for left num\\n                nums[right] = nums[left];\\n                // swap left num for num that we stored in tmp\\n                nums[left] = tmp;\\n                // increment left pointer\\n                left++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        // declare left pointer\\n        int left = 0;\\n        // iterate over nums array with right pointer\\n        for(int right = 0; right < nums.length; right++) {\\n            // if right pointer is non zero:\\n            if(nums[right] != 0) {\\n                // create tmp variable to store right num\\n                int tmp = nums[right];\\n                // swap right num for left num\\n                nums[right] = nums[left];\\n                // swap left num for num that we stored in tmp\\n                nums[left] = tmp;\\n                // increment left pointer\\n                left++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3789531,
                "title": "c-easy-solution-in-single-traversal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\njust count the non zero elements \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing one pointer variable as count\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int count=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[count]);\\n                count++;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int count=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[count]);\\n                count++;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404027,
                "title": "2-approaches-easily-explained-optimal-and-brute-c-code",
                "content": "# Brute force approach -->\\nWe can create an temporary array, \\nWe will traverse the entire given array and find out all the non-zero elements and put them in the temporary array.\\nThen we can put them back into the given array from the first position then rest size of the array will be filled with zero.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ --> Size of the temporary array\\n# Brute Force Code \\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums){\\n        vector<int>temp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            if(nums[i]!=0){\\n                temp.push_back(nums[i]);    \\n            }\\n        }\\n        for(int i=0;i<temp.size();i++){\\n            nums[i]=temp[i];\\n        }\\n        for(int i=n-temp.size();i<n;i++){\\n            nums[i]=0;\\n        }\\n        return;\\n    }\\n}\\n```\\n# Optimal Approach -->\\nWe can use two pointer approach (i,j).\\nWe will set the value of j = -1\\nthen we will traverse the given array till it finds the first 0. Then the index of it will be stored in j and it will break. After this loop if j remains as -1 then the given array will be returned because it does not contain any element which is 0.\\nThen a loop will traverse from j+1 to the end of the given array.\\nWhere j will alway be pointing the index of the current 0 and i will find the non-zero element to swap nums[i] and nums[j], when swapping will happen then i and j both will increase. Otherwise only i will be increamented to find the next non-zero element.\\n# Optimized Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        if(j==-1){\\n            return ;\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n        return ;\\n    }\\n};\\n```\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n\\n$$O(1)$$ --> No extra space is used\\n\\n# Please Upvote if you find it helpful \\u2B06\\uFE0F",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums){\\n        vector<int>temp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            if(nums[i]!=0){\\n                temp.push_back(nums[i]);    \\n            }\\n        }\\n        for(int i=0;i<temp.size();i++){\\n            nums[i]=temp[i];\\n        }\\n        for(int i=n-temp.size();i<n;i++){\\n            nums[i]=0;\\n        }\\n        return;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        if(j==-1){\\n            return ;\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n        return ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3374523,
                "title": "beats-100-optimal-solution-using-two-pointers",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n  void moveZeroes(vector<int> &nums)\\n  {\\n    // finding first zero occurrence\\n    int k = 0;\\n    int n = nums.size();\\n    while (k < n)\\n    {\\n      if (nums[k] == 0)\\n      {\\n\\n        break;\\n      }\\n      else\\n      {\\n        k = k + 1;\\n      }\\n    }\\n\\n    // finding zeros and immediate non-zero elements and swapping them\\n    int i = k, j = k + 1;\\n\\n    while (i < n && j < n)\\n    {\\n      if (nums[j] != 0)\\n      {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n        i++;\\n      }\\n\\n      j++;\\n    }\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n  void moveZeroes(vector<int> &nums)\\n  {\\n    // finding first zero occurrence\\n    int k = 0;\\n    int n = nums.size();\\n    while (k < n)\\n    {\\n      if (nums[k] == 0)\\n      {\\n\\n        break;\\n      }\\n      else\\n      {\\n        k = k + 1;\\n      }\\n    }\\n\\n    // finding zeros and immediate non-zero elements and swapping them\\n    int i = k, j = k + 1;\\n\\n    while (i < n && j < n)\\n    {\\n      if (nums[j] != 0)\\n      {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n        i++;\\n      }\\n\\n      j++;\\n    }\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3278867,
                "title": "c-solution-with-follow-up-question",
                "content": "# Intuition\\n- when find non-zero element, move it forward until all its previous are non-zero\\n- searching from front to back, to ensure that its previous is non-zero denotes all its previous are non-zero\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# \\uD83C\\uDF40 Approach 1\\n- use for loop to find non-zero\\n- swap it forward one by one until hit the front or its previous is non-zero\\n- example: (0-indexed)\\n  - array: 0 ***0*** ***1*** 2\\n  - `swap(array[1], array[2]);`\\n  - array: ***0*** ***1*** 0 2\\n  - `swap(array[0], array[1]);`\\n  - array: 1 0 ***0*** ***2***\\n  - `swap(array[2], array[3]);`\\n  - array: 1 ***0*** ***2*** 0\\n  - `swap(array[1], array[2]);`\\n  - array: 1 2 0 0\\n  - done\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n    - one worst case is: $$[0, ... 0,1,...,n/2]$$, which totally do swap $$n^2/4$$ times\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code 1\\n```\\nvoid swap(int* a, int* b)\\n{\\n  int t = *a;\\n  *a = *b;\\n  *b = t;\\n}\\n\\nvoid moveZeroes(int* nums, int numsSize){\\n  for (size_t i = 0; i < numsSize; i++)\\n  {\\n    if (nums[i] != 0)\\n    {\\n      int j = i;\\n      while(j - 1 >= 0 && nums[j - 1] == 0)\\n      {\\n        swap(&nums[j - 1], &nums[j]);\\n        j--;\\n      }\\n    }\\n  }\\n}\\n```\\n\\n# \\uD83E\\uDD14\\uD83D\\uDCAD Follow up: Could you minimize the total number of operations done?\\n# \\uD83C\\uDF40 Approach 2\\n- use a index indicator `head_of_zeros` to store the swap place for non-zero\\n- use for loop to find non-zero\\n- swap it with `head_of_zeros`, then adjust `head_of_zeros`\\n- example: (0-indexed)\\n  - array: 1 ***0*** ***2*** 0 3 0 0 4\\n  - `swap(array[1], array[2]);`\\n  - array: 1 2 ***0*** 0 ***3*** 0 0 4\\n  - `swap(array[2], array[6]);`\\n  - array: 1 2 3 ***0*** 0 0 0 ***4***\\n  - `swap(array[3], array[7]);`\\n  - array: 1 2 3 4 0 0 0 0\\n  - done\\n- therefore, every swap operation does swap the number to the correct place \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ , also improved time complexity\\n<!-- - , because `i` and `head_of_zeros` only move in one direction -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code 2\\n```\\nvoid swap(int* a, int* b)\\n{\\n  int t = *a;\\n  *a = *b;\\n  *b = t;\\n}\\n\\nvoid moveZeroes(int* nums, int numsSize){\\n  int head_of_zeros = 0;\\n  bool has_zero = false;\\n  for (size_t i = 0; i < numsSize; i++)\\n  {\\n    if (nums[i] != 0 && has_zero)\\n    {\\n      swap(&nums[i], &nums[head_of_zeros]);\\n      head_of_zeros += 1;\\n    }\\n    else if (nums[i] == 0 && !has_zero)\\n    {\\n      has_zero = true;\\n      head_of_zeros = i;\\n    }\\n  }\\n}\\n```\\n\\n![IMG_8144.jpeg](https://assets.leetcode.com/users/images/03173c2d-79c7-45f8-b43f-e2a45b6ba62e_1678681409.229773.jpeg)\\nPlease upvote, thank you OwO\\n",
                "solutionTags": [
                    "C",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nvoid swap(int* a, int* b)\\n{\\n  int t = *a;\\n  *a = *b;\\n  *b = t;\\n}\\n\\nvoid moveZeroes(int* nums, int numsSize){\\n  for (size_t i = 0; i < numsSize; i++)\\n  {\\n    if (nums[i] != 0)\\n    {\\n      int j = i;\\n      while(j - 1 >= 0 && nums[j - 1] == 0)\\n      {\\n        swap(&nums[j - 1], &nums[j]);\\n        j--;\\n      }\\n    }\\n  }\\n}\\n```\n```\\nvoid swap(int* a, int* b)\\n{\\n  int t = *a;\\n  *a = *b;\\n  *b = t;\\n}\\n\\nvoid moveZeroes(int* nums, int numsSize){\\n  int head_of_zeros = 0;\\n  bool has_zero = false;\\n  for (size_t i = 0; i < numsSize; i++)\\n  {\\n    if (nums[i] != 0 && has_zero)\\n    {\\n      swap(&nums[i], &nums[head_of_zeros]);\\n      head_of_zeros += 1;\\n    }\\n    else if (nums[i] == 0 && !has_zero)\\n    {\\n      has_zero = true;\\n      head_of_zeros = i;\\n    }\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2968449,
                "title": "my-cpp-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int i = 0;\\n       for(int j = 0; j<nums.size(); j++)\\n       {\\n           if(nums[j]!=0)\\n           {\\n                 swap(nums[j] , nums[i]);\\n                 i++;\\n           }\\n       }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int i = 0;\\n       for(int j = 0; j<nums.size(); j++)\\n       {\\n           if(nums[j]!=0)\\n           {\\n                 swap(nums[j] , nums[i]);\\n                 i++;\\n           }\\n       }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2736256,
                "title": "simple-java-solution-87",
                "content": "```\\n\\nclass Solution {\\n    public void moveZeroes(int[] arr) {\\n            int count = 0;  \\n \\n        for (int i = 0; i < arr.length; i++){\\n            if (arr[i] != 0)\\n                arr[count++] = arr[i]; \\n        }\\n \\n      \\n        while (count < arr.length)\\n            arr[count++] = 0;\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public void moveZeroes(int[] arr) {\\n            int count = 0;  \\n \\n        for (int i = 0; i < arr.length; i++){\\n            if (arr[i] != 0)\\n                arr[count++] = arr[i]; \\n        }\\n \\n      \\n        while (count < arr.length)\\n            arr[count++] = 0;\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2674777,
                "title": "c-simple-solution-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0;\\n        for(int j=0; j<nums.size(); j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[i],nums[j]);\\n                i++;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0;\\n        for(int j=0; j<nums.size(); j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[i],nums[j]);\\n                i++;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2086532,
                "title": "move-zeros-python-solution",
                "content": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in nums:\\n            if i==0:\\n                nums.remove(i)\\n                nums.append(0)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        for i in nums:\\n            if i==0:\\n                nums.remove(i)\\n                nums.append(0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1668209,
                "title": "easy-approach-solution-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0;\\n        for(int j=0;j<nums.size();j++){\\n            if(nums[j]!=0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0;\\n        for(int j=0;j<nums.size();j++){\\n            if(nums[j]!=0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1638418,
                "title": "java-easy-solution-step-by-step-two-detailed-and-explained-cases-using-two-pointer-approach",
                "content": "**Guys here I am goinng to explain the whole thing considering two following cases:**\\n\\n# **CASE I: When Relative order of non-zero elements need not to be maintained**\\n\\nSTEP 1: Take Two pointers **Start** and **End** for first index and the last index of the array\\nSTEP 2: If the element at Start is 0  swap  it with the value at  end and increment the **start** and decrement the **end**\\nSTEP 3: If the element is not 0; increase the **start**\\n\\nThe code for above approach is given below;\\n```\\n public void moveZeroes(int[] nums) {\\n        \\n    int start=0;\\n    int end=nums.length-1;\\n\\n        while (start<end)\\n        {\\n            if (nums[start]==0)\\n            {\\n                int temp=nums[start];\\n                nums[start]=nums[end];\\n                nums[end]=temp;\\n                start++;\\n                end--;\\n            }\\n            else\\n            {\\n                start++;\\n            }\\n\\n        }\\n       \\n    }\\n```\\n\\nHere for input **nums=[0,1,0,3,12];**\\n**output=[12,1,3,0,0];**\\n\\nAll the zeroes have been pushed at the end but the relative order of non-zero elements are not maintained.\\n\\nNOW lets see How can we maintain the relative order while pushing the zeroes at end\\n\\n# **CASE II: When Relative order of non-zero elements need to be maintained**\\nSTEP 1: Take two pointers **i** and **j** set them to zero\\nSTEP 2: If element at index **i** is not zero; Swap it with element at **j** and increase **j**\\nSTEP 3: increase index **i** for both situation ......swapping occurs or not **I** will increase\\n\\n**The code for the above approach is given below:**\\n```\\n public void moveZeroes(int[] nums) {\\n        \\n    int i=0;\\n    int j=0;\\n    while (i<nums.length)\\n    {\\n        if (nums[i]!=0)\\n        {\\n            int temp=nums[i];\\n            nums[i]=nums[j];\\n            nums[j]=temp;\\n            j++;\\n        }\\n        i++;\\n    }\\n       \\n    }\\n```\\n\\n\\n\\nLet me explain with an example input **nums=[0,1,0,3,12]**\\n\\nstart with **i=0** and **j=0**; **n=nums.length=5**\\n\\n**nums[i]=0** and **nums[j]=0**\\n\\n  **nums[i]** and **nums[j]** both are 0 , so the condition is false for if statement so our **i** will increase and **j** remains at 0.\\n  \\n```\\n  Now i=1 and j=0  ; nums[i]=1  and nums[j]=0\\n  so nums[i]!=0 so now **SWAPPING** occurs and array becomes nums=[1,0,0,3,12] ; \\n  j is incremented to 1 and i is incremented to 2.\\n```\\n  \\n  Now **i=2** and **j=1**  ; **nums[i]=0**  and **nums[j]=0**\\n   so **nums[i]!=0** condition is false; no swapping occurs and **i** is increased to 3\\n   \\n   \\n     Now i=3 and j=1  ; nums[i]=3  and nums[j]=0\\n\\t  so nums[i]!=0 so now **SWAPPING** occurs and array becomes nums=[1,3,0,0,12] ;          \\n\\t  j is incremented to 2 and i is incremented to 4.\\n\\t  \\n\\t  ``  Now i=4 and j=2  ; nums[i]=12  and nums[j]=0\\n\\t  so nums[i]!=0 so now **SWAPPING** occurs and array becomes nums=[1,3,12,0,0] ;          \\n\\t  j is incremented to 3 and i is incremented to 5.\\n\\t  \\n\\t  now  i is not less than nums.length \\n\\t  Therefore no more iteration takes place and we have our sorted array.\\n\\n\\n\\nI HOPE  YOU LIKE IT.\\n\\nI SHALL BE THANKFULL TO THE RESPONSES AND UPVOTES....\\n\\n**#MY FIRST SOLUTION SUBMISSION**\\n\\nDO SUPPORT GUYS !! \\n\\n",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\n public void moveZeroes(int[] nums) {\\n        \\n    int start=0;\\n    int end=nums.length-1;\\n\\n        while (start<end)\\n        {\\n            if (nums[start]==0)\\n            {\\n                int temp=nums[start];\\n                nums[start]=nums[end];\\n                nums[end]=temp;\\n                start++;\\n                end--;\\n            }\\n            else\\n            {\\n                start++;\\n            }\\n\\n        }\\n       \\n    }\\n```\n```\\n public void moveZeroes(int[] nums) {\\n        \\n    int i=0;\\n    int j=0;\\n    while (i<nums.length)\\n    {\\n        if (nums[i]!=0)\\n        {\\n            int temp=nums[i];\\n            nums[i]=nums[j];\\n            nums[j]=temp;\\n            j++;\\n        }\\n        i++;\\n    }\\n       \\n    }\\n```\n```\\n  Now i=1 and j=0  ; nums[i]=1  and nums[j]=0\\n  so nums[i]!=0 so now **SWAPPING** occurs and array becomes nums=[1,0,0,3,12] ; \\n  j is incremented to 1 and i is incremented to 2.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1613027,
                "title": "two-pointer-approach-with-explaination-java-code",
                "content": "Time Complexity => O(N)\\nSpace Complexity => O(1)\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        \\n        if(n == 0 || n == 1)\\n            return;\\n        \\n        // Two Pointer Approach\\n        int left = 0; \\n        int right = 0;\\n        \\n        // for swap\\n        int temp;\\n        \\n        // Rearrangement\\n        while(right < n){\\n            // when ever right pointer see zero value it get incremented\\n            if(nums[right]==0)\\n                ++right;\\n            else {\\n                // when it see non-zero element it swap with left pointer value and then increment both right and left pointer\\n                \\n                //swap\\n                temp = nums[left];\\n                nums[left] = nums[right];\\n                nums[right] = temp;\\n                ++left;\\n                ++right;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n**If you guys find it useful do upvote the solution**",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        \\n        if(n == 0 || n == 1)\\n            return;\\n        \\n        // Two Pointer Approach\\n        int left = 0; \\n        int right = 0;\\n        \\n        // for swap\\n        int temp;\\n        \\n        // Rearrangement\\n        while(right < n){\\n            // when ever right pointer see zero value it get incremented\\n            if(nums[right]==0)\\n                ++right;\\n            else {\\n                // when it see non-zero element it swap with left pointer value and then increment both right and left pointer\\n                \\n                //swap\\n                temp = nums[left];\\n                nums[left] = nums[right];\\n                nums[right] = temp;\\n                ++left;\\n                ++right;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1464914,
                "title": "c-easy-solution-100-faster",
                "content": "```\\n// PLEASE UPVOTE IF YOU LIKE\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n  int n=nums.size();\\n    int j=1;\\n        int i=0;\\n        while(i<n && j<n)\\n        {\\n                if(nums[i]==0 && nums[j]==0)\\n                {\\n                         j++;\\n                        continue;\\n                }\\n                else if(nums[i]==0 && nums[j]!=0)\\n                        swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n        }\\n        \\n \\n    }\\n};\\n\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n  int n=nums.size();\\n    int j=1;\\n        int i=0;\\n        while(i<n && j<n)\\n        {\\n                if(nums[i]==0 && nums[j]==0)\\n                {\\n                         j++;\\n                        continue;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1391669,
                "title": "simple-c-o-n-solution-o-1-space-two-pointers",
                "content": "The idea I used is simple, i used z and j two pointers where z is to keep track of zeroes and j for swapping any non-zero element with the zeroes.\\n* if nums[z] = 0 and nums[j] is not 0 then we swap these two elements and increment accordingly.\\n* if nums[z] is not 0 then we just increment z so that we get to some index where the element is 0.\\n* otherwise we increment only j as in this case nums[z] will contain 0, with j we try to find the next non-zero number.\\n\\n```\\nExample:\\n0 1 0 3 12\\nz j\\nswap 0 and 1\\n\\n1 0 0 3 12\\n  z j\\nincrement j\\n\\n1 0 0 3 12\\n  z   j \\nswap 0 and 3\\n\\n1 3 0 0 12\\n    z    j\\nswap 0 and 12\\n\\n1 3 12 0 0\\n```\\n\\nCode Implementation:\\n\\n```\\nvoid moveZeroes(vector<int>& nums) {\\n        int n = nums.size();\\n        if(n<=1)return;\\n        int z = 0;\\n        int j = 1;\\n        while(j < n){\\n            if(nums[z] == 0 && nums[j]!=0){\\n                swap(nums[z],nums[j]);\\n                z++;               \\n            }\\n            if(nums[z]!=0)z++;\\n             j++;\\n        }\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nExample:\\n0 1 0 3 12\\nz j\\nswap 0 and 1\\n\\n1 0 0 3 12\\n  z j\\nincrement j\\n\\n1 0 0 3 12\\n  z   j \\nswap 0 and 3\\n\\n1 3 0 0 12\\n    z    j\\nswap 0 and 12\\n\\n1 3 12 0 0\\n```\n```\\nvoid moveZeroes(vector<int>& nums) {\\n        int n = nums.size();\\n        if(n<=1)return;\\n        int z = 0;\\n        int j = 1;\\n        while(j < n){\\n            if(nums[z] == 0 && nums[j]!=0){\\n                swap(nums[z],nums[j]);\\n                z++;               \\n            }\\n            if(nums[z]!=0)z++;\\n             j++;\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1284557,
                "title": "clean-java-solution-single-traversal-100-faster",
                "content": "**Please *Upvote* if you like the Solution**\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n        int count=0;\\n        for(int i=0;i<nums.length;i++){\\n            \\n            if(nums[i]!=0){\\n                int temp=nums[i];\\n                nums[i]=nums[count];\\n                nums[count]=temp;\\n                count++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n        int count=0;\\n        for(int i=0;i<nums.length;i++){\\n            \\n            if(nums[i]!=0){\\n                int temp=nums[i];\\n                nums[i]=nums[count];\\n                nums[count]=temp;\\n                count++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1145778,
                "title": "javascript",
                "content": "```\\nvar moveZeroes = function(nums) {\\n    let index = 0;\\n    for (let i = 0; i < nums.length; i ++) {\\n        if (nums[i] !== 0) {\\n            nums[index++] = nums[i]\\n        }\\n    }\\n    for (let i = index; i < nums.length; i++) {\\n        nums[i] = 0\\n    }\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar moveZeroes = function(nums) {\\n    let index = 0;\\n    for (let i = 0; i < nums.length; i ++) {\\n        if (nums[i] !== 0) {\\n            nums[index++] = nums[i]\\n        }\\n    }\\n    for (let i = index; i < nums.length; i++) {\\n        nums[i] = 0\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 563027,
                "title": "java-code-in-a-single-loop-time-complexity-o-n-100",
                "content": "Just pushing non-zero numbers to the front and replacing their index with 0\\n```\\n    public void moveZeroes(int[] nums) {\\n        for(int i=0, ci=0; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                if(ci != i){\\n                    nums[ci] = nums[i];\\n                    nums[i] = 0;\\n                }\\n                ci++;\\n            }\\n        }\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public void moveZeroes(int[] nums) {\\n        for(int i=0, ci=0; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                if(ci != i){\\n                    nums[ci] = nums[i];\\n                    nums[i] = 0;\\n                }\\n                ci++;\\n            }\\n        }\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 555876,
                "title": "python-two-pointer-solution-beats-97-45",
                "content": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        j = 1\\n        \\n        while j < len(nums):\\n            if nums[i] == nums[j] and nums[i] == 0:\\n                j += 1\\n                continue\\n            \\n            if nums[i] == 0 and nums[j] != 0:\\n                # swap elements\\n                temp = nums[j]\\n                nums[j] = nums[i]\\n                nums[i] = temp\\n            \\n            i += 1\\n            j += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        j = 1\\n        \\n        while j < len(nums):\\n            if nums[i] == nums[j] and nums[i] == 0:\\n                j += 1\\n                continue\\n            \\n            if nums[i] == 0 and nums[j] != 0:\\n                # swap elements\\n                temp = nums[j]\\n                nums[j] = nums[i]\\n                nums[i] = temp\\n            \\n            i += 1\\n            j += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 521275,
                "title": "rust-solution",
                "content": "```rust\\nimpl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n        let mut i = 0;\\n        for j in 0..nums.len() {\\n            if nums[j] != 0 {\\n                nums.swap(i, j);\\n                i += 1;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n        let mut i = 0;\\n        for j in 0..nums.len() {\\n            if nums[j] != 0 {\\n                nums.swap(i, j);\\n                i += 1;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 467919,
                "title": "simple-javascript-solution",
                "content": "```javascript\\nvar moveZeroes = function(nums) {\\n    let count = 0;\\n    for(let i = 0; i < nums.length; i++){\\n        if(nums[i] != 0){\\n            nums[count++] = nums[i];\\n        }\\n    }\\n    for(let i = count; i < nums.length; i++){\\n        nums[i] = 0;\\n    }\\n    return nums;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar moveZeroes = function(nums) {\\n    let count = 0;\\n    for(let i = 0; i < nums.length; i++){\\n        if(nums[i] != 0){\\n            nums[count++] = nums[i];\\n        }\\n    }\\n    for(let i = count; i < nums.length; i++){\\n        nums[i] = 0;\\n    }\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 155841,
                "title": "python-use-sort",
                "content": "# Use sort to solve this problem\\n## Code\\n```python\\ndef move_zeroes(self, nums):\\n    nums.sort(key=lambda n: n == 0)\\n```\\n\\n## Explain\\n1. Python lists have a built-in `list.sort()` method that modifies the list in-place.\\n2. The key parameter to specify  `lambda n: n == 0` called on each num in nums prior to making comparisons\\n3. So all zero will be sort to the right, none zero will keep in origin order",
                "solutionTags": [],
                "code": "```python\\ndef move_zeroes(self, nums):\\n    nums.sort(key=lambda n: n == 0)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 72394,
                "title": "javascript-solution-if-anyone-is-interested",
                "content": "    var moveZeroes = function(nums) {\\n        var temp = null;\\n        var j = 0;\\n        for(var i=0; i < nums.length; i++) {\\n            if (nums[i] !== 0) {\\n                temp = nums[j];\\n                nums[j] = nums[i];\\n                nums[i] = temp;\\n                j++;\\n            }\\n        }\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var moveZeroes = function(nums) {\\n        var temp = null;\\n        var j = 0;\\n        for(var i=0; i < nums.length; i++) {\\n            if (nums[i] !== 0) {\\n                temp = nums[j];\\n                nums[j] = nums[i];\\n                nums[i] = temp;\\n                j++;\\n            }\\n        }\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 3758272,
                "title": "python-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i=0\\n        while(i<len(nums)):\\n            if nums[i]==0:\\n                nums.append(0)\\n                nums.remove(0)\\n            i+=1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i=0\\n        while(i<len(nums)):\\n            if nums[i]==0:\\n                nums.append(0)\\n                nums.remove(0)\\n            i+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3523618,
                "title": "java-solution-for-move-zeroes-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal of this solution is to move all the zeroes in the input array nums to the end of the array while maintaining the relative order of the non-zero elements\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a variable m to -1, which will keep track of the position of the first zero encountered.\\n2. Traverse the array nums from left to right: a. If the current element is zero, and m is -1 or the element at position m is non-zero, set m to the current index. b. If the current element is non-zero and m is not -1, swap the current element with the element at position m and increment m.\\n3. After the traversal, all the zeroes will be at the end of the array, and the relative order of the non-zero elements will be maintained.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(n), where n is the length of the input array nums. The algorithm iterates through the array once\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1), as the algorithm only uses a constant amount of extra space to store the variable m and the temporary variable temp used for swapping elements.\\n\\n# Code\\n```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int m=-1;\\n        for(int i=0; i<nums.length; i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                if(m==-1 || nums[m]!=0)\\n                {\\n                    m=i;\\n                }\\n            }\\n            else\\n            {\\n                if(m!=-1)\\n                {\\n                    int temp = nums[i];\\n                    nums[i]=nums[m];\\n                    nums[m]=temp;\\n                    m++;\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int m=-1;\\n        for(int i=0; i<nums.length; i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                if(m==-1 || nums[m]!=0)\\n                {\\n                    m=i;\\n                }\\n            }\\n            else\\n            {\\n                if(m!=-1)\\n                {\\n                    int temp = nums[i];\\n                    nums[i]=nums[m];\\n                    nums[m]=temp;\\n                    m++;\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444972,
                "title": "python-5-lines-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe need to use pointers to move our zeros to the very end somehow by using the same datastructure and minimize the steps and time complexity of the algorithm. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can utilize a two-pointer approach to solve this problem. The first pointer tracks the position of the last encountered non-zero element (initialized to zero), while the second pointer traverses the list. When we come across a non-zero element, we swap it with the element at the position indicated by the first pointer, and then increment the first pointer. This process ensures that all non-zero elements are shifted to the front of the array, while preserving their relative order. Finally, we fill the remaining elements with zeros.\\n\\nIf you find this helpful, please consider liking this post. I\\'ll continue to share more solutions like this. Should you have any questions, feel free to comment below, and I\\'ll respond as promptly as possible.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\nWe are traversing the entire list at worst case, so this is why our time is big o of n. n being the numbers of elements in our list. \\n- Space complexity:\\nO(1)\\nsince we are updating the same list we are not using any extra space. \\n\\n# Code\\n```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        zero_pos = 0\\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                nums[i], nums[zero_pos] = nums[zero_pos], nums[i]\\n                zero_pos += 1   \\n\\n\\n\\n            \\n\\n    \\n                \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        zero_pos = 0\\n        for i in range(len(nums)):\\n            if nums[i] != 0:\\n                nums[i], nums[zero_pos] = nums[zero_pos], nums[i]\\n                zero_pos += 1   \\n\\n\\n\\n            \\n\\n    \\n                \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3354283,
                "title": "c-code-best-in-market",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int lastzero=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                nums[lastzero]=nums[i];\\n                lastzero++;\\n            }\\n        }\\n        for(int i=lastzero;i<nums.size();i++){\\n            nums[i]=0;\\n        }   \\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int lastzero=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                nums[lastzero]=nums[i];\\n                lastzero++;\\n            }\\n        }\\n        for(int i=lastzero;i<nums.size();i++){\\n            nums[i]=0;\\n        }   \\n       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3048350,
                "title": "java-solution-beats-100-constant-space-in-place-swap",
                "content": "# Approach \\n    In-place swap  \\n\\n    Only target Non-Zero element, Zero automaticaly arranged by its\\n    correct position;\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    private void swap(int[] arr,int i,int j){\\n        int temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n    }\\n    public void moveZeroes(int[] nums) {\\n        int k = 0;\\n        int n = nums.length;\\n        for(int i=0;i<n;i++){\\n            if(nums[i] != 0){\\n                swap(nums,i,k++);\\n            }\\n        }\\n    }\\n}\\n```\\n\\n# Happy Coding \\uD83D\\uDC96\\n* Upvote if you like it",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    private void swap(int[] arr,int i,int j){\\n        int temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n    }\\n    public void moveZeroes(int[] nums) {\\n        int k = 0;\\n        int n = nums.length;\\n        for(int i=0;i<n;i++){\\n            if(nums[i] != 0){\\n                swap(nums,i,k++);\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1838268,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1821489,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1744663,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 2029724,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1625836,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1703891,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1572592,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1571527,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1944210,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1869625,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1838268,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1821489,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1744663,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 2029724,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1625836,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1703891,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1572592,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1571527,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1944210,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1869625,
                "content": [
                    {
                        "username": "Nisha1205092",
                        "content": "it\\'s sad that I look for hints or ideas, but people just directly post codes here too!!! Whereas there\\'s a \\'solution\\' section separately. "
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "Let people discuss their issues with their solution "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "It literally says not to post solutions in the discussion. This section is for tips and questions."
                    },
                    {
                        "username": "VladimirTheLeet",
                        "content": "I guess the rules don\\'t work for you if you can\\'t read \\xAF\\\\\\\\\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "jerryy147",
                        "content": "all 3 rules say not to post a solution here in some form"
                    },
                    {
                        "username": "DoMonkeysFly7",
                        "content": "ppl are idiots frate, they wanna show how 'smart' they are"
                    },
                    {
                        "username": "mdegis",
                        "content": "I really do not understand how accepted solutions distribution works or measured for the solution.  I\\'ve basically submit the same solution 4 minutes apart, first one runtime was 491 ms and beat 25.21%... second one was 340 ms and beat 55.81%. Again, they are the same code! Nothing changed, not even an empty space. Just click \"submit\" button again. \\n\\nShould I stop caring about this number if there is no consistency at all?"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "true and more over implicit declaration faster than explicit datatype declaration in typescript. "
                    },
                    {
                        "username": "bernardoolisan",
                        "content": "Is bc the leetcode server that runs your code might sometimes run faster or slower, is a compiler in a server. And yes, you should care about the percentage even if sometimes is not accurate, it gives you a approximation of how efficient is your code "
                    },
                    {
                        "username": "Priyamd",
                        "content": "i guess its a glitch "
                    },
                    {
                        "username": "potatopie",
                        "content": "its literally always the indians that post the solutions what concept of DISCUSSION do you guys not understand? "
                    },
                    {
                        "username": "AryanP45",
                        "content": "[@nKR5](/nKR5) Always fun reading these stereotypical comments"
                    },
                    {
                        "username": "nKR5",
                        "content": "Strong in programming language, weak in human communication language."
                    },
                    {
                        "username": "shubhamsharma123",
                        "content": " // striver solution\\n  int k=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n            int temp=nums[k];\\n            nums[k]=nums[i];\\n            nums[i]= temp;\\n              k++;\\n            }\\n        }\\n        }"
                    },
                    {
                        "username": "vivekup3424",
                        "content": "Bro why you want hate by posting solution here, are you some kinda masochist."
                    },
                    {
                        "username": "swand0g",
                        "content": "nice job posting the solution in the one place leetcode specifies not to post solutions!"
                    },
                    {
                        "username": "neel19",
                        "content": "[@luan_hy](/luan_hy)  The instructor here (striver) has a very strong background in competitive programming. That\\'s how he can come up with such elegant solution. You can check out his tutorials on youtube. "
                    },
                    {
                        "username": "mariusandries25",
                        "content": "[@luan_hy](/luan_hy) The non-zero values are moved in front of array, the k variable keeping track of the moved values non-zero. Zeroes are implicit moving behind when swapping the non-zero. Then when encountering zero do nothing."
                    },
                    {
                        "username": "luan_hy",
                        "content": "Can you share what is your problem-solving step to come out with a so simple solution? "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "atak",
                        "content": "\\t\\tzero_size = nums.count(0)\\n\\t\\tnums.delete(0)\\n\\t\\tnums = (nums + ([0] * zero_size ))"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\n\\nEasiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5||Best solution in python\\n\\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/3923521/easiest-faang-method-ever-best-solution-in-python/"
                    },
                    {
                        "username": "michaelknight492",
                        "content": "\"Note that you must do this in-place without making a copy of the array.\"\\n\\nI believe \"nums = (nums + ([0] * zero_size ))\" is  making a copy of the array"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5 \\n\\nhttps://leetcode.com/problems/move-zeroes/solutions/2872504/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "lanyiyun",
                        "content": "'''\\ndef moveZeroes(self, nums):\\n\\n        for i in range(nums.count(0)):\\n            nums.remove(0)\\n            nums.append(0)\\n'''"
                    },
                    {
                        "username": "starogre",
                        "content": "this doesn\\'t count. this creates a new list in memory. the challenge is to do it in-place"
                    },
                    {
                        "username": "saichandra004",
                        "content": "Cannot modify nums."
                    },
                    {
                        "username": "sainath81061",
                        "content": "public void MoveZeroes(int[] nums) {\\n        int i,count = 0;\\n        for(i=0;i<nums.Length;i++){\\n            if(nums[i] != 0){\\n                nums[count] = nums[i];\\n                count++;\\n            }\\n        }\\n        for(;count<nums.Length;count++){\\n            nums[count] = 0;\\n        }\\n        foreach(var x in nums){\\n            Console.WriteLine(x);\\n        }\\n    }"
                    },
                    {
                        "username": "LanceofLonginius",
                        "content": "do not post solutions here"
                    },
                    {
                        "username": "Kokopas",
                        "content": "Why this solution is not working,?\nI checked in on local interpreter and it works\n\nclass Solution:\n    def moveZeroes(self, nums) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        zero_amount = nums.count(0)\n        zero_list=[]\n        n=0\n        while n < zero_amount:\n            zero_list.append(0)\n            n+=1      \n        nums = list(filter(lambda x: x!=0, nums))+zero_list"
                    },
                    {
                        "username": "vnhnhm",
                        "content": "[@muhammedirshadismail0722](/muhammedirshadismail0722) stop spamming"
                    },
                    {
                        "username": "Pranav_cs",
                        "content": "whe have to do it in-place don\\'t create a new list.\\nHint: use 2 pointers"
                    }
                ]
            },
            {
                "id": 1862004,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 1576401,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 2060872,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 1947602,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 1835342,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 1765226,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 2076077,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 2074740,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 2068974,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 2068074,
                "content": [
                    {
                        "username": "Akshat0706",
                        "content": "Remember QuickSort. Use two Pointers and swap non-zeros to left and zeros to right."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "but tle is showing bruhh\\n"
                    },
                    {
                        "username": "kgjobsearch",
                        "content": "b=[0,1,0,3,12]\\nprint(list(a for a in b if a!= 0) + list(a for a in b if a == 0))"
                    },
                    {
                        "username": "azimBaldiwala",
                        "content": "You are making a new list here!!! QUESTION SAYS WE NEED TO MODIFY THE LIST , that is the purpose of the question .. else your solution is correct  "
                    },
                    {
                        "username": "pardhi1400",
                        "content": "it says keep the relative order does that mean not asending ? just the order the elements where in at the start?"
                    },
                    {
                        "username": "itsrishiydv",
                        "content": "Leetcode Python editor having some issue because below code is giving correct answer in local machine.\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        lis1=[]\\n        lis2=[]\\n        for i in nums:\\n            if i==0:\\n                lis2.append(i)\\n            if i!=0:\\n                lis1.append(i)\\n            \\n        return lis1+lis2"
                    },
                    {
                        "username": "aXXo",
                        "content": "you are supposed to modify in place. In your code you are creating two new lists"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": " `class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\n        count = 0\\n        new = []\\n        \\n        for i in nums:\\n            if i == 0:\\n                count += 1\\n            else:\\n                new.append(i)\\n\\n        for i in range(count):\\n            new.append(0)\\n            \\n        return new`\\n\\n\\nmy solution works fine using pycharm but here i get wrong answer ?????"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "i came with new code, if you interested\n\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n  \n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] == 0 :\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis\n\nim tryng to solve this proplem with this code , it works fine but not when two zeros come next to each other , it move one of the zero to swap with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea  ?\n"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "[@Siddharoodha10](/Siddharoodha10) ops\\n"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "as per question u need to use nums list only. (its asking to modify nums in place only)"
                    },
                    {
                        "username": "CodeWizarder",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        solve(nums, ans, 0, 0);\\n        for(int i = 0; i < ans.size(); i++){\\n            nums[i] = ans.get(i);\\n        }\\n    }\\n\\n    public static void solve(int[] arr, ArrayList<Integer> ans, int index, int count){\\n        if(index == arr.length){\\n            for(int i = 0; i < count; i++){\\n                ans.add(0);\\n            }\\n            return;\\n        }\\n        if(arr[index] == 0){\\n            count++;\\n            solve(arr, ans, index + 1, count);\\n        }\\n        else{\\n            ans.add(arr[index]);\\n            solve(arr, ans, index + 1, count);\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "mskamel",
                        "content": "Thanks for sharing your solution, it\\'s diverse from other ones here."
                    },
                    {
                        "username": "Amangoswami3210",
                        "content": "what if 2 zeroes are came together ???"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "I spend 1 hours making this code with JS"
                    },
                    {
                        "username": "loyhongshenggg",
                        "content": "I\\'ve noticed that many people posted their answers here and thought perhaps, I could provide a hint!\\n\\nConsider having two pointers at the start of the array. Iterate through the array and swap between the pointers only when right pointer is non-zero, only after the swap, increment your left pointer (along with the right pointer). Otherwise, only increment your right pointer.\\n\\n(May not be the best solution out there, but feel free to comment and make changes)"
                    },
                    {
                        "username": "MariooY2",
                        "content": "var moveZeroes = function(nums) {\n    const len=nums.length;\n    let n=0;\n    for(let x=0;x<nums.length;x++){\n        if(nums[x]==0){\n            console.log(nums);\n            nums.splice(x,1);\n            x--;\n            n++;        \n        }\n    }\n    for(let x=nums.length;x<len;x++){\n        nums.push(0);\n    }\n\nreturn nums;\n\n}\neasy to understand javascript code"
                    }
                ]
            },
            {
                "id": 2067541,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2048065,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2045221,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2044948,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2042653,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2023954,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2020584,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2019919,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2019539,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2016604,
                "content": [
                    {
                        "username": "JagodaDawidowska",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n       int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int j = 0; j < nums.length - idxJ; j++) {\\n            if (nums[j] == 0) {\\n                int temp = nums[(x - idxJ)];\\n                nums[(x - idxJ)] = nums[j];\\n                nums[j] = temp;\\n                idxJ++;\\n            }\\n            System.out.println(Arrays.toString(nums));\\n        }      \\n    }\\n}\\nnums = [0,1,0,3,12] \\nmy output = [12,1,3,0,0] \\nexpected [1,3,12,0,0] \\nCould somone give me a hint to easy fix my code ?"
                    },
                    {
                        "username": "JagodaDawidowska",
                        "content": "since my code triggered  Output Limit Exceeded error I post it as one step closer to correct answer\\nclass Solution {\\n       public void moveZeroes(int[] nums) {\\n        int idxJ = 0;\\n        int x = (nums.length - 1);\\n\\n        for (int i = 0; i < nums.length ; i++) {\\n            for (int j = 0; j < nums.length - 1; j++) {\\n                if (nums[j] == 0) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                    idxJ++;\\n                    System.out.println(Arrays.toString(nums));\\n                }\\n            }\\n        }\\n    }\\n} I guess I cant use modyfied bubble sort :( "
                    },
                    {
                        "username": "romangolev",
                        "content": "I am interested why does list comprehension does not work for python solution.\\nAlso I cannot assign one list to another for some reason, simple operation like this `nums=nums1` returns nothing"
                    },
                    {
                        "username": "romanlavandos",
                        "content": "I hate transfering the answer from PyCharm to LeetCode. List comprehensions are not working, but some modules like math are already imported? Cmon -_-"
                    },
                    {
                        "username": "buzterblaze0908",
                        "content": "I dont\\' know how to pass the Case 1 of this problem, The expected output is displayed to my IDE with the given input from Case 1. However, when I ran my code here in LeetCode, the output is the input as well, nothing changed"
                    },
                    {
                        "username": "msa23005_iiitl",
                        "content": "nums=list(filter(lambda n:n!=0,nums))+[0]*(nums.count(0))\\nthis is a correct code but leetcode is not accepting it please check also leetcode admins look into this\\n"
                    },
                    {
                        "username": "jenkunsen",
                        "content": "Hint: a while loop avoids much of the struggle behind modifying an array in place."
                    },
                    {
                        "username": "e-007",
                        "content": "Passing test case1 in vscode but not here in leetcode, why?\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n=nums.length;\n         int[] brr = new int[n];\n        int[] crr = new int[n];\n        int bIndex = 0;\n        int cIndex = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n            brr[bIndex++] = nums[i];\n        } else {\n            crr[cIndex++] = nums[i];\n        }\n    }\n\n    for (int i = 0; i < bIndex; i++) {\n        System.out.print(brr[i] + \" \");\n    }\n    for (int i = 0; i < cIndex; i++) {\n        System.out.print(crr[i] + \" \");\n    }\n    }\n} "
                    },
                    {
                        "username": "shakeebsecond2",
                        "content": "Only 64/75 test cases passing please debug my code\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int temp;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j=i;j<nums.size()-1;j++)\\n            {\\n                if(nums[j]==0 && nums[j] != nums[j+1]) \\n                {\\n                    swap(nums[j],nums[j+1]);\\n                }\\n                else if(nums[j]==nums[j+1]){\\n                     swap(nums[j],nums[j+1]);\\n                }\\n                \\n            }\\n           \\n        }\\n        //reverse(nums.begin(),nums.end())\\n        \\n\\n\\n    }\\n};"
                    },
                    {
                        "username": "Vanka_Siddhartha",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        non_zero_index =0\\n        zero_count =0\\n        for i in range(0,len(nums)):\\n            if(nums[i]!=0):\\n                nums[non_zero_index] = nums[i]\\n                non_zero_index +=1\\n\\n        for i in range(non_zero_index, len(nums)):\\n            nums[i] = 0\\n         "
                    },
                    {
                        "username": "dhvanigupta27",
                        "content": "My code is working on my IDE but not here. I\\'ve already double checked the function name and everything else. What can I do to resolve this issue?"
                    },
                    {
                        "username": "luanrodrigues51",
                        "content": "Are you following this rule? \"you must do this in-place without making a copy of the array.\" You need to modify nums in order to work. Only return the solution will not work. "
                    }
                ]
            },
            {
                "id": 2001894,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 2000378,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1998805,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1975481,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1975234,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1973658,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1951272,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1949178,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1945320,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1945275,
                "content": [
                    {
                        "username": "Yixiu_Hugh",
                        "content": "I don\\'t know what is wrong tih my code, can someone explain it to me?\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n       length = len(nums)\\n       for i in range(length):\\n           if i == length:\\n                nums\\n           else:\\n                if nums[i] == 0:\\n                    del nums[i]\\n                    nums.append(0)"
                    },
                    {
                        "username": "Yixiu_Hugh",
                        "content": "Can someone help me with my code?\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        length = len(nums)\n        for i in range(length):\n            if i == length:\n                nums\n            else:\n                if nums[i] == 0:\n                    del nums[i]\n                    nums.append(0)\n"
                    },
                    {
                        "username": "swapnilpurwar56",
                        "content": "What is wrong with this code? And what are the changes that I should do so that it run without error;\\n\\nCode-\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i=0, count=0;\\n        while(i<nums.size()){\\n            if(nums[i]==0){\\n                nums.erase(nums.begin()+i);\\n                count++;\\n                i=i-1;\\n            }\\n            else i++;\\n        }\\n        for(int i=0; i<count; i++) nums.push_back(0);\\n    }\\n};"
                    },
                    {
                        "username": "ozguner00",
                        "content": "Why 2 ms and %40 beats? i think unlucky testcase. Is it really bad code?\\n\\nclass Solution {\\n    public void moveZeroes(int[] nums) {\\n        int count = 0;\\n        for(int i = 0; i<nums.length-1; i++){\\n            if(nums[i] == 0){\\n                if(nums[i+1] != 0){\\n                    nums[i-count] = nums[i+1];\\n                    nums[i+1] = 0;\\n                }else count ++;\\n            }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "the_Steel",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& a) {\\n        int n=a.size();\\n        int j=-1;\\n        for(int i=0;i<n;i++){\\n            if(a[i]==0){\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++){\\n            if(a[i]!=0){\\n                swap(a[i],a[j]);\\n                j++;\\n            }\\n        }\\n        \\n    }\\n};\\n\\nanyone can help....\\nwhat is the error in this code , 1st 2 testcases are easily processed but cant able to submit this further."
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\npublic:\\nvoid remove(std::vector<int>& v, size_t index) {\\n    v.erase(v.begin() + index);\\n}\\n    void moveZeroes(vector<int>& nums) {\\n      int count = 0;\\n      int arrLen = nums.size();\\n      for(int i = 0; i< arrLen; i++)\\n      if(nums[count] == 0){\\n        remove(nums,count);\\n        nums.push_back(0);\\n      }else{\\n        count++;\\n      }\\n    }\\n};\\n\\n\\n\\n\\ncheck this my bro \\n"
                    },
                    {
                        "username": "akhacker0001",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n      int n=  nums.length;\\nint j=-1;\\nfor(int i=0;i<n;i++){\\nif(nums[i]==0){\\nj=i;\\nbreak;\\n}\\n}\\nfor(int i=j+1;i<n;i++){\\nif(nums[i]!=0){\\n  int swapEle = nums[i];\\n  nums[i] = nums[j];\\n  nums[j] = swapEle;\\nj++;\\n        \\n    }\\n}\\n    }\\n}\\n\\ncheck this the_Steel bro "
                    },
                    {
                        "username": "akhacker0001",
                        "content": "var moveZeroes = function(nums) {\\n    let len = nums.length;\\n    let count = 0\\n    for(let i = 0 ; i< len; i++){\\n      console.log(nums)\\n        if(nums[count] === 0){\\n            nums.splice(count,1)\\n            nums.push(0)\\n        }else{\\n          count++\\n        }\\n\\n    }\\n    \\n};\\n\\nhere is my code working perfectly when it faild last test case case no 74 it return the Output Limit Exceeded i dont know why"
                    },
                    {
                        "username": "saan146",
                        "content": "I do not understand why the IDE is not able to apprehend that my code is working fine,\\npublic void MoveZeroes(int[] nums)\\n        {\\n            List<int> numbers = nums.ToList<int>();\\n            for (int i = 0; i<numbers.Count; i++)\\n            {\\n                if(numbers[i] == 0)\\n                {\\n                    numbers.Remove(numbers[i]);\\n                    numbers.Add(0);\\n                }\\n            }\\n            int[] new_nums = numbers.ToArray();\\n            Console.WriteLine(\"[\"+string.Join(\",\", new_nums)+\"]\");\\n        }"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why you are printing the brackets through console"
                    },
                    {
                        "username": "josephnanakofib",
                        "content": "Hey can I have some help? I posted this solution and it worked till the final use case which has nums as empty. Can't seem to figure out what's wrong:\n\n`\n\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                curr = I\n                while ((curr - 1 >= 0) and (nums[curr - 1] == 0)):\n                    nums[curr],nums[curr - 1] = nums[curr - 1], nums[curr]\n                    curr -= 1\n`"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "im getting tle for the last case by using bubble sort,help please?\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@AMBER_FATIMA](/AMBER_FATIMA)  Great "
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i solved the problem using 2 pointers thanks\\n\\n"
                    },
                    {
                        "username": "AMBER_FATIMA",
                        "content": "[@davidashish1996](/davidashish1996) i thought that way i could swap the 0s to the end without changing the sequence"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "Why are you doing bubble sort you can just perform one comparison in O(n) time that will provide you the result."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "both of my solutions this code didn\\'t approve. it literally wasn\\'t adding the zeros in the end and returning an error. whereas the same code ran perfectly in PyCharm and VScode.\\n"
                    }
                ]
            },
            {
                "id": 1944209,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1914013,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1897617,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1894371,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1870161,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1843266,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1836625,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1835973,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1816223,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1802250,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "I don\\'t feel this is easy if you do it in place without mumbo jumbo built-in functions"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "In this case can\\'t we just traverse the array and make a comparison of non zero elements with zero\\'s and then swap it??"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No one loop is sufficient for traversing and making the changes."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "[@davidashish1996](/davidashish1996) means we have to use two for loop right?\\nand swap it "
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123) No Sorting this is basically using the 2 pointer concept if there are zeros continue increasing and if any nonzero is found swap with that all the nonzeros will come first and zeros will be placed at last"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "what sort is this bro bubble or insertion\\n"
                    },
                    {
                        "username": "davidashish1996",
                        "content": "[@aswinthalaa123123](/aswinthalaa123123)  I have implemented using swapping and it\\'s working fine.   \\npublic void moveZeroes(int[] nums) {\\n        int n = nums.length;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(nums[j]==0)\\n            {\\n                j++;\\n            }\\n            else{\\n                int temp = nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=temp;\\n                i++;\\n                j++;\\n            }\\n        }\\n      \\n    }"
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "tle error will show\\n"
                    },
                    {
                        "username": "fgar13",
                        "content": "The constraints should be updated to include the fact that aside from the zeros, all the elements are already in ascending order. I spent too much time trying to implement what was essentially a sorting algorithm, not realizing that the array was essentially already sorted."
                    },
                    {
                        "username": "gabrielrosendo",
                        "content": "not all arrays are sorted"
                    },
                    {
                        "username": "zakmoulay07",
                        "content": "why ??? \n    public static void moveZeroes(int[] nums) {\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            while (l < r && nums[r] == 0) {\n                r--;\n            }\n            while (l < r && nums[l] != 0) {\n                l++;\n            }\n\n            if (l < r)\n                swap(nums, l, r);\n        }\n    }\n\n    public static void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\noutput 12,1,3,0,0    expected 1,3,12,0,0 "
                    },
                    {
                        "username": "garlapatipavan07",
                        "content": "//Simple c++ solution\\nvoid moveZeroes(vector<int>& nums) {\\n        int j = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n    }"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "Hii Guys!! Check out my blog for the solution of this problem:\\nhttps://dsafordummies.digitalpress.blog/easy-array-leetcode-series-1/\\n\\nYou can also find two more easy level questions to test your skills in this particular blog! Thank you for supporting:)"
                    },
                    {
                        "username": "aleazanrashid",
                        "content": "im tryng to solve this proplem with this code below, it works fine but not when two zeros come next to each other , it move one of the zero to comapre with next element but the another zero stays i need to come back to that zero and keep comparing or swapping any idea guys ?\n\ndef move_zer():\n\n    lis = [0,1,0,3,12]\n        # [1,0,3,12,0]\n    left, right = 0, len(lis) - 1\n\n    while left < right:\n\n        if lis[left] ==0:\n            lis[left], lis[left + 1] = lis[left + 1], lis[left]\n\n        left += 1\n\n    return lis"
                    },
                    {
                        "username": "onigiricoco",
                        "content": "Could anyone tell me why this doesn\\'t work? \\n\\ndef move0(nums):\\n  return [i for i in nums if i!=0] +[j for j in nums if j==0]\\n\\nIt runs okay in my console , but returns [0,1,0,3,4] in leetcode"
                    },
                    {
                        "username": "pushkarsaxena96",
                        "content": "[@Siddharoodha10](/Siddharoodha10) Still does not work!"
                    },
                    {
                        "username": "Siddharoodha10",
                        "content": "I think it\\'s not expecting return . it needs to modify nums in-place only."
                    },
                    {
                        "username": "visva_123",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n        vector<int>ans;\\n        int s =0;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            if(nums[i]!=0){\\n            swap(nums[i],nums[s++]);     \\n            }\\n           \\n\\n        }\\n         \\n    }\\n};"
                    },
                    {
                        "username": "arjun_50",
                        "content": "class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        d={}\\n        for item in nums:\\n            if (item in d):\\n                d[item] += 1\\n            else:\\n                d[item] = 1\\n  \\n        for j in range(d[0]):\\n            for i in range(len(nums)-1):\\n                if nums[i]==0:\\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\\n    \\ncan anyone explain what exactly is wrong with this approach,pls\\nthis code is passing the testcases [0,1,0,3,12] and[0], but failing all other 70 cases\\n\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1799408,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1793913,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1791478,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1791466,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1791305,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1789581,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1786931,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1786012,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1784692,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1783772,
                "content": [
                    {
                        "username": "Md_Hasan",
                        "content": "// Python easy solution in o(n)\\nclass Solution(object):\\n    def moveZeroes(self, nums):\\n        j=0\\n        for i in range(len(nums)):\\n            if(nums[i]!=0):\\n                nums[i],nums[j] = nums[j],nums[i]\\n                j+=1\\n\\n       return nums"
                    },
                    {
                        "username": "whovijaymaurya23",
                        "content": "As Some Test Case Can Contain the Negative number  also so we use the condition                 nums[i] !=0;\\n\\n\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n       int k =0;\\n       for(int i=0; i<nums.size() ; i++)\\n       {\\n           if(nums[i]!=0){\\n        \\n        swap(nums[i],nums[k++]);\\n  \\n    }\\n       } \\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n\\nvoid moveZeroes(vector<int>& nums) {\\n        int l=0,m=0;\\n        while(m<nums.size())\\n        {\\n            switch(nums[m])\\n            {\\n                case 0:\\n                    m++;\\n                    break;\\n                default:\\n                    swap(nums[l++],nums[m++]);\\n                    break;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<nums[i]<<\" \";\\n        }\\n    }\\n\\n\\n\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int j =0;\\n    \\n    for(int i=0;i<nums.size();i++)\\n    {\\n        if(nums[i]!=0){\\n            \\n            swap(nums[i],nums[j]);\\n              j++;\\n        }\\n    } \\n    }\\n};"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "the new index of the current element is the current index - total_zeros from that index to 0 \\n "
                    },
                    {
                        "username": "argulhane10246",
                        "content": "all you need is to read hint 3 times before solving this question.\\nSolve the question iteratively and then just change the new array declaration with the old array name that\\'s it"
                    },
                    {
                        "username": "starogre",
                        "content": "that doesn\\'t work, pretty sure that creates a new list and eats memory that the problem says you shouldn\\'t. the correct way is to modify only the original list"
                    },
                    {
                        "username": "taral_13",
                        "content": "Hint: Use one pointer at index(start) = 0\nand use a loop to traverse through the array and move non zero element to index (start)"
                    },
                    {
                        "username": "amineguettaby",
                        "content": "good idea"
                    },
                    {
                        "username": "Coder15091999",
                        "content": "Beat 100%  Java Solution\\n\\npublic void moveZeroes(int[] nums) {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        int i=0;\\n        for(int j=0;j<nums.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n                nums[i]=nums[j];\\n                i++;\\n            }\\n        }\\n        for(int k=0;k<count;k++)\\n        {\\n            nums[i]=0;\\n            i++;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "sHaan27",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        for(int j =0;j<nums.size();j++)\\n        {\\n            if(nums[j] != 0)\\n            {\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "artem_se_putem",
                        "content": "HA,  i am #1, it so easy to me. Common guys, you can do it. :3"
                    }
                ]
            },
            {
                "id": 1780798,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1774877,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1773119,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1766589,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1759321,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1758004,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1757561,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1754559,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1753587,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1752531,
                "content": [
                    {
                        "username": "I_AM_JD",
                        "content": "# --------------------------------\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        for key ,value in enumerate(nums):\\n          if value==0:\\n            nums.pop(key)\\n            nums.append(0)\\n\\nThis code is accepted fine\\n#---------------------------------------\\n\\n\\n\\nBut why this code not  accepted\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        n=nums.count(0)\\n        nums = [x for x in nums if x!=0]\\n        zero = [0 for i in range(n)]\\n        nums=nums+zero\\n\\n        print(nums)\\n\\n\\n\\n\\n\\nAnyone please tell -------------------------------"
                    },
                    {
                        "username": "I_AM_JD",
                        "content": "[@nikhila01](/nikhila01)  Thanks bro now I understand"
                    },
                    {
                        "username": "nikhila01",
                        "content": "When you do `nums = nums + zero` you're not changing `nums` in place. You're creating a new list and assigning it to the local variable called `nums`. Once the function exits that change isn't visible.\n\nFirst, don't use the name `nums` when you're creating `[x for x in nums if x!=0]`. Give it another name like `nonzero`, otherwise you lose access to the original input list.\n\nThen try doing `nums[:] = nonzero + zero` which will actually copy the elements into `nums`. "
                    },
                    {
                        "username": "hari0911",
                        "content": "Easy solution check if number is not equal to 0 then swap with next number.\\nhttps://leetcode.com/problems/move-zeroes/solutions/3100334/easy-java-solution/"
                    },
                    {
                        "username": "IMsherlocked",
                        "content": "Why this is getting wrong output( [0,1,0,3,12] ) for 1st test case.\nvar moveZeroes = function(nums) {\n        let zero = []\n        let nonZero = []\n        let k=0;\n    for(let i=0;i<nums.length;i++){\n        if(!nums[i]){\n          zero.push(0)\n        }else{\n            nonZero.push(nums[i])\n        }\n    }\n    return nonZero.concat(zero)\n};\nI tried this in js console and it was working there. "
                    },
                    {
                        "username": "LS_leet",
                        "content": "Similar like bubble sort method but bubble the 0 to the end.:\\nfor(int i=0;i<n;i++){\\n        for(int j=0;j<n;j++){\\n            if(nums[j]==0){\\n                swap(nums[j],nums[j+1]);\\n            }\\n        }\\n    }\\n"
                    },
                    {
                        "username": "imnischaygowda",
                        "content": "     \\nI tired using pop by index to remove zeroos and append 0 at last each time on popping.\\nBut my solution failed for,\\nnums = [0,1,0]\\nNot able to figure out why?\\nPlease let me know.\\n\\n `        # can i pop element based on index.\\n\\n        for i in range(len(nums)):\\n            # print(\\'ele\\', nums[i])\\n            if nums[i] == 0:\\n                del nums[i]\\n                # print(\\'pop\\', nums.pop(i))\\n                # print(\\'num\\', nums)\\n                nums.append(0).`  "
                    },
                    {
                        "username": "skiondwood",
                        "content": "TLDR:\na forward for-loop requires your i to increase by 1\nbut popping from the front affects the index of your elements\n\n\n\nwhen you pop the list from the beginning , it's length changes by -1, thereby changing the index of its elements \n(i.e. some element's index would decreases by 1 if an element preceding it was popped)\n\nbut at the same time you are running a for-loop where the loop's iteration index i is assumed to steadily increase by 1 per loop\n\ne.g.\nlet's assume I want to pop the i-th element in the following list, per each for-loop cycle:\n~~~\n\nlist = [0, 1, 2, 3, 4, 5]\n(0 is at index 0;\n 1 is at index 1;\n 2 is at index 2... etc.)\n\nrun a for-loop for i = 0, 1, 2, 3, 4, 5\nfor i in range(0,5):\n\nfirst loop; i = 0:\nlist.pop(i)\n(0 is popped)\nlist = [1, 2, 3, 4, 5]\n(note that 1 is now at index 0, when it was at index 1 previously; \nsame for all other numbers in the list; their index has shifted by -1)\n\nsecond loop; i = 1:\nlist.pop(i)\n(2 is popped)\nlist = [1, 3, 4, 5]\n(popping the 1-th element shifts the index of everything after it by -1)\n\nthird loop; i = 2:\nlist.pop(i)\n(4 is popped)\nlist = [1, 3, 5]\n\nfourth loop: i = 3:\nlist.pop(i)\n\n>> Error: index out of range\n(we can't pop an element in index 3\nwhen the list = [1, 3, 5] only has elements in index 0,1,2!)\n\n~~~~\nyour standard (forward) for-loop increases the i-index by 1 every cycle\nbut popping 'moves' your index back by 1 every cycle,\n\nso you are decreasing your index as i increases in each iteration of the for-loop, \ncausing them to go out-of-sync (and throw an index-out-of-range error, eventually)\n\nmeanwhile, you'll also be popping the elements at the wrong indexes!\n(in the example above, the originally intention was to pop every element, but I ended up popping every second element instead)\n\n\nsolution: \ntry using a for-loop that goes backward, starting from n-1 and ends at -1\n\nalternatively, you can implement a counter-variable that can be subtracted from your i to give you a 'true' index"
                    },
                    {
                        "username": "aayushmanarora",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n\\n        int r=0;\\n        int l=0;\\n\\n        if(nums.length==0 || nums.length==1){\\n            return;\\n\\n        }\\n    \\n       while(r<nums.length){\\n           if(nums[r]==0){\\n               r++;\\n\\n           }\\n           else{\\n               int temp;\\n            temp=nums[r];\\n            nums[r]=nums[l];\\n             nums[l]=temp;\\n            l++;\\n            r++;\\n\\n\\n           }\\n       }\\n\\n    }\\n   \\n}"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i,j;\\n        for(i=0,j=0;i<nums.size();){\\n            if(nums[i]!=0)\\n                {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n               }\\n        }  \\n    }\\n};\\n "
                    },
                    {
                        "username": "silliconvally009",
                        "content": "can any find why it keep\\'s showing TLE error!\\nclass Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int i =0;\\n        \\n        while(i<nums.size()){\\n            int j = i+1;\\n            if(nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n              i++;\\n              j++;\\n            }\\n         j++;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Ravi_S_Kumar",
                        "content": " int i=0,j=1;\\n        while(j<nums.size()){\\n            if(nums[i] == 0 && nums[j]!=0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            if(nums[i] == 0 && nums[j]==0){\\n                j++;\\n            }\\n            if((nums[i] != 0 && nums[j]==0) || (nums[i] != 0 && nums[j]!=0)){\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n\\nwhy is it showing runtime error?"
                    }
                ]
            },
            {
                "id": 1750735,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1740546,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1740158,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1736514,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1734277,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1729226,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1728561,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1724337,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1723763,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1723287,
                "content": [
                    {
                        "username": "Rahul5914",
                        "content": "any other approach for this except two pointer"
                    },
                    {
                        "username": "305057174a",
                        "content": "why this is wrong??\\n\\nclass Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a=[i for i in nums if i!=0]\\n        a.sort()\\n        b=[i for i in nums if i==0]\\n        for i in b:\\n         a.append(i)\\n        return a"
                    },
                    {
                        "username": "noobcoder09",
                        "content": "why are you sorting the array \\'a\\'? \\nAlso, question is about doing it in-place. Please correct me if I\\'m wrong. "
                    },
                    {
                        "username": "vermillion43015",
                        "content": "I'm a little curious as to why this code runs fine in Pycharm  no matter what array I throw at it but here it returns the wrong answer...\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        return [nonZero for nonZero in nums if nonZero != 0] + \\\n            [Zero for Zero in nums if Zero == 0]"
                    },
                    {
                        "username": "Dezmond-sama",
                        "content": "You shouldn\\'t return anything. Just replace \"return [your array]\" with \"nums[:] = [your array]\" if you want to do it this way"
                    },
                    {
                        "username": "dotSlash-Adwitiya",
                        "content": "I don;t understand why the below code isn't working, its working on my machine for the same test cases its failing for in leetcode !\nThe first TC this below code failed for is : [0,1,1,0]\nBut the code runs perfectly for this same TC on my machine ! `\n\nvoid moveZeroes(vector<int> &nums)\n{\n  int left = 0, n = nums.size(), i = left + 1;\n  if (check(nums, n))\n    return;\n\n  while (i < n)\n  {\n    if (nums[i] != 0 && nums[left] != 0)\n    {\n      i++;\n      left++;\n    }\n    else if (nums[left] == 0 && nums[i] == 0)\n    {\n      while (nums[i] == 0 && i < n)\n      {\n        i++;\n      }\n      if (i < n)\n      {\n        swap(nums[i], nums[left]);\n        left++;\n        i++;\n      }\n    }\n\n    else if (nums[left] == 0 && nums[i] != 0)\n    {\n      swap(nums[left], nums[i]);\n      i++;\n      left++;\n    }\n    else\n    {\n      i++;\n      left++;\n    }\n  }\n}"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Double pointers makes this easy !"
                    },
                    {
                        "username": "Musaddik_Khan009",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n    int i = 0;   // initialise first index \\n   for(int j = 0; j<nums.size(); j++){\\n       if(nums[j]  != 0){\\n           swap(nums[i] , nums[j]);\\n           i++;\\n       }\\n   }\\n\\n    }\\n};"
                    },
                    {
                        "username": "user0011s",
                        "content": "Hint 1 was extremely helpful in coming up with this approach. \\n\\nclass Solution {\\npublic void moveZeroes(int[] nums) {\\nint i = 0;\\nfor(int j = 0; j < nums.length; j++) {\\nif(nums[j] != 0) {\\nnums[i++] = nums[j];\\n}\\n}\\nwhile(i < nums.length) {\\nnums[i++] = 0;\\n}\\n}\\n}"
                    },
                    {
                        "username": "xanadoom",
                        "content": "let sol = [];\\n  for(let i = 0; i < nums.length; i++){\\n    if(nums[i] !== 0){\\n      sol.push(nums[i]);\\n    }\\n  }\\n   return sol.concat(nums.filter(x => x === 0));  \\n};\\ndont understand why my code dont work, whit nums = [0,1,0,3,12]; Output [0,1,0,3,12]; Expected [1,3,12,0,0].\\nSomeone have some advice why this code dont work?"
                    },
                    {
                        "username": "avalos010",
                        "content": "[@xanadoom](/xanadoom)  were supposed to modify the nums not return anything."
                    },
                    {
                        "username": "xanadoom",
                        "content": "var moveZeroes = function(nums) {\\n    return nums.filter(x => x !== 0).concat(nums.filter(x => x === 0))\\n};\\neven this code give same problem"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/283_move_zeroes.cpp"
                    },
                    {
                        "username": "devam25",
                        "content": "i am getting error in this code:\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n     int a = nums.size()-1;\n     if(a<2) cout<<a;\n        for(int i=0; i<a; i++){\n            if(nums[i] == 0){\n                if(nums[a] != 0){\n                    swap(nums[a],nums[i]);\n                    a--;\n                }\n            }\n        }\n    }\n};"
                    }
                ]
            },
            {
                "id": 1720688,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1720686,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1715673,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1713293,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1710380,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1710204,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1701646,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1699331,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1694986,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            },
            {
                "id": 1691988,
                "content": [
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "omar22khaled",
                        "content": "This code runs well and get the right output on may local machine but when I uploaded it here, it got wrong answer. Could anyone explain why does this occur?\\n\\n`class Solution:`\\n`    def moveZeroes(self, nums: List[int]) -> None:`\\n`        nums = [i for i in nums if i !=0] + [i for i in nums if i == 0]`"
                    },
                    {
                        "username": "anamika12b",
                        "content": "They don\\'t want you to change the first array at all. Here you are assigning another list to the initial input list"
                    },
                    {
                        "username": "xuxingsheng",
                        "content": "Can anyone tell me why my code does not run correctly here but works in my other Python software?\\nclass Solution:\\n`    def moveZeroes(self, nums: List[int]) -> None:\\n        nums = [x for x in nums if x != 0] + [x for x in nums if x == 0]`"
                    },
                    {
                        "username": "arvindk2025",
                        "content": "\\n        int i=0;\\n        for(int j=0;j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                swap(nums[j],nums[i]);\\n                i++;\\n            }\\n        }\\n    "
                    },
                    {
                        "username": "sivagowda",
                        "content": "Simple code which beats 97% of code with runtime and 85% of code with memory\\n def moveZeroes(nums):\\n        i = 0\\n        count = len(nums) - 1\\n        while i <= count:\\n            if nums[i] == 0:\\n                pe = nums.pop(i)\\n                nums.append(pe)\\n                count -= 1\\n            else:\\n                i+=1      \\n        return nums"
                    },
                    {
                        "username": "Top_C",
                        "content": "   int j=0;\\n        for(int i = 0;i<num.size();i++){\\n            if(num[i]!=0){\\n                num[j]=num[i];\\n                j++;\\n            }\\n        }\\n        while(j<num.size())num[j++]=0;\\n        "
                    },
                    {
                        "username": "akhilachepuri543",
                        "content": "Use the 2 pointer approach\\ninitially they point to starting index\\ncheck if the number!=0 SWAP(i,j);j++"
                    },
                    {
                        "username": "VivekDhiman",
                        "content": "class Solution {\\n    public void moveZeroes(int[] nums) {\\n        int nonzero=  0;\\n        for(int i = 0 ; i < nums.length ; i++){\\n            if(nums[i] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[nonzero];\\n                nums[nonzero] = temp;\\n                nonzero++;   \\n                }\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "sauravt_5625",
                        "content": "move the non zero values to ith index and then stores that value to x then i++;"
                    },
                    {
                        "username": "HiMaN810",
                        "content": "class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        int n=nums.size();\\n        int i=0;\\n        int a=0;\\n        while(a<n-1)\\n        {\\n            for(int i=0;i<n-1;i++){\\n            if(nums[i]==0){\\n                int temp=nums[i];\\n                nums[i]=nums[i+1];\\n                nums[i+1]=temp;\\n            }\\n        }\\n        a++;\\n        }\\n        \\n    }\\n};\\n\\nWhy am i getting the TLE help\\n"
                    },
                    {
                        "username": "EatWorkSleep",
                        "content": "I think your solution works, but is too slow. You basically bubble up all the 0s to the right side of the array, but that takes around n*n conditional checks and swaps, which is more than the problem wants. Try to come up with something where you only need to check every position in the array once, while placing all the numbers in the right spots.\\n\\nIf you were given [1, 2, 3, 4, 5, 0, 0], your solution would check the first 6 numbers, except the last number, 6 times to bubble up all the 0s to the right side. That\\'s 36 checks, even though the array already is in the correct state the problem wants."
                    }
                ]
            }
        ]
    },
    {
        "title": "Ransom Note",
        "question_content": "<p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code><em> if </em><code>ransomNote</code><em> can be constructed by using the letters from </em><code>magazine</code><em> and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"a\", magazine = \"b\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"ab\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"aab\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>ransomNote</code> and <code>magazine</code> consist of lowercase English letters.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 1671552,
                "title": "1ms-100-easy-explanation-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\tif (ransomNote.length() > magazine.length()) return false;\\n        int[] alphabets_counter = new int[26];\\n        \\n        for (char c : magazine.toCharArray())\\n            alphabets_counter[c-\\'a\\']++;\\n\\n        for (char c : ransomNote.toCharArray()){\\n            if (alphabets_counter[c-\\'a\\'] == 0) return false;\\n            alphabets_counter[c-\\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\nSo, What we doing here is... First we will initialize an **array of alphabets counter.** \\n*Let\\'s initialize with the size 24.* noo... **Its 26**, you forgot the number of alphabets in English?\\n*Jokes Apart..*\\n\\nNow we **loop through** the entire **String of magazine** where char c stores the char at the index of magazine..\\n\\nYou might think why I typed c-\\'a\\' \\nIt is because in ascii if you subtract any char with \\'a\\' , it gives you index of that alphabet.\\nStill confused?\\nLet us assume **a = 0** and **z = 25**. Now subtract a - a. You got 0 in ASCII, right? \\nnow **subtract d-a, in ASCII it is 100-97, it leaves you with 3**. Isn\\'t that the index of that character in our alphabet counter and isn\\'t that the fact the **a=0, b=1, c=2 and d=3.** Got it?\\n\\nNow we **increment the counter** for that character of its own index according to English Alphabets (Obviously)\\n\\nWe have our counter ready!\\n\\nNow we run another for **loop for ransomNote.**\\nRemember: if the charachter doesn\\'t exists in magazine for ransomNote, **we return false;**\\nor if it does exists, **we decrement the counter** of that charachter from its **own index.**\\n\\nlastly if nothing goes wrong (we have sufficient amount of charachters to make ransomNote)\\n\\nReturn true :)\\n\\nIf my explanation was helpful or interactive\\n**PLEASE DO UPVOTE**\\nThank you!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\tif (ransomNote.length() > magazine.length()) return false;\\n        int[] alphabets_counter = new int[26];\\n        \\n        for (char c : magazine.toCharArray())\\n            alphabets_counter[c-\\'a\\']++;\\n\\n        for (char c : ransomNote.toCharArray()){\\n            if (alphabets_counter[c-\\'a\\'] == 0) return false;\\n            alphabets_counter[c-\\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85783,
                "title": "java-o-n-solution-easy-to-understand",
                "content": "```\\npublic class Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] arr = new int[26];\\n        for (int i = 0; i < magazine.length(); i++) {\\n            arr[magazine.charAt(i) - 'a']++;\\n        }\\n        for (int i = 0; i < ransomNote.length(); i++) {\\n            if(--arr[ransomNote.charAt(i)-'a'] < 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] arr = new int[26];\\n        for (int i = 0; i < magazine.length(); i++) {\\n            arr[magazine.charAt(i) - 'a']++;\\n        }\\n        for (int i = 0; i < ransomNote.length(); i++) {\\n            if(--arr[ransomNote.charAt(i)-'a'] < 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2500721,
                "title": "very-easy-100-fully-explained-c-java-python-python3",
                "content": "# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        // Initialize an array of count with the size 26...\\n        int counter[26] = {0};\\n        // Traverse a loop through the entire String of magazine where char ch stores the char at the index of magazine...\\n        for(char ch : magazine)\\n            counter[ch - \\'a\\']++;\\n        // Run another for loop for ransomNote...\\n        for(char ch : ransomNote)\\n            // If the charachter doesn\\'t exists in magazine for ransomNote, we return false...\\n            if(counter[ch - \\'a\\']-- <= 0)\\n                return false;\\n        return true;        // If nothing goes wrong, return true...\\n    }\\n};\\n```\\n\\n# **Java Solution:**\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        // Initialize an array of count with the size 26...\\n        int[] counter = new int[128];\\n        // Traverse a loop through the entire String of magazine where char ch stores the char at the index of magazine...\\n        for (final char ch : magazine.toCharArray())\\n            ++counter[ch];\\n        // Run another for loop for ransomNote...\\n        for (final char ch : ransomNote.toCharArray())\\n             // If the charachter doesn\\'t exists in magazine for ransomNote, we return false...\\n            if (--counter[ch] < 0)\\n                return false;\\n        return true;      // If nothing goes wrong, return true...\\n    }\\n}\\n```\\n\\n# **Python/Python3 Solution:**\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        st1, st2 = Counter(ransomNote), Counter(magazine)\\n        if st1 & st2 == st1:\\n            return True\\n        return False\\n```\\n**I am working hard for you guys...\\nPlease upvote if you found any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        // Initialize an array of count with the size 26...\\n        int counter[26] = {0};\\n        // Traverse a loop through the entire String of magazine where char ch stores the char at the index of magazine...\\n        for(char ch : magazine)\\n            counter[ch - \\'a\\']++;\\n        // Run another for loop for ransomNote...\\n        for(char ch : ransomNote)\\n            // If the charachter doesn\\'t exists in magazine for ransomNote, we return false...\\n            if(counter[ch - \\'a\\']-- <= 0)\\n                return false;\\n        return true;        // If nothing goes wrong, return true...\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        // Initialize an array of count with the size 26...\\n        int[] counter = new int[128];\\n        // Traverse a loop through the entire String of magazine where char ch stores the char at the index of magazine...\\n        for (final char ch : magazine.toCharArray())\\n            ++counter[ch];\\n        // Run another for loop for ransomNote...\\n        for (final char ch : ransomNote.toCharArray())\\n             // If the charachter doesn\\'t exists in magazine for ransomNote, we return false...\\n            if (--counter[ch] < 0)\\n                return false;\\n        return true;      // If nothing goes wrong, return true...\\n    }\\n}\\n```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        st1, st2 = Counter(ransomNote), Counter(magazine)\\n        if st1 & st2 == st1:\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85837,
                "title": "o-m-n-one-liner-python",
                "content": "O(m+n) with m and n being the lengths of the strings.\\n\\n    def canConstruct(self, ransomNote, magazine):\\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)",
                "solutionTags": [],
                "code": "O(m+n) with m and n being the lengths of the strings.\\n\\n    def canConstruct(self, ransomNote, magazine):\\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)",
                "codeTag": "Python3"
            },
            {
                "id": 379929,
                "title": "easy-c-solution-concise",
                "content": "Runtime: 20 ms, faster than 89.94% of C++ online submissions for Ransom Note.\\nMemory Usage: 10.7 MB, less than 100.00% of C++ online submissions for Ransom Note.\\n\\n```\\nbool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "Runtime: 20 ms, faster than 89.94% of C++ online submissions for Ransom Note.\\nMemory Usage: 10.7 MB, less than 100.00% of C++ online submissions for Ransom Note.\\n\\n```\\nbool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 85757,
                "title": "python-set-count",
                "content": "```python\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        \"\"\"\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        \"\"\"\\n        for i in set(ransomNote):\\n            if ransomNote.count(i) > magazine.count(i):\\n                return False\\n        return True\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        \"\"\"\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        \"\"\"\\n        for i in set(ransomNote):\\n            if ransomNote.count(i) > magazine.count(i):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3744949,
                "title": "easy-solution-using-hashmap",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe goal is to determine whether it is possible to construct the ransom note using characters from the magazine. To achieve this, we need to count the occurrences of each character in the magazine and check if there are enough occurrences to form the ransom note.\\n\\n# Approach\\n1. Create a HashMap called dictionary to store the character counts in the magazine.\\n1. Iterate through each character in the magazine string.\\n1. If the character is not present in the dictionary, add it with a count of 1.\\n1. If the character is already present, increment its count by 1.\\n1. Iterate through each character in the ransom note string.\\n1. Check if the character is present in the dictionary and its count is greater than 0.\\n1. If both conditions are satisfied, decrement the count of the character in the dictionary.\\n1. If a character is not present in the dictionary or its count is 0, return false.\\n1. If all characters in the ransom note have been checked successfully, return true.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the solution is $$O(m + n)$$, where m is the length of the magazine string and n is the length of the ransom note string. This is because we iterate through each character in both strings once.\\n\\n- Space complexity:\\nThe space complexity is $$O(m)$$, where m is the number of unique characters in the magazine string. This is because we store the character counts in the dictionary HashMap.\\n# Code\\n```java []\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        \\n        // Create a HashMap to store character counts\\n        HashMap<Character, Integer> dictionary = new HashMap<>();\\n\\n        // Iterate through the characters in the magazine\\n        for (int i = 0; i < magazine.length(); i++) {\\n            char c = magazine.charAt(i);\\n            \\n            // If the character is not present in the HashMap, add it with count 1\\n            if (!dictionary.containsKey(c)) {\\n                dictionary.put(c, 1);\\n            } else {\\n                // If the character is already present, increment its count by 1\\n                dictionary.put(c, dictionary.get(c) + 1);\\n            }\\n        }\\n        \\n        // Iterate through the characters in the ransom note\\n        for (int i = 0; i < ransomNote.length(); i++) {\\n            char c = ransomNote.charAt(i);\\n            \\n            // If the character is present in the HashMap and its count is greater than 0,\\n            // decrement its count by 1\\n            if (dictionary.containsKey(c) && dictionary.get(c) > 0) {\\n                dictionary.put(c, dictionary.get(c) - 1);\\n            } else {\\n                // If the character is not present or its count is 0, return false\\n                return false;\\n            }\\n        }\\n        \\n        // All characters in the ransom note have been processed successfully,\\n        // so the ransom note can be formed from the magazine\\n        return true;\\n    }\\n}\\n\\n```\\n```python []\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        # Create a dictionary to store character counts\\n        dictionary = {}\\n\\n        # Iterate through the magazine and count characters\\n        for char in magazine:\\n            if char not in dictionary:\\n                dictionary[char] = 1\\n            else:\\n                dictionary[char] += 1\\n\\n        # Iterate through the ransom note and check character counts\\n        for char in ransomNote:\\n            if char in dictionary and dictionary[char] > 0:\\n                dictionary[char] -= 1\\n            else:\\n                return False\\n        \\n        return True\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> dictionary;\\n\\n        // Iterate through the magazine and count characters\\n        for (char c : magazine) {\\n            if (dictionary.find(c) == dictionary.end()) {\\n                dictionary[c] = 1;\\n            } else {\\n                dictionary[c]++;\\n            }\\n        }\\n\\n        // Iterate through the ransom note and check character counts\\n        for (char c : ransomNote) {\\n            if (dictionary.find(c) != dictionary.end() && dictionary[c] > 0) {\\n                dictionary[c]--;\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n};\\n```\\n## ***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/0fdd2a8c-e63e-4a99-a028-442244a0126a_1688985760.8163922.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Hash Table",
                    "String"
                ],
                "code": "```java []\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        \\n        // Create a HashMap to store character counts\\n        HashMap<Character, Integer> dictionary = new HashMap<>();\\n\\n        // Iterate through the characters in the magazine\\n        for (int i = 0; i < magazine.length(); i++) {\\n            char c = magazine.charAt(i);\\n            \\n            // If the character is not present in the HashMap, add it with count 1\\n            if (!dictionary.containsKey(c)) {\\n                dictionary.put(c, 1);\\n            } else {\\n                // If the character is already present, increment its count by 1\\n                dictionary.put(c, dictionary.get(c) + 1);\\n            }\\n        }\\n        \\n        // Iterate through the characters in the ransom note\\n        for (int i = 0; i < ransomNote.length(); i++) {\\n            char c = ransomNote.charAt(i);\\n            \\n            // If the character is present in the HashMap and its count is greater than 0,\\n            // decrement its count by 1\\n            if (dictionary.containsKey(c) && dictionary.get(c) > 0) {\\n                dictionary.put(c, dictionary.get(c) - 1);\\n            } else {\\n                // If the character is not present or its count is 0, return false\\n                return false;\\n            }\\n        }\\n        \\n        // All characters in the ransom note have been processed successfully,\\n        // so the ransom note can be formed from the magazine\\n        return true;\\n    }\\n}\\n\\n```\n```python []\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        # Create a dictionary to store character counts\\n        dictionary = {}\\n\\n        # Iterate through the magazine and count characters\\n        for char in magazine:\\n            if char not in dictionary:\\n                dictionary[char] = 1\\n            else:\\n                dictionary[char] += 1\\n\\n        # Iterate through the ransom note and check character counts\\n        for char in ransomNote:\\n            if char in dictionary and dictionary[char] > 0:\\n                dictionary[char] -= 1\\n            else:\\n                return False\\n        \\n        return True\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> dictionary;\\n\\n        // Iterate through the magazine and count characters\\n        for (char c : magazine) {\\n            if (dictionary.find(c) == dictionary.end()) {\\n                dictionary[c] = 1;\\n            } else {\\n                dictionary[c]++;\\n            }\\n        }\\n\\n        // Iterate through the ransom note and check character counts\\n        for (char c : ransomNote) {\\n            if (dictionary.find(c) != dictionary.end() && dictionary[c] > 0) {\\n                dictionary[c]--;\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 611644,
                "title": "c-solution-in-3-lines",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        std::multiset<char> mag(magazine.begin(), magazine.end());\\n        std::multiset<char> ransom(ransomNote.begin(), ransomNote.end());\\n        return std::includes(mag.begin(), mag.end(), ransom.begin(), ransom.end());\\n    }\\n};\\n```\\n\\nSee https://en.cppreference.com/w/cpp/algorithm/includes",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        std::multiset<char> mag(magazine.begin(), magazine.end());\\n        std::multiset<char> ransom(ransomNote.begin(), ransomNote.end());\\n        return std::includes(mag.begin(), mag.end(), ransom.begin(), ransom.end());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476543,
                "title": "c-python-java-easy-and-fast",
                "content": "**PROBLEM DESCRIPTION**\\n\\n![image](https://assets.leetcode.com/users/images/3fa4d2bf-eb3f-484c-ba6a-3631aad70cff_1661407212.8755758.png)\\n\\n\\nHere we have to compare a given string based on another string. Please don\\'t get confuse with compare two string as here we have few test cases that can cause issue if you are thinking to directly compare two strings.\\n\\n**APPROACH:** \\uD83D\\uDCA1\\n\\n**FIRST APPROACH:**\\n\\nA lot of ways to solve this ques but i will try to answer optimized way that is only traverse a single time. **O(n)**\\n\\nHere we can store the count of string chars in a map or array and then directly compare them which will save our no. computation and iteration for solving the problem.\\n\\n**C++ CODE**\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        \\n        unordered_map<char, int> rm;\\n        unordered_map<char, int> mz;\\n        \\n        for(auto x: ransomNote) rm[x]++;\\n        for(auto x: magazine) mz[x]++;\\n        \\n        for(auto x : rm)\\n        {\\n            if(mz[x.first]<x.second)\\n                return false;\\n        }\\n        return true;\\n     }\\n};\\n```\\n**PYTHON SOLUTION**\\n\\nAs always python has so many ways to solve the problem as coding gets simpler with phthon if you are doing it with something related to list or string. Here i come with same approach that i have used for C++. \\n\\nHappy Coding!!!\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n    \\n        rm = collections.Counter(ransomNote)\\n        mg = collections.Counter(magazine)\\n\\n        for k, v in rm.items():\\n            if k not in mg or mg[k] < v:\\n                return False\\n\\n        return True\\n```\\n\\nSAME approach in JAVA with little better speed. One who solves simple code with variety will learn faster than those who solves otherwise. \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25\\n\\n**JAVA CODE** \\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        char[] rs = ransomNote.toCharArray();\\n        char[] ms = magazine.toCharArray();\\n        \\n        HashMap<Character, Integer> rm = new HashMap<>();\\n        HashMap<Character, Integer> mz = new HashMap<>();\\n        \\n        for (char c : rs) {\\n            if (rm.containsKey(c)) {\\n                rm.put(c, rm.get(c) + 1);\\n            } else {\\n                rm.put(c, 1);\\n            }\\n        }\\n\\n        for (char c : ms) {\\n            if (mz.containsKey(c)) {\\n                mz.put(c, mz.get(c) + 1);\\n            } else {\\n                mz.put(c, 1);\\n            }\\n        }\\n\\n        for (char c : rm.keySet()) {\\n            if (!mz.containsKey(c) || mz.get(c) < rm.get(c)) {\\n                return false;\\n            }\\n        }\\n        return true;  \\n    }\\n}\\n```\\n\\n**SECOND APPROACH**\\uD83D\\uDCA1\\n\\n![image](https://assets.leetcode.com/users/images/0c0db7f6-29b5-428d-814b-e596d65ca605_1661408247.0688927.png)\\n\\n\\nIn this approach we are not considering storing both the string in two different collection object like map or any other. Instead we will take just single array and in that array we will add the count of **MAGAZINE** string. \\n\\n**How :**  *As we know array index start with 0 so we will make alphabet a as our starting element and all other element we will add by subtract a from that.*\\n\\nFor example your **RANSOMNOTE** is : \"gfg\" and **MAGAZINE** is: \"gfxgt\"\\n\\nNow our count array will start with :\\n\\n0 : a\\n1 : b\\n2 : c\\n.\\n.\\n.\\n.\\n25: z\\n\\nIt means if we go with ASCII value of ***Magazine*** string we will have to subtract **a** from it and we will get the index position of that char in the count array in this manner it will also become easy to find any char of ***RansomNote*** in the count array. \\n\\n***for example : g will take 6th index as  103-97 = 6th.***\\n\\t\\t\\t\\t\\t:f will take 5th index as 102-97 = 5th\\n\\nTill this we know how to store and found now what about comparision like count of **g** in ransomNote is 2 and how to check whether it is same in Magazine. For this to work we will decrease the count of ***Magazine*** string char whenever we found them in RansomNote and if it gets to less than zero we will return False as it means we don\\'t have enough char in Magazine as we have in ransomNote.\\n\\nFinally we get out of loop it means we haven\\'t got False so we will return True at the end.\\n\\n**C++ CODE**\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int m[26] = {0};\\n        for(int i = 0; i < magazine.size(); i++)\\n            m[magazine[i]-\\'a\\']++;\\n        for(int i = 0; i < ransomNote.size(); i++)\\n            if(m[ransomNote[i]-\\'a\\']-- == 0)\\n                return false;\\n        return true;\\n    }\\n};\\n```\\n\\n**PYTHON CODE** \\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        for c in ransomNote:\\n            if c not in magazine:\\n                return False\\n            magazine = magazine.replace(c, \\'\\', 1)\\n        return True\\n        \\n```\\n\\nI hope here you got another way to solve this problem other than what you are thinking.\\nI will add other approach soon.\\n\\n**Thanks for your time.** \\u2764\\uFE0F\\u2764\\uFE0F\\u2764\\uFE0F",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        \\n        unordered_map<char, int> rm;\\n        unordered_map<char, int> mz;\\n        \\n        for(auto x: ransomNote) rm[x]++;\\n        for(auto x: magazine) mz[x]++;\\n        \\n        for(auto x : rm)\\n        {\\n            if(mz[x.first]<x.second)\\n                return false;\\n        }\\n        return true;\\n     }\\n};\\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n    \\n        rm = collections.Counter(ransomNote)\\n        mg = collections.Counter(magazine)\\n\\n        for k, v in rm.items():\\n            if k not in mg or mg[k] < v:\\n                return False\\n\\n        return True\\n```\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        char[] rs = ransomNote.toCharArray();\\n        char[] ms = magazine.toCharArray();\\n        \\n        HashMap<Character, Integer> rm = new HashMap<>();\\n        HashMap<Character, Integer> mz = new HashMap<>();\\n        \\n        for (char c : rs) {\\n            if (rm.containsKey(c)) {\\n                rm.put(c, rm.get(c) + 1);\\n            } else {\\n                rm.put(c, 1);\\n            }\\n        }\\n\\n        for (char c : ms) {\\n            if (mz.containsKey(c)) {\\n                mz.put(c, mz.get(c) + 1);\\n            } else {\\n                mz.put(c, 1);\\n            }\\n        }\\n\\n        for (char c : rm.keySet()) {\\n            if (!mz.containsKey(c) || mz.get(c) < rm.get(c)) {\\n                return false;\\n            }\\n        }\\n        return true;  \\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int m[26] = {0};\\n        for(int i = 0; i < magazine.size(); i++)\\n            m[magazine[i]-\\'a\\']++;\\n        for(int i = 0; i < ransomNote.size(); i++)\\n            if(m[ransomNote[i]-\\'a\\']-- == 0)\\n                return false;\\n        return true;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        for c in ransomNote:\\n            if c not in magazine:\\n                return False\\n            magazine = magazine.replace(c, \\'\\', 1)\\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651027,
                "title": "easiest-solution-and-best-readability-with-o-1-space-no-extra-memory-allocated",
                "content": "Algorithm:\\n1. We have two strings.\\n2. we are iterating over every **char** in magazine.\\n3. if we find that **char** in the **ransomeNote**, we will replace it with an empty string `\\'\\'`. That means we are removing that **char** from **ransomeNote**. \\n4. removing all the char of **ransomeNote** that mathces that **char** from **magazine**\\n5. at last if the **magazine** remains empty string. we return `true`. else `false`\\n\\n\\n```\\nvar canConstruct = function (ransomNote, magazine) {\\n  for (const char of magazine) {\\n    ransomNote = ransomNote.replace(char, \"\");\\n  }\\n  \\n  if (!ransomNote) return true;\\n  else return false;\\n};\\n```\\n\\nMemory Usage: **44.8** MB, less than **61.76%**\\nRuntime: **111** ms, faster than **76.27%**\\nTime Complexity: **O(n^2)** because we are using `replace` here which iterates over the string.\\n\\n**`Please leave an upvote if it helped \\uD83D\\uDE0A`**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar canConstruct = function (ransomNote, magazine) {\\n  for (const char of magazine) {\\n    ransomNote = ransomNote.replace(char, \"\");\\n  }\\n  \\n  if (!ransomNote) return true;\\n  else return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1346131,
                "title": "easiest-python-solution-faster-than-95",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote, magazine):\\n        for i in set(ransomNote):\\n            if magazine.count(i) < ransomNote.count(i):\\n                return False\\n        return True\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote, magazine):\\n        for i in set(ransomNote):\\n            if magazine.count(i) < ransomNote.count(i):\\n                return False\\n        return True\\n",
                "codeTag": "Java"
            },
            {
                "id": 3254569,
                "title": "383-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. We define a class Solution and a method canConstruct which takes two string arguments, ransomNote and magazine.\\n\\n2. We create Counter objects for both the ransomNote and magazine strings using the Counter() function from the collections module. Counter() returns a dictionary with the keys being the unique characters in the string and the values being the frequency of each character.\\n\\nFor example, Counter(\"aab\") would return a dictionary {\\'a\\': 2, \\'b\\': 1}.\\n\\n3. We then check if the intersection of the note and mag Counter objects is equal to the note Counter object. We do this using the bitwise AND operator (&). The intersection of two Counter objects is another Counter object that contains the common keys and the minimum value from each object as the value for the key.\\n\\nFor example, if note = Counter(\"aab\") and mag = Counter(\"abc\"), note & mag would return a Counter object {\\'a\\': 1, \\'b\\': 1}.\\n\\n4. If the intersection of note and mag is equal to note, it means that all the letters in ransomNote can be formed using the letters in magazine. In this case, we return True, otherwise we return False.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        # Create Counter objects for the ransomNote and magazine strings\\n        note, mag = Counter(ransomNote), Counter(magazine)\\n        \\n        # Check if the intersection of note and mag Counter objects is equal to note Counter object\\n        # If it is, it means that all the letters in ransomNote can be formed using the letters in magazine\\n        if note & mag == note: return True\\n        return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        # Create Counter objects for the ransomNote and magazine strings\\n        note, mag = Counter(ransomNote), Counter(magazine)\\n        \\n        # Check if the intersection of note and mag Counter objects is equal to note Counter object\\n        # If it is, it means that all the letters in ransomNote can be formed using the letters in magazine\\n        if note & mag == note: return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85822,
                "title": "two-ac-c-solutions-unordered-map-vector",
                "content": "The complexity is O(N), N is the length of magazine. \\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> map(26);\\n        for (int i = 0; i < magazine.size(); ++i)\\n            ++map[magazine[i]];\\n        for (int j = 0; j < ransomNote.size(); ++j)\\n            if (--map[ransomNote[j]] < 0)\\n                return false;\\n        return true;\\n    }\\n};\\n```\\n\\nOr you can use a vector with size 26 instead of an unordered_map.\\n\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> vec(26, 0);\\n        for (int i = 0; i < magazine.size(); ++i)\\n            ++vec[magazine[i] - 'a'];\\n        for (int j = 0; j < ransomNote.size(); ++j)\\n            if (--vec[ransomNote[j] - 'a'] < 0)\\n                return false;\\n        return true;\\n    }\\n};\\n```\\n\\nI remember that there are two variations of this question, perhaps they will come in the next few days :)\\n1. If you can only pick letters from the magazine in order.\\n2. If the magazine is double sided.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> map(26);\\n        for (int i = 0; i < magazine.size(); ++i)\\n            ++map[magazine[i]];\\n        for (int j = 0; j < ransomNote.size(); ++j)\\n            if (--map[ransomNote[j]] < 0)\\n                return false;\\n        return true;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> vec(26, 0);\\n        for (int i = 0; i < magazine.size(); ++i)\\n            ++vec[magazine[i] - 'a'];\\n        for (int j = 0; j < ransomNote.size(); ++j)\\n            if (--vec[ransomNote[j] - 'a'] < 0)\\n                return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85801,
                "title": "share-my-easy-to-understand-5-lines-of-java-code-13ms-beats-96",
                "content": "The code is fast mainly because it uses the ASCII value of the char in the string as the index of an array, resulting in direct access and thus significantly increases efficiency of the algorithm.\\n```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n    int[] table = new int[128];\\n    for (char c : magazine.toCharArray())   table[c]++;\\n    for (char c : ransomNote.toCharArray())\\n        if (--table[c] < 0) return false;\\n    return true;\\n}\\n```\\nIf you think the above code has created some unnecessary spaces, the following code may be what you are looking for\\n```\\npublic boolean canConstruct2(String ransomNote, String magazine) {\\n    int[] table = new int[26];\\n    for (char c : magazine.toCharArray())   table[c - 'a']++;\\n    for (char c : ransomNote.toCharArray())\\n        if (--table[c - 'a'] < 0) return false;\\n    return true;\\n}\\n```\\nHere's another solution using Hash Map. Same idea, just using different data structures. And this solution obviously is less efficient than previous two.\\n```\\npublic boolean canConstruct3(String ransomNote, String magazine) {\\n    Map<Character, Integer> map = new HashMap<>();\\n    for (char c : magazine.toCharArray()) {\\n        int count = map.containsKey(c) ? map.get(c) + 1 : 1;\\n        map.put(c, count);\\n    }\\n    for (char c : ransomNote.toCharArray()) {\\n        int newCount = map.containsKey(c) ? map.get(c) - 1 : -1;\\n        if (newCount == -1) return false;\\n        map.put(c, newCount);\\n    }\\n    return true;\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n    int[] table = new int[128];\\n    for (char c : magazine.toCharArray())   table[c]++;\\n    for (char c : ransomNote.toCharArray())\\n        if (--table[c] < 0) return false;\\n    return true;\\n}\\n```\n```\\npublic boolean canConstruct2(String ransomNote, String magazine) {\\n    int[] table = new int[26];\\n    for (char c : magazine.toCharArray())   table[c - 'a']++;\\n    for (char c : ransomNote.toCharArray())\\n        if (--table[c - 'a'] < 0) return false;\\n    return true;\\n}\\n```\n```\\npublic boolean canConstruct3(String ransomNote, String magazine) {\\n    Map<Character, Integer> map = new HashMap<>();\\n    for (char c : magazine.toCharArray()) {\\n        int count = map.containsKey(c) ? map.get(c) + 1 : 1;\\n        map.put(c, count);\\n    }\\n    for (char c : ransomNote.toCharArray()) {\\n        int newCount = map.containsKey(c) ? map.get(c) - 1 : -1;\\n        if (newCount == -1) return false;\\n        map.put(c, newCount);\\n    }\\n    return true;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 385887,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    const map = {};\\n    for(let letter of magazine) {\\n        if (!map[letter]) {\\n            map[letter] = 0;\\n        }\\n        map[letter]++;\\n    }\\n    \\n    for(let letter of ransomNote) {\\n        if(!map[letter]) {\\n            return false;\\n        } \\n        map[letter]--;\\n    }\\n    return true;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    const map = {};\\n    for(let letter of magazine) {\\n        if (!map[letter]) {\\n            map[letter] = 0;\\n        }\\n        map[letter]++;\\n    }\\n    \\n    for(let letter of ransomNote) {\\n        if(!map[letter]) {\\n            return false;\\n        } \\n        map[letter]--;\\n    }\\n    return true;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1567023,
                "title": "easy-c-hashmap-solution",
                "content": "**AN UPVOTE WOULD BE HIGHLY APPRECIATED !!!**\\n\\n*Overload the comments section with doubts and praises if you have.!!!*\\n\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string a, string b) {\\n        map<char, int> mp;\\n        \\n        for(int i=0; i<b.length(); i++) {\\n            mp[b[i]]++;\\n        }\\n        \\n        for(int i=0; i<a.length(); i++) {\\n            if(mp[a[i]]>0) mp[a[i]]--;\\n            else return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string a, string b) {\\n        map<char, int> mp;\\n        \\n        for(int i=0; i<b.length(); i++) {\\n            mp[b[i]]++;\\n        }\\n        \\n        for(int i=0; i<a.length(); i++) {\\n            if(mp[a[i]]>0) mp[a[i]]--;\\n            else return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476197,
                "title": "python-c-97-one-liner-with-detailed-explantion-beginner-friendly-easy-understand",
                "content": "# **Here\\'s the idea:**\\n1. create a dictionary and count how many times each character appears in `ransomNote`.\\n2. check if frequency of each character in magazine is `greater` than in `ransomNote`.\\n\\n**Python code:**\\nIt\\'s easy to solve this problem using python.\\t\\t\\t\\t\\t\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        #check if some words in magazine matches ransomNote\\n        if ransomNote in magazine:\\n            return True\\n        \\n        #create a dictionary to store the frequency of char in ransomNote\\n        chars = dict()\\n        \\n        #write done how many times each char appears\\n        for i in ransomNote:\\n            if i in chars:\\n                chars[i] += 1\\n            else:\\n                chars[i] = 0\\n                \\n        #check if frequency of each char in magazine is greater than in ransomNote\\n        for i in chars:\\n            if magazine.count(i) <= chars[i]: \\n                return False\\n            \\n        return True\\n```\\n**Python One-liner:**\\nIf you are using python, you can make the code into one-liner.\\nSimply use `collections.Counter()`\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)\\n```\\n**C code:**\\nWe use `*ransomNote - \\'a\\'` to convert char into int (from 0 to 25)\\n```\\nbool canConstruct(char * ransomNote, char * magazine){\\n    \\n    // create a map to store the frequency of char in ransomNote\\n    int map[26] = {0};\\n    \\n    // check what is in ransomNote and magazine\\n    while(*ransomNote){\\n        map[*ransomNote - \\'a\\']++;\\n        ransomNote++;\\n    }\\n    while(*magazine){\\n        map[*magazine - \\'a\\']--;\\n        magazine++;\\n    }\\n    \\n    // check if frequency of any char in ransomNote is greater than in magazine\\n    for(int i=0; i < 26; i++)\\n        if (map[i] > 0) return false;\\n    return true;\\n}\\n```\\n**Please UPVOTE if YOU LIKE!!!**\\n![image](https://assets.leetcode.com/users/images/1a30231f-ae21-4cba-ac13-d56a0ac8faee_1661398279.6176763.png)\\n\\n\\n![image](https://assets.leetcode.com/users/images/ee12df32-aa53-43c2-831d-1a9861ae29f5_1661398138.532223.png)\\n",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        #check if some words in magazine matches ransomNote\\n        if ransomNote in magazine:\\n            return True\\n        \\n        #create a dictionary to store the frequency of char in ransomNote\\n        chars = dict()\\n        \\n        #write done how many times each char appears\\n        for i in ransomNote:\\n            if i in chars:\\n                chars[i] += 1\\n            else:\\n                chars[i] = 0\\n                \\n        #check if frequency of each char in magazine is greater than in ransomNote\\n        for i in chars:\\n            if magazine.count(i) <= chars[i]: \\n                return False\\n            \\n        return True\\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)\\n```\n```\\nbool canConstruct(char * ransomNote, char * magazine){\\n    \\n    // create a map to store the frequency of char in ransomNote\\n    int map[26] = {0};\\n    \\n    // check what is in ransomNote and magazine\\n    while(*ransomNote){\\n        map[*ransomNote - \\'a\\']++;\\n        ransomNote++;\\n    }\\n    while(*magazine){\\n        map[*magazine - \\'a\\']--;\\n        magazine++;\\n    }\\n    \\n    // check if frequency of any char in ransomNote is greater than in magazine\\n    for(int i=0; i < 26; i++)\\n        if (map[i] > 0) return false;\\n    return true;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85881,
                "title": "java-map-solution",
                "content": "```\\n public boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> magM = new HashMap<>();\\n        for (char c:magazine.toCharArray()){\\n            int newCount = magM.getOrDefault(c, 0)+1;\\n            magM.put(c, newCount);\\n        }\\n        for (char c:ransomNote.toCharArray()){\\n            int newCount = magM.getOrDefault(c,0)-1;\\n            if (newCount<0)\\n                return false;\\n            magM.put(c, newCount);\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> magM = new HashMap<>();\\n        for (char c:magazine.toCharArray()){\\n            int newCount = magM.getOrDefault(c, 0)+1;\\n            magM.put(c, newCount);\\n        }\\n        for (char c:ransomNote.toCharArray()){\\n            int newCount = magM.getOrDefault(c,0)-1;\\n            if (newCount<0)\\n                return false;\\n            magM.put(c, newCount);\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 613906,
                "title": "python-3-accepted-intuitive-sol-99-79-24ms",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine = magazine.replace(i,\"\",1)\\n            else: return False\\n        \\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine = magazine.replace(i,\"\",1)\\n            else: return False\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 610290,
                "title": "java-100-faster",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] hash = new int[26];\\n        for (char c : magazine.toCharArray())\\n            ++hash[c-\\'a\\'];\\n        for (char c : ransomNote.toCharArray())\\n            if (--hash[c-\\'a\\'] < 0) \\n                return false;\\n        return true;\\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] hash = new int[26];\\n        for (char c : magazine.toCharArray())\\n            ++hash[c-\\'a\\'];\\n        for (char c : ransomNote.toCharArray())\\n            if (--hash[c-\\'a\\'] < 0) \\n                return false;\\n        return true;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2476142,
                "title": "python-easily-understood-faster-than-96-fast",
                "content": "Method: `hashmap`\\n```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\transomNoteDict = Counter(ransomNote)\\n\\tmagazineDict = Counter(magazine)\\n\\tfor k in ransomNoteDict:\\n\\t\\tmagazineDict[k] = magazineDict.get(k, 0) - ransomNoteDict[k]\\n\\t\\tif magazineDict[k] < 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n```\\n**Time Complexity**: `O(n)`\\n**Space Complexity**: `O(n)`\\n<br/>",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\transomNoteDict = Counter(ransomNote)\\n\\tmagazineDict = Counter(magazine)\\n\\tfor k in ransomNoteDict:\\n\\t\\tmagazineDict[k] = magazineDict.get(k, 0) - ransomNoteDict[k]\\n\\t\\tif magazineDict[k] < 0:\\n\\t\\t\\treturn False\\n\\treturn True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 85940,
                "title": "many-different-ways-1-liners-2-liners-concise-4-liner-in-python-80ms",
                "content": "Trivial but the shortest method:\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(c)<=magazine.count(c) for c in ransomNote)\\n```\\nBased on the trivial method, we can use ```set``` to avoid some duplication. This works amazingly fast for the test cases. \\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(c)<=magazine.count(c) for c in set(ransomNote))\\n```\\nOr even exploiting the given condition that there are only small letters:\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(c)<=magazine.count(c) for c in string.ascii_lowercase)\\n```\\nIt gave me 80 ms, the fastest method listed here.\\n\\n=================================\\n\\nOk, here come some more \"proper\" ways. Proper, as in they don't assume anything about the alphabet.\\n\\nProper Method 1: Use Counter and compare letters' counts:\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        c1, c2 = collections.Counter(ransomNote), collections.Counter(magazine)\\n        return all(k in c2 and c2[k]>=c1[k] for k in c1)\\n```\\n\\n\\nProper Method 2: Sort the strings and do a traversal.\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        s, i = sorted(ransomNote), 0\\n        for c in sorted(magazine):\\n            i += i<len(s) and s[i]==c\\n        return i==len(s)\\n```\\nLonger but easier to understand version. There is an extra check ```c>s1[i]``` for faster termination, but it's not really faster for the test cases here.\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        s1, s2, i = sorted(ransomNote), sorted(magazine), 0\\n        for c in s2:\\n            if i==len(s1) or c>s1[i]:\\n                break\\n            if c==s1[i]:\\n                i += 1\\n        return i==len(s1)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(c)<=magazine.count(c) for c in ransomNote)\\n```\n```set```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(c)<=magazine.count(c) for c in set(ransomNote))\\n```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(c)<=magazine.count(c) for c in string.ascii_lowercase)\\n```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        c1, c2 = collections.Counter(ransomNote), collections.Counter(magazine)\\n        return all(k in c2 and c2[k]>=c1[k] for k in c1)\\n```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        s, i = sorted(ransomNote), 0\\n        for c in sorted(magazine):\\n            i += i<len(s) and s[i]==c\\n        return i==len(s)\\n```\n```c>s1[i]```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        s1, s2, i = sorted(ransomNote), sorted(magazine), 0\\n        for c in s2:\\n            if i==len(s1) or c>s1[i]:\\n                break\\n            if c==s1[i]:\\n                i += 1\\n        return i==len(s1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2475867,
                "title": "easy-java-solution-2-methods-100-faster-beginner-friendly-with-comments",
                "content": "**If you really found my solution helpful please upvote it, as it motivates me to post such kind of codes and help the coding community, if you have some queries or some improvements please feel free to comment and share your views.**\\n```Method Using Array ```\\n```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        int a[] = new int[26]; // find occurence of each character in string magazine\\n        for (char i : magazine.toCharArray()) {\\n            a[i - \\'a\\']++;\\n        }\\n        for (char i : ransomNote.toCharArray()) {\\n            if (a[i - \\'a\\'] == 0) { // character is not found in magazine or a particular character doesn\\'t have same or greater count than count in magazine\\n                return false;\\n            } else {\\n                a[i - \\'a\\']--; // decrement if character exists\\n            }\\n        }\\n        return true;\\n    }\\n```\\n```Method Using HashMap ```\\n```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        HashMap<Character, Integer> hm = new HashMap<>();\\n        for (char i : magazine.toCharArray()) {\\n            if (hm.containsKey(i)) {\\n                hm.put(i, hm.get(i) + 1);\\n            } else {\\n                hm.put(i, 1);\\n            }\\n        }\\n        for (char i : ransomNote.toCharArray()) {\\n            if (!hm.containsKey(i) || hm.get(i) == 0) {\\n                return false;\\n            } else {\\n                hm.put(i, hm.get(i) - 1);\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```Method Using Array ```\n```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        int a[] = new int[26]; // find occurence of each character in string magazine\\n        for (char i : magazine.toCharArray()) {\\n            a[i - \\'a\\']++;\\n        }\\n        for (char i : ransomNote.toCharArray()) {\\n            if (a[i - \\'a\\'] == 0) { // character is not found in magazine or a particular character doesn\\'t have same or greater count than count in magazine\\n                return false;\\n            } else {\\n                a[i - \\'a\\']--; // decrement if character exists\\n            }\\n        }\\n        return true;\\n    }\\n```\n```Method Using HashMap ```\n```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        HashMap<Character, Integer> hm = new HashMap<>();\\n        for (char i : magazine.toCharArray()) {\\n            if (hm.containsKey(i)) {\\n                hm.put(i, hm.get(i) + 1);\\n            } else {\\n                hm.put(i, 1);\\n            }\\n        }\\n        for (char i : ransomNote.toCharArray()) {\\n            if (!hm.containsKey(i) || hm.get(i) == 0) {\\n                return false;\\n            } else {\\n                hm.put(i, hm.get(i) - 1);\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 936849,
                "title": "javascript-solution",
                "content": "1. Splite the `magazine` string into an array\\n2. Loop through each character in the `ransomNote` string\\n3. If the current `ransomNote` character can\\'t be found in the array, break the loop and `return false`\\n4. If the current `ransomNote` character is found in the array, splice that character out of the array for future checks\\n5. If the loop completes, `return true`\\n\\nFaster than 79% of JavaScript submissions\\n\\n```\\nvar canConstruct = function(ransomNote, magazine) {\\n    const arr = magazine.split(\\'\\');\\n    for (let i = 0; i < ransomNote.length; i++) {\\n        if (arr.indexOf(ransomNote[i]) === -1) {\\n            return false;\\n        } else {\\n            arr.splice(arr.indexOf(ransomNote[i]), 1);\\n        }\\n    }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar canConstruct = function(ransomNote, magazine) {\\n    const arr = magazine.split(\\'\\');\\n    for (let i = 0; i < ransomNote.length; i++) {\\n        if (arr.indexOf(ransomNote[i]) === -1) {\\n            return false;\\n        } else {\\n            arr.splice(arr.indexOf(ransomNote[i]), 1);\\n        }\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1947575,
                "title": "go-pretty-simple-code",
                "content": "```\\nfunc canConstruct(ransomNote string, magazine string) bool {\\n    \\tfor _, v := range ransomNote {\\n\\t\\tif strings.Count(ransomNote, string(v)) > strings.Count(magazine, string(v)) {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc canConstruct(ransomNote string, magazine string) bool {\\n    \\tfor _, v := range ransomNote {\\n\\t\\tif strings.Count(ransomNote, string(v)) > strings.Count(magazine, string(v)) {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 954360,
                "title": "0ms-100-faster-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int freq[26]={0};\\n        for(int i=0;i<magazine.size();i++){\\n            freq[int(magazine[i])-97]++;\\n        }\\n        for(int i=0;i<ransomNote.size();i++){\\n            freq[int(ransomNote[i])-97]--;\\n        }\\n        for(int i=0;i<26;i++){\\n            if(freq[i]<0)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int freq[26]={0};\\n        for(int i=0;i<magazine.size();i++){\\n            freq[int(magazine[i])-97]++;\\n        }\\n        for(int i=0;i<ransomNote.size();i++){\\n            freq[int(ransomNote[i])-97]--;\\n        }\\n        for(int i=0;i<26;i++){\\n            if(freq[i]<0)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2475809,
                "title": "java-easy-solution-98-faster-code",
                "content": "\\tPLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] count = new int[26];\\n        for(char ch: magazine.toCharArray()) {\\n            count[ch - \\'a\\']++;\\n        }\\n        for(char ch: ransomNote.toCharArray()) {\\n            int val = ch - \\'a\\';\\n            if(count[val] <= 0) return false;\\n            count[val]--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] count = new int[26];\\n        for(char ch: magazine.toCharArray()) {\\n            count[ch - \\'a\\']++;\\n        }\\n        for(char ch: ransomNote.toCharArray()) {\\n            int val = ch - \\'a\\';\\n            if(count[val] <= 0) return false;\\n            count[val]--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1150515,
                "title": "explained-fast-elegant-clean-pythonic-solution",
                "content": "*Runtime: 48 ms, faster than 73.03% of Python3 online submissions for Ransom Note.\\nMemory Usage: 14.2 MB, less than 85.94% of Python3 online submissions for Ransom Note.*\\n\\nLet\\'s validate that the minimal count for each letter in among { the ransom letter, the magazine } suffices to construct the ransom letter (euals the count of the letter in the ransom letter).\\n\\nWe can utilize Python `and` operator over `Counter` which keeps the minimal value among the two `Counter`s:\\n\\ne.g.\\nExample 1:\\nransomNote = \"aa\" =>  ransomNote_counter =  { \\'a\\' : 2 }\\nmagazine = \"aab\"      => magazine_counter      = { \\'a\\' : 2, \\'b\\' : 1 }\\n\\nThe `&` operator would take the minimun of each value:\\n\\'a\\' appears twice in all dictionaries, so min(2, 2) = 2\\n\\'b\\' appears once in the magazine but dosent apear in the ransom note, so min(1, 0) = 0\\nTherefore we get:\\nransomNote_counter & magazine_counter = { \\'a\\' : 2 }\\nWhich is the same as the ransomNote_counter - so we can construct the ranson note from the magazines.\\n\\nExample 2:\\nransomNote = \"aa\" =>  ransomNote_counter =  { \\'a\\' : 2 }\\nmagazine = \"ab\"      => magazine_counter      = { \\'a\\' : 1, \\'b\\' : 1 }\\n\\nThe `&` operator would take the minimun of each value:\\n\\'a\\' appears twice in the ransom note but appears only once in the magazine, so min(2, 1) = 1\\n\\'b\\' appears once in the magazine but dosent apear in the ransom note, so min(1, 0) = 0\\nTherefore we get:\\nransomNote_counter & magazine_counter = { \\'a\\' : 1 }\\nWhich is diffrent than ransomNote_counter - so we can not construct the ranson note from the magazines.\\n\\n***Please upvote if you find the explanation helful! :)***\\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransom_counter      = Counter(ransomNote)\\n        magazine_counter    = Counter(magazine)\\n        return ransom_counter == ransom_counter & magazine_counter\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransom_counter      = Counter(ransomNote)\\n        magazine_counter    = Counter(magazine)\\n        return ransom_counter == ransom_counter & magazine_counter\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2707468,
                "title": "beautiful-solution-javascript-easy-to-understand",
                "content": "Hello, everybody!\\nI want show you beauty solution with hash-tables:\\n```\\nconst canConstruct = (ransomNote, magazine) => {\\n    const vocab = {};\\n    \\n    for (let letter of magazine) {\\n        vocab[letter] = ++vocab[letter] || 1;\\n    }\\n    \\n    for (let letter of ransomNote) {\\n        if (vocab[letter] === 0 || !vocab[letter]) {\\n            return false;\\n        }\\n        vocab[letter]--;\\n    }\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst canConstruct = (ransomNote, magazine) => {\\n    const vocab = {};\\n    \\n    for (let letter of magazine) {\\n        vocab[letter] = ++vocab[letter] || 1;\\n    }\\n    \\n    for (let letter of ransomNote) {\\n        if (vocab[letter] === 0 || !vocab[letter]) {\\n            return false;\\n        }\\n        vocab[letter]--;\\n    }\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 610375,
                "title": "python-1-liner-with-counter",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t    # subtract counts of corresponding words, keeping non-negative values\\n\\t    return not len(Counter(ransomNote) - Counter(magazine))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t    # subtract counts of corresponding words, keeping non-negative values\\n\\t    return not len(Counter(ransomNote) - Counter(magazine))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476301,
                "title": "c-hashmap-very-easy-code",
                "content": "We want to construct ransomNote from the magazine, soo each character of ransomNote should be in magazine, with freq greater than or equal to the freq of that character in ransomNote. \\n\\nExample : \\n(1) ransomNote = \"a\", magazine = \"b\"\\n    We need 1 \\'a\\' but magazine don\\'t have \\'a\\' soo false.\\n(2) ransomNote = \"aa\", magazine = \"ab\"\\n   We need 2 \\'a\\' but magazine only have 1 \\'a\\' soo false.\\n(3) ransomNote = \"aa\", magazine = \"aab\"\\n    We need 2 \\'a\\' and magazine have 2 \\'a\\',  no matter what else it has, soo True.\\n\\nSo we just want : \\nFreq of all char in ( ransomNote ) >= Freq of that char in ( magazine )\\n\\nPlease Upvote :)\\n\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> a(26,0),b(26,0);\\n        for(auto x:magazine)// freq of each char in magazine\\n            b[x-\\'a\\']++;\\n        for(auto x:ransomNote)// freq of each char in ransomNote\\n            a[x-\\'a\\']++;\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n\\t\\t// ransomNote has freq of character (i+\\'a\\') greater than in magazine soo we can\\'t construct it. ( False )\\n            if(a[i]>b[i])\\n                return false;\\n        }\\n\\t\\t// for all character we had freq in ransomNote <= freq in magazine, soo it can be constructed. ( True )\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> a(26,0),b(26,0);\\n        for(auto x:magazine)// freq of each char in magazine\\n            b[x-\\'a\\']++;\\n        for(auto x:ransomNote)// freq of each char in ransomNote\\n            a[x-\\'a\\']++;\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n\\t\\t// ransomNote has freq of character (i+\\'a\\') greater than in magazine soo we can\\'t construct it. ( False )\\n            if(a[i]>b[i])\\n                return false;\\n        }\\n\\t\\t// for all character we had freq in ransomNote <= freq in magazine, soo it can be constructed. ( True )\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2550434,
                "title": "easy-and-faster-than-98-python3-solutions",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        \\n        if len(magazine) < len(ransomNote):\\n            return False\\n        \\n        else:\\n                \\n            for ransomNote_char in set(ransomNote):\\n                \\n                if ransomNote.count(ransomNote_char) > magazine.count(ransomNote_char):\\n                    return False\\n            \\n            return True\\n            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        \\n        if len(magazine) < len(ransomNote):\\n            return False\\n        \\n        else:\\n                \\n            for ransomNote_char in set(ransomNote):\\n                \\n                if ransomNote.count(ransomNote_char) > magazine.count(ransomNote_char):\\n                    return False\\n            \\n            return True\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 85763,
                "title": "improved-solution-shortcut-on-the-magazine-not-the-ransomnote",
                "content": "As the magazine could be much longer than the RansomNote, shortcutting the loop on the magazine will result in much better running complexity.\\n\\nFirst build the HashMap for the RansomNote, then loop on the magazine, and return true as soon as you removed all the characters from the Map.\\n\\nThis change resulted in improving the running time from ~80ms to ~20ms for my code.\\n\\n```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n\\tif(ransomNote.length()>magazine.length()) return false;\\n\\tif(ransomNote.isEmpty() && magazine.isEmpty()) return true;\\n\\tMap<Character,Integer> charsCount = new HashMap<>();\\n\\tfor(char c: ransomNote.toCharArray()) {\\n\\t\\tif(charsCount.containsKey(c)) {\\n\\t\\t\\tcharsCount.put(c, charsCount.get(c)+1);\\n\\t\\t} else {\\n\\t\\t\\tcharsCount.put(c, 1);\\n\\t\\t}\\n\\t}\\n\\tfor(char c: magazine.toCharArray()) {\\n\\t\\tif(charsCount.containsKey(c)) {\\n\\t\\t\\tint count = charsCount.get(c);\\n\\t\\t\\tif(--count==0) charsCount.remove(c);\\n\\t\\t\\telse charsCount.put(c, count);\\n\\t\\t}\\n\\t\\tif(charsCount.keySet().size()==0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n\\tif(ransomNote.length()>magazine.length()) return false;\\n\\tif(ransomNote.isEmpty() && magazine.isEmpty()) return true;\\n\\tMap<Character,Integer> charsCount = new HashMap<>();\\n\\tfor(char c: ransomNote.toCharArray()) {\\n\\t\\tif(charsCount.containsKey(c)) {\\n\\t\\t\\tcharsCount.put(c, charsCount.get(c)+1);\\n\\t\\t} else {\\n\\t\\t\\tcharsCount.put(c, 1);\\n\\t\\t}\\n\\t}\\n\\tfor(char c: magazine.toCharArray()) {\\n\\t\\tif(charsCount.containsKey(c)) {\\n\\t\\t\\tint count = charsCount.get(c);\\n\\t\\t\\tif(--count==0) charsCount.remove(c);\\n\\t\\t\\telse charsCount.put(c, count);\\n\\t\\t}\\n\\t\\tif(charsCount.keySet().size()==0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 85772,
                "title": "my-javascript-solution",
                "content": "```\\n\\nvar canConstruct = function(ransomNote, magazine) {\\n    if (ransomNote.length > magazine.length) { return false; }\\n    var ransomNoteArr = ransomNote.split('');\\n    var oldMagazineLength = magazine.length;\\n    ransomNoteArr.forEach(function(item,index){\\n        magazine = magazine.replace(item,'');\\n    });\\n    if(oldMagazineLength == magazine.length +ransomNoteArr.length) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n\\nvar canConstruct = function(ransomNote, magazine) {\\n    if (ransomNote.length > magazine.length) { return false; }\\n    var ransomNoteArr = ransomNote.split('');\\n    var oldMagazineLength = magazine.length;\\n    ransomNoteArr.forEach(function(item,index){\\n        magazine = magazine.replace(item,'');\\n    });\\n    if(oldMagazineLength == magazine.length +ransomNoteArr.length) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3281533,
                "title": "one-line-understand-set-concept",
                "content": "\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return Counter(ransomNote)=Counter(magazine)\\n    #please upvote me it would encourage me alot\\n\\n   \\n```\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote)-Counter(magazine)\\n    #please upvote me it would encourage me alot\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return Counter(ransomNote)=Counter(magazine)\\n    #please upvote me it would encourage me alot\\n\\n   \\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote)-Counter(magazine)\\n    #please upvote me it would encourage me alot\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3973539,
                "title": "three-simple-java-solutions-runtime-2ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code 1\\nthis code is best in 2ms\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] charCounts = new int[26]; // Assuming lowercase English letters\\n        \\n        for (char c : magazine.toCharArray()) {\\n            charCounts[c - \\'a\\']++;\\n        }\\n\\n        for (char c : ransomNote.toCharArray()) {\\n            if ( !(charCounts[c - \\'a\\'] > 0 ) ) {\\n                return false;\\n            } \\n                charCounts[c - \\'a\\']--;\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```\\n\\nCode 2 (27ms) and Code 3 (19ms) are not the best, but they are an addition\\n\\n# code 2 \\n```\\nclass Solution {\\n   public static boolean canConstruct(String ransomNote, String magazine) {\\n    HashSet<Character> list = new HashSet<>();\\n        for (char c : ransomNote.toCharArray())\\n            list.add(c);\\n        \\n       for (Character c : list)\\n       {\\n           int count1 = countChar(ransomNote , c);\\n           int count2 = countChar(magazine , c);\\n            if (count1 > count2)\\n                return false;\\n       }\\n        return true;\\n}\\n    public static int countChar(String str , char c)\\n    {\\n        int count = 0;\\n        for (int i = 0; i < str.length(); i++) {\\n            if (str.charAt(i) == c) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```\\n\\n# code 3\\n```\\nimport java.util.Hashtable;\\nimport java.util.Map;\\n\\nclass Solution {\\n   public static boolean canConstruct(String ransomNote, String magazine) {\\n    Hashtable<Character, Integer> list1 = new Hashtable<>();\\n    for (char c : magazine.toCharArray()) {\\n        list1.put(c, list1.getOrDefault(c, 0) + 1);\\n    }\\n\\n    Hashtable<Character, Integer> list2 = new Hashtable<>();\\n    for (char c : ransomNote.toCharArray()) {\\n        list2.put(c, list2.getOrDefault(c, 0) + 1);\\n    }\\n\\n    for (Map.Entry<Character, Integer> entry : list2.entrySet()) {\\n        char c = entry.getKey();\\n        int countNeeded = entry.getValue();\\n        \\n        if (!list1.containsKey(c) || list1.get(c) < countNeeded) {\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n\\n}\\n```\\n\\n![e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg](https://assets.leetcode.com/users/images/11053fbf-f126-4bd4-b5c9-7a17015b1941_1693255542.2392998.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] charCounts = new int[26]; // Assuming lowercase English letters\\n        \\n        for (char c : magazine.toCharArray()) {\\n            charCounts[c - \\'a\\']++;\\n        }\\n\\n        for (char c : ransomNote.toCharArray()) {\\n            if ( !(charCounts[c - \\'a\\'] > 0 ) ) {\\n                return false;\\n            } \\n                charCounts[c - \\'a\\']--;\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```\n```\\nclass Solution {\\n   public static boolean canConstruct(String ransomNote, String magazine) {\\n    HashSet<Character> list = new HashSet<>();\\n        for (char c : ransomNote.toCharArray())\\n            list.add(c);\\n        \\n       for (Character c : list)\\n       {\\n           int count1 = countChar(ransomNote , c);\\n           int count2 = countChar(magazine , c);\\n            if (count1 > count2)\\n                return false;\\n       }\\n        return true;\\n}\\n    public static int countChar(String str , char c)\\n    {\\n        int count = 0;\\n        for (int i = 0; i < str.length(); i++) {\\n            if (str.charAt(i) == c) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```\n```\\nimport java.util.Hashtable;\\nimport java.util.Map;\\n\\nclass Solution {\\n   public static boolean canConstruct(String ransomNote, String magazine) {\\n    Hashtable<Character, Integer> list1 = new Hashtable<>();\\n    for (char c : magazine.toCharArray()) {\\n        list1.put(c, list1.getOrDefault(c, 0) + 1);\\n    }\\n\\n    Hashtable<Character, Integer> list2 = new Hashtable<>();\\n    for (char c : ransomNote.toCharArray()) {\\n        list2.put(c, list2.getOrDefault(c, 0) + 1);\\n    }\\n\\n    for (Map.Entry<Character, Integer> entry : list2.entrySet()) {\\n        char c = entry.getKey();\\n        int countNeeded = entry.getValue();\\n        \\n        if (!list1.containsKey(c) || list1.get(c) < countNeeded) {\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 476121,
                "title": "elementary-c-solution",
                "content": "```\\n\\n    public class Solution\\n    {\\n        public bool CanConstruct(string ransomNote, string magazine)\\n        {\\n            IDictionary<char, int> magazineMap = new Dictionary<char, int>();\\n            foreach (var c in magazine)\\n            {\\n                if (!magazineMap.ContainsKey(c))\\n                {\\n                    magazineMap[c] = 0;\\n                }\\n\\n                magazineMap[c]++;\\n            }\\n\\n            foreach (var rc in ransomNote)\\n            {\\n                if (!magazineMap.ContainsKey(rc) || magazineMap[rc] == 0)\\n                {\\n                    return false;\\n                }\\n\\n                magazineMap[rc]--;\\n            }\\n\\n            return true;\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\n    public class Solution\\n    {\\n        public bool CanConstruct(string ransomNote, string magazine)\\n        {\\n            IDictionary<char, int> magazineMap = new Dictionary<char, int>();\\n            foreach (var c in magazine)\\n            {\\n                if (!magazineMap.ContainsKey(c))\\n                {\\n                    magazineMap[c] = 0;\\n                }\\n\\n                magazineMap[c]++;\\n            }\\n\\n            foreach (var rc in ransomNote)\\n            {\\n                if (!magazineMap.ContainsKey(rc) || magazineMap[rc] == 0)\\n                {\\n                    return false;\\n                }\\n\\n                magazineMap[rc]--;\\n            }\\n\\n            return true;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3122490,
                "title": "very-simple-solution-using-only-list-easy-to-understand-beats-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine)\\n        {\\n            List<char> list = new List<char>(magazine);\\n            for (int i = 0; i < ransomNote.Length; i++)\\n            {\\n                if (list.Contains(ransomNote[i]))\\n                {\\n                    list.Remove(ransomNote[i]);\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n}\\n```\\nFeel free to ask if something not clear!",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine)\\n        {\\n            List<char> list = new List<char>(magazine);\\n            for (int i = 0; i < ransomNote.Length; i++)\\n            {\\n                if (list.Contains(ransomNote[i]))\\n                {\\n                    list.Remove(ransomNote[i]);\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3002089,
                "title": "java-two-pointer-3-line-code-easily-understandable",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        char[] r = ransomNote.toCharArray();\\n        char[] m = magazine.toCharArray();\\n\\n        Arrays.sort(r);\\n        Arrays.sort(m);\\n\\n        int r_pointer = 0;\\n        int m_pointer = 0;\\n\\n        while(m_pointer < magazine.length()){\\n            if(r[r_pointer] == m[m_pointer]) r_pointer++;\\n            if(r_pointer == r.length) return true;\\n            m_pointer++;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        char[] r = ransomNote.toCharArray();\\n        char[] m = magazine.toCharArray();\\n\\n        Arrays.sort(r);\\n        Arrays.sort(m);\\n\\n        int r_pointer = 0;\\n        int m_pointer = 0;\\n\\n        while(m_pointer < magazine.length()){\\n            if(r[r_pointer] == m[m_pointer]) r_pointer++;\\n            if(r_pointer == r.length) return true;\\n            m_pointer++;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2503739,
                "title": "python-99-faster-easy-solution",
                "content": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        unique = list(set(ransomNote))\\n        for letter in unique:\\n            if letter not in magazine or ransomNote.count(letter) > magazine.count(letter):\\n                return False\\n        return True\\n```\\n![image](https://assets.leetcode.com/users/images/063cfb81-ab2c-44ce-afcc-979ad0a6c583_1661844588.3435304.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        unique = list(set(ransomNote))\\n        for letter in unique:\\n            if letter not in magazine or ransomNote.count(letter) > magazine.count(letter):\\n                return False\\n        return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2475633,
                "title": "daily-leetcoding-challenge-august-day-25",
                "content": "This problem is the Daily LeetCoding Challenge for August, Day 25.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/ransom-note/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Simulation\n\n  \n**Approach 2:** Two HashMaps\n\n  \n**Approach 3:** One HashMap\n\n  \n**Approach 4:** Sorting and Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/ransom-note/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 1074036,
                "title": "java-solution-99-faster-90-less-space-using-array-with-expnanation",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\n\\t\\t// array to store the count of each letter in \"magazine\"\\n         int[] count = new int[26];\\n\\t\\t \\n        for (char ch : magazine.toCharArray()) {\\n            count[(int) ch - (int) \\'a\\'] += 1;\\n        }\\n\\t   \\n\\t   // decrementing the count of each character to see if more are needed\\n        for (char ch : ransomNote.toCharArray()) {\\n            count[(int) ch - (int) \\'a\\'] -= 1;\\n        }\\n    \\n\\t\\t// if any count is negative, means there were insufficient number \\n\\t\\t// of that character so \"ransomNote\" cannot be constructed\\n        for (int i : count) {\\n            if (i < 0)\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\nVote if you liked :)",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\n\\t\\t// array to store the count of each letter in \"magazine\"\\n         int[] count = new int[26];\\n\\t\\t \\n        for (char ch : magazine.toCharArray()) {\\n            count[(int) ch - (int) \\'a\\'] += 1;\\n        }\\n\\t   \\n\\t   // decrementing the count of each character to see if more are needed\\n        for (char ch : ransomNote.toCharArray()) {\\n            count[(int) ch - (int) \\'a\\'] -= 1;\\n        }\\n    \\n\\t\\t// if any count is negative, means there were insufficient number \\n\\t\\t// of that character so \"ransomNote\" cannot be constructed\\n        for (int i : count) {\\n            if (i < 0)\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 610193,
                "title": "java-count-solution-clean-code-o-m-n",
                "content": "```java\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] cnt = new int[128];\\n        for (char c : magazine.toCharArray())\\n            ++cnt[c];\\n        for (char c : ransomNote.toCharArray())\\n            if (--cnt[c] < 0) return false;\\n        return true;\\n    }\\n}\\n```\\n**Complexity:**\\n- Time: `O(m+n)`, where `m` is the length of `ransomNote`, `n` is the length of `magazine`\\n- Space: `O(1)`",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] cnt = new int[128];\\n        for (char c : magazine.toCharArray())\\n            ++cnt[c];\\n        for (char c : ransomNote.toCharArray())\\n            if (--cnt[c] < 0) return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3667150,
                "title": "easy-cpp-solution-with-basic-string-sorting-no-map",
                "content": "# Intuition\\nFirst thought was to sort and compare.\\nAnd yeah it worked for me.\\n\\n# Approach\\n- Sort both the strings.\\n- Use two pointers one for ransomNote and another one for magazine.\\n- Run a while loop with condition that the pointers are inside the strings for both the ransomNote and magazine.\\n- Inside while loop check if ransomNote[i]==magazine[j] if yes{ i++;j++}\\n- Else if(ransomNote[i]>magazine[j]){j++;}  // means we are checking if the next char in magazine is equal to the char of ransomNote\\n- else return false.\\n- return true if(i==ransomNote.length(); // as ransomNote can be made fully using magazine.\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn) // using sort \\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        sort(ransomNote.begin(),ransomNote.end());\\n        sort(magazine.begin(),magazine.end());\\n        int i=0, j=0;\\n        while(i<ransomNote.length() && j<magazine.size())\\n        {\\n            if(ransomNote[i]==magazine[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(ransomNote[i]>magazine[j]) \\n            {\\n                j++;\\n            }\\n            else return false;\\n        }\\n        return i==ransomNote.size();\\n    }\\n};\\n```\\n# sortPlease upvote!!",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sorting",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        sort(ransomNote.begin(),ransomNote.end());\\n        sort(magazine.begin(),magazine.end());\\n        int i=0, j=0;\\n        while(i<ransomNote.length() && j<magazine.size())\\n        {\\n            if(ransomNote[i]==magazine[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(ransomNote[i]>magazine[j]) \\n            {\\n                j++;\\n            }\\n            else return false;\\n        }\\n        return i==ransomNote.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3360795,
                "title": "typescript-hashmap",
                "content": "\\nTime Complexity: O(n+m)\\nSpace Complexity: O(1)\\n\\n# Code\\n```\\nfunction canConstruct(ransomNote: string, magazine: string): boolean {\\n  const magazineChars: Map<string, number> = new Map<string, number>();\\n\\n  for (const char of magazine) {\\n    if (magazineChars.has(char)) {\\n      magazineChars.set(char, magazineChars.get(char)! + 1);\\n    } else {\\n      magazineChars.set(char, 1);\\n    }\\n  }\\n\\n  for (const char of ransomNote) {\\n    if (magazineChars.get(char)) {\\n      magazineChars.set(char, magazineChars.get(char)! - 1);\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nfunction canConstruct(ransomNote: string, magazine: string): boolean {\\n  const magazineChars: Map<string, number> = new Map<string, number>();\\n\\n  for (const char of magazine) {\\n    if (magazineChars.has(char)) {\\n      magazineChars.set(char, magazineChars.get(char)! + 1);\\n    } else {\\n      magazineChars.set(char, 1);\\n    }\\n  }\\n\\n  for (const char of ransomNote) {\\n    if (magazineChars.get(char)) {\\n      magazineChars.set(char, magazineChars.get(char)! - 1);\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1355639,
                "title": "c-solution-using-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n     unordered_map<char , int >m;\\n    int count=0;\\n    for(int i=0 ; i<magazine.length() ; i++)\\n    {m[magazine[i]]++;}\\n    for(int i=0 ; i<ransomNote.size() ; i++)\\n    { if(m[ransomNote[i]]==0) return false;\\n    m[ransomNote[i]]--;\\n    }\\n    return true;\\n    }\\n};\\n```\\nhappy coding! upvote if its helps , im trying to go through collage :/",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n     unordered_map<char , int >m;\\n    int count=0;\\n    for(int i=0 ; i<magazine.length() ; i++)\\n    {m[magazine[i]]++;}\\n    for(int i=0 ; i<ransomNote.size() ; i++)\\n    { if(m[ransomNote[i]]==0) return false;\\n    m[ransomNote[i]]--;\\n    }\\n    return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 317823,
                "title": "c-charandcount",
                "content": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        var charAndCount = new int[256];\\n        foreach (var c in magazine) {\\n            charAndCount[c]++;\\n        }\\n\\n        foreach (var c in ransomNote) {\\n            charAndCount[c]--;\\n\\n            if (charAndCount[c] < 0) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        var charAndCount = new int[256];\\n        foreach (var c in magazine) {\\n            charAndCount[c]++;\\n        }\\n\\n        foreach (var c in ransomNote) {\\n            charAndCount[c]--;\\n\\n            if (charAndCount[c] < 0) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3712875,
                "title": "easy-python-code-for-beginners",
                "content": "# Intuition\\nThe intuition behind the given code is to check if we can construct the ransomNote string using the letters from the magazine string, while adhering to the constraint that each letter in magazine can only be used once.\\n\\nThe code accomplishes this by using two for loops to traverse the ransomNote and magazine strings.\\n\\n# Approach\\nIn the first loop, we iterate over each character in the ransomNote string. For each character, we check if it is present in the magazine string. If the character is found, it means we can use it to construct the ransomNote, so we remove that character from the magazine string by calling magazine.remove(char).\\n\\nIf a character in ransomNote is not found in magazine, it means we cannot construct the ransomNote using the available characters, so we immediately return False.\\n\\nAfter iterating over all characters in ransomNote, if we have successfully removed each character from the magazine string, it means we can construct the ransomNote using the letters from magazine, while satisfying the constraint that each letter in magazine can only be used once. In this case, we return True.\\n\\nThe approach of converting the strings to lists allows us to manipulate the magazine string by removing characters as they are used, effectively ensuring that each letter in magazine is used only once.\\n\\n# Complexity\\n- Time complexity: O(n*m)\\n\\n- Space complexity: O(n+m)\\n\\n# Code\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for char in ransomNote:\\n            if char in magazine:\\n                magazine.remove(char)\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for char in ransomNote:\\n            if char in magazine:\\n                magazine.remove(char)\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2485470,
                "title": "javascript-easy-to-understand-solution",
                "content": "Runtime: 90 ms, faster than 92.90% of JavaScript online submissions for Ransom Note.\\nMemory Usage: 45.8 MB, less than 43.76% of JavaScript online submissions for Ransom Note.\\n\\n```\\nvar canConstruct = function(ransomNote, magazine) {\\n    const v = magazine.split(\\'\\'); //array of letters from magazine\\n    \\n    for(let i = 0; i < ransomNote.length; i++){\\n        if(!v.includes(ransomNote[i])){ //if array doesnt have current letter, return false\\n            return false\\n        }\\n        \\n        const index = v.indexOf(ransomNote[i])\\n        v.splice(index,1) //if array does include, then we remove that element from the array so it cant be used twice\\n    }\\n    return true\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar canConstruct = function(ransomNote, magazine) {\\n    const v = magazine.split(\\'\\'); //array of letters from magazine\\n    \\n    for(let i = 0; i < ransomNote.length; i++){\\n        if(!v.includes(ransomNote[i])){ //if array doesnt have current letter, return false\\n            return false\\n        }\\n        \\n        const index = v.indexOf(ransomNote[i])\\n        v.splice(index,1) //if array does include, then we remove that element from the array so it cant be used twice\\n    }\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2476434,
                "title": "3-different-solutions-read-to-learn-explained",
                "content": "The last solution is interesting, I always try to add a solution outside the box :).\\n\\nIf you found the post helpful, please upvote so it motivates me to write more of them!.\\n\\n<hr />\\n\\n# Frequency Count\\n\\nThe idea is to count how many times each character occurs in `magazine` and `ransomNote`.\\n\\nThen iterate over `character, times` of ransomNote and check whether all the characters are existent in magazine (the string that we build from), and occur enough times.\\n\\nBasically if we had `\\'aa\\'` in ransomNote and `\\'a\\'` in magazine it won\\'t be enough because we need **at least** 2 a\\'s.\\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransom_counter = Counter(ransomNote)\\n        magazine_counter = Counter(magazine)\\n        \\n        for key, times in ransom_counter.items():\\n            if key not in magazine_counter: return False\\n            if magazine_counter[key] < times: return False\\n        return True\\n```\\n\\n# Another frequency count\\nbecause the characters are comprised from lower case English letters, we can count the occurrences into a 26 length array.\\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransom_counter = [0] * 26\\n        magazine_counter = [0] * 26\\n        \\n        for c in ransomNote:\\n            ransom_counter[ord(c) - ord(\\'a\\')] += 1\\n            \\n        for c in magazine:\\n            magazine_counter[ord(c) - ord(\\'a\\')] += 1\\n            \\n        for alphabet in range(26):\\n            if magazine_counter[alphabet] < ransom_counter[alphabet]:\\n                return False\\n        \\n        return True\\n```\\n\\n# Sorting, two pointer - lexicographical traversal\\nThere is another way to go about this question.\\n\\nWe can sort both the strings lexicographically. Take for example:\\nransomNote: `\"bdc\"`\\nmagazine: `\"ccabd\"`\\n\\nAfter sorting it becomes:\\nransomNote: `bcd`\\nmagazine: `abccd`\\n\\nNow we can use a two pointer technique to check if there are enough characters in magazine to build ransomNote.\\n\\nThere could be few states in the two pointers:\\n1. magazine points to a character which is smaller lexicographically than the pointer in ransomNote, so we simply move magazine pointer forward. In the previous example, `a` is redundant.\\n2. After we \"caught up\" with magazine pointer, we must point on both strings to the same character. If we don\\'t it means that the character doesn\\'t exist in magazine = return false.\\n3. If we do point to the same characters, increment both pointers.\\n\\nIn the end you must check whether the pointer for ransomNote reached the end, a condition where it doesn\\'t can happen where you exhaust magazine characters first. For example: ransomNote = `aaaa` and magazine = `aa`\\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote_arr = sorted([*ransomNote])\\n        mag_arr = sorted([*magazine])\\n        \\n        n, m = len(ransomNote_arr), len(mag_arr)\\n        i = j = 0\\n        \\n        while i < n and j < m:\\n            while j+1 < m and mag_arr[j] < ransomNote_arr[i]:\\n                j += 1\\n            \\n            if ransomNote_arr[i] != mag_arr[j]:\\n                return False\\n            \\n            i += 1\\n            j += 1\\n        \\n        # We can exhaust magazine without building the whole ransomNote, hence we check if we arrived to end\\n        return i == n\\n```\\n\\n# More food for thought\\n\\n* You could optimize the hashmap solution by using 1 hashmap. One iteration counts the magazine character occurrences, while the second iteration decrements from that counter the amount of times the keys occurred in ransomNote.\\n\\n<hr />\\n\\nHave a great and productive day!",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransom_counter = Counter(ransomNote)\\n        magazine_counter = Counter(magazine)\\n        \\n        for key, times in ransom_counter.items():\\n            if key not in magazine_counter: return False\\n            if magazine_counter[key] < times: return False\\n        return True\\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransom_counter = [0] * 26\\n        magazine_counter = [0] * 26\\n        \\n        for c in ransomNote:\\n            ransom_counter[ord(c) - ord(\\'a\\')] += 1\\n            \\n        for c in magazine:\\n            magazine_counter[ord(c) - ord(\\'a\\')] += 1\\n            \\n        for alphabet in range(26):\\n            if magazine_counter[alphabet] < ransom_counter[alphabet]:\\n                return False\\n        \\n        return True\\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote_arr = sorted([*ransomNote])\\n        mag_arr = sorted([*magazine])\\n        \\n        n, m = len(ransomNote_arr), len(mag_arr)\\n        i = j = 0\\n        \\n        while i < n and j < m:\\n            while j+1 < m and mag_arr[j] < ransomNote_arr[i]:\\n                j += 1\\n            \\n            if ransomNote_arr[i] != mag_arr[j]:\\n                return False\\n            \\n            i += 1\\n            j += 1\\n        \\n        # We can exhaust magazine without building the whole ransomNote, hence we check if we arrived to end\\n        return i == n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2079143,
                "title": "ruby-single-line-solution",
                "content": "```\\n# @param {String} ransom_note\\n# @param {String} magazine\\n# @return {Boolean}\\ndef can_construct(ransom_note, magazine)\\n  ransom_note.chars.uniq.all? { |character| ransom_note.count(character) <= magazine.count(character) }\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} ransom_note\\n# @param {String} magazine\\n# @return {Boolean}\\ndef can_construct(ransom_note, magazine)\\n  ransom_note.chars.uniq.all? { |character| ransom_note.count(character) <= magazine.count(character) }\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1077431,
                "title": "java-straigh-forward-solution",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] ch = new int[26];\\n        for (char c : magazine.toCharArray())\\n            ch[c-\\'a\\']++;\\n        \\n        for (char c : ransomNote.toCharArray()){\\n            int index = c-\\'a\\';\\n            if (ch[index] == 0) return false;\\n            ch[index]--;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] ch = new int[26];\\n        for (char c : magazine.toCharArray())\\n            ch[c-\\'a\\']++;\\n        \\n        for (char c : ransomNote.toCharArray()){\\n            int index = c-\\'a\\';\\n            if (ch[index] == 0) return false;\\n            ch[index]--;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 610510,
                "title": "c-3-lines-o-m-n-time-o-1-space-unordered-map",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct( string ransomNote, string magazine ) {\\n        unordered_map<char, int> magazineLetterFreq;\\n        for( auto c : magazine )  magazineLetterFreq[c]++;\\n        for( auto c : ransomNote )  if( --magazineLetterFreq[c] < 0 ) return false;\\n        return true;\\n    }\\n};\\n```\\nSpace Complexity: O(1)\\nThe simple reason for this is only lower case characters are allowed so there can be maximum 26 entries irrespective of length of string.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct( string ransomNote, string magazine ) {\\n        unordered_map<char, int> magazineLetterFreq;\\n        for( auto c : magazine )  magazineLetterFreq[c]++;\\n        for( auto c : ransomNote )  if( --magazineLetterFreq[c] < 0 ) return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3477828,
                "title": "c-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ran, string mag) {\\n        sort(ran.begin(), ran.end());\\n        sort(mag.begin(), mag.end());\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while(j < mag.size()) {\\n            if(ran[i] == mag[j]) {\\n                count++;\\n                i++;\\n                j++;\\n            }\\n            else j++;\\n        }\\n        return count == ran.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ran, string mag) {\\n        sort(ran.begin(), ran.end());\\n        sort(mag.begin(), mag.end());\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while(j < mag.size()) {\\n            if(ran[i] == mag[j]) {\\n                count++;\\n                i++;\\n                j++;\\n            }\\n            else j++;\\n        }\\n        return count == ran.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2707491,
                "title": "rust-solution-using-hashmap-s-entry-api",
                "content": "```\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        \\n\\t\\tlet mut dict = std::collections::HashMap::new();\\n        \\n        for c in magazine.chars() {\\n            dict.entry(c).and_modify(|count| *count += 1).or_insert(1);\\n        }\\n        \\n        for c in ransom_note.chars() {\\n            match dict.get_mut(&c) {\\n                Some(n) if *n > 0 => { *n -= 1; }\\n                _ => { return false; }\\n            }\\n        }\\n        \\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        \\n\\t\\tlet mut dict = std::collections::HashMap::new();\\n        \\n        for c in magazine.chars() {\\n            dict.entry(c).and_modify(|count| *count += 1).or_insert(1);\\n        }\\n        \\n        for c in ransom_note.chars() {\\n            match dict.get_mut(&c) {\\n                Some(n) if *n > 0 => { *n -= 1; }\\n                _ => { return false; }\\n            }\\n        }\\n        \\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2475870,
                "title": "c-easy-solution-of-only-three-for-loops",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char,int>m;\\n        for(auto ch:magazine)\\n            m[ch]++;\\n        \\n        for(auto ch:ransomNote)\\n            m[ch]--;\\n        \\n        for(auto it:m)\\n            if(it.second<0)\\n                return false;\\n        return true;\\n    }\\n};\\n```\\n# **Please share and Upvote**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char,int>m;\\n        for(auto ch:magazine)\\n            m[ch]++;\\n        \\n        for(auto ch:ransomNote)\\n            m[ch]--;\\n        \\n        for(auto it:m)\\n            if(it.second<0)\\n                return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2329822,
                "title": "c-2ms-solution-explained-faster-than-98",
                "content": "```\\nbool canConstruct(char * ransomNote, char * magazine){\\n    \\n    // create a map to store the frequency of char in ransomNote\\n    int map[26] = {0};\\n    \\n    // check what is in ransomNote and magazine\\n    while(*ransomNote){\\n        map[*ransomNote - \\'a\\']++;\\n        ransomNote++;\\n    }\\n    while(*magazine){\\n        map[*magazine - \\'a\\']--;\\n        magazine++;\\n    }\\n    \\n    // check if frequency of any char in ransomNote is greater than in magazine\\n    for(int i=0; i < 26; i++)\\n        if (map[i] > 0) return false;\\n    return true;\\n}\\n```\\nPlease UPVOTE if you like!!!\\nTHX",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool canConstruct(char * ransomNote, char * magazine){\\n    \\n    // create a map to store the frequency of char in ransomNote\\n    int map[26] = {0};\\n    \\n    // check what is in ransomNote and magazine\\n    while(*ransomNote){\\n        map[*ransomNote - \\'a\\']++;\\n        ransomNote++;\\n    }\\n    while(*magazine){\\n        map[*magazine - \\'a\\']--;\\n        magazine++;\\n    }\\n    \\n    // check if frequency of any char in ransomNote is greater than in magazine\\n    for(int i=0; i < 26; i++)\\n        if (map[i] > 0) return false;\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1401464,
                "title": "golang-time-o-n-space-o-1",
                "content": "```\\nfunc canConstruct(ransomNote string, magazine string) bool {\\n    counts := [26]int{}\\n    for i := 0; i < len(magazine); i++ {\\n        counts[magazine[i]-\\'a\\']++\\n    }\\n    for i := 0; i < len(ransomNote); i++ {\\n        counts[ransomNote[i]-\\'a\\']--\\n        if counts[ransomNote[i]-\\'a\\'] < 0 {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc canConstruct(ransomNote string, magazine string) bool {\\n    counts := [26]int{}\\n    for i := 0; i < len(magazine); i++ {\\n        counts[magazine[i]-\\'a\\']++\\n    }\\n    for i := 0; i < len(ransomNote); i++ {\\n        counts[ransomNote[i]-\\'a\\']--\\n        if counts[ransomNote[i]-\\'a\\'] < 0 {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3598430,
                "title": "java-solution-with-step-by-step-explanation-beats-99",
                "content": "# Approach\\nThe given code is a Java implementation of a method called `canConstruct`, which checks whether a ransom note can be constructed from a given string called magazine. The method takes two strings as input: `ransomNote` representing the ransom note and `magazine` representing the available magazine text.\\n\\nLet\\'s go through the code step by step:\\n\\n1. `if (ransomNote.length() > magazine.length()) return false;`\\n   - This line checks if the length of the `ransomNote` is greater than the length of the `magazine`. If it is, it means that there are not enough characters in the magazine to construct the ransom note, so the method returns `false`.\\n\\n2. `int[] alphabets = new int[26];`\\n   - This line declares and initializes an integer array called `alphabets` with a length of 26. This array will be used to count the occurrence of each character in the magazine.\\n\\n3. `for (char c : magazine.toCharArray()) alphabets[c-\\'a\\']++;`\\n   - This line iterates over each character `c` in the `magazine` string. The `toCharArray()` method converts the string into an array of characters.\\n   - For each character, it increments the corresponding index in the `alphabets` array. It uses `c-\\'a\\'` to calculate the index, where `c` represents the character and `\\'a\\'` represents the ASCII value of the lowercase letter \\'a\\'. This way, the characters \\'a\\' to \\'z\\' will be mapped to indices 0 to 25.\\n\\n4. `for (char c : ransomNote.toCharArray()) {`\\n   - This line starts a loop that iterates over each character `c` in the `ransomNote` string.\\n\\n5. `if (alphabets[c-\\'a\\'] == 0) return false;`\\n   - This line checks if the count of the character `c` in the `alphabets` array is zero. If it is, it means that there are not enough occurrences of this character in the magazine to construct the ransom note. In this case, the method returns `false`.\\n\\n6. `alphabets[c-\\'a\\']--;`\\n   - This line decreases the count of the character `c` in the `alphabets` array by one. It represents using one occurrence of this character from the magazine to construct the ransom note.\\n\\n7. Finally, if the code reaches this point without returning `false`, it means that all characters in the ransom note can be constructed using the available characters in the magazine. Hence, the method returns `true`.\\n\\nThe overall logic of the code is to count the occurrences of each character in the magazine using an array. Then, for each character in the ransom note, it checks if there are enough occurrences in the magazine to construct the note. If there is any character missing, it returns `false`. Otherwise, it returns `true` at the end.\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        if (ransomNote.length() > magazine.length()) return false;\\n        int[] alphabets = new int[26];\\n        \\n        for(char c:magazine.toCharArray()){\\n            alphabets[c-\\'a\\']++;\\n        }\\n        for(char c:ransomNote.toCharArray()){\\n            if( alphabets[c-\\'a\\']==0 ) return false;\\n            alphabets[c-\\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```\\nPlease upvote if you like the solution.\\nHappy Coding! \\uD83D\\uDE0A",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        if (ransomNote.length() > magazine.length()) return false;\\n        int[] alphabets = new int[26];\\n        \\n        for(char c:magazine.toCharArray()){\\n            alphabets[c-\\'a\\']++;\\n        }\\n        for(char c:ransomNote.toCharArray()){\\n            if( alphabets[c-\\'a\\']==0 ) return false;\\n            alphabets[c-\\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3307714,
                "title": "java-solution-using-hashmap",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        HashMap<Character, Integer> result = new HashMap<>();\\n        for(char c : ransomNote.toCharArray()){\\n            result.put(c,result.getOrDefault(c,0)+1);\\n        }\\n        for(char c : magazine.toCharArray()){\\n            if(result.containsKey(c)){\\n                result.put(c,result.getOrDefault(c,0)-1);\\n            }\\n        }\\n        for(int val : result.values()){\\n            if(val > 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        HashMap<Character, Integer> result = new HashMap<>();\\n        for(char c : ransomNote.toCharArray()){\\n            result.put(c,result.getOrDefault(c,0)+1);\\n        }\\n        for(char c : magazine.toCharArray()){\\n            if(result.containsKey(c)){\\n                result.put(c,result.getOrDefault(c,0)-1);\\n            }\\n        }\\n        for(int val : result.values()){\\n            if(val > 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3199329,
                "title": "c-hashmap-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- HashMap\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Initialize two variables m and n to the lengths of ransomNote and magazine strings, respectively.\\n\\n- Create an empty unordered_map called mpp to keep track of the frequency of each character in the ransomNote string.\\n\\n- Loop through each character in the ransomNote string and increment the frequency of the character in the mpp map.\\n\\n- Loop through each character in the magazine string and decrement the frequency of the character in the mpp map.\\n\\n- Finally, loop through each key-value pair in the mpp map. If the frequency of a character in the mpp map is greater than 0, then it means that there are not enough characters in the magazine string to construct the ransomNote string, and we return false. Otherwise, if we reach the end of the loop, it means that we have enough characters in the magazine string to construct the ransomNote string, and we return true.\\n\\n# Complexity\\nTime complexity: O(m + n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- The time complexity of this function is O(m+n), where m and n are the lengths of the ransomNote and magazine strings, respectively. This is because we iterate through each character in both strings exactly once, and map lookup and insert operations take constant time on average.\\n\\nSpace complexity: O(m)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- The space complexity of the given code is O(m), where m is the length of the ransomNote string. This is because we create an unordered map called mpp to keep track of the frequency of each character in the ransomNote string. The size of the map will be equal to the number of distinct characters in the ransomNote string, which is at most m. Therefore, the space complexity of the function is proportional to the size of the mpp map, which is O(m).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) \\n    {\\n        int m = ransomNote.size();\\n        int n = magazine.size();\\n\\n        unordered_map <char, int> mpp;\\n        for(int i = 0; i < m; i++)\\n            mpp[ransomNote[i]]++;\\n\\n        for(int i = 0; i < n; i++)\\n            mpp[magazine[i]]--;\\n\\n        for(auto x: mpp)\\n        {\\n            if(x.second > 0)\\n                return false;\\n        }\\n        return true;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) \\n    {\\n        int m = ransomNote.size();\\n        int n = magazine.size();\\n\\n        unordered_map <char, int> mpp;\\n        for(int i = 0; i < m; i++)\\n            mpp[ransomNote[i]]++;\\n\\n        for(int i = 0; i < n; i++)\\n            mpp[magazine[i]]--;\\n\\n        for(auto x: mpp)\\n        {\\n            if(x.second > 0)\\n                return false;\\n        }\\n        return true;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114979,
                "title": "python3-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse dictionary to hash both string. Check is char of ransomNote present of not and frequency is more of less.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nhash both string (I used Counter method from collection module). loop thorugh the ransomNote string hashed table and check is key present in magazine hash table, if not return False else check again frequency of char in magazine is less than ransomNote if so, return False. return True at the end of the loop\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        d1 = Counter(ransomNote)\\n        d2 = Counter(magazine)\\n\\n        for key, val in d1.items():\\n            if key not in d2:\\n                return False\\n            else:\\n                if d2[key] < val:\\n                    return False\\n\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        d1 = Counter(ransomNote)\\n        d2 = Counter(magazine)\\n\\n        for key, val in d1.items():\\n            if key not in d2:\\n                return False\\n            else:\\n                if d2[key] < val:\\n                    return False\\n\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2671667,
                "title": "python-solution-clean-code-with-full-comments-93-55-space",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        dict_1 = from_str_to_dict(ransomNote)\\n        dict_2 = from_str_to_dict(magazine)\\n        \\n        return check_compatibility(dict_1, dict_2)\\n    \\n# Define helper method that checks if to dictionaries have keys in common, and \\n# if the ransomNote needs more letters then what the magazine can provide.\\n\\ndef check_compatibility(dict_1, dict_2):\\n    \\n    # Check for common keys.\\n    for key in list(dict_1.keys()):\\n        \\n        if not key in dict_2:\\n            \\n            return False\\n        \\n        # Check for valid quantity.\\n        if dict_1[key] > dict_2[key]:\\n            \\n            return False\\n        \\n    return True\\n\\n# Convert a string into a dictionary.\\n\\ndef from_str_to_dict(string: str):\\n    \\n    dic = {}\\n    \\n    for i in string:\\n        \\n        if i in dic:\\n            \\n            dic[i] += 1\\n            \\n        else:\\n            \\n            dic[i] = 1\\n            \\n    return dic        \\n\\n# Runtime: 134 ms, faster than 24.02% of Python3 online submissions for Ransom Note.\\n# Memory Usage: 14.1 MB, less than 93.55% of Python3 online submissions for Ransom Note.\\n\\n# If you like my work and found it helpful, then I\\'ll appreciate a like. Thanks!\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        dict_1 = from_str_to_dict(ransomNote)\\n        dict_2 = from_str_to_dict(magazine)\\n        \\n        return check_compatibility(dict_1, dict_2)\\n    \\n# Define helper method that checks if to dictionaries have keys in common, and \\n# if the ransomNote needs more letters then what the magazine can provide.\\n\\ndef check_compatibility(dict_1, dict_2):\\n    \\n    # Check for common keys.\\n    for key in list(dict_1.keys()):\\n        \\n        if not key in dict_2:\\n            \\n            return False\\n        \\n        # Check for valid quantity.\\n        if dict_1[key] > dict_2[key]:\\n            \\n            return False\\n        \\n    return True\\n\\n# Convert a string into a dictionary.\\n\\ndef from_str_to_dict(string: str):\\n    \\n    dic = {}\\n    \\n    for i in string:\\n        \\n        if i in dic:\\n            \\n            dic[i] += 1\\n            \\n        else:\\n            \\n            dic[i] = 1\\n            \\n    return dic        \\n\\n# Runtime: 134 ms, faster than 24.02% of Python3 online submissions for Ransom Note.\\n# Memory Usage: 14.1 MB, less than 93.55% of Python3 online submissions for Ransom Note.\\n\\n# If you like my work and found it helpful, then I\\'ll appreciate a like. Thanks!\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2359975,
                "title": "python-one-line-solution",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return Counter(ransomNote)-Counter(magazine)=={}\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return Counter(ransomNote)-Counter(magazine)=={}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2329773,
                "title": "python-explained-easy-dict-solution-faster-than-90-ransom-note",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        #check if some words in magazine matches ransomNote\\n        if ransomNote in magazine:\\n            return True\\n        \\n        #create a dictionary to store the frequency of char in ransomNote\\n        chars = dict()\\n        \\n        #write done how many times each char appears\\n        for i in ransomNote:\\n            if i in chars:\\n                chars[i] += 1\\n            else:\\n                chars[i] = 0\\n                \\n        #check if frequency of each char in magazine is more than in ransomNote\\n        for i in chars:\\n            if magazine.count(i) <= chars[i]: \\n                return False\\n            \\n        return True\\n```\\nPlease UPVOTE if you like !!!\\nTHX",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        #check if some words in magazine matches ransomNote\\n        if ransomNote in magazine:\\n            return True\\n        \\n        #create a dictionary to store the frequency of char in ransomNote\\n        chars = dict()\\n        \\n        #write done how many times each char appears\\n        for i in ransomNote:\\n            if i in chars:\\n                chars[i] += 1\\n            else:\\n                chars[i] = 0\\n                \\n        #check if frequency of each char in magazine is more than in ransomNote\\n        for i in chars:\\n            if magazine.count(i) <= chars[i]: \\n                return False\\n            \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2301977,
                "title": "swift-solution-95",
                "content": "```\\nvar magazine = magazine\\n\\nfor character in ransomNote {\\n\\tif let index = magazine.firstIndex(of: character) {\\n\\t\\tmagazine.remove(at: index)\\n\\t} else {\\n\\t\\treturn false\\n\\t}\\n}\\nreturn true\\n```",
                "solutionTags": [],
                "code": "```\\nvar magazine = magazine\\n\\nfor character in ransomNote {\\n\\tif let index = magazine.firstIndex(of: character) {\\n\\t\\tmagazine.remove(at: index)\\n\\t} else {\\n\\t\\treturn false\\n\\t}\\n}\\nreturn true\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1894432,
                "title": "php-solution-at-o-n-m-time-o-1-space-with-runtime-16-ms-19-4-mb-memory",
                "content": "O(N+M) time complexity (N = ransomNode length, M = magazine length).\\nO(1) space complexity (auxiliary associative array (as map) of M size but maximum 26).\\n\\nThe solution idea is to slice the magazine string to single symbols and put it into the casket with separate cells for each letter. If in magazine string the symbol repeats twice, thrice etc., into the letter\\'s cell places two, three etc. the symbol instances. This casket will be typesetting base for the ransomNote string. Further the ransomNote is typed letter-by-letter: the required symbol is extracted from the letter\\'s cell of the casket if it instance is there. An empty letter\\'s cell in the case when the this symbol is needed to type indicates that the ransomNote can not be construced.\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $ransomNote\\n     * @param String $magazine\\n     * @return Boolean\\n     */\\n    function canConstruct($ransomNote, $magazine) {\\n\\t\\n        // An empty array will be indexed by magazine symbols set mapped to its frequency.\\n\\t\\t// key = symbol, value = symbol\\'s frequency in magazine string.\\n\\t\\t// The casket size is the size of the magazine string unique symbols set,\\n\\t\\t// but maximum 26 lowercase English letters.\\n\\t\\t\\n\\t\\t$casket = [];\\n        \\n\\t\\t// First pass with N iterations through the magazine string fills the casket\\'s cells.\\n\\t\\t// Reverse pass order for single string length calculation.\\n\\t\\t\\n        for ($i = strlen($magazine) - 1; $i >= 0 ; $i--) {\\n\\t\\t\\n\\t\\t    // $magazine[$i] is i-th symbol of the string and it is index (key) of the casket\\'s cell.\\n\\t\\t\\t\\n            $casket[$magazine[$i]]++;\\n        }\\n        \\n\\t\\t// Second pass with maximum M iterations (in case ransomNote can be constructed)\\n\\t\\t// through ransomNote string raids the casket\\'s cells. \\n\\t\\t// Reverse pass order for single string length calculation.\\n\\t\\t\\n        for ($j = strlen($ransomNote) - 1; $j >= 0 ; $j--) {\\n\\t\\t\\n\\t\\t    // The emptiness the letter\\'s cell of the casket (in case of a lack of the required to\\n\\t\\t\\t// type symbol) causes the early breaking of the iteration and the return of a\\n\\t\\t\\t// negative result. Decrement is performed after checking!\\n\\t\\t\\t\\n            if ($casket[$ransomNote[$j]]-- == 0) return false;\\n        }\\n        \\n\\t\\t// The string has successfully typed (typesetting symbols were presented enough).\\n        return true;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $ransomNote\\n     * @param String $magazine\\n     * @return Boolean\\n     */\\n    function canConstruct($ransomNote, $magazine) {\\n\\t\\n        // An empty array will be indexed by magazine symbols set mapped to its frequency.\\n\\t\\t// key = symbol, value = symbol\\'s frequency in magazine string.\\n\\t\\t// The casket size is the size of the magazine string unique symbols set,\\n\\t\\t// but maximum 26 lowercase English letters.\\n\\t\\t\\n\\t\\t$casket = [];\\n        \\n\\t\\t// First pass with N iterations through the magazine string fills the casket\\'s cells.\\n\\t\\t// Reverse pass order for single string length calculation.\\n\\t\\t\\n        for ($i = strlen($magazine) - 1; $i >= 0 ; $i--) {\\n\\t\\t\\n\\t\\t    // $magazine[$i] is i-th symbol of the string and it is index (key) of the casket\\'s cell.\\n\\t\\t\\t\\n            $casket[$magazine[$i]]++;\\n        }\\n        \\n\\t\\t// Second pass with maximum M iterations (in case ransomNote can be constructed)\\n\\t\\t// through ransomNote string raids the casket\\'s cells. \\n\\t\\t// Reverse pass order for single string length calculation.\\n\\t\\t\\n        for ($j = strlen($ransomNote) - 1; $j >= 0 ; $j--) {\\n\\t\\t\\n\\t\\t    // The emptiness the letter\\'s cell of the casket (in case of a lack of the required to\\n\\t\\t\\t// type symbol) causes the early breaking of the iteration and the return of a\\n\\t\\t\\t// negative result. Decrement is performed after checking!\\n\\t\\t\\t\\n            if ($casket[$ransomNote[$j]]-- == 0) return false;\\n        }\\n        \\n\\t\\t// The string has successfully typed (typesetting symbols were presented enough).\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1755494,
                "title": "c-simple",
                "content": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        ArrayList arrayList = new ArrayList(ransomNote.ToCharArray());\\n        for(int i=0;i< magazine.Length; i++)\\n        {\\n            arrayList.Remove(magazine[i]);\\n        }\\n        return arrayList.Count == 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        ArrayList arrayList = new ArrayList(ransomNote.ToCharArray());\\n        for(int i=0;i< magazine.Length; i++)\\n        {\\n            arrayList.Remove(magazine[i]);\\n        }\\n        return arrayList.Count == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1599559,
                "title": "clean-python-code-faster-than-94",
                "content": "\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        a = set(ransomNote) \\n        for i in a: \\n            if magazine.count(i) < ransomNote.count(i): \\n                return False \\n        return True \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        a = set(ransomNote) \\n        for i in a: \\n            if magazine.count(i) < ransomNote.count(i): \\n                return False \\n        return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 610436,
                "title": "rust-easy-solution-clean-code",
                "content": "```Rust\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        let needed = find_letter_occurences(&ransom_note);\\n        let available = find_letter_occurences(&magazine);\\n\\n        needed.iter().zip(available.iter()).all(|(a, b)| a <= b)\\n    }\\n}\\n\\nfn find_letter_occurences(s: &str) -> [i32; 26] {\\n    s.bytes().fold([0; 26], |mut acc, chr| {\\n        let current = chr - b\\'a\\';\\n        acc[current as usize] += 1;\\n        acc\\n    })\\n}\\n```",
                "solutionTags": [],
                "code": "```Rust\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        let needed = find_letter_occurences(&ransom_note);\\n        let available = find_letter_occurences(&magazine);\\n\\n        needed.iter().zip(available.iter()).all(|(a, b)| a <= b)\\n    }\\n}\\n\\nfn find_letter_occurences(s: &str) -> [i32; 26] {\\n    s.bytes().fold([0; 26], |mut acc, chr| {\\n        let current = chr - b\\'a\\';\\n        acc[current as usize] += 1;\\n        acc\\n    })\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 573185,
                "title": "runtime-100-one-line-python3",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return all(ransomNote.count(letter) <= magazine.count(letter) for letter in set(ransomNote))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return all(ransomNote.count(letter) <= magazine.count(letter) for letter in set(ransomNote))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85916,
                "title": "6-lines-32ms-c-clean-solution",
                "content": "```\\nbool canConstruct(string ransomNote, string magazine) {\\n        vector<int> magazLetters(128, 0);\\n        for(char m : magazine)\\n            magazLetters[m]++;\\n        for(char r : ransomNote)\\n            if(--magazLetters[r]<0) return false;\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nbool canConstruct(string ransomNote, string magazine) {\\n        vector<int> magazLetters(128, 0);\\n        for(char m : magazine)\\n            magazLetters[m]++;\\n        for(char r : ransomNote)\\n            if(--magazLetters[r]<0) return false;\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2915759,
                "title": "c-simple-solution-with-dictionary",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        Dictionary<char,int> letters = new Dictionary<char,int>();\\n        foreach(char letter in magazine){\\n            if(letters.ContainsKey(letter)){\\n                letters[letter] += 1;\\n            }else{\\n                letters[letter] = 1;\\n            }\\n        }\\n        foreach(char c in ransomNote){\\n            if(letters.ContainsKey(c) && letters[c] > 0){\\n                letters[c] -= 1;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        Dictionary<char,int> letters = new Dictionary<char,int>();\\n        foreach(char letter in magazine){\\n            if(letters.ContainsKey(letter)){\\n                letters[letter] += 1;\\n            }else{\\n                letters[letter] = 1;\\n            }\\n        }\\n        foreach(char c in ransomNote){\\n            if(letters.ContainsKey(c) && letters[c] > 0){\\n                letters[c] -= 1;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2707465,
                "title": "fast-solving-javascript-solution",
                "content": "Hello, everybody!\\nThis solution shows itself faster 90% then others.\\n```\\nvar canConstruct = function(ransomNote, magazine) {\\n    const vocab = {};\\n    \\n    for (let i = 0; i < magazine.length; i++) {\\n        const char = magazine[i];\\n        vocab[char] ? vocab[magazine[i]]++ : vocab[magazine[i]] = 1;\\n    }\\n    \\n    for (let i = 0; i < ransomNote.length; i++) {\\n        const char = ransomNote[i];\\n        if (vocab[char] === 0 || !vocab[char]) {\\n            return false;\\n        }\\n        vocab[char]--;\\n    }\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar canConstruct = function(ransomNote, magazine) {\\n    const vocab = {};\\n    \\n    for (let i = 0; i < magazine.length; i++) {\\n        const char = magazine[i];\\n        vocab[char] ? vocab[magazine[i]]++ : vocab[magazine[i]] = 1;\\n    }\\n    \\n    for (let i = 0; i < ransomNote.length; i++) {\\n        const char = ransomNote[i];\\n        if (vocab[char] === 0 || !vocab[char]) {\\n            return false;\\n        }\\n        vocab[char]--;\\n    }\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2477376,
                "title": "c-frequency-count-single-map-two-loops-easy-to-understand-fast",
                "content": "We could use a ```unordered_map``` or a ```vector```, but an ```array``` has the least overhead here. While at it we can also use ```const string&``` for the parameters instead of ```string``` to avoid any copies.\\n\\nInstead of ```array<int, 128>``` we could use ```array<int, 26>``` since we only have lower case letters, but with ```array<int, 128>``` the code is a bit more generic and we avoid doing something like ```ch - \\'a\\'```. Performance wise this likely doesn\\'t really matter.\\n\\n```\\n    bool canConstruct(const string& ransomNote, const string& magazine) {\\n        array<int, 128> count = {};\\n        for (char ch : magazine) ++count[ch];\\n        for (char ch : ransomNote) {\\n\\t\\t    // If no |ch|\\'s are left we can not create the ransom note.\\n            if (!count[ch]--) return false;\\n        }\\n        return true;\\n    }\\n```\\n\\nTime: ```O(n)``` we read each character at most once.\\nSpace: ```O(1)``` we need ```128 * sizeof(int)``` regardless of the size of the input.",
                "solutionTags": [
                    "C"
                ],
                "code": "```unordered_map```\n```vector```\n```array```\n```const string&```\n```string```\n```array<int, 128>```\n```array<int, 26>```\n```array<int, 128>```\n```ch - \\'a\\'```\n```\\n    bool canConstruct(const string& ransomNote, const string& magazine) {\\n        array<int, 128> count = {};\\n        for (char ch : magazine) ++count[ch];\\n        for (char ch : ransomNote) {\\n\\t\\t    // If no |ch|\\'s are left we can not create the ransom note.\\n            if (!count[ch]--) return false;\\n        }\\n        return true;\\n    }\\n```\n```O(n)```\n```O(1)```\n```128 * sizeof(int)```",
                "codeTag": "Unknown"
            },
            {
                "id": 2477351,
                "title": "python-elegant-short-99-15-faster-counter-one-line",
                "content": "```\\ndef canConstruct(self, ransom_note: str, magazine: str) -> bool:\\n\\treturn not Counter(ransom_note) - Counter(magazine)\\n```\\n\\n![image](https://assets.leetcode.com/users/images/a7d90b37-42e6-4d28-a36d-9a6f56f45bd7_1661414174.4193244.png)\\n\\nIf you like this solution remember to **upvote it** to let me know.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef canConstruct(self, ransom_note: str, magazine: str) -> bool:\\n\\treturn not Counter(ransom_note) - Counter(magazine)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2476489,
                "title": "javascript-simple-in-place-solution-with-constant-space",
                "content": "```\\nfunction canConstruct(ransomNote, magazine) {\\n    if(ransomNote.length > magazine.length) {\\n        return false;\\n    }\\n\\n    let magazineCopy = magazine;\\n\\n    for (const character of ransomNote) {\\n        if(magazineCopy.indexOf(character) !== -1) {\\n            magazineCopy = magazineCopy.replace(character, \"\");\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction canConstruct(ransomNote, magazine) {\\n    if(ransomNote.length > magazine.length) {\\n        return false;\\n    }\\n\\n    let magazineCopy = magazine;\\n\\n    for (const character of ransomNote) {\\n        if(magazineCopy.indexOf(character) !== -1) {\\n            magazineCopy = magazineCopy.replace(character, \"\");\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2462927,
                "title": "swift-index-removal-approach",
                "content": "![image](https://assets.leetcode.com/users/images/d7d7d783-6f4c-4c17-ae58-8e5e4efd82a3_1661158627.1874716.png)\\n\\n```\\nclass Solution {\\n    \\n    // Time Complexity: O(N)\\n    // Space Complexity: O(N)\\n    \\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\\n        var copyMagazine = magazine\\n        \\n        for ran in ransomNote {\\n            if let index = copyMagazine.firstIndex(of: ran) {\\n                copyMagazine.remove(at: index)\\n            } else {\\n                return false\\n            }\\n        }\\n        \\n        return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    \\n    // Time Complexity: O(N)\\n    // Space Complexity: O(N)\\n    \\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\\n        var copyMagazine = magazine\\n        \\n        for ran in ransomNote {\\n            if let index = copyMagazine.firstIndex(of: ran) {\\n                copyMagazine.remove(at: index)\\n            } else {\\n                return false\\n            }\\n        }\\n        \\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1936344,
                "title": "kotlin-beats-95-april-2022",
                "content": "\\n\\tclass Solution {\\n\\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\\n        val magazineArray = magazine.toCharArray().toMutableList()\\n        val noteArray = ransomNote.toCharArray()\\n        for (i in noteArray) {\\n            if (!magazineArray.remove(i)) {\\n                return false\\n            }\\n        }\\n        return true\\n    }\\n    }",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "class Solution {\\n\\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\\n        val magazineArray = magazine.toCharArray().toMutableList()\\n        val noteArray = ransomNote.toCharArray()\\n        for (i in noteArray) {\\n            if (!magazineArray.remove(i)) {\\n                return false\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1795410,
                "title": "c-383-ransom-note",
                "content": "```\\nbool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> umap;\\n        \\n        for(int i = 0; ransomNote[i]; i++) umap[ransomNote[i]]++;\\n        for(int i = 0; magazine[i]; i++) umap[magazine[i]]--;\\n        for(int i = 0; ransomNote[i]; i++){\\n            if(umap[ransomNote[i]] > 0) return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nbool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> umap;\\n        \\n        for(int i = 0; ransomNote[i]; i++) umap[ransomNote[i]]++;\\n        for(int i = 0; magazine[i]; i++) umap[magazine[i]]--;\\n        for(int i = 0; ransomNote[i]; i++){\\n            if(umap[ransomNote[i]] > 0) return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3083061,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing objects\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. map both strings\\' characters with their frequency of ocurrence into two different object - obj1 = for ransomNote, obj1=magazine\\n2. Then iterate through obj1 and check : \\n   - if any key in ransomNote is missing in magazine : if yes return false\\n   - if key is matching then check if frequecy of that key in       ransomNote should be less than or equal to that in magazine;\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n+m)$$\\n\\n# Code\\n```\\n/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    let obj1 = {}, obj2={};\\n    for(let i=0; i<=ransomNote.length-1; i++){\\n        if(obj1[ransomNote[i]]===undefined){\\n           obj1[ransomNote[i]]=1 \\n        } else {\\n            obj1[ransomNote[i]]++;\\n        }\\n    }\\n\\n    for(let i=0; i<=magazine.length-1; i++){\\n        if(obj2[magazine[i]]===undefined){\\n           obj2[magazine[i]]=1 \\n        } else {\\n            obj2[magazine[i]]++;\\n        }\\n    }\\n\\n    for(let key in obj1){\\n        if(obj2[key]===undefined || obj1[key] > obj2[key]){\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    let obj1 = {}, obj2={};\\n    for(let i=0; i<=ransomNote.length-1; i++){\\n        if(obj1[ransomNote[i]]===undefined){\\n           obj1[ransomNote[i]]=1 \\n        } else {\\n            obj1[ransomNote[i]]++;\\n        }\\n    }\\n\\n    for(let i=0; i<=magazine.length-1; i++){\\n        if(obj2[magazine[i]]===undefined){\\n           obj2[magazine[i]]=1 \\n        } else {\\n            obj2[magazine[i]]++;\\n        }\\n    }\\n\\n    for(let key in obj1){\\n        if(obj2[key]===undefined || obj1[key] > obj2[key]){\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2861997,
                "title": "java-2ms-99-time-95-memory-explained",
                "content": "Time: 99.39%\\nMemory: 95%\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean canConstruct(String r, String m) {\\n        int[] alph = new int[26];\\n        for (int i = 0; i < m.length(); i++) {\\n            alph[m.charAt(i) - \\'a\\']++;\\n        }\\n        for (int i = 0; i < r.length(); i++) {\\n            alph[r.charAt(i) - \\'a\\']--;\\n        }\\n        for (int n : alph) {\\n            if (n < 0) return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\nExplanation:\\n\\nI create array of ints with size 26 for all lowercase letters.\\nIn the first loop I count occurences of letters in the first string by incrementing corresponding int in array. For example, if the letter (char) is \\'b\\', then \\'b\\' - \\'a\\' is equal to 1. So, I increment value with index 1: array[1]++.\\nIn the second loop I do the same, but decrement for each letter.\\nIn the third loop I make sure that all values in array are >= 0. If yes, then the answer is true. If not, then the given strings are not valid.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String r, String m) {\\n        int[] alph = new int[26];\\n        for (int i = 0; i < m.length(); i++) {\\n            alph[m.charAt(i) - \\'a\\']++;\\n        }\\n        for (int i = 0; i < r.length(); i++) {\\n            alph[r.charAt(i) - \\'a\\']--;\\n        }\\n        for (int n : alph) {\\n            if (n < 0) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2768846,
                "title": "java-memory-usage-less-than-96-61-detailed-solution",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (char c : magazine.toCharArray()) map.merge(c, 1, Integer::sum);\\n\\n        for (char c : ransomNote.toCharArray()) {\\n            Integer count = map.get(c);\\n            if (count == null || count == 0) return false;\\n            map.replace(c, count - 1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (char c : magazine.toCharArray()) map.merge(c, 1, Integer::sum);\\n\\n        for (char c : ransomNote.toCharArray()) {\\n            Integer count = map.get(c);\\n            if (count == null || count == 0) return false;\\n            map.replace(c, count - 1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2669341,
                "title": "python-94-faster",
                "content": "```class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        x  =  set(ransomNote)\\n        x  =  list(x)\\n        for i in x :\\n            if magazine.count(i)  <  ransomNote.count(i):\\n                return False\\n        return True\\n\\t\\t\\n        \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        x  =  set(ransomNote)\\n        x  =  list(x)\\n        for i in x :\\n            if magazine.count(i)  <  ransomNote.count(i):\\n                return False\\n        return True\\n\\t\\t\\n        \\n",
                "codeTag": "Java"
            },
            {
                "id": 2476795,
                "title": "beginners-easy-to-understand-c-solution-beats-91-time-complexity-98-space-complexity",
                "content": "**STEPS**\\n\\n**step 1** : - We created an array of size 26 that is the size of alphabets and fill it with zeros.\\n\\n**step 2** : - Now we increment the position of char that are in magazine string \\n\\nfor ex : - magazine = \"aab\"\\n\\nwe take magazine[i] - 97 to convert char to int\\n\\nour arr will be : - arr[26] = {2, 1, 0, 0, 0.......}\\n\\n**step 3** : - now we decrement the position of char that are in the ransomNote string\\n\\nIf any char position == 0 then we return false because that char is either not present in magazine or has less amount of repetations than the ransomNote.\\n\\n**step 4** : - if everything goes smoothly return true\\n\\n**Please Upvote if it helps !! HAPPY CODING :)**\\n\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int arr[26] = {0};\\n        for(int i=0; i<magazine.size(); i++){\\n            arr[magazine[i] - 97]++;\\n        }\\n        for(int i=0; i<ransomNote.size(); i++){\\n            if(arr[ransomNote[i] - 97])\\n                arr[ransomNote[i] - 97]--;\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int arr[26] = {0};\\n        for(int i=0; i<magazine.size(); i++){\\n            arr[magazine[i] - 97]++;\\n        }\\n        for(int i=0; i<ransomNote.size(); i++){\\n            if(arr[ransomNote[i] - 97])\\n                arr[ransomNote[i] - 97]--;\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476322,
                "title": "java-space-o-1-easy-to-understand",
                "content": "```\\n\\n    //Runtime: 2 ms, faster than 99.48% of Java online submissions for Ransom Note.\\n    //Memory Usage: 43 MB, less than 87.14% of Java online submissions for Ransom Note.\\n    //new int[26];\\n    //Time: O(M+N); Space: O(1)\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] counter = new int[26];\\n        for (char c : magazine.toCharArray())\\n            counter[c - \\'a\\']++;\\n\\n        for (char c : ransomNote.toCharArray()){\\n            if (counter[c - \\'a\\'] == 0) return false;\\n            counter[c - \\'a\\']--;\\n        }\\n        return true;\\n    }\\n\\t\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n    //Runtime: 2 ms, faster than 99.48% of Java online submissions for Ransom Note.\\n    //Memory Usage: 43 MB, less than 87.14% of Java online submissions for Ransom Note.\\n    //new int[26];\\n    //Time: O(M+N); Space: O(1)\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] counter = new int[26];\\n        for (char c : magazine.toCharArray())\\n            counter[c - \\'a\\']++;\\n\\n        for (char c : ransomNote.toCharArray()){\\n            if (counter[c - \\'a\\'] == 0) return false;\\n            counter[c - \\'a\\']--;\\n        }\\n        return true;\\n    }\\n\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2475685,
                "title": "c-small-and-easy-solution-90-faster",
                "content": "```\\nbool canConstruct(string a, string b) \\n    {\\n        sort(a.begin(), a.end());\\n        sort(b.begin(), b.end());       \\n        int j=0;\\n        for(auto i : b)\\n        {\\n            if(i == a[j] && j < a.length()) j++;\\n        }\\n        return (j>=a.length);       \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool canConstruct(string a, string b) \\n    {\\n        sort(a.begin(), a.end());\\n        sort(b.begin(), b.end());       \\n        int j=0;\\n        for(auto i : b)\\n        {\\n            if(i == a[j] && j < a.length()) j++;\\n        }\\n        return (j>=a.length);       \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2244083,
                "title": "beginner-friendly-java-javascript-python-solution",
                "content": "**Time Complexity : O(n+m)**\\n**Java**\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int result[] = new int[26];\\n        for(char c: magazine.toCharArray()){\\n           result[c-\\'a\\']++;\\n        }\\n        for(char c: ransomNote.toCharArray()){\\n            if(--result[c-\\'a\\'] < 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n**JavaScript**\\n```\\nvar canConstruct = function(ransomNote, magazine) {\\n    let freq = new Array(26).fill(0)\\n    for(let c of magazine)    freq[c.charCodeAt(0)-97]++\\n    for(let c of ransomNote)\\n        if(--freq[c.charCodeAt(0)-97] < 0)\\n            return false\\n    return true\\n};\\n```\\n**Python**\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        freq = [0 for i in range(26)]\\n        for c in magazine:\\n            freq[ord(c)-97] += 1\\n        for c in ransomNote:\\n            freq[ord(c) - 97] -= 1\\n            if freq[ord(c)-97] < 0:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int result[] = new int[26];\\n        for(char c: magazine.toCharArray()){\\n           result[c-\\'a\\']++;\\n        }\\n        for(char c: ransomNote.toCharArray()){\\n            if(--result[c-\\'a\\'] < 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\nvar canConstruct = function(ransomNote, magazine) {\\n    let freq = new Array(26).fill(0)\\n    for(let c of magazine)    freq[c.charCodeAt(0)-97]++\\n    for(let c of ransomNote)\\n        if(--freq[c.charCodeAt(0)-97] < 0)\\n            return false\\n    return true\\n};\\n```\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        freq = [0 for i in range(26)]\\n        for c in magazine:\\n            freq[ord(c)-97] += 1\\n        for c in ransomNote:\\n            freq[ord(c) - 97] -= 1\\n            if freq[ord(c)-97] < 0:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2152548,
                "title": "kotlin-with-1-map",
                "content": "```\\nfun canConstruct(ransomNote: String, magazine: String): Boolean {\\n    val map = magazine.asSequence().groupingBy { it }.eachCount().toMutableMap()\\n    for (c in ransomNote) {\\n        val v = map[c] ?: 0\\n        if (v == 0) return false\\n        map[c] = v - 1\\n    }\\n    return true\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun canConstruct(ransomNote: String, magazine: String): Boolean {\\n    val map = magazine.asSequence().groupingBy { it }.eachCount().toMutableMap()\\n    for (c in ransomNote) {\\n        val v = map[c] ?: 0\\n        if (v == 0) return false\\n        map[c] = v - 1\\n    }\\n    return true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1958657,
                "title": "php",
                "content": "![image](https://assets.leetcode.com/users/images/752eb513-5fba-4aaa-9df7-384c2f61557e_1650235268.4992082.png)\\n```\\nclass Solution\\n{\\n\\n  /**\\n   * @param String $ransomNote\\n   * @param String $magazine\\n   * @return Boolean\\n   */\\n    public function canConstruct($ransomNote, $magazine)\\n    {\\n        $mag_count_bank = array_count_values(str_split($magazine));\\n\\n        $ran_counts = array_count_values(str_split($ransomNote));\\n\\n        foreach ($ran_counts as $char => $count) {\\n            if ($count > $mag_count_bank[$char]) {\\n                return false;\\n            }\\n        };\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "PHP"
                ],
                "code": "class Solution\\n{\\n\\n  /**\\n   * @param String $ransomNote\\n   * @param String $magazine\\n   * @return Boolean\\n   */\\n    public function canConstruct($ransomNote, $magazine)\\n    {\\n        $mag_count_bank = array_count_values(str_split($magazine));\\n\\n        $ran_counts = array_count_values(str_split($ransomNote));\\n\\n        foreach ($ran_counts as $char => $count) {\\n            if ($count > $mag_count_bank[$char]) {\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1764965,
                "title": "java-simple-approach-beats-95",
                "content": "## **Please upvote if you like the approach.**\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n       \\n        int ch[]=new int[26];\\n        \\n        for(int i=0;i<ransomNote.length();i++)\\n            ch[ransomNote.charAt(i)-\\'a\\']++;\\n        \\n        for(int i=0;i<magazine.length();i++)\\n            ch[magazine.charAt(i)-\\'a\\']--;\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n             if(ch[i]>0) return false;\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n       \\n        int ch[]=new int[26];\\n        \\n        for(int i=0;i<ransomNote.length();i++)\\n            ch[ransomNote.charAt(i)-\\'a\\']++;\\n        \\n        for(int i=0;i<magazine.length();i++)\\n            ch[magazine.charAt(i)-\\'a\\']--;\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n             if(ch[i]>0) return false;\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1734425,
                "title": "c-efficient-hashmap-easy-solution",
                "content": "#### If you understand the approach please please upvote!!!\\n**Happy coding**\\n***Thanks :)***\\n\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<magazine.size();i++){\\n            mp[magazine[i]]++;\\n        }\\n        for(int i=0;i<ransomNote.size();i++){\\n            if(mp[ransomNote[i]]>0){\\n                mp[ransomNote[i]]--;\\n            } \\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<magazine.size();i++){\\n            mp[magazine[i]]++;\\n        }\\n        for(int i=0;i<ransomNote.size();i++){\\n            if(mp[ransomNote[i]]>0){\\n                mp[ransomNote[i]]--;\\n            } \\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1718553,
                "title": "python-simple-solution-6-lines",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        dict1=collections.Counter(ransomNote)\\n        dict2=collections.Counter(magazine)\\n        for key in dict1:\\n            if key not in dict2 or dict2[key]<dict1[key]:\\n                return False\\n        return True\\n                \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        dict1=collections.Counter(ransomNote)\\n        dict2=collections.Counter(magazine)\\n        for key in dict1:\\n            if key not in dict2 or dict2[key]<dict1[key]:\\n                return False\\n        return True\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1703049,
                "title": "beginner-friendly-explaination-and-solution-100",
                "content": "\\n1.  Count Frequency of all characters in magazine\\n2.  And then loop through ransomeNote and tally frequency by subtracting one \\n3.  If at any time , we subtract one and the resultant is negative\\n4.  Then string simple cannot be created\\n```\\nbool canConstruct(string ransomNote, string magazine) {\\n\\t// 128 sized array to account for characters index as per ASCII\\n\\t// some people choose 26, to fit alphabets, but thats not necessary\\n\\t//this ones more readable :D.\\n\\tint magazineMap[128]{ 0 };\\n\\t\\n\\t//Count frequency\\n\\tfor (char c : magazine) {\\n\\t\\tmagazineMap[c ] += 1;\\n\\t}\\n\\t//Keep a flag, as true\\n\\tbool flag = true;\\n\\tfor (char c : ransomNote) {\\n\\t\\tmagazineMap[c] -= 1;\\n\\t\\t\\n\\t\\t//if on tallying, any frequency goes negative then the character was not present \\n\\t\\t//set flag and break\\n\\t\\tif (magazineMap[c] < 0) {\\n\\t\\t\\tflag = false;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn flag;\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nbool canConstruct(string ransomNote, string magazine) {\\n\\t// 128 sized array to account for characters index as per ASCII\\n\\t// some people choose 26, to fit alphabets, but thats not necessary\\n\\t//this ones more readable :D.\\n\\tint magazineMap[128]{ 0 };\\n\\t\\n\\t//Count frequency\\n\\tfor (char c : magazine) {\\n\\t\\tmagazineMap[c ] += 1;\\n\\t}\\n\\t//Keep a flag, as true\\n\\tbool flag = true;\\n\\tfor (char c : ransomNote) {\\n\\t\\tmagazineMap[c] -= 1;\\n\\t\\t\\n\\t\\t//if on tallying, any frequency goes negative then the character was not present \\n\\t\\t//set flag and break\\n\\t\\tif (magazineMap[c] < 0) {\\n\\t\\t\\tflag = false;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn flag;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1696223,
                "title": "java-easy-hashmap-solution",
                "content": "##### Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.\\n##### \\n##### Each letter in magazine can only be used once in ransomNote.\\n\\n**Code:**\\n\\n```\\nclass solution\\n    {\\n\\t\\tpublic boolean canConstruct(String ransomNote, String magazine) {\\n        int m=magazine.length();\\n        int r=ransomNote.length();\\n        if(m<r)\\n            return false;\\n\\n        HashMap<Character,Integer> hm1= new HashMap<>();\\n        HashMap<Character,Integer> hm2=new HashMap<>();\\n        for (int i = 0; i < m; i++) {\\n            hm1.put(magazine.charAt(i), hm1.getOrDefault(magazine.charAt(i),0)+1);\\n        }\\n        for (int i = 0; i < r; i++) {\\n            hm2.put(ransomNote.charAt(i),hm2.getOrDefault(ransomNote.charAt(i),0)+1);\\n        }\\n        for (char c:ransomNote.toCharArray()) {\\n            if(hm2.getOrDefault(c,0) >\\n            hm1.getOrDefault(c,0))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\n***Upvote** if it was helpful!*",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass solution\\n    {\\n\\t\\tpublic boolean canConstruct(String ransomNote, String magazine) {\\n        int m=magazine.length();\\n        int r=ransomNote.length();\\n        if(m<r)\\n            return false;\\n\\n        HashMap<Character,Integer> hm1= new HashMap<>();\\n        HashMap<Character,Integer> hm2=new HashMap<>();\\n        for (int i = 0; i < m; i++) {\\n            hm1.put(magazine.charAt(i), hm1.getOrDefault(magazine.charAt(i),0)+1);\\n        }\\n        for (int i = 0; i < r; i++) {\\n            hm2.put(ransomNote.charAt(i),hm2.getOrDefault(ransomNote.charAt(i),0)+1);\\n        }\\n        for (char c:ransomNote.toCharArray()) {\\n            if(hm2.getOrDefault(c,0) >\\n            hm1.getOrDefault(c,0))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1472882,
                "title": "simple-typescript-javascript-solution-faster-than-97",
                "content": "Uses slightly more memory but performs well.\\n\\nLoop through each character in `ransomNote` sequentially, and if found in `magazine`, remove the first occurence of that character from `magazine`. If at any point the current letter in `ransomNote` is not found in `magazine`, return false.\\n\\n```\\nconst canConstruct = (ransomNote: string, magazine: string): boolean => {\\n\\t\\n\\tif(ransomNote.length > magazine.length) return false;\\n\\t\\n    for(let i:number = 0; i < ransomNote.length; i++) {\\n        const letter:string = ransomNote.substring(i, i + 1);\\n        if (magazine.indexOf(letter) == -1) return false;\\n        magazine = magazine.replace(letter, \\'\\');\\n    }\\n\\n    return true;\\n};\\n```\\n\\nmore `TypeScript` (and other language) LeetCode solutions at https://github.com/jasonmauss/LeetCode",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst canConstruct = (ransomNote: string, magazine: string): boolean => {\\n\\t\\n\\tif(ransomNote.length > magazine.length) return false;\\n\\t\\n    for(let i:number = 0; i < ransomNote.length; i++) {\\n        const letter:string = ransomNote.substring(i, i + 1);\\n        if (magazine.indexOf(letter) == -1) return false;\\n        magazine = magazine.replace(letter, \\'\\');\\n    }\\n\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 704431,
                "title": "python-3-easy-solution-faster-than-93",
                "content": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\tfor c in set(ransomNote):\\n\\t\\tif magazine.count(c)<ransomNote.count(c):\\n\\t\\t\\treturn False\\n\\treturn True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\tfor c in set(ransomNote):\\n\\t\\tif magazine.count(c)<ransomNote.count(c):\\n\\t\\t\\treturn False\\n\\treturn True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 85771,
                "title": "c-simple-solution-easy-to-understand",
                "content": "first loop is to count numbers of each element in the magazine, second loop is to decrease the number by 1 when it is used. \\n\\nSo when the number is decrease to 0 (run out) and if the program still try to match a character \"c\" in the magazine, it will return false, otherwise it will return true at the end.\\n\\nThanks, please reply if you want me to clarify anything or you got a better idea to help me to optimize it, thank you! \\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map <char, int> m;\\n        for (auto c:magazine){\\n            m[c]++;\\n        }\\n        for (auto c: ransomNote){\\n            if (m[c] == 0) return false;\\n            m[c]--;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map <char, int> m;\\n        for (auto c:magazine){\\n            m[c]++;\\n        }\\n        for (auto c: ransomNote){\\n            if (m[c] == 0) return false;\\n            m[c]--;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 85776,
                "title": "use-c-in-8ms",
                "content": "bool canConstruct(char* ransomNote, char* magazine) {\\n    \\n    int arr[128]={0x00};\\n    char * q = magazine;\\n    char *p =ransomNote;\\n    while(*q)\\n    {\\n        arr[*q]++;\\n        q++;\\n    }\\n \\n\\n    while(*p)\\n    {\\n        if(!arr[*p])\\n        {\\n            return false;\\n        }\\n        arr[*p]--;\\n        p++;\\n    }\\n    return true;\\n\\n   \\n}",
                "solutionTags": [],
                "code": "bool canConstruct(char* ransomNote, char* magazine) {\\n    \\n    int arr[128]={0x00};\\n    char * q = magazine;\\n    char *p =ransomNote;\\n    while(*q)\\n    {\\n        arr[*q]++;\\n        q++;\\n    }\\n \\n\\n    while(*p)\\n    {\\n        if(!arr[*p])\\n        {\\n            return false;\\n        }\\n        arr[*p]--;\\n        p++;\\n    }\\n    return true;\\n\\n   \\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 3772214,
                "title": "simple-c-hashmap-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere I am assuming ransomNote as \"t\" and magazine as \"s\" just to keep things simple and provide a good explanation . I have also used same in my code.\\n\\nNow , guys How to think ?\\nSimply see that to make string t from s we should have sufficient amount of characters in s . How to keep their count ?? \\uD83E\\uDDD0\\n\\nanswer : **use a map which stores <char,occurence in string s>.**\\n\\nsteps to follow:\\n\\nstep 1 :\\npopulate your map via iterating string s i.e. magazine to get count of occurence of each character.\\n\\nstep 2:\\nnow iterate through string t  i.e. ransomNote and check do you have sufficient characters in s for each character, if Yes then simply take it and decrement from map as u used one.\\n\\nIf not haveing sufficient character then return false. \\u274C\\n\\nif everthing remains fine till end , then just return true \\u2705 .\\n\\n# Complexity\\n- Time complexity: O(N) + O(M) ~ O(max(N,M))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nFor each iteration over string lengths.\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string t, string s) {\\n        //t from s\\n        unordered_map<char,int>mp;\\n\\n        for(int i=0;i<s.size();i++){\\n            mp[s[i]]++;\\n        }\\n\\n        for(int i=0;i<t.size();i++){\\n            if(mp[t[i]]>0) mp[t[i]]--; // if have decrement its count by one from map\\n    // dont have suffucient character return false you can\\'t make it.\\n            else return false;\\n        }\\n   // you can make it\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string t, string s) {\\n        //t from s\\n        unordered_map<char,int>mp;\\n\\n        for(int i=0;i<s.size();i++){\\n            mp[s[i]]++;\\n        }\\n\\n        for(int i=0;i<t.size();i++){\\n            if(mp[t[i]]>0) mp[t[i]]--; // if have decrement its count by one from map\\n    // dont have suffucient character return false you can\\'t make it.\\n            else return false;\\n        }\\n   // you can make it\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3556708,
                "title": "pytho-o-n-m-hash-table",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n+m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n), can handle any string\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \"\"\"\\n            Idea: Frequency Count\\n            Time: O(n + m)\\n            Space: O(n)\\n        \"\"\"\\n        c = {}\\n        for i in ransomNote:\\n            c[i] = c.get(i,0) + 1\\n        for k in magazine:\\n            if c.get(k,0):\\n                c[k] -= 1\\n                if c[k] ==0: c.pop(k)\\n        if not c: return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \"\"\"\\n            Idea: Frequency Count\\n            Time: O(n + m)\\n            Space: O(n)\\n        \"\"\"\\n        c = {}\\n        for i in ransomNote:\\n            c[i] = c.get(i,0) + 1\\n        for k in magazine:\\n            if c.get(k,0):\\n                c[k] -= 1\\n                if c[k] ==0: c.pop(k)\\n        if not c: return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3391098,
                "title": "beginner-friendly-explained-one-liner-python3-counter-easy-understanding",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsuppose we take example 3 -  ransomNote = \"aa\", magazine = \"aab\"\\nCounter(ransomNote) = Counter({\\'a\\': 2})\\nCounter(magazine) = Counter({\\'a\\': 2, \\'b\\': 1})\\n\\n```\\nif we substract ransomNote - magazine {\\n    result = Counter(magazine) - Counter(ransomNote) \\n    then result = Counter()\\n}\\n```\\n\\n```\\nif we substract ransomNote - magazine {\\n    result = Counter(ransomNote) - Counter(magazine)  \\n    then result = Counter({\\'b\\': 1})\\n}\\n```\\nresult will be null if all the characters in ransomnote are in magazine\\nso we just calculate len(Counter) == 0\\n\\n# detailed code\\n\\n```\\nclass Solution:\\n    def canConstruct(self, r: str, m: str) -> bool:\\n        note = Counter(ransomNote)  #which is = Counter({\\'a\\': 2})\\n        mag = Counter(magazine)     #which is  = Counter({\\'a\\': 2, \\'b\\': 1})\\n        result = note - mag         #which is = Counter()\\n        answer = len(result)\\n        return answer == result\\n```\\n\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# One-Liner\\n```\\nclass Solution:\\n    def canConstruct(self, r: str, m: str) -> bool:\\n        return len(Counter(r) - Counter(m)) == 0\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nif we substract ransomNote - magazine {\\n    result = Counter(magazine) - Counter(ransomNote) \\n    then result = Counter()\\n}\\n```\n```\\nif we substract ransomNote - magazine {\\n    result = Counter(ransomNote) - Counter(magazine)  \\n    then result = Counter({\\'b\\': 1})\\n}\\n```\n```\\nclass Solution:\\n    def canConstruct(self, r: str, m: str) -> bool:\\n        note = Counter(ransomNote)  #which is = Counter({\\'a\\': 2})\\n        mag = Counter(magazine)     #which is  = Counter({\\'a\\': 2, \\'b\\': 1})\\n        result = note - mag         #which is = Counter()\\n        answer = len(result)\\n        return answer == result\\n```\n```\\nclass Solution:\\n    def canConstruct(self, r: str, m: str) -> bool:\\n        return len(Counter(r) - Counter(m)) == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3279698,
                "title": "easy-solution-c",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n***O(n)***\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n***O(1)***\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        int fM[26];\\n        int fR[26];\\n        int n1 = r.length(), n2 = m.length();\\n        for(int i = 0 ; i<26 ; i++)\\n        {\\n            fM[i] = 0;\\n            fR[i] = 0;\\n        }\\n        for(int i = 0 ; i<n1 ; i++)\\n            fR[int(r[i])%97]++;\\n        for(int i = 0 ; i<n2 ; i++)\\n            fM[int(m[i])%97]++;\\n        for(int i = 0 ; i<26 ; i++)\\n            if(fM[i]>=fR[i])\\n                continue;\\n            return false;\\n        return true;\\n        // code by OK!\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        int fM[26];\\n        int fR[26];\\n        int n1 = r.length(), n2 = m.length();\\n        for(int i = 0 ; i<26 ; i++)\\n        {\\n            fM[i] = 0;\\n            fR[i] = 0;\\n        }\\n        for(int i = 0 ; i<n1 ; i++)\\n            fR[int(r[i])%97]++;\\n        for(int i = 0 ; i<n2 ; i++)\\n            fM[int(m[i])%97]++;\\n        for(int i = 0 ; i<26 ; i++)\\n            if(fM[i]>=fR[i])\\n                continue;\\n            return false;\\n        return true;\\n        // code by OK!\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3203004,
                "title": "java-solution-1-ms-beats-99",
                "content": "# Java Code\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        if (ransomNote.length() > magazine.length()) {\\n            return false;\\n        }\\n\\n        int[] letters = new int[26];\\n\\n        for (char c : ransomNote.toCharArray()) {\\n            int index = magazine.indexOf(c, letters[c - \\'a\\']);\\n\\n            if (index == -1) {\\n                return false;\\n            }\\n\\n            letters[c - \\'a\\'] = index + 1;\\n\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        if (ransomNote.length() > magazine.length()) {\\n            return false;\\n        }\\n\\n        int[] letters = new int[26];\\n\\n        for (char c : ransomNote.toCharArray()) {\\n            int index = magazine.indexOf(c, letters[c - \\'a\\']);\\n\\n            if (index == -1) {\\n                return false;\\n            }\\n\\n            letters[c - \\'a\\'] = index + 1;\\n\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2910682,
                "title": "c-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        if(magazine.size()<ransomNote.size()) return false;\\n        map<char,int>mp;\\n         for(int i=0; i<magazine.length(); i++) {\\n            mp[magazine[i]]++;\\n        }\\n        \\n        for(int i=0; i<ransomNote.length(); i++) {\\n            if(mp[ransomNote[i]]>0) mp[ransomNote[i]]--;\\n            else return false;\\n        }\\n        \\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        if(magazine.size()<ransomNote.size()) return false;\\n        map<char,int>mp;\\n         for(int i=0; i<magazine.length(); i++) {\\n            mp[magazine[i]]++;\\n        }\\n        \\n        for(int i=0; i<ransomNote.length(); i++) {\\n            if(mp[ransomNote[i]]>0) mp[ransomNote[i]]--;\\n            else return false;\\n        }\\n        \\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2859731,
                "title": "python-41ms-97-91-easy-to-understand",
                "content": "1. Create 2 dictionaries to get the frequencies of appearance of each character in both `ransomNote` and `magazine`.\\n2. For each unique character in `ransomNote`, if character is not found in `magazine`, or if the frequency of the character in `ransomNote` is greater than in `magazine`, `return False`. Otherwise, `return True`.\\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        mag = {i:magazine.count(i) for i in set(magazine)}\\n        ran = {i:ransomNote.count(i) for i in set(ransomNote)}\\n        for i in ran.keys():\\n            if i not in mag.keys():\\n                return(False)\\n            elif ran[i]>mag[i]:\\n                return(False)\\n        return(True)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        mag = {i:magazine.count(i) for i in set(magazine)}\\n        ran = {i:ransomNote.count(i) for i in set(ransomNote)}\\n        for i in ran.keys():\\n            if i not in mag.keys():\\n                return(False)\\n            elif ran[i]>mag[i]:\\n                return(False)\\n        return(True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2477446,
                "title": "easy-to-understand-java-solution-without-hashmap-begineer-friendly",
                "content": "```\\nclass Solution {\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n    char[] ch = ransomNote.toCharArray();\\n    for (char c : ch) {\\n        int i = magazine.indexOf(c);\\n        if (i == -1) return false;\\n        magazine = magazine.substring(0, i) + magazine.substring(i + 1);\\n    }\\n    return true;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n    char[] ch = ransomNote.toCharArray();\\n    for (char c : ch) {\\n        int i = magazine.indexOf(c);\\n        if (i == -1) return false;\\n        magazine = magazine.substring(0, i) + magazine.substring(i + 1);\\n    }\\n    return true;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2475890,
                "title": "easy-c-solution-well-commented-hashmap",
                "content": "# C++ Code:\\n\\n```\\nclass Solution {\\npublic:\\n    //app 1: O(N) \\n    bool canConstruct(string ransomNote, string magazine) {\\n        //make a hashmap to store the freq. of chars of magazine\\n        unordered_map<char,int> mp;\\n        for(char ch: magazine) mp[ch]++;\\n        \\n        //iterate in string ransomNote and check if every char of this str \\n        //is present in magazine or not\\n        for(char ch: ransomNote){\\n            //present\\n            if(mp[ch] > 0){\\n                mp[ch]--;\\n            }\\n            //not present\\n            else{\\n                return false;\\n            }\\n        }\\n        //all chars were present\\n        return true;\\n    }\\n};\\n\\n```\\n**Please Please Upvote the post, If it\\'s been any help to you!**\\nHappy Coding :)",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //app 1: O(N) \\n    bool canConstruct(string ransomNote, string magazine) {\\n        //make a hashmap to store the freq. of chars of magazine\\n        unordered_map<char,int> mp;\\n        for(char ch: magazine) mp[ch]++;\\n        \\n        //iterate in string ransomNote and check if every char of this str \\n        //is present in magazine or not\\n        for(char ch: ransomNote){\\n            //present\\n            if(mp[ch] > 0){\\n                mp[ch]--;\\n            }\\n            //not present\\n            else{\\n                return false;\\n            }\\n        }\\n        //all chars were present\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2270590,
                "title": "simple-solution",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        if len(magazine) < len(ransomNote):\\n            return False\\n        \\n        for letter in ransomNote:\\n            if(letter not in magazine):\\n                return False\\n            magazine = magazine.replace(letter,\\'\\',1)\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        if len(magazine) < len(ransomNote):\\n            return False\\n        \\n        for letter in ransomNote:\\n            if(letter not in magazine):\\n                return False\\n            magazine = magazine.replace(letter,\\'\\',1)\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2248651,
                "title": "rust-solution-with-linear-time-complexity-0-ms",
                "content": "This rust solution is easy to understand and has a linear time complexity.\\n\\n```\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        let mut zero_vec = vec![0; 26];\\n\\n        for c in magazine.chars() {\\n            let pos = c as u8 - 97;\\n            if pos < 26 {\\n                zero_vec[pos as usize] += 1;\\n            }\\n        }\\n\\n        for c in ransom_note.chars() {\\n            let pos = c as u8 - 97;\\n            if pos < 26 {\\n                if zero_vec[pos as usize] == 0 {\\n                    return false;\\n                }\\n                zero_vec[pos as usize] -= 1;\\n            }\\n        }\\n\\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        let mut zero_vec = vec![0; 26];\\n\\n        for c in magazine.chars() {\\n            let pos = c as u8 - 97;\\n            if pos < 26 {\\n                zero_vec[pos as usize] += 1;\\n            }\\n        }\\n\\n        for c in ransom_note.chars() {\\n            let pos = c as u8 - 97;\\n            if pos < 26 {\\n                if zero_vec[pos as usize] == 0 {\\n                    return false;\\n                }\\n                zero_vec[pos as usize] -= 1;\\n            }\\n        }\\n\\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2136886,
                "title": "javascript-readable",
                "content": "Using one HashMap \\nvar canConstruct = function(ransomNote, magazine) {\\n    \\n    let charMap = new Map ()\\n    {\\n        if(ransomNote === null || magazine === null || magazine.length<ransomNote.length) \\n        return false\\n        \\n        for(let char of magazine){\\n            charMap.set(char,charMap.get(char) ? charMap.get(char) +1 : 1)\\n        }\\n        \\n        for(let char of ransomNote){\\n            if(!charMap.has(char) || charMap.get(char) === 0){\\n                return false\\n            }\\n            else{\\n               charMap.set(char,charMap.get(char) ? charMap.get(char) -1 : 0) \\n            }\\n        }\\n        \\n        return true\\n    }\\n};\\n\\nBrute force using javascript inbuilt functions\\n   if(ransomNote === null || magazine === null || magazine.length<ransomNote.length) \\n        return false\\n    \\n    let count=0\\n    for(let c of ransomNote){\\n        if(magazine.includes(c))\\n            {\\n                count++\\n                magazine=magazine.replace(c,\\'\\')\\n            }\\n    }\\n    return ransomNote.length === count",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "Using one HashMap \\nvar canConstruct = function(ransomNote, magazine) {\\n    \\n    let charMap = new Map ()\\n    {\\n        if(ransomNote === null || magazine === null || magazine.length<ransomNote.length) \\n        return false\\n        \\n        for(let char of magazine){\\n            charMap.set(char,charMap.get(char) ? charMap.get(char) +1 : 1)\\n        }\\n        \\n        for(let char of ransomNote){\\n            if(!charMap.has(char) || charMap.get(char) === 0){\\n                return false\\n            }\\n            else{\\n               charMap.set(char,charMap.get(char) ? charMap.get(char) -1 : 0) \\n            }\\n        }\\n        \\n        return true\\n    }\\n};\\n\\nBrute force using javascript inbuilt functions\\n   if(ransomNote === null || magazine === null || magazine.length<ransomNote.length) \\n        return false\\n    \\n    let count=0\\n    for(let c of ransomNote){\\n        if(magazine.includes(c))\\n            {\\n                count++\\n                magazine=magazine.replace(c,\\'\\')\\n            }\\n    }\\n    return ransomNote.length === count",
                "codeTag": "Unknown"
            },
            {
                "id": 1968989,
                "title": "python-90-faster-solution-using-set-count",
                "content": "upvote if you find it useful\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        \"\"\"\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        \"\"\"\\n        for i in set(ransomNote):\\n            if ransomNote.count(i) > magazine.count(i):\\n                return False\\n        return True\\n            \\n",
                "solutionTags": [],
                "code": "upvote if you find it useful\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        \"\"\"\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        \"\"\"\\n        for i in set(ransomNote):\\n            if ransomNote.count(i) > magazine.count(i):\\n                return False\\n        return True\\n            \\n",
                "codeTag": "Java"
            },
            {
                "id": 1952584,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        if ransom_note.len() > magazine.len() {\\n            return false;\\n        }\\n\\n        let mut map = [0; 26];\\n        let mut flags = 0;\\n        let idx = |c: char| c as usize - \\'a\\' as usize;\\n\\n        ransom_note.chars().for_each(|c| {\\n            let i = idx(c);\\n            map[i] += 1;\\n            flags |= 1 << i; // set flag\\n        });\\n\\n        for c in magazine.chars() {\\n            let i = idx(c);\\n            map[i] -= 1;\\n            if map[i] == 0 {\\n                flags ^= 1 << i;  // drop flag\\n                if flags == 0 {\\n                    return true;\\n                }\\n            }\\n        }\\n        false\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Bit Manipulation"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        if ransom_note.len() > magazine.len() {\\n            return false;\\n        }\\n\\n        let mut map = [0; 26];\\n        let mut flags = 0;\\n        let idx = |c: char| c as usize - \\'a\\' as usize;\\n\\n        ransom_note.chars().for_each(|c| {\\n            let i = idx(c);\\n            map[i] += 1;\\n            flags |= 1 << i; // set flag\\n        });\\n\\n        for c in magazine.chars() {\\n            let i = idx(c);\\n            map[i] -= 1;\\n            if map[i] == 0 {\\n                flags ^= 1 << i;  // drop flag\\n                if flags == 0 {\\n                    return true;\\n                }\\n            }\\n        }\\n        false\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1893762,
                "title": "swift-20ms-solution",
                "content": "```\\nclass Solution {\\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\\n        var magazineCopy = magazine\\n        for letter in ransomNote {\\n            let index = magazineCopy.firstIndex(of: letter)\\n            guard let index = index else {\\n                return false\\n            }\\n            magazineCopy.remove(at: index)\\n        }\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\\n        var magazineCopy = magazine\\n        for letter in ransomNote {\\n            let index = magazineCopy.firstIndex(of: letter)\\n            guard let index = index else {\\n                return false\\n            }\\n            magazineCopy.remove(at: index)\\n        }\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1699350,
                "title": "c-easy-to-understand-o-n",
                "content": "```\\n vector<int> a(26,0);\\n        for(char c:m)a[c-\\'a\\']++;\\n        for(char c:r){\\n            a[c-\\'a\\']--;\\n            if(a[c-\\'a\\']<0)return 0;\\n        }\\n        return 1;\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\n vector<int> a(26,0);\\n        for(char c:m)a[c-\\'a\\']++;\\n        for(char c:r){\\n            a[c-\\'a\\']--;\\n            if(a[c-\\'a\\']<0)return 0;\\n        }\\n        return 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1593900,
                "title": "good-old-solution-in-c",
                "content": "```c\\n#include <stdbool.h>\\n\\nbool canConstruct(char * ransomNote, char * magazine){\\n    int letters[26] = {0};\\n\\n    for (int i = 0; magazine[i] != \\'\\\\0\\'; i++)\\n        letters[magazine[i] - \\'a\\']++;\\n\\n    for (int i = 0; ransomNote[i] != \\'\\\\0\\'; i++) {\\n        if (letters[ransomNote[i] - \\'a\\'] > 0)\\n            letters[ransomNote[i] - \\'a\\']--;\\n        else\\n            return false;\\n    }\\n\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "```c\\n#include <stdbool.h>\\n\\nbool canConstruct(char * ransomNote, char * magazine){\\n    int letters[26] = {0};\\n\\n    for (int i = 0; magazine[i] != \\'\\\\0\\'; i++)\\n        letters[magazine[i] - \\'a\\']++;\\n\\n    for (int i = 0; ransomNote[i] != \\'\\\\0\\'; i++) {\\n        if (letters[ransomNote[i] - \\'a\\'] > 0)\\n            letters[ransomNote[i] - \\'a\\']--;\\n        else\\n            return false;\\n    }\\n\\n    return true;\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1472549,
                "title": "simple-and-easy-to-understand-python-solution-faster-than-99-7",
                "content": "For each element in RansomNote, replace that char in magazine with a special char.\\nIf we can reach the end of String, return True, else False.\\n```\\nfor i in ransomNote:\\n\\tif i in magazine:\\n\\t\\tmagazine=magazine.replace(i,\\'@\\',1)\\n\\telse:\\n\\t\\treturn False\\nreturn True\\n```\\nKindly **Upvote** if this helps you.. :-)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfor i in ransomNote:\\n\\tif i in magazine:\\n\\t\\tmagazine=magazine.replace(i,\\'@\\',1)\\n\\telse:\\n\\t\\treturn False\\nreturn True\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1353493,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        //Solution 1\\n        //Using HashMap\\n//         int r = ransomNote.length();\\n//         int m = magazine.length();\\n        \\n//         if(r > m)\\n//             return false;\\n//         Map<Character, Integer> map = new HashMap<>();\\n//         for(char ch : magazine.toCharArray()) {\\n//             map.put(ch, map.getOrDefault(ch, 0) + 1);\\n//         }\\n        \\n//         for(char ch : ransomNote.toCharArray()) {\\n//             if(!map.containsKey(ch))\\n//                 return false;\\n//             map.put(ch, map.get(ch) - 1);\\n//             if(map.get(ch) == 0)\\n//                 map.remove(ch);\\n//         }\\n//         return true;\\n        \\n        //Solution 2\\n        //Using int array of size 26\\n        \\n        int r = ransomNote.length();\\n        int m = magazine.length();\\n        \\n        int[] arr = new int[26];\\n        \\n        for(char ch : magazine.toCharArray()) {\\n            arr[ch - \\'a\\']++;\\n        }\\n        \\n        for(char ch : ransomNote.toCharArray()) {\\n            if(arr[ch - \\'a\\'] == 0)\\n                return false;\\n            arr[ch - \\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\nPlease upvote if it helped! :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        //Solution 1\\n        //Using HashMap\\n//         int r = ransomNote.length();\\n//         int m = magazine.length();\\n        \\n//         if(r > m)\\n//             return false;\\n//         Map<Character, Integer> map = new HashMap<>();\\n//         for(char ch : magazine.toCharArray()) {\\n//             map.put(ch, map.getOrDefault(ch, 0) + 1);\\n//         }\\n        \\n//         for(char ch : ransomNote.toCharArray()) {\\n//             if(!map.containsKey(ch))\\n//                 return false;\\n//             map.put(ch, map.get(ch) - 1);\\n//             if(map.get(ch) == 0)\\n//                 map.remove(ch);\\n//         }\\n//         return true;\\n        \\n        //Solution 2\\n        //Using int array of size 26\\n        \\n        int r = ransomNote.length();\\n        int m = magazine.length();\\n        \\n        int[] arr = new int[26];\\n        \\n        for(char ch : magazine.toCharArray()) {\\n            arr[ch - \\'a\\']++;\\n        }\\n        \\n        for(char ch : ransomNote.toCharArray()) {\\n            if(arr[ch - \\'a\\'] == 0)\\n                return false;\\n            arr[ch - \\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1061926,
                "title": "faster-than-92-22-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> v(26);\\n        for(auto i:ransomNote){\\n            v[i-\\'a\\']++;\\n        }\\n        for(auto i:magazine){\\n            v[i-\\'a\\']--;\\n        }\\n        for(int i=0;i<v.size();i++){\\n            if(v[i]>0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> v(26);\\n        for(auto i:ransomNote){\\n            v[i-\\'a\\']++;\\n        }\\n        for(auto i:magazine){\\n            v[i-\\'a\\']--;\\n        }\\n        for(int i=0;i<v.size();i++){\\n            if(v[i]>0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 620510,
                "title": "python-cleaner-code",
                "content": "```class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        numRansomNote = len(ransomNote)\\n        for letter in magazine:\\n            if (letter in ransomNote and numRansomNote > 0):\\n                ransomNote = ransomNote.replace(letter, \"\",1)\\n                numRansomNote -= 1        \\n        return numRansomNote == 0\\n            \\n        ```",
                "solutionTags": [],
                "code": "```class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        numRansomNote = len(ransomNote)\\n        for letter in magazine:\\n            if (letter in ransomNote and numRansomNote > 0):\\n                ransomNote = ransomNote.replace(letter, \"\",1)\\n                numRansomNote -= 1        \\n        return numRansomNote == 0\\n            \\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 610654,
                "title": "rust-solution",
                "content": "```rust\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        let mut d: [usize; 256] = [0; 256];\\n        for c in magazine.chars().map(|c| (c as u8) as usize) {\\n            d[c] += 1;\\n        }\\n        for c in ransom_note.chars().map(|c| (c as u8) as usize) {\\n            if d[c] == 0 {\\n                return false;\\n            }\\n            d[c] -= 1;\\n        }\\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\\n        let mut d: [usize; 256] = [0; 256];\\n        for c in magazine.chars().map(|c| (c as u8) as usize) {\\n            d[c] += 1;\\n        }\\n        for c in ransom_note.chars().map(|c| (c as u8) as usize) {\\n            if d[c] == 0 {\\n                return false;\\n            }\\n            d[c] -= 1;\\n        }\\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 610279,
                "title": "simple-java-solution-linear-time-no-hashmap",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] ch = new int[26];\\n        for(int i=0;i<magazine.length();i++){\\n            ch[magazine.charAt(i)-\\'a\\']+=1;\\n        }\\n        for(int i=0;i<ransomNote.length();i++){\\n            if(--ch[ransomNote.charAt(i)-\\'a\\']<0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int[] ch = new int[26];\\n        for(int i=0;i<magazine.length();i++){\\n            ch[magazine.charAt(i)-\\'a\\']+=1;\\n        }\\n        for(int i=0;i<ransomNote.length();i++){\\n            if(--ch[ransomNote.charAt(i)-\\'a\\']<0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 610208,
                "title": "c-solution-using-maps-and-sets",
                "content": "```class Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        set<char> r, m ;\\n        map<char,int> map1 ; \\n        map<char,int> map2 ;\\n        for(int i = 0 ; i < ransomNote.size(); ++i)\\n        {\\n            map1[ransomNote[i]]++;\\n            r.insert(ransomNote[i]);\\n        }\\n        for(int i = 0 ; i < magazine.size() ; ++i )\\n        {\\n            map2[magazine[i]]++;\\n            m.insert(magazine[i]);\\n        }\\n       for(int x : r)\\n        {\\n            if(map2[x] < map1[x])\\n                return false; \\n       }\\n        return true ;\\n    }\\n };``",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        set<char> r, m ;\\n        map<char,int> map1 ; \\n        map<char,int> map2 ;\\n        for(int i = 0 ; i < ransomNote.size(); ++i)\\n        {\\n            map1[ransomNote[i]]++;\\n            r.insert(ransomNote[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 451093,
                "title": "python3-99-81-fast-100-less-space-easy",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        for i in ransomNote:\\n            if i not in magazine: return False\\n            else: magazine = magazine.replace(i,\\'\\', 1)\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        for i in ransomNote:\\n            if i not in magazine: return False\\n            else: magazine = magazine.replace(i,\\'\\', 1)\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 312473,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) \\n     {\\n        StringBuilder sb = new StringBuilder(magazine);\\n        for(int i=0;i<ransomNote.length();i++)\\n        {\\n            char ch = ransomNote.charAt(i);\\n            if(sb.indexOf(ch+\"\") == -1)\\n                return false;\\n            sb.deleteCharAt(sb.indexOf(ch+\"\"));\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) \\n     {\\n        StringBuilder sb = new StringBuilder(magazine);\\n        for(int i=0;i<ransomNote.length();i++)\\n        {\\n            char ch = ransomNote.charAt(i);\\n            if(sb.indexOf(ch+\"\") == -1)\\n                return false;\\n            sb.deleteCharAt(sb.indexOf(ch+\"\"));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 187768,
                "title": "python-1-liners",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(s) <= magazine.count(s) for s in set(ransomNote))\\n```\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote, magazine):\\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote, magazine):\\n        return all(ransomNote.count(s) <= magazine.count(s) for s in set(ransomNote))\\n```\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote, magazine):\\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3587131,
                "title": "very-simple-python-solution",
                "content": "# Complexity\\n- Time complexity:\\no(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        my_dict = {}\\n        for c in magazine:\\n            if c in my_dict:\\n                my_dict[c] += 1\\n            else:\\n                my_dict[c] = 1\\n        for c in ransomNote:\\n            if c not in my_dict or my_dict[c] == 0:\\n                return False\\n            my_dict[c] -= 1\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def canConstruct(self, ransomNote, magazine):\\n        my_dict = {}\\n        for c in magazine:\\n            if c in my_dict:\\n                my_dict[c] += 1\\n            else:\\n                my_dict[c] = 1\\n        for c in ransomNote:\\n            if c not in my_dict or my_dict[c] == 0:\\n                return False\\n            my_dict[c] -= 1\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3570935,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        HashMap<Character, Integer> map= new HashMap<>();\\n\\n        for(int i=0;i<magazine.length();i++){\\n            if(map.containsKey(magazine.charAt(i))) \\n                map.put(magazine.charAt(i), map.get(magazine.charAt(i))+1);\\n            else map.put(magazine.charAt(i),1);\\n        }\\n\\n        for(int i=0;i<ransomNote.length();i++){\\n            if(map.containsKey(ransomNote.charAt(i)) && map.get(ransomNote.charAt(i))>0){\\n                map.put(ransomNote.charAt(i), map.get(ransomNote.charAt(i))-1);\\n            }else return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        HashMap<Character, Integer> map= new HashMap<>();\\n\\n        for(int i=0;i<magazine.length();i++){\\n            if(map.containsKey(magazine.charAt(i))) \\n                map.put(magazine.charAt(i), map.get(magazine.charAt(i))+1);\\n            else map.put(magazine.charAt(i),1);\\n        }\\n\\n        for(int i=0;i<ransomNote.length();i++){\\n            if(map.containsKey(ransomNote.charAt(i)) && map.get(ransomNote.charAt(i))>0){\\n                map.put(ransomNote.charAt(i), map.get(ransomNote.charAt(i))-1);\\n            }else return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3261337,
                "title": "by-using-hash-table-o-n-solution-beginner-friendly-c",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n          Firstly, I declare two ordered map and save all characters and its freqency to map of both strings.\\n          Then I simply Traverse map which consists character of ransomNote if frequency of that ransomNotes character are more than that frequency of that character in magazine map then simply return false .\\n          Otherwise return True.\\n\\n# Complexity\\n- **Time complexity: O(n)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- **Space complexity: O(n)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        map<char,int> m;\\n        map<char,int> n;\\n        for(auto i : ransomNote)\\n        {\\n            m[i]++;\\n        }\\n        for(auto j : magazine)\\n        {\\n            n[j]++;\\n        }\\n        for(auto i : m)\\n        {\\n            if(i.second > n[i.first])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/feb53a92-2008-432d-8133-8b98f72db978_1678038963.9289465.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        map<char,int> m;\\n        map<char,int> n;\\n        for(auto i : ransomNote)\\n        {\\n            m[i]++;\\n        }\\n        for(auto j : magazine)\\n        {\\n            n[j]++;\\n        }\\n        for(auto i : m)\\n        {\\n            if(i.second > n[i.first])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3196128,
                "title": "faster-than-100-of-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> arr(26);\\n        for (char i : magazine) {\\n            arr[i-97]++;\\n        }\\n        for (char i: ransomNote){\\n            arr[i-97]--;\\n        }\\n        for (auto i : arr){\\n            if (i < 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> arr(26);\\n        for (char i : magazine) {\\n            arr[i-97]++;\\n        }\\n        for (char i: ransomNote){\\n            arr[i-97]--;\\n        }\\n        for (auto i : arr){\\n            if (i < 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3134324,
                "title": "simple-c-solution-easy-to-understand",
                "content": "\\n# Approach\\nSolved using simple nested for loop and if statements.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int check,s1=ransomNote.length(),s2=magazine.length();\\n  \\n        for(int i=0;i<s1;i++)\\n        {\\n            check=0;\\n            for(int j=0;j<s2;j++)\\n            {\\n                if(ransomNote[i]==magazine[j])  // check if required char exist\\n                {\\n                    check++;         // check=1 if match is found\\n                    magazine[j]=64;  // replacing matched char with @ in magazine\\n                    break;\\n                }\\n            }\\n            if(check==0)   // if no match found exit program\\n            {\\n               return false;\\n            }  \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int check,s1=ransomNote.length(),s2=magazine.length();\\n  \\n        for(int i=0;i<s1;i++)\\n        {\\n            check=0;\\n            for(int j=0;j<s2;j++)\\n            {\\n                if(ransomNote[i]==magazine[j])  // check if required char exist\\n                {\\n                    check++;         // check=1 if match is found\\n                    magazine[j]=64;  // replacing matched char with @ in magazine\\n                    break;\\n                }\\n            }\\n            if(check==0)   // if no match found exit program\\n            {\\n               return false;\\n            }  \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3032368,
                "title": "easy-and-clean-python3-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        for charr in set(ransomNote):\\n            if ransomNote.count(charr)>magazine.count(charr):return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        for charr in set(ransomNote):\\n            if ransomNote.count(charr)>magazine.count(charr):return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2850786,
                "title": "c-o-n-solution-using-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ran, string mag) {\\n        unordered_map<char, int> ump;\\n        for(auto i : ran) ump[i]++;\\n        int count = 0;\\n        for(auto i : mag) {\\n            if(ump[i] > 0) {\\n                count++;\\n                ump[i]--;\\n            }\\n        }\\n        return count == ran.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ran, string mag) {\\n        unordered_map<char, int> ump;\\n        for(auto i : ran) ump[i]++;\\n        int count = 0;\\n        for(auto i : mag) {\\n            if(ump[i] > 0) {\\n                count++;\\n                ump[i]--;\\n            }\\n        }\\n        return count == ran.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2843015,
                "title": "cpp-solution-easyto-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        map<char,int>m,mp;\\n        bool flag=false;\\n        for(auto i : magazine)\\n        {\\n            m[i]++;\\n        }\\n        for(auto i : ransomNote)\\n        {\\n            mp[i]++;\\n        }\\n        for(auto i : ransomNote)\\n        {\\n            if(mp[i]>m[i])\\n            {\\n                flag=true;\\n                break;\\n            }\\n        }\\n        if(flag)  {\\n            return false;\\n        }\\n         return true;   \\n    }\\n};  ``",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        map<char,int>m,mp;\\n        bool flag=false;\\n        for(auto i : magazine)\\n        {\\n            m[i]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2833302,
                "title": "383-ransom-note-easy-clear-and-classic-solution-javascript",
                "content": "\\n# Approach\\n**Firstly,** \\nadd all chars to hash table and incr count:\\nfor(let char of ransomNote) {\\n        if(!(obj[char])) {\\n            obj[char] = 0;\\n        }\\n        count++;\\n        obj[char]++;\\n    }\\n**Secondly,**\\nsubstract all same char and decr count:\\nfor(let c of magazine) {\\n        if(obj[c]) {\\n            obj[c]--;\\n            count--;\\n        }\\n    }\\n\\n**Thirdly,**\\nCheck if any char left inside obj if not return true otherwise return false.\\n# Complexity\\n- Time complexity:\\nO(n) linear search\\n\\n- Space complexity:\\nO(n) obj or hash table\\n\\n# Code\\n```\\n/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    let obj = {};\\n    let count = 0;\\n\\n    for(let char of ransomNote) {\\n        if(!(obj[char])) {\\n            obj[char] = 0;\\n        }\\n        count++;\\n        obj[char]++;\\n    }\\n    \\n    for(let c of magazine) {\\n        if(obj[c]) {\\n            obj[c]--;\\n            count--;\\n        }\\n    }\\n    \\n    if( count > 0) {\\n        return false;\\n    } else {\\n        return true;\\n    }\\n    \\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\n/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    let obj = {};\\n    let count = 0;\\n\\n    for(let char of ransomNote) {\\n        if(!(obj[char])) {\\n            obj[char] = 0;\\n        }\\n        count++;\\n        obj[char]++;\\n    }\\n    \\n    for(let c of magazine) {\\n        if(obj[c]) {\\n            obj[c]--;\\n            count--;\\n        }\\n    }\\n    \\n    if( count > 0) {\\n        return false;\\n    } else {\\n        return true;\\n    }\\n    \\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2800853,
                "title": "2-ways-to-approach-this-problem-c-naive-and-dp",
                "content": "**1st Approach** is pretty simple and straightforward.\\n\\n1. Use a counter array of size 26.\\n2. First Increment the counter for characters of \\'magazine\\' string \\n3. And then decrement the counter for characters of \\'ransomeNote\\' string and if it reaches 0 or below then it can\\'t be our answer so return False.\\n4. Else return True.\\n\\nCode :\\n\\n```\\n  //Using Array Counter of Size 26;\\n        int n=x.size(),m=y.size();\\n        int counter[26]={0};\\n        for(int i=0;i<m;i++){\\n            counter[y[i]-\\'a\\']++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(counter[x[i]-\\'a\\']-- <=0 )\\n            return false;\\n        }\\n        return true;\\n```\\n\\n---------------------------------------------------------------\\n\\n**2nd Approach** is a bit intuitive and a very good concept of DP is used here. \\nThe concept of **Longest Common Subsequence** is used but for which first we need to sort both the strings.\\n\\nFor exp :\\n\\ns1 = aab\\ns2 = baaa\\n\\nAfter Sorting\\n\\ns1 = aab\\ns2 = aaab\\n\\nNow Find the LCS which in this case will be \\'***aab***\\' which is nothing but the entire string s1.\\nSo at the end we are required to check whether the length of LCS is equal to s1 if yes then return *true,* otherwise *false*.\\n\\nNow let\\'s see the code :\\n```\\n\\t\\t//Using LCS\\n        int n=x.size(),m=y.size();\\n        string s;\\n        sort(x.begin(),x.end());\\n        sort(y.begin(),y.end());\\n        int dp[n+1][m+1];\\n        for(int i=0;i<=n;i++)dp[i][0]=0;\\n        for(int i=0;i<=m;i++)dp[0][i]=0;\\n        for(int i=1;i<=n;i++){\\n            for(int j=1;j<=m;j++){\\n                if(x[i-1]==y[j-1])dp[i][j]=1+dp[i-1][j-1];\\n                else {\\n                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);\\n                }\\n            }\\n        }\\n        return (dp[n][m]==n);\\n```\\n\\nPlease do upvote if you learned something new :)",
                "solutionTags": [
                    "C",
                    "Array",
                    "Dynamic Programming"
                ],
                "code": "```\\n  //Using Array Counter of Size 26;\\n        int n=x.size(),m=y.size();\\n        int counter[26]={0};\\n        for(int i=0;i<m;i++){\\n            counter[y[i]-\\'a\\']++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(counter[x[i]-\\'a\\']-- <=0 )\\n            return false;\\n        }\\n        return true;\\n```\n```\\n\\t\\t//Using LCS\\n        int n=x.size(),m=y.size();\\n        string s;\\n        sort(x.begin(),x.end());\\n        sort(y.begin(),y.end());\\n        int dp[n+1][m+1];\\n        for(int i=0;i<=n;i++)dp[i][0]=0;\\n        for(int i=0;i<=m;i++)dp[0][i]=0;\\n        for(int i=1;i<=n;i++){\\n            for(int j=1;j<=m;j++){\\n                if(x[i-1]==y[j-1])dp[i][j]=1+dp[i-1][j-1];\\n                else {\\n                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);\\n                }\\n            }\\n        }\\n        return (dp[n][m]==n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2665776,
                "title": "hash-map-easy-approach-o-n-in-python",
                "content": "Hey Leets!\\nI have approached this problem using python dictionary (hashmap in other languages). First of all I have counted each letter in magazine and stored it in magDict. Now we will iterate through each character of ransomNote and if the character is present in dictionary then we will decrement that character from dictionary. If there are any character in ransomNote that is not present in magDict then we will return False. Otherwise return True.\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        magDict = {}\\n        for i in magazine:\\n            if i in magDict:\\n                magDict[i] +=1\\n            else:\\n                magDict[i] = 1\\n        for j in ransomNote:\\n            if magDict.get(j) and magDict[j]>0:\\n                magDict[j] -=1\\n            else:\\n                return False\\n        return True\\n```\\n\\nHope it helps! If any queries feel free to ask :)",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        magDict = {}\\n        for i in magazine:\\n            if i in magDict:\\n                magDict[i] +=1\\n            else:\\n                magDict[i] = 1\\n        for j in ransomNote:\\n            if magDict.get(j) and magDict[j]>0:\\n                magDict[j] -=1\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2650375,
                "title": "simple-c-solution-alternating-magazine-input",
                "content": "Aproach utilizes c# functions, by getting the letter position and removing it from magazine using string.Remove, it is the most nature way as we would do in case of real ransomNote ;)\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        if(ransomNote.Length > magazine.Length) return false;\\n        for(int i = 0; i < ransomNote.Length; i++)\\n        {\\n            var idx = magazine.IndexOf(ransomNote[i]);\\n            if(idx == -1){\\n                return false;\\n            }\\n            magazine = magazine.Remove(idx,1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool CanConstruct(string ransomNote, string magazine) {\\n        if(ransomNote.Length > magazine.Length) return false;\\n        for(int i = 0; i < ransomNote.Length; i++)\\n        {\\n            var idx = magazine.IndexOf(ransomNote[i]);\\n            if(idx == -1){\\n                return false;\\n            }\\n            magazine = magazine.Remove(idx,1);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2594211,
                "title": "python-simple-solution-no-hashtable-beats-98-63-in-runtime",
                "content": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        out = False\\n        for elem in ransomNote:\\n            if elem in magazine:\\n                out = True\\n                magazine = magazine.replace(elem,\\'\\',1)\\n            else:\\n                out = False\\n                return out\\n                \\n        return out\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        out = False\\n        for elem in ransomNote:\\n            if elem in magazine:\\n                out = True\\n                magazine = magazine.replace(elem,\\'\\',1)\\n            else:\\n                out = False\\n                return out\\n                \\n        return out\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2585361,
                "title": "python-99-5-faster-simple-solution",
                "content": "Easy to follow straightforward solution.\\n\\n```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        #iterate the unqiue letter in ransom note\\n        for i in set(ransomNote):\\n\\n            #check if the letter count in magazine is less than ransom note\\n            if magazine.count(i) < ransomNote.count(i):\\n                return(False)\\n        \\n        return(True)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        \\n        #iterate the unqiue letter in ransom note\\n        for i in set(ransomNote):\\n\\n            #check if the letter count in magazine is less than ransom note\\n            if magazine.count(i) < ransomNote.count(i):\\n                return(False)\\n        \\n        return(True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2572448,
                "title": "python-begginer-solution",
                "content": "Solution based on try-except block. \\n\\n~~~\\n        note = list(magazine)\\n        for letter in ransomNote:\\n            try:\\n                note.remove(letter)\\n            except ValueError:\\n                return False\\n        return True\\n~~~",
                "solutionTags": [
                    "Python"
                ],
                "code": "Solution based on try-except block. \\n\\n~~~\\n        note = list(magazine)\\n        for letter in ransomNote:\\n            try:\\n                note.remove(letter)\\n            except ValueError:\\n                return False\\n        return True\\n~~~",
                "codeTag": "Unknown"
            },
            {
                "id": 2480474,
                "title": "python-1-line-set-brute-force-detailed-explanation-easy-understand-detailed",
                "content": "**Python 1 line: \\uD83D\\uDE32**\\n* Counter function returns the total occurance value of a string.\\n* For example: if ransomeNote = \"aab\" then the Counter(ransomNote) will be { \\'a\\': 2, \\'b\\': 1}.\\n* So we simply substract them and if the substract num is less then 0 then it will return False\\n* Else it will return True\\n\\n\\n```\\nfrom collections import Counter\\n\\nclass Solution:\\n\\tdef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t\\treturn not Counter(ransomNote) - Counter(magazine)\\n```\\n\\n**Using Set & count method: \\uD83D\\uDE33**\\n* Point to be noted than a **Set is faster than list**\\n* A Set will only take one value once, so if there is \"aab\" then it will return {\\'a\\', \\'b\\'}\\n* Main trick is this, if \\'a\\' is availabe minimum once in **magazine** then it will full fill the condition\\n* So we make the ransomNote to a Set\\n* After that we loop through the set of ransomNote and count the char in ransomNote and magazine\\n* Simply if a char is in the ransomNote but not in magazine then we return False otherwise return True.\\n\\n```\\nclass Solution:\\n\\tdef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t\\tfor i in set(ransomNote):\\n\\t\\t\\tif ransomNote.count(i) > magazine.count(i):\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n```\\n\\n**Brute Force & Hash Map: \\uD83E\\uDD37\\u200D\\u2642\\uFE0F**\\n\\n* Loop through the magazine and count the occurance of letter and save them in magazine_dict value\\n* Same for the ransomNote\\n* Now simply check from the ransomNote_dict if the value is in magazine_dict\\n* If so then check the occurance\\n* If the occurance of a char in ransomNote_dict is greater than the occurance of magazine_dict, return False\\n\\n```\\nclass Solution:\\n\\tdef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t\\tmagazine_dict, ransomNote_dict = {}, {}\\n\\n\\t\\tfor letter in magazine:\\n\\t\\t\\tif letter in magazine_dict:\\n\\t\\t\\t\\tmagazine_dict[letter] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmagazine_dict[letter] = 1\\n\\n\\t\\tfor letter in ransomNote:\\n\\t\\t\\tif letter in ransomNote_dict:\\n\\t\\t\\t\\transomNote_dict[letter] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\transomNote_dict[letter] = 1\\n\\n\\t\\tfor letter in ransomNote_dict:\\n\\t\\t\\tif letter not in magazine_dict:\\n\\t\\t\\t\\treturn False\\n\\t\\t\\tif ransomNote_dict[letter] > magazine_dict[letter]:\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n```\\n\\n#### Please UpVote if you find this helpful. \\uD83D\\uDE07\\n#### Thank you. \\uD83D\\uDE07",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n\\tdef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t\\treturn not Counter(ransomNote) - Counter(magazine)\\n```\n```\\nclass Solution:\\n\\tdef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t\\tfor i in set(ransomNote):\\n\\t\\t\\tif ransomNote.count(i) > magazine.count(i):\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n```\n```\\nclass Solution:\\n\\tdef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\t\\tmagazine_dict, ransomNote_dict = {}, {}\\n\\n\\t\\tfor letter in magazine:\\n\\t\\t\\tif letter in magazine_dict:\\n\\t\\t\\t\\tmagazine_dict[letter] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tmagazine_dict[letter] = 1\\n\\n\\t\\tfor letter in ransomNote:\\n\\t\\t\\tif letter in ransomNote_dict:\\n\\t\\t\\t\\transomNote_dict[letter] += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\transomNote_dict[letter] = 1\\n\\n\\t\\tfor letter in ransomNote_dict:\\n\\t\\t\\tif letter not in magazine_dict:\\n\\t\\t\\t\\treturn False\\n\\t\\t\\tif ransomNote_dict[letter] > magazine_dict[letter]:\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2480010,
                "title": "python3-95-20-o-n-solution-beginner-friendly",
                "content": "TC: O(N), N = max(len(a), len(b))\\n\\n```\\nclass Solution:\\n    def canConstruct(self, a: str, b: str) -> bool:\\n        letter = [0 for _ in range(26)]\\n        \\n        for c in b:\\n            letter[ord(c) - 97] += 1\\n        \\n        for c in a:\\n            letter[ord(c) - 97] -= 1\\n            \\n        return not any((i < 0 for i in letter))\\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def canConstruct(self, a: str, b: str) -> bool:\\n        letter = [0 for _ in range(26)]\\n        \\n        for c in b:\\n            letter[ord(c) - 97] += 1\\n        \\n        for c in a:\\n            letter[ord(c) - 97] -= 1\\n            \\n        return not any((i < 0 for i in letter))\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2479811,
                "title": "python-easy-and-beginner-friendly-solution",
                "content": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\trn = Counter(ransomNote)\\n\\tmg = Counter(magazine)\\n\\tfor key in rn:\\n\\t\\tif key not in mg:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\tif rn[key] > mg[key]:\\n\\t\\t\\t\\treturn False\\n\\treturn True",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\ndef canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n\\trn = Counter(ransomNote)\\n\\tmg = Counter(magazine)\\n\\tfor key in rn:\\n\\t\\tif key not in mg:\\n\\t\\t\\treturn False\\n\\t\\telse:\\n\\t\\t\\tif rn[key] > mg[key]:\\n\\t\\t\\t\\treturn False\\n\\treturn True",
                "codeTag": "Python3"
            },
            {
                "id": 2477218,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string a, string b) {\\n        map<char, int> mp;\\n        \\n        for(int i=0; i<b.length(); i++) {\\n            mp[b[i]]++;\\n        }\\n        \\n        for(int i=0; i<a.length(); i++) {\\n            if(mp[a[i]]>0) mp[a[i]]--;\\n            else return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string a, string b) {\\n        map<char, int> mp;\\n        \\n        for(int i=0; i<b.length(); i++) {\\n            mp[b[i]]++;\\n        }\\n        \\n        for(int i=0; i<a.length(); i++) {\\n            if(mp[a[i]]>0) mp[a[i]]--;\\n            else return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476916,
                "title": "just-two-maps",
                "content": "##### Java\\n```java\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> ransomNoteMap = new HashMap<>();\\n        Map<Character, Integer> magazineMap = new HashMap<>();\\n\\n        for (char letter : magazine.toCharArray()) {\\n            magazineMap.put(letter, magazineMap.getOrDefault(letter, 0) + 1);\\n        }\\n\\n        for (char letter : ransomNote.toCharArray()) {\\n            ransomNoteMap.put(letter, ransomNoteMap.getOrDefault(letter, 0) + 1);\\n            if (ransomNoteMap.get(letter) > magazineMap.getOrDefault(letter, 0))\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n```\\n\\n\\n##### Java Functional\\n```java\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> ransomNoteMap = new HashMap<>(), magazineMap = new HashMap<>();\\n        magazine.chars().mapToObj(letter -> (char) letter).forEach(letter -> magazineMap.put(letter, magazineMap.getOrDefault(letter, 0) + 1));\\n        ransomNote.chars().mapToObj(letter -> (char) letter).forEach(letter -> ransomNoteMap.put(letter, ransomNoteMap.getOrDefault(letter, 0) + 1));\\n        return ransomNoteMap.keySet().stream().allMatch(letter -> ransomNoteMap.get(letter) <= magazineMap.getOrDefault(letter, 0));\\n    }\\n```\\n\\n\\n##### C++\\n```c++\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> ransomNoteMap;\\n        unordered_map<char, int> magazineMap;\\n\\n        for (char letter : magazine) {\\n            magazineMap[letter]++;\\n        }\\n\\n        for (char letter : ransomNote) {\\n            ransomNoteMap[letter]++;\\n            if (ransomNoteMap[letter] > magazineMap[letter])\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```java\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> ransomNoteMap = new HashMap<>();\\n        Map<Character, Integer> magazineMap = new HashMap<>();\\n\\n        for (char letter : magazine.toCharArray()) {\\n            magazineMap.put(letter, magazineMap.getOrDefault(letter, 0) + 1);\\n        }\\n\\n        for (char letter : ransomNote.toCharArray()) {\\n            ransomNoteMap.put(letter, ransomNoteMap.getOrDefault(letter, 0) + 1);\\n            if (ransomNoteMap.get(letter) > magazineMap.getOrDefault(letter, 0))\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n```\n```java\\npublic boolean canConstruct(String ransomNote, String magazine) {\\n        Map<Character, Integer> ransomNoteMap = new HashMap<>(), magazineMap = new HashMap<>();\\n        magazine.chars().mapToObj(letter -> (char) letter).forEach(letter -> magazineMap.put(letter, magazineMap.getOrDefault(letter, 0) + 1));\\n        ransomNote.chars().mapToObj(letter -> (char) letter).forEach(letter -> ransomNoteMap.put(letter, ransomNoteMap.getOrDefault(letter, 0) + 1));\\n        return ransomNoteMap.keySet().stream().allMatch(letter -> ransomNoteMap.get(letter) <= magazineMap.getOrDefault(letter, 0));\\n    }\\n```\n```c++\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        unordered_map<char, int> ransomNoteMap;\\n        unordered_map<char, int> magazineMap;\\n\\n        for (char letter : magazine) {\\n            magazineMap[letter]++;\\n        }\\n\\n        for (char letter : ransomNote) {\\n            ransomNoteMap[letter]++;\\n            if (ransomNoteMap[letter] > magazineMap[letter])\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2476879,
                "title": "golang-tc-n-sc-n-100-fast-solution-in-golang",
                "content": "Please upvote this solution in case you like the solution\\n\\n```\\nfunc canConstruct(ransomNote string, magazine string) bool {\\n   var counts [26]int\\n\\n\\tif len(ransomNote) > len(magazine) {\\n\\t\\treturn false\\n\\t}\\n\\n\\tfor _, c := range magazine {\\n\\t\\tcounts[c-\\'a\\']++\\n\\t}\\n\\n\\tfor _, c := range ransomNote {\\n\\t\\tif counts[c-\\'a\\'] == 0 {\\n\\t\\t\\treturn false\\n\\t\\t} else {\\n\\t\\t\\tcounts[c-\\'a\\']--\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc canConstruct(ransomNote string, magazine string) bool {\\n   var counts [26]int\\n\\n\\tif len(ransomNote) > len(magazine) {\\n\\t\\treturn false\\n\\t}\\n\\n\\tfor _, c := range magazine {\\n\\t\\tcounts[c-\\'a\\']++\\n\\t}\\n\\n\\tfor _, c := range ransomNote {\\n\\t\\tif counts[c-\\'a\\'] == 0 {\\n\\t\\t\\treturn false\\n\\t\\t} else {\\n\\t\\t\\tcounts[c-\\'a\\']--\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2476621,
                "title": "ransome-note",
                "content": "import java.util.*;\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine)\\n    {\\n        String a=ransomNote;\\n        String b=magazine;\\n        int c=0;\\n        int d=a.length();\\n         for(int i=0;i<a.length();i++)\\n        {\\n        \\tchar x=a.charAt(i);\\n        \\tString y=Character.toString(x);\\n        \\tif(b.contains(y))\\n        \\t{\\n        \\t\\tc++;\\n        \\t\\tint e=b.indexOf(y);\\n        \\t    b=charRemoveAt(b,e);\\n        \\t}\\n        }\\n       \\n        if(c==d)\\n        \\treturn true;\\n        else\\n        \\treturn false;\\n    \\t}\\n    public static String charRemoveAt(String b, int e)\\n    {\\n\\t\\treturn b.substring(0, e) + b.substring(e + 1);\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean canConstruct(String ransomNote, String magazine)\\n    {\\n        String a=ransomNote;\\n        String b=magazine;\\n        int c=0;\\n        int d=a.length();\\n         for(int i=0;i<a.length();i++)\\n        {\\n        \\tchar x=a.charAt(i);\\n        \\tString y=Character.toString(x);\\n        \\tif(b.contains(y))\\n        \\t{\\n        \\t\\tc++;\\n        \\t\\tint e=b.indexOf(y);\\n        \\t    b=charRemoveAt(b,e);\\n        \\t}",
                "codeTag": "Java"
            },
            {
                "id": 2476476,
                "title": "easy-c-java-hashmap-solution",
                "content": "**C++**\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) \\n    {\\n        //ransomeNote can be constructed from magazine if magazine contains all the letter used in making ransomeNote\\n\\t\\t\\n        //1 freq hashmap\\n        unordered_map<char,int>map;\\n        \\n        //store all the char of magazine so that it can be searched easily\\n        for(auto mg:magazine){\\n            map[mg]++;\\n        }\\n        \\n        //iterate ransomeNote         \\n        for(auto ch:ransomNote)\\n        {\\n            if(!map[ch]--) // if char of ransomNote exists in map than decrement \\n            {\\n                return false;\\n            }\\n        }\\n            return true;\\n    }\\n};\\n```\\n**JAVA**\\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int []arr=new int[26];\\n        for(char mg : magazine.toCharArray()){\\n            arr[mg-\\'a\\']++;\\n        }\\n        \\n        for(char ch:ransomNote.toCharArray()){\\n            if(arr[ch-\\'a\\']==0) return false;\\n            \\n            else if(arr[ch-\\'a\\']>0)\\n                arr[ch-\\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) \\n    {\\n        //ransomeNote can be constructed from magazine if magazine contains all the letter used in making ransomeNote\\n\\t\\t\\n        //1 freq hashmap\\n        unordered_map<char,int>map;\\n        \\n        //store all the char of magazine so that it can be searched easily\\n        for(auto mg:magazine){\\n            map[mg]++;\\n        }\\n        \\n        //iterate ransomeNote         \\n        for(auto ch:ransomNote)\\n        {\\n            if(!map[ch]--) // if char of ransomNote exists in map than decrement \\n            {\\n                return false;\\n            }\\n        }\\n            return true;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) {\\n        int []arr=new int[26];\\n        for(char mg : magazine.toCharArray()){\\n            arr[mg-\\'a\\']++;\\n        }\\n        \\n        for(char ch:ransomNote.toCharArray()){\\n            if(arr[ch-\\'a\\']==0) return false;\\n            \\n            else if(arr[ch-\\'a\\']>0)\\n                arr[ch-\\'a\\']--;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476400,
                "title": "easy-c-solution-using-hashing",
                "content": "***127 / 127 test cases passed***.\\n**Status:** Accepted\\n**Runtime:** 24 ms\\n**Memory Usage:** 8.8 MB\\n\\n```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> freq(26,0);\\n        \\n        for(char c: magazine)                  // Map all characters from magazine to the map.\\n            freq[c-\\'a\\']++;\\n        \\n        for(char c: ransomNote){\\n            if(!freq[c-\\'a\\'])                          //If a ransomNote character is not present or count is 0, return false\\n                return false;\\n            else\\n                freq[c-\\'a\\']--;                       //If present in hashmap, decrease it\\'s count\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        vector<int> freq(26,0);\\n        \\n        for(char c: magazine)                  // Map all characters from magazine to the map.\\n            freq[c-\\'a\\']++;\\n        \\n        for(char c: ransomNote){\\n            if(!freq[c-\\'a\\'])                          //If a ransomNote character is not present or count is 0, return false\\n                return false;\\n            else\\n                freq[c-\\'a\\']--;                       //If present in hashmap, decrease it\\'s count\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1750819,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1693844,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1827142,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1634008,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1568329,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1576850,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 2007896,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1780712,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 2004187,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1930251,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1750819,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1693844,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1827142,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1634008,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1568329,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1576850,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 2007896,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1780712,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 2004187,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1930251,
                "content": [
                    {
                        "username": "veretennikovalexey",
                        "content": "I have asked chatGPT to solve this problem :)"
                    },
                    {
                        "username": "Veloscocity",
                        "content": "ChatGPT didn't know how to btw"
                    },
                    {
                        "username": "YoussefSaad",
                        "content": "based"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "coward"
                    },
                    {
                        "username": "GregNicholas",
                        "content": "weak"
                    },
                    {
                        "username": "boudhayank",
                        "content": "copium\\n"
                    },
                    {
                        "username": "shubham_diwe",
                        "content": "There are issues with the environment. Initially, I thought i had missed a condition or something. But after testing this in my local environment for the exact same test case where it evaluates to \"true\" in leetcode, but evaluates correctly in local as well as AWS EC2, i can confirm that there is an issue with their environment and test cases.\\n\\nFunny part is , just to check, i returned all values as flag = \\'false\\' for testing in lettcode, and still my output for test case 1 and case 2 is coming as \"true\""
                    },
                    {
                        "username": "jenniferabowd",
                        "content": "I\\'m having similar issues with TypeScript and JavaScript."
                    },
                    {
                        "username": "ayour_ditran",
                        "content": "I had the same issue, then I selected Python3 on the Letcode environment, and it worked...."
                    },
                    {
                        "username": "adiraj04",
                        "content": "ransomNote = \"aa\"\\nmagazine = \"aab\"\\nExpected: True\\nEach letter in magazine can only be used once in ransomNote.\\n\\nHow this works? "
                    },
                    {
                        "username": "phanidharguttikonda",
                        "content": "Yes, that there are two right u can use each one time only, there can have multiple but u have to use each one , so u will get true only, the statement says that if use on element at that place u should not use that same element at that place\\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "letters of ransomNote must be present in magazine, not   vice-versa. Letters can be more in  magazine but not less."
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "did this method work for u when u submitted it \\n"
                    },
                    {
                        "username": "abharawat8jan",
                        "content": "we are able to make the  ransomNote using the letters in magazine. Magazine should contain all letters for ransomNote"
                    },
                    {
                        "username": "LaPooSIC",
                        "content": "The first video solution (without hashmap) is incorrect. Try ransomNote = \"ba\" and magazine = \"abb\". This should return true, but returns false.\\n\\nhttps://leetcode.com/explore/featured/card/the-leetcode-beginners-guide/692/challenge-problems/4427/"
                    },
                    {
                        "username": "SonalN",
                        "content": "yup you are correct. It should be \\n\\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1);\\n\\ninstead of\\n\\n magazine = magazine.substring(0,i) + magazine.substring(i+1);"
                    },
                    {
                        "username": "sathishns",
                        "content": "return (Counter(ransomNote) -  Counter(magazine)) == {}"
                    },
                    {
                        "username": "AlecLC",
                        "content": "[@rahuldey7417](/rahuldey7417)  It's an empty dictionary. This is actually a really cool method, I didn't know you could subtract counters like that. Apparently when you subtract counters, the result is that it returns only positive count keys. So if you subtract a superset counter from a subset, you will get an empty dict. Neat."
                    },
                    {
                        "username": "rahuldey7417",
                        "content": "[@hitler_fitler](/hitler_fitler) that\\'s an empty tuple  i guess"
                    },
                    {
                        "username": "hitler_fitler",
                        "content": "can you explain the {}? Why you put this"
                    },
                    {
                        "username": "JasurbekAO",
                        "content": "![image](https://assets.leetcode.com/users/images/ee29806b-7e6a-411b-b15c-81b3f52ba17b_1654363458.0674186.png)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "goesbyabhi",
                        "content": "Ok ok I got it. So for those who were lost just like me, just forget about the existence of ransomNote and magazine and consider them as string1 and string2. \\n`string1 = \"aa\", string2 = \"aab\"`\\nWe want to verify if string1 is a subset of string2 i.e if all the letters of string1 are present in string2. If yes then return true else return false"
                    },
                    {
                        "username": "Stiloshka",
                        "content": "My appreciation"
                    },
                    {
                        "username": "blankartyom",
                        "content": " `class Solution:`\n`    def canConstruct(self, ransomNote: str, magazine: str) -> bool:`\n`        for i in ransomNote:`\n`            if magazine.count(i) >= ransomNote.count(i): continue`\n`            else: return False`\n`        return True`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "codechef___",
                        "content": "what if length of ransomNote is greater than magazine .\nfor example\n\"\"\"\nransomNote = \"aaa\"\nmagazine = \"ab\"\n\"\"\"\n\nand also what if alphabets are not in contiguous manner\nfor example \n\"\"\"\nransomNote = \"aba\"\nmagazine = \"aa\"\n\"\"\"\n??\n"
                    },
                    {
                        "username": "Sujalnigam2003",
                        "content": "[@syedfhussain](/syedfhussain) no problem with contiguous manner we can simply count the letters by using ascii"
                    },
                    {
                        "username": "syedfhussain",
                        "content": "If ransomNote is greater than magazine then I think its not a valid question\\nif alphabets are not in contiguous manner, I have this same question?!"
                    },
                    {
                        "username": "wypeng1103",
                        "content": "ransomNote =\"aab\";\\nmagazine =\"baa\";\\nExpected true\\nHow this works?\\n\\nI didn\\'t see it clearly, I thought it was testing the whole string instead of characters..."
                    },
                    {
                        "username": "toplamp",
                        "content": "You are testing the characters in the magazine and ransom note. In the testcase you gave, there are 2 instances of \\'a\\' and 1 instance of \\'b\\' in both the ransomNote and magazine. The order in which they appear does not matter. What matters is that there are enough of the same letters in the magazine as the ransomNote."
                    }
                ]
            },
            {
                "id": 1868850,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1866060,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1826319,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1738430,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 2064777,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 2030356,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1998015,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1979978,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1976592,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1945096,
                "content": [
                    {
                        "username": "20kd1a05a8",
                        "content": "i have written the code in python, for the 3 test cases it works fine when i run it in my own eidtor but here on the leetcode console it shows me the wrong output."
                    },
                    {
                        "username": "shivam0898",
                        "content": "how constructor work?\\n"
                    },
                    {
                        "username": "prashantverma1357",
                        "content": "constructor like __init__ in python gets automatically invoked when u create an instance of the class u dont need to call it separately "
                    },
                    {
                        "username": "TheDoctorRossi4",
                        "content": "ransomNote = \"aa\"\nmagazine = \"aab\"\nReturn: True\n\"Each letter in magazine can only be used once in ransomNote\" ...."
                    },
                    {
                        "username": "toplamp",
                        "content": "There are two occurrences of \\'a\\' in the magazine, meaning it has enough letters to create the ransomNote."
                    },
                    {
                        "username": "user4731Y",
                        "content": "Well, it's asking for a hash map. Curious, is there a better than O(n+m) solution?"
                    },
                    {
                        "username": "shape_mismatch",
                        "content": "Not as far as I can tell. "
                    },
                    {
                        "username": "mkaypl",
                        "content": "[@prath04](/prath04) Sorting is slower than O(n)"
                    },
                    {
                        "username": "prath04",
                        "content": "yes we can solve it by sorting with O(m) complexity only\\nsort both strings \\nthen check if the letters are equal if found equal forward the pointer\\npointer is only for ransom\\nif pointer if at end of ransom(i.e. at pt==size of ransom) return true else false\\n\\nclass Solution {\\npublic:\\n    bool canConstruct(string r, string m) {\\n        sort(r.begin(),r.end()); \\n        sort(m.begin(),m.end());\\n        int pt = 0;\\n        for(int i=0;i<m.length();i++){\\n            if(m[i]==r[pt]){\\n                pt++;\\n                if(pt==r.size()){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "rwatso",
                        "content": "This is nearly identical to isAnagaram: Make a frequency counter hash map for ransomNote and magazine. The logic is check that the letter from ransom note is in magazine. Also check that the shared letters are not greater in the magazine "
                    },
                    {
                        "username": "sharpthesde318",
                        "content": "This one seems to be almost the same as Leetcode 242"
                    },
                    {
                        "username": "leeccf",
                        "content": "I wrote a simple code and it fails... can anyone help me ?\\n\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return (\"\".join(sorted(ransomNote)) in \"\".join(sorted(magazine)))"
                    },
                    {
                        "username": "vysotskiyaliaksandr",
                        "content": "Can I just check substring? \\nLike this:\\n\\n`/**\\n * @param {string} ransomNote\\n * @param {string} magazine\\n * @return {boolean}\\n */\\nvar canConstruct = function(ransomNote, magazine) {\\n    return magazine.includes(ransomNote)\\n};`"
                    },
                    {
                        "username": "rammuthukumar18",
                        "content": "No you cant you should check for subsequence or subset\\n"
                    },
                    {
                        "username": "RenniOG",
                        "content": "Hahaha why can\\'t every problem be this creative"
                    },
                    {
                        "username": "rmokgomole706",
                        "content": "how do i construct  ransomnotes together "
                    }
                ]
            },
            {
                "id": 1931952,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1913453,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1883134,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1882648,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1867879,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1838372,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1827529,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1827145,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1804785,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1788048,
                "content": [
                    {
                        "username": "solution_finder",
                        "content": "This solution is quite easy ..\\npublic static boolean canConstruct(String ransomNote, String magazine) {\\n\\t\\t for (int i = 0; i < ransomNote.length(); i++) {\\n\\t            char ch = ransomNote.charAt(i);\\n\\t            if (magazine.indexOf(ch) == -1) {\\n\\t                return false;\\n\\t            }\\n\\t            magazine = magazine.replaceFirst(String.valueOf(ch), \"\");\\n\\t        }\\n\\t        return true;\\n\\t}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "These rules are quite easy...\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "gRockets",
                        "content": "Is the ransom not a substr?"
                    },
                    {
                        "username": "odakab54",
                        "content": "i tried to use reflection and get reference to internal byte array of string, then found out it\\'s prevented on jdk 17\\nthank you oracle who asked for it"
                    },
                    {
                        "username": "AWildSalamiBar",
                        "content": "Tip; Using indexOf works very well "
                    },
                    {
                        "username": "dnthem",
                        "content": "There are two approaches for this problem, one uses array base and the other is hashmap.\nWhich one is faster? In the submissions tab, I see that array base approach is faster, but hear me out.\nI think the array base approach may be faster if the magazine size is relatively small whereas hashmap may have overhead performance in its implementation.\nHowever, if mag size is large then hashmap is fater because the array base approach needs to perform the search which takes O(n) time to find the element whereas hashmap only takes O(1).\nWhat do you guys think? Correct me if I am wrong."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "ransomNote =\\n\"ce\" \\n\\nmagazine =\\n\"e\"\\n\\nexpected = false?? \\ncan someone explain why??"
                    },
                    {
                        "username": "EnterPrime",
                        "content": "You probably confusing the two strings ! Ransom Note is what you are supposed to write with the letter of the magazine (Each letter in magazine can only be used once in ransomNote)"
                    },
                    {
                        "username": "cyptochrisjames",
                        "content": "Because there would need to be a c in magazine for it to be true."
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        l = []\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                l.append(i)\\n                magazine.remove(i)\\n        if len(l) == len(ransomNote):\\n            return True\\n        else:\\n            return False"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "adiraj04",
                        "content": "bool canConstruct(string ransomNote, string magazine) {\\n        \\n        int count[26] = {0};\\n        for(char ch : magazine)\\n            count[ch - \\'a\\']++;\\n        \\n        for(char ch : ransomNote)\\n            if(count[ch - \\'a\\']-- <= 0)\\n                return false;\\n        \\n        return true;\\n    }\\n\\nI\\'m doing the same thing but gives error in \\nransomNote = \"aa\"\\nmagazine = \"aab\"\\nMy Code:\\nclass Solution {\\npublic:\\n    bool canConstruct(string ransomNote, string magazine) {\\n        int count1[26] = {0};\\n        for(int i=0; i<ransomNote.length(); i++)\\n        {\\n            int index = ransomNote[i]-\\'a\\';\\n            count1[index]++;\\n        }\\n\\n        int count2[26] = {0};\\n        for(int i=0; i<magazine.length(); i++)\\n        {\\n            int index = magazine[i]-\\'a\\';\\n            count2[index]++;\\n        }\\n        for(int i=0; i<26; i++)\\n        {\\n            if(count1[i]!=count2[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        return not Counter(ransomNote) - Counter(magazine)"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "RoKivals",
                        "content": "How it\\'s possible to make solution for 0 ms?? "
                    }
                ]
            },
            {
                "id": 1787328,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1787049,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1771401,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1768388,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1765473,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1757018,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1756867,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1729152,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1724631,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            },
            {
                "id": 1716124,
                "content": [
                    {
                        "username": "RedaAlb",
                        "content": "In some Python solutions, the `in` operator is used to check if a character is in the given string, for example, `ransomNote[i] in magazine`. These kind of solutions have a lower runtime (about half) than using a solution where you use a Counter. You can clearly see this if you look at the fastest runtime solutions in the submissions view. Why is that? Isn\\'t the time complexity of the `in` operator `O(n)`? So having that in the loop I thought will give a quadratic time complexity, hence higher runtime. Does anyone know what\\'s happening here?"
                    },
                    {
                        "username": "dimasikk_sasik",
                        "content": "I think it\\'s because \"string method count\" takes each element of strings (for example, in strings \"abcd\" and \"abcc\" it takes a, then b, then c, then d of the first string, then it do the same with the second string. When we talk about \"in\" operator it doesn\\'t have to take all the elements of each string, because if we have the situation, when we have strings \"ab\" and \"abcdef\" interpretator will compile \"a\" of \"ab\" and \"a of \"abcdef\", then will do the same with \"b\" and after that we faced with end of first string, so we don\\'t have to check the second string others elements. If it was \"count\", anyway, it will go through all the first and the second string, that will take more time, when \"in\" stopped iteration in needed moment. (Sorry for bad English, i\\'m beginner in this)"
                    },
                    {
                        "username": "dilsherb",
                        "content": "can anyone tell me what is wrong with this code \nfunction canConstruct([...magazine], [...ransomNote]) {\n    return ransomNote.every((el) => magazine.includes(el));\n}\nit is sollution to \"RansomeNote\" problem."
                    },
                    {
                        "username": "Kalyan19111999",
                        "content": "It doesn\\'t check the count of every \"el\" in magazine. Meaning even if there are multiple occurrences of a letter in ransom and a single occurrence of that letter in magazine, every function returns True."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Sahil_Nayak0",
                        "content": "Hi, I developed a code for this problem and one problem I face that is really shockable for me that is if I submit code it throw me that on x case your code is wrong but if I run in test case section in same case (where getting wrong error message) then it run successfully Accepted. how it\\'s possible? can you help me guys.\\n"
                    },
                    {
                        "username": "deleted_user",
                        "content": "Iterating through string as a set is magnitudes faster than just iterating through string\\nSomebody knows why?"
                    },
                    {
                        "username": "maxsergeev39",
                        "content": "Mainly because a set contains only unique elements"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "upup1904",
                        "content": "quesion should be clarified... can letter in magazine be used more than once?\\n\\nmagazine = \"x\"\\nransomNote = \"xx\"\\n\\nI don\\'t know if ransom note can be constructed from the letters in magazine from the problem description.  "
                    },
                    {
                        "username": "mkaypl",
                        "content": "\"Each letter in magazine can only be used once in ransomNote.\""
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/ransom-note-leet-code-383/"
                    },
                    {
                        "username": "gautamankulofficial",
                        "content": "in this case may be we can use if those characters are matching remove it if all is removed then retrun true other false\\n\\n `class Solution:\\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\\n        ransomNote = list(ransomNote)\\n        magazine = list(magazine)\\n        for i in ransomNote:\\n            if i in magazine:\\n                magazine.remove(i)\\n            else:\\n                return False\\n        return True `"
                    },
                    {
                        "username": "mehulpamale",
                        "content": "I think use of map will be the most optimized way"
                    },
                    {
                        "username": "SonalN",
                        "content": "The 1st solution in the solution video i.e. for without hashmap the substring is not created correctly; it should be \\nmagazine = magazine.substring(0,matchingIndex) + magazine.substring(matchingIndex+1); \\ninstead of \\nmagazine = magazine.substring(0,i) + magazine.substring(i+1);\\n\\nbecause \"matchingIndex\" makes sense over there else the test case would fail for inputs like below:\\nransomNote =\"cd\";\\nmagazine=\"dac\";\\n\\nransomNote =\"bacd\";\\nmagazine=\"abbddc\";"
                    }
                ]
            }
        ]
    }
]