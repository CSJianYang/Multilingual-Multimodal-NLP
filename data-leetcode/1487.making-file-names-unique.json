[
    {
        "title": "Group Sold Products By The Date",
        "question_content": "Table Activities:\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| sell_date   | date    |\n| product     | varchar |\n+-------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nEach row of this table contains the product name and the date it was sold in a market.\n\n&nbsp;\nWrite a solution to find for each date the number of different products sold and their names.\nThe sold products names for each date should be sorted lexicographically.\nReturn the result table ordered by sell_date.\nThe&nbsp;result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nActivities table:\n+------------+------------+\n| sell_date  | product     |\n+------------+------------+\n| 2020-05-30 | Headphone  |\n| 2020-06-01 | Pencil     |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | Basketball |\n| 2020-06-01 | Bible      |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | T-Shirt    |\n+------------+------------+\nOutput: \n+------------+----------+------------------------------+\n| sell_date  | num_sold | products                     |\n+------------+----------+------------------------------+\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\n| 2020-06-01 | 2        | Bible,Pencil                 |\n| 2020-06-02 | 1        | Mask                         |\n+------------+----------+------------------------------+\nExplanation: \nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.\nFor 2020-06-02, the Sold item is (Mask), we just return it.",
        "solutions": [
            {
                "id": 2139850,
                "title": "simple-explanation-easy",
                "content": "**<<<< Please Press upvote Button !!!!!**\\n\\nAlmost immediately detected, the only serious challange of this problem is how to aggregate the product names in one cell. In MySql, this can be done using GROUP_CONCAT, in which you can also specify the sorting mechanism for the group concatenation (aggregation). The rest is simple.\\n```\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```\\n![image](https://assets.leetcode.com/users/images/1a22513a-f19e-4338-b241-14a37d53c39d_1655656234.9439957.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 692814,
                "title": "mysql-order-by-product-name-and-sell-date",
                "content": "Almost immediately detected, the only serious challange of this problem is how to aggregate the product names in one cell. In MySql, this can be done using GROUP_CONCAT, in which you can also specify the sorting mechanism for the group concatenation (aggregation). The rest is simple.\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Almost immediately detected, the only serious challange of this problem is how to aggregate the product names in one cell. In MySql, this can be done using GROUP_CONCAT, in which you can also specify the sorting mechanism for the group concatenation (aggregation). The rest is simple.\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "codeTag": "Unknown"
            },
            {
                "id": 2497772,
                "title": "mysql-solution-clean-faster-than-92",
                "content": "* ***please UPVOTE ***\\n```\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```\\n\\n* ***please UPVOTE ***\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2510956,
                "title": "mysql-beginner-level-easy-to-understand-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```\\n**Runtime:** 380 ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3863267,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    return activities.groupby(\\n        \\'sell_date\\'\\n    )[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n    ]).reset_index()\\n```\\n```SQL []\\nSELECT sell_date,\\n       count(DISTINCT product) AS num_sold,\\n       group_concat(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') products\\n  FROM activities\\n GROUP BY sell_date\\n ORDER BY sell_date;\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to **upvote** for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "MySQL",
                    "Pandas"
                ],
                "code": "```Python []\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    return activities.groupby(\\n        \\'sell_date\\'\\n    )[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n    ]).reset_index()\\n```\n```SQL []\\nSELECT sell_date,\\n       count(DISTINCT product) AS num_sold,\\n       group_concat(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') products\\n  FROM activities\\n GROUP BY sell_date\\n ORDER BY sell_date;\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 845705,
                "title": "all-dbs-simple-solution",
                "content": "Oracle\\n```\\nselect to_char(a.sell_date, \\'yyyy-mm-dd\\') sell_date\\n    , count(a.product) num_sold\\n    , listagg(a.product, \\',\\') within group(order by a.product) products\\nfrom (select distinct * from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```\\nMy SQL\\n```\\nselect sell_date\\n\\t, count(distinct product) num_sold\\n\\t, group_concat(distinct product order by product asc separator \\',\\') products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```\\nMS SQL\\n```\\nselect a.sell_date\\n   , count(a.product) num_sold\\n   , string_agg(a.product,\\',\\') within group (order by a.product) products\\nfrom (select distinct sell_date,product from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect to_char(a.sell_date, \\'yyyy-mm-dd\\') sell_date\\n    , count(a.product) num_sold\\n    , listagg(a.product, \\',\\') within group(order by a.product) products\\nfrom (select distinct * from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```\n```\\nselect sell_date\\n\\t, count(distinct product) num_sold\\n\\t, group_concat(distinct product order by product asc separator \\',\\') products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```\n```\\nselect a.sell_date\\n   , count(a.product) num_sold\\n   , string_agg(a.product,\\',\\') within group (order by a.product) products\\nfrom (select distinct sell_date,product from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3043998,
                "title": "mysql-simple-n-concise-query",
                "content": "# Query\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date,\\n       COUNT(DISTINCT(product), sell_date) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```\\n\\n\\n\\n*if the solution worked for you* ***please upvote***",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date,\\n       COUNT(DISTINCT(product), sell_date) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2209482,
                "title": "sql-easy-to-understand-using-group-concat",
                "content": "```\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\\nPlease upvote if you found this useful :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1262267,
                "title": "easiest-solution",
                "content": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) num_sold,\\n    GROUP_CONCAT(DISTINCT product) products\\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) num_sold,\\n    GROUP_CONCAT(DISTINCT product) products\\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946871,
                "title": "pandas-my-approach-with-clear-comments",
                "content": "\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n\\n```\\n![upvote img.jpg](https://assets.leetcode.com/users/images/fe39393f-fae2-42ae-8f28-c486468073a2_1692727296.8042412.jpeg)\\n",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2696570,
                "title": "faster-than-83-of-mysql-online-submissions",
                "content": "**<<<<upvote **\\n\\n\\tSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\n    GROUP_CONCAT( DISTINCT product ORDER BY product ASC separator \\',\\' ) AS product   \\n    FROM Activities GROUP BY sell_date ORDER BY sell_date ASC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**<<<<upvote **\\n\\n\\tSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\n    GROUP_CONCAT( DISTINCT product ORDER BY product ASC separator \\',\\' ) AS product   \\n    FROM Activities GROUP BY sell_date ORDER BY sell_date ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2012924,
                "title": "sql-query-with-detailed-explanation-sql",
                "content": "##### **GROUPCONCAT() is used to concatenat data from multiple rows into one field**\\n***step 1*: First we will count distinct products and name the column as num_sold\\n*step 2*: Next we use group concat to get the disctinct products and to display them in a column with a seperator(,) and order by products and name the column as products\\n*step 3*: We will group them by sell_date**\\n\\n\\n```\\nselect sell_date,count(distinct(product)) as num_sold, GROUP_CONCAT(distinct product order by product asc) as products\\nfrom Activities\\ngroup by sell_date\\n```\\n\\nUpvote this if you find it useful\\nThanks",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,count(distinct(product)) as num_sold, GROUP_CONCAT(distinct product order by product asc) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1074975,
                "title": "2-simple-sql-solutions-group-concat-and-string-agg",
                "content": "```\\nSELECT \\n  sell_date,\\n  COUNT(product) AS num_sold,\\n  STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT * FROM Activities) T\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```\\n\\n```\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT \\n  sell_date,\\n  COUNT(product) AS num_sold,\\n  STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT * FROM Activities) T\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```\n```\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3731869,
                "title": "mysql-easy-solution",
                "content": "# Code\\n```\\nSELECT \\n  sell_date, \\n  COUNT(DISTINCT(product)) AS num_sold, \\n  GROUP_CONCAT(DISTINCT(product)) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```\\n![catty.png](https://assets.leetcode.com/users/images/00b619c4-a2b5-4df8-b722-4d15b667f177_1688727609.374941.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n  sell_date, \\n  COUNT(DISTINCT(product)) AS num_sold, \\n  GROUP_CONCAT(DISTINCT(product)) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2134094,
                "title": "ms-sql-solution-with-string-agg",
                "content": "Please note that this solution with `string_agg` will work only from SQL Server 2017 and above and SQL Azure\\n```\\nselect sell_date, count(product) as \\'num_sold\\', string_agg(product, \\',\\') as products\\nfrom\\n(\\n    select distinct *\\n    from Activities\\n) t\\ngroup by sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect sell_date, count(product) as \\'num_sold\\', string_agg(product, \\',\\') as products\\nfrom\\n(\\n    select distinct *\\n    from Activities\\n) t\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 752045,
                "title": "ms-sql-server-simple-solution",
                "content": "```\\nselect sell_date, \\n    COUNT(product) as num_sold,\\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) as products from\\n    (select distinct sell_date,product FROM Activities) Act\\n    GROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, \\n    COUNT(product) as num_sold,\\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) as products from\\n    (select distinct sell_date,product FROM Activities) Act\\n    GROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2291965,
                "title": "best-solution-using-group-by-group-concat",
                "content": "#### **Please Upvote if you Like it**\\n##### The GROUP BY statement groups rows that have the same values into summary rows.\\n#####  The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.\\n##### Another group method we use is **GROUP_CONCAT**, which concat items of grouped rows and joins them by using \",\" seperator. \\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2264839,
                "title": "string-agg-explanation",
                "content": "This query will show the disired result: \\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(product,\\',\\') within group (order by product) as products\\nfrom\\n(SELECT DISTINCT sell_date, product FROM Activities) T\\ngroup by sell_date\\norder by sell_date\\n\\nthe reason for using this part ((SELECT DISTINCT sell_date, product FROM Activities) T) is that \\nneed for bring distinct value on product name. (SQL server can not understand Distinct in the STRING_AGG, so need some query to send distinct value)\\n\\nin addition, postgres sql can understand Distinct in STRING_AGG, so you can use this query instead of top in postgrest sql:\\n\\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(distinct(product), \\',\\'\\n order by product)\\n as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\nAlso you can check this link: \\nhttps://gregdodd.me/2021/08/24/distinct-list-in-string_agg/\\n\\nPlease UpVote if it was Helpful\\n\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "This query will show the disired result: \\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(product,\\',\\') within group (order by product) as products\\nfrom\\n(SELECT DISTINCT sell_date, product FROM Activities) T\\ngroup by sell_date\\norder by sell_date\\n\\nthe reason for using this part ((SELECT DISTINCT sell_date, product FROM Activities) T) is that \\nneed for bring distinct value on product name. (SQL server can not understand Distinct in the STRING_AGG, so need some query to send distinct value)\\n\\nin addition, postgres sql can understand Distinct in STRING_AGG, so you can use this query instead of top in postgrest sql:\\n\\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(distinct(product), \\',\\'\\n order by product)\\n as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\nAlso you can check this link: \\nhttps://gregdodd.me/2021/08/24/distinct-list-in-string_agg/\\n\\nPlease UpVote if it was Helpful\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2245118,
                "title": "simple-and-easy-solution-using-group-concat",
                "content": "```\\nSELECT \\n    sell_date,\\n    count(DISTINCT(product)) as num_sold,\\n    GROUP_CONCAT( DISTINCT product) as products\\nfrom Activities \\nGroup by sell_date;\\n```\\n\\n**Please UpVote if it was Helpful :)**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    sell_date,\\n    count(DISTINCT(product)) as num_sold,\\n    GROUP_CONCAT( DISTINCT product) as products\\nfrom Activities \\nGroup by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1997039,
                "title": "ms-sql-using-string-agg",
                "content": "```\\nwith t as (\\n    select distinct * from Activities)\\n\\nselect \\n     sell_date\\n    ,count(1) as num_sold\\n    ,string_agg(product,\\',\\') within group (order by product) as products\\nfrom t\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nwith t as (\\n    select distinct * from Activities)\\n\\nselect \\n     sell_date\\n    ,count(1) as num_sold\\n    ,string_agg(product,\\',\\') within group (order by product) as products\\nfrom t\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2591930,
                "title": "sql-solution-using-group-concat-definition-and-syntax-of-group-concat",
                "content": "--GROUP_CONCAT() function in MySQL is used to concatenate data from multiple rows into one field\\n--Syntax: SELECT col1, col2, ..., colN\\n        GROUP_CONCAT ( [DISTINCT] col_name1 \\n        [ORDER BY clause]  [SEPARATOR str_val] ) \\n        FROM table_name GROUP BY col_name2;\\n\\n            SELECT sell_date,\\n            COUNT(DISTINCT(product)) AS num_sold,\\n            GROUP_CONCAT(DISTINCT(product) SEPARATOR \\',\\') AS products\\n            FROM Activities\\n            GROUP BY sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "--GROUP_CONCAT() function in MySQL is used to concatenate data from multiple rows into one field\\n--Syntax: SELECT col1, col2, ..., colN\\n        GROUP_CONCAT ( [DISTINCT] col_name1 \\n        [ORDER BY clause]  [SEPARATOR str_val] ) \\n        FROM table_name GROUP BY col_name2;\\n\\n            SELECT sell_date,\\n            COUNT(DISTINCT(product)) AS num_sold,\\n            GROUP_CONCAT(DISTINCT(product) SEPARATOR \\',\\') AS products\\n            FROM Activities\\n            GROUP BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 3896640,
                "title": "grouping-with-aggregations",
                "content": "# My SQL\\n\\nFirst, we group the data by the `sell_date` column. This allows us to count the number of unique products sold on each sell date, which we store in the `num_sold` column.\\n\\nThe most challenging part is to sort and join all unique product names in each group to get the products column. We can use the `GROUP_CONCAT()` function to combine multiple values from multiple rows into a single string. The syntax of the `GROUP_CONCAT()` function is as follows:\\n```\\nGROUP_CONCAT(DISTINCT [column_name] [separator])\\n```\\nThe `DISTINCT` keyword ensures that only unique values are concatenated. The separator parameter specifies the character that should be used to separate the values.\\n\\n``` sql []\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product \\n    SEPARATOR \\',\\'\\n) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```\\n\\n# Pandas\\n\\nThe question asks us to group and summarize data by date. To do this, we first use the `groupby` function to group the `DataFrame` activities by date. This creates a new object called `groups`, which is a `DataFrameGroupBy` object.\\n\\nOnce we have the `DataFrameGroupBy` object, we can use the `agg()` function to perform aggregation operations on each group. The `agg()` function takes a list of aggregation tasks to perform. In this case, we are specifying two aggregation tasks:\\n- Creating num_solid column with the number of unique products sold on each sell date. \\n`num_sold=(\\'product\\', \\'nunique\\')`\\n- Join all unique names within each group. \\n`products=(\\'product\\', lambda x: \\',\\'.join(sorted(set(x))))`\\n\\n``` python3 []\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  groups = activities.groupby(\\'sell_date\\')\\n\\n  stats = groups.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(set(x))))\\n  ).reset_index()\\n  stats.sort_values(\\'sell_date\\', inplace=True)\\n  return stats\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\nGROUP_CONCAT(DISTINCT [column_name] [separator])\\n```\n``` sql []\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product \\n    SEPARATOR \\',\\'\\n) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```\n``` python3 []\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  groups = activities.groupby(\\'sell_date\\')\\n\\n  stats = groups.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(set(x))))\\n  ).reset_index()\\n  stats.sort_values(\\'sell_date\\', inplace=True)\\n  return stats\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3426731,
                "title": "superb-logic-mysql",
                "content": "\\n# Logic is to use distinct and group_concat\\n```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3145587,
                "title": "group-concat",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, GROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product ASC \\n    separator \\',\\') AS Products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, GROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product ASC \\n    separator \\',\\') AS Products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2522870,
                "title": "mysql-easy-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT sell_date,COUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT product SEPARATOR \",\" ) AS products FROM Activities\\nGroup by sell_date\\nORDER BY sell_date;\\n```\\n# upvote if u find it useful",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date,COUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT product SEPARATOR \",\" ) AS products FROM Activities\\nGroup by sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2246482,
                "title": "oracle-sql-solution-and-explanation",
                "content": "# Solution & explanation -\\nThe below code is not working but as per the oracle it should work.\\nClick this [link](https://livesql.oracle.com/apex/livesql/file/content_HT1O85E4BHSBWN93G1B3M8SI2.html) to check on oracle website.\\n\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(DISTINCT(product), \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\\n\\nIn question description, it is mentioned as **\"There is no primary key for this table, it may contain duplicates\"** and it contains duplicate values. So just fetch unqiue values of product & sell_date columns from activities table instead of fetching directly from the activities table. Check the below code.\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM (\\n    SELECT DISTINCT product, sell_date \\n    FROM activities\\n) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\\n\\nI hope it is helpful to you.\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(DISTINCT(product), \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM (\\n    SELECT DISTINCT product, sell_date \\n    FROM activities\\n) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2082472,
                "title": "sql-very-easy-solution",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) num_sold,\\ngroup_concat(distinct(product)) products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date;```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) num_sold,\\ngroup_concat(distinct(product)) products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date;```",
                "codeTag": "Unknown"
            },
            {
                "id": 1707967,
                "title": "simple-solution",
                "content": "SELECT sell_date, count(DISTINCT product) as num_sold, group_concat(DISTINCT product separator \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date",
                "solutionTags": [],
                "code": "SELECT sell_date, count(DISTINCT product) as num_sold, group_concat(DISTINCT product separator \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 692809,
                "title": "easy-mysql-solution",
                "content": "```\\nselect sell_date, count(distinct product) as num_sold , \\ngroup_concat(distinct product order by product asc separator \\',\\') as products               \\nfrom activities  \\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold , \\ngroup_concat(distinct product order by product asc separator \\',\\') as products               \\nfrom activities  \\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3903980,
                "title": "easy-solution",
                "content": "# SQL\\n```\\nselect sell_date, count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date\\n```\\n# Python\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  return activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\',\\'nunique\\'),(\\'products\\',lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date\\n```\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  return activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\',\\'nunique\\'),(\\'products\\',lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3647996,
                "title": "group-concat-explanation-mysql-pandas-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- In order to agrregate the product into a single row grouped by sell_date, we use **GROUP_CONCAT()** function.\\n- We can also specify the sorting condition in GROUP_CONCAT() as \\n`GROUP_CONCAT(DISTINCT product ORDER BY product) as products`\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, \\n  GROUP_CONCAT(DISTINCT product ORDER BY product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\\n```\\nimport pandas as pd\\n\\ndef group_sold_products_by_the_date(activities: pd.DataFrame) -> pd.DataFrame:\\n    df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n    return df\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, \\n  GROUP_CONCAT(DISTINCT product ORDER BY product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\n```\\nimport pandas as pd\\n\\ndef group_sold_products_by_the_date(activities: pd.DataFrame) -> pd.DataFrame:\\n    df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2564749,
                "title": "easiest-and-understandable-solution",
                "content": "# Write your MySQL query statement below\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date",
                "solutionTags": [],
                "code": "# Write your MySQL query statement below\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2501716,
                "title": "sql-server-easy-solution",
                "content": "**Key points - **\\n1. Remove duplicates from the table using CTE\\n2. Group by sell_date, count each sell date\\n3. Use string_agg function and order within group by product.\\n\\n```\\nwith cteactivity AS \\n    (SELECT DISTINCT *\\n    FROM activities)\\nSELECT sell_date,\\n\\t\\t count(product) AS num_sold,\\n\\t\\t string_agg(product, \\',\\') within group (order by product) AS products\\nFROM cteactivity\\nGROUP BY  sell_date\\nORDER BY  sell_date",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "**Key points - **\\n1. Remove duplicates from the table using CTE\\n2. Group by sell_date, count each sell date\\n3. Use string_agg function and order within group by product.\\n\\n```\\nwith cteactivity AS \\n    (SELECT DISTINCT *\\n    FROM activities)\\nSELECT sell_date,\\n\\t\\t count(product) AS num_sold,\\n\\t\\t string_agg(product, \\',\\') within group (order by product) AS products\\nFROM cteactivity\\nGROUP BY  sell_date\\nORDER BY  sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2078939,
                "title": "mysql-easy-solution",
                "content": "**Pls Upvote if you like the solution!**\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**Pls Upvote if you like the solution!**\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "codeTag": "Unknown"
            },
            {
                "id": 2063222,
                "title": "simple-mysql-solution-beats-100",
                "content": "```\\nSELECT\\n\\tsell_date,\\n\\tCOUNT(DISTINCT (product)) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```\\nEdit : As someone pointed out in the comments, we could use ```GROUP_CONCAT(DISTINCT(product) ORDER BY product ASC)``` to sort the products, but the above query works just as fine.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n\\tsell_date,\\n\\tCOUNT(DISTINCT (product)) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```\n```GROUP_CONCAT(DISTINCT(product) ORDER BY product ASC)```",
                "codeTag": "Unknown"
            },
            {
                "id": 2050476,
                "title": "quickest-solution",
                "content": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date,products",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date,products",
                "codeTag": "Unknown"
            },
            {
                "id": 693799,
                "title": "oracle-solution-listagg",
                "content": "```\\nWITH cte as(\\nselect distinct sell_date, product from Activities)\\n\\nselect TO_CHAR(sell_date,\\'YYYY-MM-DD\\') as sell_date, count(product) as num_sold,\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom cte\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nWITH cte as(\\nselect distinct sell_date, product from Activities)\\n\\nselect TO_CHAR(sell_date,\\'YYYY-MM-DD\\') as sell_date, count(product) as num_sold,\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom cte\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3600643,
                "title": "mysql-solution-for-group-sold-products-by-the-date-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the solution is to group the activities by sell date and then calculate the number of different products sold on each date. Additionally, we need to concatenate the names of the products and sort them lexicographically for each sell date.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to use the SQL query provided, which utilizes the GROUP BY clause to group the activities by sell date. Within each group, the COUNT(DISTINCT product) function is used to count the number of different products sold, while the GROUP_CONCAT(DISTINCT product ORDER BY product) function is used to concatenate and sort the product names lexicographically.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution depends on the number of rows in the Activities table. Let\\'s denote this number as n. The query performs a grouping operation, which typically has a time complexity of O(n log n) or O(n) depending on the database implementation. Additionally, the query involves sorting the product names lexicographically for each sell date, which also contributes to the overall time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this solution depends on the number of distinct sell dates and the number of distinct products. Let\\'s denote these numbers as d and p respectively. The space complexity is O(d + p), as it requires storing the distinct sell dates and the distinct product names in memory for grouping and concatenation operations.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3279846,
                "title": "sql-server-clean-easy",
                "content": "```\\nWITH CTE AS (\\n  SELECT DISTINCT * FROM Activities\\n)\\n\\nSELECT \\nsell_date,\\nCOUNT(product) AS num_sold,\\nSTRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM CTE\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "solutionTags": [],
                "code": "```\\nWITH CTE AS (\\n  SELECT DISTINCT * FROM Activities\\n)\\n\\nSELECT \\nsell_date,\\nCOUNT(product) AS num_sold,\\nSTRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM CTE\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2546731,
                "title": "1484-group-sold-products-by-the-date",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold, \\nGroup_Concat(distinct(product)\\nORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date ORDER BY sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold, \\nGroup_Concat(distinct(product)\\nORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date ORDER BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2442281,
                "title": "simple-solution",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold, \\nGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold, \\nGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2392750,
                "title": "mysql-easy-solution-using-group-concat",
                "content": "##### GROUP_CONCAT() function\\n\\nMySQL GROUP_CONCAT() function eturns a string with concatenated non-NULL value from a group.\\nReturns NULL when there are no non-NULL values.\\n\\n\\n```\\nselect sell_date, \\n\\tcount(distinct(product)) as num_sold, \\n\\t\\tgroup_concat(distinct(product)) as products\\nfrom activities\\ngroup by sell_date order by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, \\n\\tcount(distinct(product)) as num_sold, \\n\\t\\tgroup_concat(distinct(product)) as products\\nfrom activities\\ngroup by sell_date order by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2335072,
                "title": "simple-readable-group-by-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product) as products from Activities group by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product) as products from Activities group by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2271739,
                "title": "mysql-easy-understanding-beginner-friendly",
                "content": "```\\nselect  sell_date,\\n\\t    count(distinct product) as num_sold,\\n        group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect  sell_date,\\n\\t    count(distinct product) as num_sold,\\n        group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2265965,
                "title": "1484-group-sold-products-by-the-date",
                "content": "```\\nselect sell_date,\\ncount(distinct product)as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities \\ngroup by sell_date\\norder by sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct product)as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities \\ngroup by sell_date\\norder by sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2161143,
                "title": "group-concat-faster-than-95",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) num_sold, \\nGROUP_CONCAT(DISTINCT product) as products\\nFROM Activities\\nGROUP BY 1\\n```\\n\\nI am not sure if we have to use ORDER BY within GROUP_CONCAT as it returns the order lexicographically on its own. My assumption is that ---> ASC order is by default if you dont mention the ORDER BY in this clause. And also we dont need a SEPARATOR as the GROUP_CONCAT adds a \\',\\' between values by default. \\n\\nI can be wrong so please correct me if anyone knows more about this.",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) num_sold, \\nGROUP_CONCAT(DISTINCT product) as products\\nFROM Activities\\nGROUP BY 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2105157,
                "title": "easy-mysql-query-beginner-friendly",
                "content": "```sql\\nselect \\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "solutionTags": [],
                "code": "```sql\\nselect \\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974783,
                "title": "mysql-beats-100-00-memory-speed-0ms-april-2022",
                "content": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974660,
                "title": "mysql-solution-distict-group-concat-group-by",
                "content": "```\\nselect \\n    sell_date,\\n    count(distinct(product)) as num_sold,\\n    group_concat(distinct(product)) as products \\nfrom Activities  \\n    group by sell_date \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\n    sell_date,\\n    count(distinct(product)) as num_sold,\\n    group_concat(distinct(product)) as products \\nfrom Activities  \\n    group by sell_date \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1938564,
                "title": "oracle-listagg-group-by",
                "content": "Please upvote, if it helps\\n\\n```\\nselect to_char(sell_date) sell_date,count(1)num_sold,LISTAGG(product,\\',\\') within group (order by product) products from (select distinct * from Activities) group by sell_date order by sell_date\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect to_char(sell_date) sell_date,count(1)num_sold,LISTAGG(product,\\',\\') within group (order by product) products from (select distinct * from Activities) group by sell_date order by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1519970,
                "title": "ms-sql",
                "content": "#### Question\\n```\\n1484. Group Sold Products By The Date\\nEasy\\n\\nSQL Schema\\nTable Activities:\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| sell_date   | date    |\\n| product     | varchar |\\n+-------------+---------+\\nThere is no primary key for this table, it may contains duplicates.\\nEach row of this table contains the product name and the date it was sold in a market.\\n \\n\\nWrite an SQL query to find for each date, the number of distinct products sold and their names.\\n\\nThe sold-products names for each date should be sorted lexicographically. \\n\\nReturn the result table ordered by sell_date.\\n\\nThe query result format is in the following example.\\n\\nActivities table:\\n+------------+-------------+\\n| sell_date  | product     |\\n+------------+-------------+\\n| 2020-05-30 | Headphone   |\\n| 2020-06-01 | Pencil      |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | Basketball  |\\n| 2020-06-01 | Bible       |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | T-Shirt     |\\n+------------+-------------+\\n\\nResult table:\\n+------------+----------+------------------------------+\\n| sell_date  | num_sold | products                     |\\n+------------+----------+------------------------------+\\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |\\n+------------+----------+------------------------------+\\nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by comma.\\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by comma.\\nFor 2020-06-02, Sold item is (Mask), we just return it.\\n\\n```\\n\\n\\n#### Answer\\n```SQL\\n\\n/* Write your T-SQL query statement below */\\nselect sell_date, count(product) num_sold, STRING_AGG(product,\\',\\') WITHIN GROUP(order by product) as products from (select distinct * from Activities) as a \\ngroup by sell_date\\norder by sell_date\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n1484. Group Sold Products By The Date\\nEasy\\n\\nSQL Schema\\nTable Activities:\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| sell_date   | date    |\\n| product     | varchar |\\n+-------------+---------+\\nThere is no primary key for this table, it may contains duplicates.\\nEach row of this table contains the product name and the date it was sold in a market.\\n \\n\\nWrite an SQL query to find for each date, the number of distinct products sold and their names.\\n\\nThe sold-products names for each date should be sorted lexicographically. \\n\\nReturn the result table ordered by sell_date.\\n\\nThe query result format is in the following example.\\n\\nActivities table:\\n+------------+-------------+\\n| sell_date  | product     |\\n+------------+-------------+\\n| 2020-05-30 | Headphone   |\\n| 2020-06-01 | Pencil      |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | Basketball  |\\n| 2020-06-01 | Bible       |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | T-Shirt     |\\n+------------+-------------+\\n\\nResult table:\\n+------------+----------+------------------------------+\\n| sell_date  | num_sold | products                     |\\n+------------+----------+------------------------------+\\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |\\n+------------+----------+------------------------------+\\nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by comma.\\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by comma.\\nFor 2020-06-02, Sold item is (Mask), we just return it.\\n\\n```\n```SQL\\n\\n/* Write your T-SQL query statement below */\\nselect sell_date, count(product) num_sold, STRING_AGG(product,\\',\\') WITHIN GROUP(order by product) as products from (select distinct * from Activities) as a \\ngroup by sell_date\\norder by sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1028641,
                "title": "mysql",
                "content": "\\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 694193,
                "title": "easy-oracle-solution-using-listagg",
                "content": "```\\nselect \\n(to_char(sell_date,\\'YYYY-MM-DD\\')) as sell_date,\\ncount(product) as num_sold,listagg(product,\\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date,product from Activities)\\ngroup by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n(to_char(sell_date,\\'YYYY-MM-DD\\')) as sell_date,\\ncount(product) as num_sold,listagg(product,\\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date,product from Activities)\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3269844,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct(product)) as num_sold, \\ngroup_concat(distinct(product) order by product) as products\\nfrom Activities group by sell_date order by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct(product)) as num_sold, \\ngroup_concat(distinct(product) order by product) as products\\nfrom Activities group by sell_date order by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2793643,
                "title": "mysql-89-2-faster",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe challange of this problem is how to aggregate the product names in one cell. So we use `GROUP_CONCAT()` to aggregate distinct product names with a separator \\',\\' and also sort the product names. The rest is simple, we group by sell_date and COUNT DISTINCT product.\\n\\n# Code\\n```\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\\n## Give it a **Upvote** If You Like My Explanation.\\n### Have a Great Day/Night.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2738697,
                "title": "sql-server-solution",
                "content": "it works well, and **Don\\'t forgot to upvote**\\n\\nthis below line do magic\\n\\n**string_agg(product,\\',\\') within group (order by product asc) as products **\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        string_agg(product,\\',\\') within group (order by product asc) as products\\nfrom(select distinct sell_date,product from Activities)sq \\ngroup by sell_date \\norder by sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        string_agg(product,\\',\\') within group (order by product asc) as products\\nfrom(select distinct sell_date,product from Activities)sq \\ngroup by sell_date \\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2611951,
                "title": "just-use-group-concat",
                "content": "```\\nselect \\n\\tsell_date, \\n\\tcount(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n\\tsell_date, \\n\\tcount(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2558791,
                "title": "group-products-using-new-string-agg-funtion",
                "content": "**Upvote if you feel it easy :)**\\n\\nThis solution uses latest function STRING_AGG introduced by sql server\\n```\\nSELECT x.sell_date, SUM(x.num_sold) AS num_sold, STRING_AGG(x.product,\\',\\') as products\\nFROM (\\n\\tSELECT top 100 percent sell_date, COUNT(DISTINCT product) as num_sold, product\\n\\tFROM Activities\\n\\tGROUP BY sell_date, product\\n\\tORDER BY sell_date, product\\n) X\\nGROUP BY x.sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT x.sell_date, SUM(x.num_sold) AS num_sold, STRING_AGG(x.product,\\',\\') as products\\nFROM (\\n\\tSELECT top 100 percent sell_date, COUNT(DISTINCT product) as num_sold, product\\n\\tFROM Activities\\n\\tGROUP BY sell_date, product\\n\\tORDER BY sell_date, product\\n) X\\nGROUP BY x.sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2548241,
                "title": "simple-and-easy",
                "content": "select sell_date,count(distinct product) num_sold,group_concat(distinct product) products from activities group by sell_date order by sell_date",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select sell_date,count(distinct product) num_sold,group_concat(distinct product) products from activities group by sell_date order by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2306463,
                "title": "group-concat-function-easy-to-understand-mysql-solution",
                "content": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS \"num_sold\",\\n    GROUP_CONCAT(\\n        DISTINCT product\\n        ORDER BY\\n            product\\n    ) AS \"products\"\\nFROM\\n    activities\\nGROUP BY\\n    sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS \"num_sold\",\\n    GROUP_CONCAT(\\n        DISTINCT product\\n        ORDER BY\\n            product\\n    ) AS \"products\"\\nFROM\\n    activities\\nGROUP BY\\n    sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2285569,
                "title": "sql-query-using-string-agg",
                "content": "```\\nSELECT sell_date, \\n    COUNT(product) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT sell_date, product FROM Activities)A\\nGROUP BY sell_date\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT sell_date, \\n    COUNT(product) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT sell_date, product FROM Activities)A\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2223011,
                "title": "group-sold-products-by-the-date",
                "content": "```\\nSELECT sell_date,\\nCOUNT(distinct(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product) ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,product;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\nCOUNT(distinct(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product) ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,product;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2173362,
                "title": "mysql-solution-group-sold-products-by-the-date",
                "content": "In this question , we need to group our data based on the selling date  and we need to provide date and number of product sell at that day in the output :\\n              \\n\\t\\t\\t  SELECT \\n                         sell_date , \\n                         COUNT(DISTINCT product) AS num_sold , \\n              FROM activities\\n              GROUP BY sell_date \\n\\t\\n\\nNow as we need to order the output table based on selling_date so , \\n              \\n\\t\\t\\t  SELECT \\n                        sell_date , \\n                        COUNT(DISTINCT product) AS num_sold , \\n               FROM activities\\n               GROUP BY sell_date \\n               ORDER BY sell_date\\n     \\nAt last we are left with one column where we need to display the name of products which were sold at that day , products need to be display by adding \" , \" between them for that we had used a fuction :\\n\\n**Group_concat( column name)** : Function is used to contcat the values and inclued \\',\\' between them . \\n\\t\\n\\t  SELECT \\n                 sell_date , \\n                 COUNT(DISTINCT product) AS num_sold , \\n                 GROUP_CONCAT(DISTINCT product) AS products\\n      FROM activities\\n      GROUP BY sell_date \\n      ORDER BY sell_date",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "In this question , we need to group our data based on the selling date  and we need to provide date and number of product sell at that day in the output :\\n              \\n\\t\\t\\t  SELECT \\n                         sell_date , \\n                         COUNT(DISTINCT product) AS num_sold , \\n              FROM activities\\n              GROUP BY sell_date \\n\\t\\n\\nNow as we need to order the output table based on selling_date so , \\n              \\n\\t\\t\\t  SELECT \\n                        sell_date , \\n                        COUNT(DISTINCT product) AS num_sold , \\n               FROM activities\\n               GROUP BY sell_date \\n               ORDER BY sell_date\\n     \\nAt last we are left with one column where we need to display the name of products which were sold at that day , products need to be display by adding \" , \" between them for that we had used a fuction :\\n\\n**Group_concat( column name)** : Function is used to contcat the values and inclued \\',\\' between them . \\n\\t\\n\\t  SELECT \\n                 sell_date , \\n                 COUNT(DISTINCT product) AS num_sold , \\n                 GROUP_CONCAT(DISTINCT product) AS products\\n      FROM activities\\n      GROUP BY sell_date \\n      ORDER BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2145382,
                "title": "you-got-it",
                "content": "select sell_date , Count(distinct product) \\'num_sold\\' ,\\nGroup_concat(Distinct product order by product) \\'products\\'\\nfrom activities group by sell_date;",
                "solutionTags": [],
                "code": "select sell_date , Count(distinct product) \\'num_sold\\' ,\\nGroup_concat(Distinct product order by product) \\'products\\'\\nfrom activities group by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2039241,
                "title": "concat-95",
                "content": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product asc) as products \\nfrom \\n    activities \\ngroup by \\n    sell_date\\norder by \\n    sell_date \\n```\\n\\nif you like this, please upvote.",
                "solutionTags": [],
                "code": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product asc) as products \\nfrom \\n    activities \\ngroup by \\n    sell_date\\norder by \\n    sell_date \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2031482,
                "title": "tsql-string-agg-statement",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM \\n(SELECT DISTINCT sell_date, product FROM Activities) T\\nGROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM \\n(SELECT DISTINCT sell_date, product FROM Activities) T\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1980629,
                "title": "easy-solution-distinct-group-concat-group-by",
                "content": "SELECT sell_date, count(distinct product) as num_sold, group_concat(distinct product) as products\\nFROM activities\\nGROUP BY sell_date;",
                "solutionTags": [],
                "code": "SELECT sell_date, count(distinct product) as num_sold, group_concat(distinct product) as products\\nFROM activities\\nGROUP BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 1936549,
                "title": "using-group-concat-easy-understanding-sql",
                "content": "The main problem here is to concatenate the distinct products that were sold on a particular date. \\n\\nWe can do that by using ```GROUP_CONCAT``` keyword.\\nWe provide the `DISTINCT` keyword in both count and group_concat functions because we don\\'t want any duplicate records to mess with our counts. (Question does mention that duplicate entries might be present).\\n\\n## Query:\\n\\n```sql\\n\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```GROUP_CONCAT```\n```sql\\n\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1882323,
                "title": "mysql-using-count-group-contact",
                "content": "```\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product order by product) \\nproducts from Activities group by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product order by product) \\nproducts from Activities group by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1810821,
                "title": "simple-solution-using-group-concat-in-mysql",
                "content": "```\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1604982,
                "title": "mysql",
                "content": "```\\nselect distinct sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product) as products\\nfrom activities \\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product) as products\\nfrom activities \\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 720664,
                "title": "simple-mysql-answer",
                "content": "# answer 1\\n> Runtime: 729 ms, faster than 25.00% of MySQL online submissions for Group Sold Products By The Date.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Group Sold Products By The Date.\\n\\n```sql\\nselect \\n\\tsell_date, \\n\\tCOUNT(product) num_sold,  \\n\\tgroup_concat(product order by product) products \\nfrom (SELECT DISTINCT * FROM Activities) Activities\\ngroup by sell_date\\norder by sell_date\\n```\\n# answer 2\\n> Runtime: 656 ms, faster than 35.06% of MySQL online submissions for Group Sold Products By The Date.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Group Sold Products By The Date.\\n\\n```sql\\nselect \\n    sell_date, COUNT(DISTINCT product) num_sold, \\n    group_concat(DISTINCT product) products \\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```sql\\nselect \\n\\tsell_date, \\n\\tCOUNT(product) num_sold,  \\n\\tgroup_concat(product order by product) products \\nfrom (SELECT DISTINCT * FROM Activities) Activities\\ngroup by sell_date\\norder by sell_date\\n```\n```sql\\nselect \\n    sell_date, COUNT(DISTINCT product) num_sold, \\n    group_concat(DISTINCT product) products \\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 711161,
                "title": "mssql-xml-path",
                "content": "```\\n1. Distinct Rows\\n\\t\\tselect distinct * from activities\\n```\\n```\\n2. XML Path\\n\\t\\tselect \\',\\' + tb1.product from (select distinct * from activities) tb1 for XML path(\\'\\')\\n```\\n```\\n3. Add Stuff\\n\\t\\tselect products = stuff((select \\',\\' + a.product from (select distinct * from activities) a for XML path(\\'\\')),1,1,\\'\\')\\n```\\n```\\n4. Subquery\\n\\t\\tselect sell_date, count(distinct product) \\'num_sold\\', \\n\\t\\tproducts = stuff((select \\',\\' + a.product from (select distinct * from activities) a \\n\\t\\twhere a.sell_date = aa.sell_date for XMl path(\\'\\')),1,1,\\'\\')\\n\\t\\tfrom Activities aa group by aa.sell_date\\n```",
                "solutionTags": [],
                "code": "```\\n1. Distinct Rows\\n\\t\\tselect distinct * from activities\\n```\n```\\n2. XML Path\\n\\t\\tselect \\',\\' + tb1.product from (select distinct * from activities) tb1 for XML path(\\'\\')\\n```\n```\\n3. Add Stuff\\n\\t\\tselect products = stuff((select \\',\\' + a.product from (select distinct * from activities) a for XML path(\\'\\')),1,1,\\'\\')\\n```\n```\\n4. Subquery\\n\\t\\tselect sell_date, count(distinct product) \\'num_sold\\', \\n\\t\\tproducts = stuff((select \\',\\' + a.product from (select distinct * from activities) a \\n\\t\\twhere a.sell_date = aa.sell_date for XMl path(\\'\\')),1,1,\\'\\')\\n\\t\\tfrom Activities aa group by aa.sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3891154,
                "title": "eassy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3578692,
                "title": "simple-mysql-solution-group-concat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, \\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, \\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514785,
                "title": "simple-and-easy-to-understand-mysql-query",
                "content": "\\n\\n# Code\\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514732,
                "title": "t-sql-string-agg-function-used",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect \\n  sell_date, \\n  count(distinct product) as num_sold, \\n  string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date, product from activities) ac\\ngroup by ac.sell_date\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect \\n  sell_date, \\n  count(distinct product) as num_sold, \\n  string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date, product from activities) ac\\ngroup by ac.sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3260625,
                "title": "solution-with-string-agg-function-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n-- /* SOLUTION 1: \\r\\nSELECT\\r\\n\\tsell_date,\\r\\n\\tCOUNT(product) num_sold,\\r\\n\\tSTRING_AGG(product,\\',\\') WITHIN GROUP(ORDER BY product ) products \\r\\nFROM\\r\\n    (\\r\\n\\r\\n        SELECT\\r\\n            DISTINCT\\r\\n            sell_date,\\r\\n            product\\r\\n        FROM\\r\\n            Activities\\r\\n    )TBL\\r\\n\\t\\r\\nGROUP BY\\r\\n\\tsell_date\\r\\n--SOLUTION 1: */\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n-- /* SOLUTION 1: \\r\\nSELECT\\r\\n\\tsell_date,\\r\\n\\tCOUNT(product) num_sold,\\r\\n\\tSTRING_AGG(product,\\',\\') WITHIN GROUP(ORDER BY product ) products \\r\\nFROM\\r\\n    (\\r\\n\\r\\n        SELECT\\r\\n            DISTINCT\\r\\n            sell_date,\\r\\n            product\\r\\n        FROM\\r\\n            Activities\\r\\n    )TBL\\r\\n\\t\\r\\nGROUP BY\\r\\n\\tsell_date\\r\\n--SOLUTION 1: */\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2677051,
                "title": "mysql-solution",
                "content": "```\\nSELECT sell_date, count(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\n\\tFROM Activities\\n\\tGROUP BY sell_date\\n\\tORDER BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, count(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\n\\tFROM Activities\\n\\tGROUP BY sell_date\\n\\tORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2671711,
                "title": "products-sold-in-each-day-solved-using-groupconcat",
                "content": "\\nHere we simply selecting the date , number of unique products sold and then we are displaying those products sold in each day using a keyword called \"GROUP_CONCAT\"\\n\\nGROUP CONCAT:\\nGROUP_CONCAT() function returns a string with concatenated non-NULL value from a group.\\n\\nQUERY:\\n\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;",
                "solutionTags": [],
                "code": "\\nHere we simply selecting the date , number of unique products sold and then we are displaying those products sold in each day using a keyword called \"GROUP_CONCAT\"\\n\\nGROUP CONCAT:\\nGROUP_CONCAT() function returns a string with concatenated non-NULL value from a group.\\n\\nQUERY:\\n\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2594165,
                "title": "sql-server-using-stuff-for-xml-path",
                "content": "select \\n    sell_date,\\n    Count(distinct product) num_sold,\\n    stuff(\\n        (\\n            select distinct\\n                \\',\\'+ a1.Product\\n            from\\n                Activities a1\\n            where\\n                a1.sell_date = a.sell_date\\n            for xml path(\\'\\')\\n        ),1,1,\\'\\'\\n    ) products\\nfrom\\n    Activities a\\ngroup by Sell_date",
                "solutionTags": [],
                "code": "select \\n    sell_date,\\n    Count(distinct product) num_sold,\\n    stuff(\\n        (\\n            select distinct\\n                \\',\\'+ a1.Product\\n            from\\n                Activities a1\\n            where\\n                a1.sell_date = a.sell_date\\n            for xml path(\\'\\')\\n        ),1,1,\\'\\'\\n    ) products\\nfrom\\n    Activities a\\ngroup by Sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2563048,
                "title": "easy-mysql-solution-with-explanation",
                "content": "Rate me up if my solution was useful for you :)\\n\\n```\\nSELECT\\n    a.sell_date, #1\\n    COUNT(DISTINCT a.product) AS num_sold, #2\\n    GROUP_CONCAT(\\n        DISTINCT a.product ORDER BY a.product SEPARATOR \\',\\' #3\\n    ) AS products\\nFROM Activities a\\nGROUP BY a.sell_date #4\\nORDER BY a.sell_date; #5\\n```\\n\\n1. We simply select *sale date* because it nedeed by problem description.\\n2. We sould count only all **distinct** products in group by *sell date*.\\n3. Now we should query all **distinct** products names by *sell date*  and combine it in a string by comma without spaces in lexicographical order by *product name*. All rows who we combinating already groupped by *sell date* (see point #4).\\n4. Group all selected rows by *sell date*.\\n5. And order all rows by *sell date*.\\n\\nThank you! %)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    a.sell_date, #1\\n    COUNT(DISTINCT a.product) AS num_sold, #2\\n    GROUP_CONCAT(\\n        DISTINCT a.product ORDER BY a.product SEPARATOR \\',\\' #3\\n    ) AS products\\nFROM Activities a\\nGROUP BY a.sell_date #4\\nORDER BY a.sell_date; #5\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2499159,
                "title": "solution-in-mysql",
                "content": "```\\nselect sell_date, \\ncount(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date;\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, \\ncount(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2493429,
                "title": "mysql-simple-and-clean-solution",
                "content": "**Please Upvote if it helped you !!!**\\n```\\nselect sell_date,\\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date \\norder by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date \\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2483556,
                "title": "mysql-solution-faster-than-100-group-concat",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2464227,
                "title": "mysql-solution-using-group-concat",
                "content": "```\\nselect sell_date,count(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,count(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2405525,
                "title": "oracle-using-listagg",
                "content": "SELECT \\n    TO_CHAR(sell_date,\\'yyyy-mm-dd\\') AS sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    LISTAGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products \\nFROM (SELECT \\n        DISTINCT sell_date, product FROM activities) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n\\n**Please upvote if you liked the solution**",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "SELECT \\n    TO_CHAR(sell_date,\\'yyyy-mm-dd\\') AS sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    LISTAGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products \\nFROM (SELECT \\n        DISTINCT sell_date, product FROM activities) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n\\n**Please upvote if you liked the solution**",
                "codeTag": "Unknown"
            },
            {
                "id": 2390153,
                "title": "mysql-easy-to-read-solution-group-concat-and-count-distinct",
                "content": "```\\nSELECT sell_date,\\nCOUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```\\n\\nFirst time using the GROUP_CONCAT function so this answer was tough and required some googling.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\nCOUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2386432,
                "title": "mysql-easy-to-understand-group-concat-distinct",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products FROM Activities GROUP BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products FROM Activities GROUP BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2359160,
                "title": "mysql-group-concat-group-by-count-easy-to-understand",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,\\ngroup_concat(distinct(product)) as products\\nfrom Activities \\ngroup by sell_date order by sell_date;\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,\\ngroup_concat(distinct(product)) as products\\nfrom Activities \\ngroup by sell_date order by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2354721,
                "title": "easiest-solution-with-explanation-mysql-postgresql",
                "content": "```\\n# select sell_data, distinct count of products, concatenate the products in ascending order using a separator\\n# group the data by sell_data in ascending order\\n\\n# MySQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n\\n# PostgreSQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\narray_to_string(array_agg(DISTINCT product ORDER BY product ASC), \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# select sell_data, distinct count of products, concatenate the products in ascending order using a separator\\n# group the data by sell_data in ascending order\\n\\n# MySQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n\\n# PostgreSQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\narray_to_string(array_agg(DISTINCT product ORDER BY product ASC), \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2272923,
                "title": "mysql-3-lines",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2243995,
                "title": "funny-solution",
                "content": "```\\n\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT(product)) AS num_sold, \\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM \\n    Activities \\nGROUP BY\\n    sell_date;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Go"
                ],
                "code": "```\\n\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT(product)) AS num_sold, \\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM \\n    Activities \\nGROUP BY\\n    sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2206666,
                "title": "easy-to-understand-simple-solution",
                "content": "SELECT sell_date, count(DISTINCT product) num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) products\\nFROM Activities\\nGROUP BY sell_date",
                "solutionTags": [],
                "code": "SELECT sell_date, count(DISTINCT product) num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) products\\nFROM Activities\\nGROUP BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2185059,
                "title": "mysql-using-group-concat-group-by-distinct",
                "content": "```\\n# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom activities\\ngroup by sell_date;\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom activities\\ngroup by sell_date;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2171881,
                "title": "sql-solution",
                "content": "```\\nselect sell_date, \\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product) as products\\nfrom activities \\ngroup by sell_date; \\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, \\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product) as products\\nfrom activities \\ngroup by sell_date; \\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2104409,
                "title": "using-group-concat-and-distinct",
                "content": "select sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\ngroup_concat : https://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php\\ndistinct get rid of the duplicate.",
                "solutionTags": [],
                "code": "select sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\ngroup_concat : https://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php\\ndistinct get rid of the duplicate.",
                "codeTag": "Unknown"
            },
            {
                "id": 2100743,
                "title": "beginner-friendly-solutions",
                "content": "```\\n# Write your MySQL query statement below\\nselect\\n    sell_date,\\n     count(distinct product) as num_sold,\\n     group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    sell_date,\\n     count(distinct product) as num_sold,\\n     group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2053447,
                "title": "using-cte-common-table-expression",
                "content": "/* Write your T-SQL query statement below */\\n\\n\\nWITH a (product, sell_date) AS (\\n    SELECT    \\n        distinct product, sell_date\\n    FROM    \\n        activities)\\n\\n\\nselect sell_date,count(distinct product) as num_sold,\\nSTRING_AGG(product,\\',\\') within group (order by product asc) products\\nfrom a \\ngroup by sell_date\\norder by sell_date asc",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "/* Write your T-SQL query statement below */\\n\\n\\nWITH a (product, sell_date) AS (\\n    SELECT    \\n        distinct product, sell_date\\n    FROM    \\n        activities)\\n\\n\\nselect sell_date,count(distinct product) as num_sold,\\nSTRING_AGG(product,\\',\\') within group (order by product asc) products\\nfrom a \\ngroup by sell_date\\norder by sell_date asc",
                "codeTag": "Unknown"
            },
            {
                "id": 2050076,
                "title": "simple-mysql-solution",
                "content": "Select sell_date, Count(Distinct product) As num_sold, Group_Concat(Distinct product Order By product Separator \\',\\') As products From Activities \\nGroup By sell_date\\nOrder By sell_date;\\n",
                "solutionTags": [],
                "code": "Select sell_date, Count(Distinct product) As num_sold, Group_Concat(Distinct product Order By product Separator \\',\\') As products From Activities \\nGroup By sell_date\\nOrder By sell_date;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2049870,
                "title": "simple-sql-solution",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT \\n  A.sell_date, \\n  COUNT(DISTINCT A.product) num_sold, \\n  STUFF(\\n    (\\n      SELECT \\n        DISTINCT \\',\\' + product \\n      FROM \\n        Activities IA \\n      WHERE \\n        IA.sell_date = A.sell_date FOR XML PATH(\\'\\')\\n    ), \\n    1, \\n    1, \\n    \\'\\'\\n  ) products \\nFROM \\n  Activities A \\nGROUP BY \\n  A.sell_date \\nORDER BY \\n  A.sell_date;\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT \\n  A.sell_date, \\n  COUNT(DISTINCT A.product) num_sold, \\n  STUFF(\\n    (\\n      SELECT \\n        DISTINCT \\',\\' + product \\n      FROM \\n        Activities IA \\n      WHERE \\n        IA.sell_date = A.sell_date FOR XML PATH(\\'\\')\\n    ), \\n    1, \\n    1, \\n    \\'\\'\\n  ) products \\nFROM \\n  Activities A \\nGROUP BY \\n  A.sell_date \\nORDER BY \\n  A.sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2032990,
                "title": "mysql-simple",
                "content": "``` \\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product asc) as products\\n\\nfrom Activities\\ngroup by sell_date\\norder by sell_date  \\n``` \\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "``` \\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product asc) as products\\n\\nfrom Activities\\ngroup by sell_date\\norder by sell_date  \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2029270,
                "title": "1484-group-sold-products-by-the-date",
                "content": "```\\nSELECT sell_date,\\n       Count(DISTINCT( product ))        AS num_sold,\\n       Group_concat(DISTINCT( product )) AS products\\nFROM   activities\\nGROUP  BY sell_date; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n       Count(DISTINCT( product ))        AS num_sold,\\n       Group_concat(DISTINCT( product )) AS products\\nFROM   activities\\nGROUP  BY sell_date; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1999654,
                "title": "simple-mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1972352,
                "title": "ms-sql-simple-solution-using-string-agg",
                "content": "```\\nselect sell_date, count(distinct product) as num_sold\\n,(select string_agg(product, \\',\\') within group(order by product) from \\n  (select distinct product from Activities where sell_date = y.sell_date) x) as products    \\nfrom Activities y\\ngroup by sell_date \\norder by sell_date \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold\\n,(select string_agg(product, \\',\\') within group(order by product) from \\n  (select distinct product from Activities where sell_date = y.sell_date) x) as products    \\nfrom Activities y\\ngroup by sell_date \\norder by sell_date \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1964814,
                "title": "mysql-solution",
                "content": "# Solution\\n```\\nselect sell_date, count(*) as num_sold, STRING_AGG( product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) as products\\nfrom (select distinct sell_date,product from Activities) as tab\\ngroup by sell_date\\norder by sell_date\\n```\\n**STRING_AGG** is an aggregate function that takes all expressions from rows and concatenates them into a single string.\\nIf you find this **solution** and **explanation** helpful, please **upvote** it for others people.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(*) as num_sold, STRING_AGG( product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) as products\\nfrom (select distinct sell_date,product from Activities) as tab\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1951209,
                "title": "easy-solution-with-explanation",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,#counting the number of products sold that day sepretly \\ngroup_concat(distinct (product))  as products# to group the product that sold in the same day\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,#counting the number of products sold that day sepretly \\ngroup_concat(distinct (product))  as products# to group the product that sold in the same day\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1488017,
                "title": "using-group-concat",
                "content": "SELECT \\n      sell_date, \\n      COUNT(DISTINCT(product)) AS num_sold,\\n      GROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY 1;",
                "solutionTags": [],
                "code": "SELECT \\n      sell_date, \\n      COUNT(DISTINCT(product)) AS num_sold,\\n      GROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 1212779,
                "title": "mysql-never-in-my-life-have-i-needed-group-concat-lol",
                "content": "```sql\\nwith\\n\\n  cte_agg as (\\n    select\\n      sell_date,\\n      count(distinct product) as num_sold,\\n      group_concat(distinct product order by product separator \\',\\') as products\\n    from Activities\\n    group by 1\\n    order by 1\\n  )\\n  \\nselect * from cte_agg\\n```",
                "solutionTags": [],
                "code": "```sql\\nwith\\n\\n  cte_agg as (\\n    select\\n      sell_date,\\n      count(distinct product) as num_sold,\\n      group_concat(distinct product order by product separator \\',\\') as products\\n    from Activities\\n    group by 1\\n    order by 1\\n  )\\n  \\nselect * from cte_agg\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 907776,
                "title": "99-84-faster",
                "content": "SELECT\\n    sell_date, \\n\\tCOUNT(DISTINCT product) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM\\n    Activities\\nGROUP BY 1\\nORDER BY 1 ASC\\n",
                "solutionTags": [],
                "code": "SELECT\\n    sell_date, \\n\\tCOUNT(DISTINCT product) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM\\n    Activities\\nGROUP BY 1\\nORDER BY 1 ASC\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 830730,
                "title": "mssql-solution-using-string-agg",
                "content": "Select sell_date, count(distinct product) as num_sold , string_agg(product, \\',\\') as products\\nfrom(\\nSelect distinct product, sell_date\\nfrom Activities) a\\ngroup by sell_date",
                "solutionTags": [],
                "code": "Select sell_date, count(distinct product) as num_sold , string_agg(product, \\',\\') as products\\nfrom(\\nSelect distinct product, sell_date\\nfrom Activities) a\\ngroup by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 762490,
                "title": "mysql-group-concat-function",
                "content": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from Activities \\ngroup by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from Activities \\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 708479,
                "title": "simple-solution-by-using-group-concat",
                "content": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from activities\\ngroup by sell_date;",
                "solutionTags": [],
                "code": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from activities\\ngroup by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 692982,
                "title": "2-approches-for-mssql-string-agg-and-xml",
                "content": "1. Using the `string_agg` function, this approach is rather straightforward.\\n\\n```\\nselect\\nsell_date\\n, num_sold = count(product)\\n, products = string_agg(product, \\',\\') within group(order by product)\\nfrom \\n(select distinct sell_date, product from Activities) t\\ngroup by sell_date\\norder by sell_date\\n```\\n\\n2. Using the built-in XML syntax.\\nThe tricky part is to \"concatenate\" the sold products on the same day.\\n* Using XML to push all the products into one single row\\n* Using LEFT(XXX, len(XXX)-1) to remove the last comma.\\n\\n\\n```\\nselect\\nsell_date\\n, num_sold = count(distinct product)\\n, products = left(\\n\\t\\t\\t\\t(select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\')) \\n\\t\\t\\t\\t,\\n\\t\\t\\t\\tlen((select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\'))) -1\\n\\t\\t\\t    )\\nfrom Activities A1\\ngroup by sell_date\\norder by sell_date\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect\\nsell_date\\n, num_sold = count(product)\\n, products = string_agg(product, \\',\\') within group(order by product)\\nfrom \\n(select distinct sell_date, product from Activities) t\\ngroup by sell_date\\norder by sell_date\\n```\n```\\nselect\\nsell_date\\n, num_sold = count(distinct product)\\n, products = left(\\n\\t\\t\\t\\t(select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\')) \\n\\t\\t\\t\\t,\\n\\t\\t\\t\\tlen((select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\'))) -1\\n\\t\\t\\t    )\\nfrom Activities A1\\ngroup by sell_date\\norder by sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 692799,
                "title": "mysql-solution-group-concat",
                "content": "select sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "solutionTags": [],
                "code": "select sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 692797,
                "title": "simple-mysql-solution-most-optimal-faster-than-100",
                "content": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\nFROM Activities \\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "solutionTags": [],
                "code": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\nFROM Activities \\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "codeTag": "Unknown"
            },
            {
                "id": 4066344,
                "title": "pandas-easy-explained-step-by-step-group-sold-products-by-the-date",
                "content": "[see the successfully Accepted Solution](https://leetcode.com/submissions/detail/1054010892/)\\n\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    grouped_table = activities.groupby(\\'sell_date\\')\\n    statistics_product =grouped_table.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n)\\n     \\n    statistics_product_index = statistics_product.reset_index()\\n    \\n    return statistics_product_index\\n```\\n\\n\\n\\n**Intuition Explained**\\nFirst, we group the \\'activities\\' DataFrame by the \\'sell_date\\' column. It effectively splits the DataFrame into multiple groups, each corresponding to a unique \\'sell_date\\' value.\\n```\\n    grouped_table = activities.groupby(\\'sell_date\\')\\n```\\n\\nThen we perform aggregation operations on each group created by the \\'sell_date\\'.\\n```\\n    statistics_product =grouped_table.agg(\\n```\\n\\nWe must calculate the number of unique products sold within each group. The result is a new column named \\'num_sold\\' in the statistics_product DataFrame, which represents the count of unique products sold on each \\'sell_date\\'.\\n```\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n```\\n\\nWe must also create a new column named \\'products\\' in the statistics_product which gets the unique values of the \\'product\\' column within each group, sorts the unique product values. and joins the sorted unique product values into a single comma-separated string.\\n```\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique()))))\\n```\\n\\nThen, we remove the current index and assigns a new default integer index to the DataFrame.\\n```\\n    statistics_product_index = statistics_product.reset_index()\\n```\\n\\n\\n![image](https://assets.leetcode.com/users/images/658b38cc-c1d4-48c7-b194-a10d15fe7b04_1695164239.1172192.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    grouped_table = activities.groupby(\\'sell_date\\')\\n    statistics_product =grouped_table.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n)\\n     \\n    statistics_product_index = statistics_product.reset_index()\\n    \\n    return statistics_product_index\\n```\n```\\n    grouped_table = activities.groupby(\\'sell_date\\')\\n```\n```\\n    statistics_product =grouped_table.agg(\\n```\n```\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n```\n```\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique()))))\\n```\n```\\n    statistics_product_index = statistics_product.reset_index()\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4054424,
                "title": "ms-sql-string-agg-within-group",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n    (SELECT DISTINCT\\n        *\\n    FROM\\n        Activities) subquery\\nGROUP BY\\n    sell_date\\nORDER BY\\n    sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n    (SELECT DISTINCT\\n        *\\n    FROM\\n        Activities) subquery\\nGROUP BY\\n    sell_date\\nORDER BY\\n    sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973237,
                "title": "some-shit-beats-86-65-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    activities = activities.drop_duplicates()\\n    size = activities.groupby(\"sell_date\").size().reset_index(name=\\'num_sold\\')\\n    products = activities.groupby(\"sell_date\")[\"product\"].apply(lambda x: \\',\\'.join(sorted(x))).reset_index(name=\\'products\\')\\n    result = pd.merge(size, products, on=\\'sell_date\\')\\n    return result.rename(columns={\"product\": \"products\"}).sort_values(by=\"sell_date\")\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    activities = activities.drop_duplicates()\\n    size = activities.groupby(\"sell_date\").size().reset_index(name=\\'num_sold\\')\\n    products = activities.groupby(\"sell_date\")[\"product\"].apply(lambda x: \\',\\'.join(sorted(x))).reset_index(name=\\'products\\')\\n    result = pd.merge(size, products, on=\\'sell_date\\')\\n    return result.rename(columns={\"product\": \"products\"}).sort_values(by=\"sell_date\")\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3967400,
                "title": "pandas-simple-step-by-step-solution-for-beginners",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3954766,
                "title": "pandas-vs-sql-easiest-comparison-out-there",
                "content": "I have posted this type of comparison solution for all questions in 30 days of Pandas solutions\\n\\nPandas Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n ```\\nSQL Code\\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n ```\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3953503,
                "title": "t-sql-simple-solution-with-count-string-agg-within",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```sql\\nWITH t AS (SELECT DISTINCT * FROM Activities)\\n\\nSELECT \\n    t.sell_date,\\n    COUNT(t.product) AS num_sold,\\n    STRING_AGG(t.product, \\',\\') WITHIN GROUP (ORDER BY t.product) as products\\nFROM t\\nGROUP BY sell_date\\nORDER BY sell_date\\n```\\n",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```sql\\nWITH t AS (SELECT DISTINCT * FROM Activities)\\n\\nSELECT \\n    t.sell_date,\\n    COUNT(t.product) AS num_sold,\\n    STRING_AGG(t.product, \\',\\') WITHIN GROUP (ORDER BY t.product) as products\\nFROM t\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946360,
                "title": "using-group-by-and-agg-functions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n   act_df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\', \\'nunique\\'),\\n   (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n   return act_df\\n   \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n   act_df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\', \\'nunique\\'),\\n   (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n   return act_df\\n   \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3913822,
                "title": "pandas-solution-3-steps",
                "content": "# Approach\\nGroup by `sell_date`, and join the resulting strings with the comma character `\\',\\'`.\\n\\nAdd a new column `num_sold`, which counts the different strings between commas.\\n\\nRename the `product` column to `products`, sort by `sell_date` and return the DataFrame with the required ordered columns.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    acts = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x.unique()))).reset_index()\\n    acts[\\'num_sold\\'] = acts[\\'product\\'].apply(lambda x: len(x.split(\\',\\')))\\n    acts = acts.rename(columns={\\'product\\': \\'products\\'}).sort_values(by=[\\'sell_date\\'], ascending=True)\\n    return acts[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    acts = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x.unique()))).reset_index()\\n    acts[\\'num_sold\\'] = acts[\\'product\\'].apply(lambda x: len(x.split(\\',\\')))\\n    acts = acts.rename(columns={\\'product\\': \\'products\\'}).sort_values(by=[\\'sell_date\\'], ascending=True)\\n    return acts[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3890569,
                "title": "slow-but-with-relatively-low-memory-usage",
                "content": "# Intuition\\nWe need to find the number of different products sold and their names for each date. To achieve this, we group the `Activities` table by `sell_date` and aggregate the products as a set to ensure uniqueness. Then, we calculate the number of sold products and sort the products within each set lexicographically.\\n\\n# Approach\\n1. Group the `activities` dataframe by `sell_date`.\\n2. For each group, aggregate the products as a set using the `apply(set)` function on the \\'product\\' column.\\n3. Reset the index of the resulting dataframe to include the \\'sell_date\\' column.\\n4. Calculate the number of sold products by applying the `len` function on the \\'product\\' sets.\\n5. Sort the products within each set lexicographically by applying the `sorted` function and joining them with a comma using the `join` function.\\n6. Return the resulting dataframe with the \\'sell_date\\', \\'num_sold\\', and \\'product\\' columns.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity depends on the size of the `activities` dataframe and the group and aggregate operations. The overall complexity is linear with respect to the number of rows in the dataframe.\\n\\n- Space complexity:\\nThe space complexity is linear as we create intermediate dataframes and the resulting dataframe that depend on the input size.\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities dataframe by sell_date and aggregate the products as unique set\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(set).reset_index()\\n    \\n    # Calculate the number of sold products for each date\\n    grouped[\\'num_sold\\'] = grouped[\\'product\\'].apply(len)\\n    \\n    # Sort the products within each set\\n    grouped[\\'products\\'] = grouped[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x)))\\n    \\n    # Return the result with only the required columns\\n    return grouped[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities dataframe by sell_date and aggregate the products as unique set\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(set).reset_index()\\n    \\n    # Calculate the number of sold products for each date\\n    grouped[\\'num_sold\\'] = grouped[\\'product\\'].apply(len)\\n    \\n    # Sort the products within each set\\n    grouped[\\'products\\'] = grouped[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x)))\\n    \\n    # Return the result with only the required columns\\n    return grouped[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3806677,
                "title": "using-group-concat",
                "content": "# Approach\\nThe query first groups the `Activities` table by the `sell_date` column. This means that the query will produce one row for each unique date in the `Activities` table.\\n\\nThe query then uses the `COUNT()` function to count the number of `distinct` products sold on each date. The `DISTINCT` keyword ensures that the query only counts each product once.\\n\\nThe query then uses the GROUP_CONCAT() function to concatenate a list of the `distinct `products sold on each date. The `ORDER BY` clause ensures that the list of products is sorted alphabetically. The separator parameter specifies that the products should be separated by `commas`.\\n\\nFinally, the query orders the results by the sell_date column in ascending order.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC   ) AS products   \\nFROM Activities GROUP BY sell_date ORDER BY sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC   ) AS products   \\nFROM Activities GROUP BY sell_date ORDER BY sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3786579,
                "title": "sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\nGROUP_CONCAT(distinct product order by product ASC separator \\',\\') products\\nfrom Activities\\ngroup by sell_date order by sell_Date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\nGROUP_CONCAT(distinct product order by product ASC separator \\',\\') products\\nfrom Activities\\ngroup by sell_date order by sell_Date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587176,
                "title": "attention-coders-optimum-approach-step-by-step-explanation-with-beats-85",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe goal of the problem is to group the sold products based on the date they were sold. We need to count the number of distinct products sold on each sell_date and create a list of distinct products for each sell_date.\\n\\n# Approach\\n1. The first step is to specify the columns we want to include in the result. In this case, we need the sell_date, the number of distinct products sold on each sell_date (num_sold), and a list of distinct products sold on each sell_date (products).\\n\\n1. To calculate the number of distinct products sold on each sell_date, we use the **COUNT(DISTINCT product)** function. This function counts the number of unique (distinct) values in the \"product\" column. We assign this count the alias \"num_sold\" so that we can refer to it later.\\n\\n1. To create a list of distinct products sold on each sell_date, we use the **GROUP_CONCAT(DISTINCT product)** function. This function concatenates the distinct values in the \"product\" column into a comma-separated string. We assign this string the alias \"products\".\\n\\n1. We specify the \"FROM\" clause to indicate the table from which we want to retrieve the data. In this case, the table is \"Activities\".\\n\\n1. To group the result by sell_date, we use the \"GROUP BY\" clause. This means that the rows with the same sell_date will be grouped together.\\n\\n1. Finally, we use the \"ORDER BY\" clause to sort the result in ascending order based on the sell_date. This ensures that the output is arranged in chronological order.\\n\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of your solution depends on the size of the Activities table and the number of distinct sell_dates. The query needs to scan through the Activities table to calculate the counts and concatenate the products for each sell_date. Therefore, the time complexity is typically $$O(n)$$, where n is the number of rows in the Activities table.\\n\\n- Space complexity:\\nThe space complexity is influenced by the number of distinct sell_dates and the number of distinct products sold. The query uses additional memory to store the intermediate results, including the distinct products and their counts. Therefore, the space complexity is $$O(m)$$, where m is the number of distinct sell_dates.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n`SELECT sell_date, \\n  count(distinct product) AS num_sold,\\n  group_concat(distinct product) AS products \\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date`\\n\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/38b9ca96-481f-43db-b597-728d5f94ccfb_1685647313.7010021.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n`SELECT sell_date, \\n  count(distinct product) AS num_sold,\\n  group_concat(distinct product) AS products \\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date`\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3077601,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2937351,
                "title": "89-faster-clean-2-ways-solution",
                "content": "### UPVOTE if like\\n\\n\\n### way 1\\n```\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```\\n\\n### way 2\\n\\n``` \\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\\n![60d33be8cf4ba7565123c8bc_YPD3ulQQAGQpOcnqIm3QzSTRgzmr1SexpW9ZjMpJ1mAnUxx4iF05XOTu44sk0qQG-8XgBcYmGZGAD-5SAZvJl3TjtmhgWnn-w0C2XKwhBscV78RVvhwZfyp0v_Pa6sNj5zxpOvRW.png](https://assets.leetcode.com/users/images/b1c219d7-60a7-4386-86cd-ccd57a7bcc56_1671676735.14143.png)\\n\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```\n``` \\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2917714,
                "title": "easy-understanding-beginners-method-mysql",
                "content": "The key is using group_concat function\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) \\'num_sold\\', group_concat(distinct product) \\'products\\' from activities group by 1 order by 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) \\'num_sold\\', group_concat(distinct product) \\'products\\' from activities group by 1 order by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2841016,
                "title": "mysql-solution",
                "content": "```\\nselect sell_date, count(DISTINCT product) as num_sold ,\\n    GROUP_CONCAT(DISTINCT product order by product ASC separator \\',\\') as products\\nFROM Activities GROUP BY sell_date order by sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(DISTINCT product) as num_sold ,\\n    GROUP_CONCAT(DISTINCT product order by product ASC separator \\',\\') as products\\nFROM Activities GROUP BY sell_date order by sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2746614,
                "title": "group-sold-products-by-the-date-mysql",
                "content": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2682580,
                "title": "mysql-solution-using-group-concat-keyword-simple-and-easy",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold, \\nGROUP_CONCAT(distinct(product) order by product SEPARATOR \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold, \\nGROUP_CONCAT(distinct(product) order by product SEPARATOR \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2634369,
                "title": "fast-easy-solution",
                "content": "select distinct sell_date, count(distinct product) as num_sold,  group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "solutionTags": [],
                "code": "select distinct sell_date, count(distinct product) as num_sold,  group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2634099,
                "title": "group-concat-separator",
                "content": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold , \\nGROUP_CONCAT(DISTINCT product ORDER BY product separator \",\") AS products\\n\\n\\nFROM Activities\\n\\nGROUP BY sell_date",
                "solutionTags": [],
                "code": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold , \\nGROUP_CONCAT(DISTINCT product ORDER BY product separator \",\") AS products\\n\\n\\nFROM Activities\\n\\nGROUP BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2611410,
                "title": "group-concat",
                "content": "### This can be solved using group concat\\n\\n```\\nselect sell_date, count(distinct product) as num_sold, GROUP_CONCAT(DISTINCT product order by product ASC) as products from Activities  group by sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold, GROUP_CONCAT(DISTINCT product order by product ASC) as products from Activities  group by sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2607397,
                "title": "leetcode-1484-learn-the-concept-with-the-answer",
                "content": "In MySQL, you can concatenate data from numerous rows into a single field using the GROUP CONCAT() function.\\n\\n```\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from activities group by sell_date; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from activities group by sell_date; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2604305,
                "title": "simple-solution-using-group-by",
                "content": "SELECT sell_date,count(distinct product) as num_sold ,GROUP_CONCAT(distinct product ORDER BY product) as products From Activities \\ngroup by sell_date\\norder by sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT sell_date,count(distinct product) as num_sold ,GROUP_CONCAT(distinct product ORDER BY product) as products From Activities \\ngroup by sell_date\\norder by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2565071,
                "title": "mysql-group-concat-with-group-by-63",
                "content": "```\\nselect  \\nsell_date, count( distinct product) as num_sold, group_concat(distinct product) as products \\nfrom activities \\ngroup by sell_date;           \\n```",
                "solutionTags": [],
                "code": "```\\nselect  \\nsell_date, count( distinct product) as num_sold, group_concat(distinct product) as products \\nfrom activities \\ngroup by sell_date;           \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2555820,
                "title": "easy-solution-with-group-concat-group-by",
                "content": "![image](https://assets.leetcode.com/users/images/8045b875-d2e3-4393-aa3f-e714b85c77b5_1662925653.5336535.png)\\n\\n",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/8045b875-d2e3-4393-aa3f-e714b85c77b5_1662925653.5336535.png)\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2555771,
                "title": "simple-solution-using-string-agg-sql-server",
                "content": "```\\nselect t.sell_date, count(t.product) as num_sold, \\nSTRING_AGG(t.product, \\',\\') within group(order by t.product) as products \\nfrom (select distinct product, sell_date from Activities) t \\ngroup by t.sell_date order by t.sell_date;\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect t.sell_date, count(t.product) as num_sold, \\nSTRING_AGG(t.product, \\',\\') within group(order by t.product) as products \\nfrom (select distinct product, sell_date from Activities) t \\ngroup by t.sell_date order by t.sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2552246,
                "title": "mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\n# GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) \\n# function is used to concatenate data from multiple rows into one field\\n\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC SEPARATOR \\',\\' ) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) \\n# function is used to concatenate data from multiple rows into one field\\n\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC SEPARATOR \\',\\' ) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2551962,
                "title": "mysql-easy",
                "content": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2531043,
                "title": "mysql-simple-solution",
                "content": "***\\nSELECT a.sell_date, COUNT(DISTINCT a.product) AS num_sold,\\nGROUP_CONCAT(DISTINCT a.product ORDER BY a.product) as products\\nFROM Activities a\\nGROUP By sell_date\\nORDER BY sell_date\\n***",
                "solutionTags": [],
                "code": "***\\nSELECT a.sell_date, COUNT(DISTINCT a.product) AS num_sold,\\nGROUP_CONCAT(DISTINCT a.product ORDER BY a.product) as products\\nFROM Activities a\\nGROUP By sell_date\\nORDER BY sell_date\\n***",
                "codeTag": "Unknown"
            },
            {
                "id": 2521999,
                "title": "neat-and-easy-solution",
                "content": "**#Solution**\\n\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**#Solution**\\n\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2517931,
                "title": "mysql-using-group-concat",
                "content": "**MY SQL:**\\n\\n```\\nSELECT sell_date, count(distinct(product)) as num_sold, \\nGroup_Concat(distinct(product) order by product) as products\\nFROM Activities \\nGroup by sell_date \\nOrder by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, count(distinct(product)) as num_sold, \\nGroup_Concat(distinct(product) order by product) as products\\nFROM Activities \\nGroup by sell_date \\nOrder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2492329,
                "title": "faster-than-90-75-of-mysql-online-submissions",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) AS num_sold, \\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM activities\\nGROUP BY sell_date ORDER BY sell_date ASC;",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) AS num_sold, \\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM activities\\nGROUP BY sell_date ORDER BY sell_date ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2472864,
                "title": "mysql",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product))AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product))AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2472332,
                "title": "group-sold-products-by-date",
                "content": "# Write your MySQL query statement below\\n```\\nselect sell_date, count(distinct(product)) as num_sold, group_concat(distinct(product) order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, count(distinct(product)) as num_sold, group_concat(distinct(product) order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1577002,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1567768,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1729660,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1684046,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2017214,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2004774,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576946,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2008235,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576784,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576881,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1577002,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1567768,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1729660,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1684046,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2017214,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2004774,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576946,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2008235,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576784,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576881,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576690,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 1574288,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2059979,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2048549,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2039630,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2039387,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2038665,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2023841,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2010143,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 1990298,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 1913567,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1886066,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1860135,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1858140,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1857181,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1855923,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1833374,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1811189,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1798158,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1798154,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1796820,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1793750,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1783875,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1773059,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1771209,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1769384,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1765392,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1763246,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1762076,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1758037,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            }
        ]
    },
    {
        "title": "Clone Binary Tree With Random Pointer",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1833536,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1804711,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1834017,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1833057,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1835362,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            }
        ]
    },
    {
        "title": "XOR Operation in an Array",
        "question_content": "<p>You are given an integer <code>n</code> and an integer <code>start</code>.</p>\n\n<p>Define an array <code>nums</code> where <code>nums[i] = start + 2 * i</code> (<strong>0-indexed</strong>) and <code>n == nums.length</code>.</p>\n\n<p>Return <em>the bitwise XOR of all elements of</em> <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, start = 0\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere &quot;^&quot; corresponds to bitwise XOR operator.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, start = 3\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= start &lt;= 1000</code></li>\n\t<li><code>n == nums.length</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 699141,
                "title": "visual-solution-python-o-1-time-o-1-space",
                "content": "The trivial solution to this problem is the brute force approach. \\nThis solution uses O(n) Time and O(n) Space\\n\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        \\n        ans = 0\\n        nums = [start + n * 2 for n in range(n)]\\n        \\n        for n in nums:\\n            ans = ans ^ n\\n        return ans \\n        \\n```\\n\\nWhile this solution is easy let\\'s try to find something better. Let\\'s print some examples using the previous algorithm by adding in the following line in the for loop.\\n\\n```\\nprint(f\"Nums: {n} Ans: {ans}\")\\n```\\n\\n.\\n**Example:**\\nStart  = 0 ,1 \\nn = 1...8 \\n\\n![image](https://assets.leetcode.com/users/images/30d64e34-4ca0-4451-a5ab-d751e192c272_1592771245.7420313.png)\\n\\nLooking at these charts it is easy to spot a pattern for some of the rows.\\nThe pattern repeats after every 4th number\\n\\n[N % 4 == 1] Green Row: Ans = Number[N]\\n[N % 4 == 2] Yellow Row: Ans = 2\\n[N % 4 == 3] Red Row: Ans = Number[N] ^ 2\\n[N % 4 == 0] Blue Row: Ans = 0\\n\\n.\\n**Next Example:**\\nStart  = 2 , 3\\nn = 1...8 \\n\\n![image](https://assets.leetcode.com/users/images/5aad9815-00c3-44de-85c3-56fe028921a0_1592770409.9596157.png)\\n\\nLooking at these charts it is easy to spot a pattern for some of the rows.\\nHere, the pattern also repeats after every 4th number.\\n\\n[N % 4 == 1] Green Row: Ans = Number[1]\\n[N % 4 == 2] Yellow Row: Ans = Number[N] ^ Number[1]\\n[N % 4 == 3] Red Row: Ans = Number[1] ^ 2\\n[N % 4 == 0] Blue Row: Ans = Number[N] ^ Number[1] ^ 2\\n\\nThese patterns are a bit trickier to find. Start with the obvious one (Green). We know that each value is based on being xOr with the previous number. For yellow, just the number xOr with Green.\\n\\nRed value is constant so that one is also easy to find. For blue just follow the same logic used to find yellow. \\n\\nIf you were to continue this you would see that the examples would repeat themselves\\n\\n.\\n**Code Solution:**\\n\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        \\n        last = start + 2 * (n-1)\\n\\n        if start % 4 <= 1:\\n            if n % 4 == 1: \\n                return last\\n            elif n % 4 == 2: \\n                return 2\\n            elif n % 4 == 3: \\n                return 2 ^ last\\n            else: \\n                return 0\\n\\n        else:\\n            if n % 4 == 1: \\n                return start\\n            elif n % 4 == 2: \\n                return start ^ last\\n            elif n % 4 == 3: \\n                return start ^ 2\\n            else: \\n                return start ^ 2 ^ last\\n```\\n        \\nArgent \\nLike if this helped \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        \\n        ans = 0\\n        nums = [start + n * 2 for n in range(n)]\\n        \\n        for n in nums:\\n            ans = ans ^ n\\n        return ans \\n        \\n```\n```\\nprint(f\"Nums: {n} Ans: {ans}\")\\n```\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        \\n        last = start + 2 * (n-1)\\n\\n        if start % 4 <= 1:\\n            if n % 4 == 1: \\n                return last\\n            elif n % 4 == 2: \\n                return 2\\n            elif n % 4 == 3: \\n                return 2 ^ last\\n            else: \\n                return 0\\n\\n        else:\\n            if n % 4 == 1: \\n                return start\\n            elif n % 4 == 2: \\n                return start ^ last\\n            elif n % 4 == 3: \\n                return start ^ 2\\n            else: \\n                return start ^ 2 ^ last\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697849,
                "title": "o-1-time",
                "content": "```\\nclass Solution\\n{\\n    int xorOperationB(int n, int start)\\n    {\\n        if (n % 2 == 0)\\n            return (n / 2) & 1;\\n        else\\n            return ((n / 2) & 1) ^ (start + n - 1);\\n    }\\n    int xorOperationA(int n, int start)\\n    {\\n        if (start & 1)\\n            return (start - 1) ^ xorOperationB(n + 1, start - 1);\\n        else\\n            return xorOperationB(n, start);\\n    }\\npublic:\\n    int xorOperation(int n, int start)\\n    {\\n        int ret = 2 * xorOperationA(n, start / 2);\\n        if (n & start & 1) ret++;\\n        return ret;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\n    int xorOperationB(int n, int start)\\n    {\\n        if (n % 2 == 0)\\n            return (n / 2) & 1;\\n        else\\n            return ((n / 2) & 1) ^ (start + n - 1);\\n    }\\n    int xorOperationA(int n, int start)\\n    {\\n        if (start & 1)\\n            return (start - 1) ^ xorOperationB(n + 1, start - 1);\\n        else\\n            return xorOperationB(n, start);\\n    }\\npublic:\\n    int xorOperation(int n, int start)\\n    {\\n        int ret = 2 * xorOperationA(n, start / 2);\\n        if (n & start & 1) ret++;\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 796508,
                "title": "o-1-time",
                "content": "Trust me, the code looks complicated, but the concept isn\\'t that complicated.\\n```\\nint XORforN(int val)\\n{\\n    switch(val & 3)\\n    {\\n        case 0:\\n            return val;\\n        case 1:\\n            return 1;\\n        case 2:\\n            return (val + 1);\\n        case 3:\\n            return 0;\\n    }\\n    // printf(\"\\\\n\\\\tshouldn\\'t reach here!\");\\n    return 0;\\n}\\n\\nint xorOperation(int n, int start){\\n    \\n        return (start & 1 & n) | ((XORforN((start >> 1) + n - 1) ^ XORforN((start >> 1) - 1)) << 1);\\n}\\n```\\nBasically, we have to first understand how to XOR \\'n\\' Whole numbers. To understand how to XOR \\'n\\' natural numbers in O(1) time, we need to look at the pattern, here is a table,\\n\\t\\t\\t\\t  ![image](https://assets.leetcode.com/users/images/5bdc1b3b-01f9-4afc-aae0-742be0218f9e_1597649670.3145618.png)\\nIf we look closely at the pattern of the XOR output, we see that the pattern seems to repeat every 4th iteration. If we try to correlate the answers based on the 2 lowest bits on the input, we can see that for every 00 bit, the output is equal to the provided input (0 gives 0, 4 gives 4, 8 gives 8, 12 gives 12 etc), the output is equal to 0 for bits 11 ( 3 gives 0, 7 gives 0, 11 gives 0, 15 gives 0 etc), the output is equal to 1 for 01 bits(1 gives 1, 5 gives 1, 9 gives 1, 13 gives 1 etc), and finally for 10 bits, the output is always 1 higher than the input value ( 2 gives 3, 6 gives 7, 10 gives 11, 14 gives 15 etc). \\nLooking at this pattern, we can create a simple switch case based function to calculate the XOR for \\'n\\' whole numbers. I have used the function name \"XORforN\" for this purpose.\\n\\nNow, if we look at the main equation provided in the question, \"start + 2*i\", we see that stepping ahead every 2 values is like stepping ahead 1 value at a time, if we divide the start value by 2( right shift once) and iterate with 1 step. Looking at the binary representation of the (start + 2i) and (start + 2i)/2 makes this clear.\\n![image](https://assets.leetcode.com/users/images/3154283b-0333-4782-8b52-bb6a02ebfd28_1597651123.2951663.png)\\n\\nWe can see that (start + 2i)/2 is still going ahead by 1, we need to find the XOR of values between start/2 and (start + 2(n-1))/2 (inclusive) and then multiply them by 2 (or left shift once) and then add the remaining 1 bit that\\'s left (this 1 bit was removed from the calculation when we divided start by 2). The lowest bit of the answer will 1, if the start value has a 1 bit at the lowest index AND if the \\'n\\' value is odd. (in other words, the XOR\\'s value is 1, if the number of 1\\'s are odd), hence to add that 1 bit in, I used a equation (start & 1 & n), 1 is the masking value, if start\\'s first bit is 1 and if n\\'s first bit is 1, then the answer will 1. We OR this value to the remaining solution. \\n\\nNow, we already understood, how to find the answer for XORing values from 0 to (n-1), now to understand how to find out XOR of values within the range of [a,b] (both inclusive), we simply XOR XORforN(b) with XORforN(a-1). So the answer for XORing values within the range [a,b] (both inclusive) whole numbers, is to first calculate (0 ^ 1 ^ 2 ^ .... ^b) and then XOR this value with (0 ^ 1 ^ 2 ^ .... ^(a-1)). (This comes from the concept that XORing a series of numbers removes the duplicates(in pairs) and preserves the unique value (that appears once))\\n\\nIn the context of the question asked, the start of the range \\'a\\' is (start / 2) or (start >> 1) , and the end of the range \\'b\\' is ((start / 2) + n - 1) or ((start >> 1) + n - 1).\\nYou may think that we are ignoring the lower most bit, but we make up for it, by first multiplying the above solution by 2 and then ORing the lower most bit using the (start & 1 & n) formulae explained above.\\n\\nI think, I have explained pretty well, if you have any questions, please post them in the comments, I would answer them in my leisure time.\\nThank you for reading upto this point.\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nint XORforN(int val)\\n{\\n    switch(val & 3)\\n    {\\n        case 0:\\n            return val;\\n        case 1:\\n            return 1;\\n        case 2:\\n            return (val + 1);\\n        case 3:\\n            return 0;\\n    }\\n    // printf(\"\\\\n\\\\tshouldn\\'t reach here!\");\\n    return 0;\\n}\\n\\nint xorOperation(int n, int start){\\n    \\n        return (start & 1 & n) | ((XORforN((start >> 1) + n - 1) ^ XORforN((start >> 1) - 1)) << 1);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697698,
                "title": "java-c-python-array-time-o-n-space-o-1",
                "content": "**Explanation**\\nLoop once, we start from the initial value (start + 2 * 0 = start) and calculate XOR Operations step by step until we reach n-1.\\n\\n**Complexity**\\n\\nTime ```O(N)```\\nSpace ```O(1)```\\n\\n**Java:**\\n```\\npublic int xorOperation(int n, int start) {\\n        int res = start;\\n        for (int i=1; i<n; i++){\\n            res = res ^ (start + 2 * i);\\n            }\\n        return res;\\n    }\\n```\\n**C++**\\n```\\n\\tint xorOperation(int n, int start) {   \\n\\t\\tint res = start;\\n\\t\\tfor (int i=1; i<n; i++){\\n\\t\\t\\tres = res ^ (start + 2 * i);\\n\\t\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n```\\n**Python**\\n```\\n    def xorOperation(self, n, start):\\n        res = start\\n        for i in range(1, n):\\n            res = res ^ (start + 2 * i)\\n        return res\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```O(N)```\n```O(1)```\n```\\npublic int xorOperation(int n, int start) {\\n        int res = start;\\n        for (int i=1; i<n; i++){\\n            res = res ^ (start + 2 * i);\\n            }\\n        return res;\\n    }\\n```\n```\\n\\tint xorOperation(int n, int start) {   \\n\\t\\tint res = start;\\n\\t\\tfor (int i=1; i<n; i++){\\n\\t\\t\\tres = res ^ (start + 2 * i);\\n\\t\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n```\n```\\n    def xorOperation(self, n, start):\\n        res = start\\n        for i in range(1, n):\\n            res = res ^ (start + 2 * i)\\n        return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 939190,
                "title": "o-1-time-c-easy-to-understand",
                "content": "The core principle used is that x ^ (x + 1) = 1 if x is even.\\n\\nFirst, we also simplify by changing the problem from being:\\nstart ^ (start + 2) ^ (start + 4) ^ ... (start + 2*i)\\nto:\\nstart/2 ^(start/2 + 1)^...^(start + i)\\n\\nWe can do this by remembering the first bit of start, and then right shifting it. At the end, we can left shift our answer and add back the first bit where necessary.\\n\\nWe can derive for the even scenario by considering that start^(start+1)^(start+2)^(start+3) cancels out to 0 when start is even after right shifting. We can use a Switch block to return the answer, which we can figure out by considering n in chunks of 4.\\n\\nThe solution in the odd scenario when start is odd after right shifting can again be derived by using a Switch block, taking into consideration that (start+1)^(start+2)^(start+3)^(start+4) cancels out to 0. (start+1 is even, hence subsequent series is the same as the even scenario). We simply XOR a start to compensate for not considering the first start in the odd scenario.\\n\\nSimilarly, the first bit only has an effect when n is an odd number, as an even number of 1s XOR\\'d will cancel out to 0.\\n\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int first = start & 1;\\n        start = start >> 1;\\n        if(start % 2 == 0){\\n            switch(n % 4){\\n                case 0: return 0;\\n                case 1: return ((start + n - 1) << 1) + first;\\n                case 2: return 2;\\n                case 3: return ((1 ^ (start + n - 1)) << 1) + first;\\n            } \\n        } else {\\n            switch(n % 4){\\n                case 0: return (start ^ 1 ^ (start + n - 1)) << 1;\\n                case 1: return (start << 1) + first;\\n                case 2: return (start ^ (start + n - 1)) << 1;\\n                case 3: return ((start ^ 1) << 1) + first;\\n            } \\n        }\\n        return 0; //unreachable\\n    }\\n};\\n```\\n\\nThe solution was expressed in this way to simplify explanation, it can be shortened.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int first = start & 1;\\n        start = start >> 1;\\n        if(start % 2 == 0){\\n            switch(n % 4){\\n                case 0: return 0;\\n                case 1: return ((start + n - 1) << 1) + first;\\n                case 2: return 2;\\n                case 3: return ((1 ^ (start + n - 1)) << 1) + first;\\n            } \\n        } else {\\n            switch(n % 4){\\n                case 0: return (start ^ 1 ^ (start + n - 1)) << 1;\\n                case 1: return (start << 1) + first;\\n                case 2: return (start ^ (start + n - 1)) << 1;\\n                case 3: return ((start ^ 1) << 1) + first;\\n            } \\n        }\\n        return 0; //unreachable\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 698854,
                "title": "python-o-1-time-o-1-space",
                "content": "It is intuitive to use a list to store all numbers, and use one loop to calculate them.\\nTime O(n)  Space O(n)\\n\\n```python\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        nums = [start + 2 * i for i in range(n)]\\n        return functools.reduce(lambda x, y: x ^ y, nums, 0)\\n```\\n\\nHowever, if we deal with the problem by considering different situations, the time complexity can be reduce to O(1).\\n\\nif` start % 4 == 0 or 1`, the second bit from right must be 0, so `start ^ (start+2) == 2`\\uFF0C`(start + 2) ^ (start + 4) == 2` .....\\nif `n % 4 == 0`, there will be an even number of 2, and the xor of them is 0.\\nif `n % 4 == 1`, you can exclude the last numebr which is `start + 2 * (n - 1)`. The xor of left numbers is 0, so the result is last.\\nif `n % 4 == 2`, you can exclude the last two numbers. The xor of left numbers is 0, so the result is the xor of last two numbers which is 2.\\nif `n % 4 == 3`, you can exclude the last three numbers. The xor of left numbers is 0, so the result is the xor of last three numbers which is 2 ^ last.\\n\\nif `start % 4 == 2 or 3`, the second bit from right is 1, but the `(start + 2) % 4 == 0 or 1`. So we can exclude the first number. So the solution to calculate the left numbers is the same as the solution above.\\n\\n```python\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        if n == 1: return start\\n\\n        last = start + 2 * (n - 1)\\n        if start % 4 <= 1:\\n            if n % 4 == 0:\\n                return 0\\n            elif n % 4 == 1:\\n                return last\\n            elif n % 4 == 2:\\n                return 2\\n            else:\\n                return 2 ^ last\\n        else:\\n            if (n - 1) % 4 == 0:\\n                return start\\n            elif (n - 1) % 4 == 1:\\n                return start ^ last\\n            elif (n - 1) % 4 == 2:\\n                return start ^ 2\\n            else:\\n                return start ^ 2 ^ last\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        nums = [start + 2 * i for i in range(n)]\\n        return functools.reduce(lambda x, y: x ^ y, nums, 0)\\n```\n```python\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        if n == 1: return start\\n\\n        last = start + 2 * (n - 1)\\n        if start % 4 <= 1:\\n            if n % 4 == 0:\\n                return 0\\n            elif n % 4 == 1:\\n                return last\\n            elif n % 4 == 2:\\n                return 2\\n            else:\\n                return 2 ^ last\\n        else:\\n            if (n - 1) % 4 == 0:\\n                return start\\n            elif (n - 1) % 4 == 1:\\n                return start ^ last\\n            elif (n - 1) % 4 == 2:\\n                return start ^ 2\\n            else:\\n                return start ^ 2 ^ last\\n```",
                "codeTag": "Java"
            },
            {
                "id": 698327,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ## RC ##\\n        ## APPROACH : MATH ##\\n        res = 0\\n        for i in range(n):\\n            res ^= start + 2 * i\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ## RC ##\\n        ## APPROACH : MATH ##\\n        res = 0\\n        for i in range(n):\\n            res ^= start + 2 * i\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 862065,
                "title": "c-0ms-easy-solution",
                "content": "\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint xorOperation(int n, int start) {\\n\\t\\t\\tint ans =0;\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\tans ^= start + 2*i;\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};\\n\\nif you understand the solution, then do Upvote \\n\\'\\'\\'\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint xorOperation(int n, int start) {\\n\\t\\t\\tint ans =0;\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\tans ^= start + 2*i;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 698704,
                "title": "javascript-100-100",
                "content": "````\\nvar xorOperation = function(n, start) {\\n    let xor = 0\\n    for (let i=0; i<n ; i++){\\n        xor ^= start + 2 * i\\n    }\\n    return xor\\n};\\n````",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "````\\nvar xorOperation = function(n, start) {\\n    let xor = 0\\n    for (let i=0; i<n ; i++){\\n        xor ^= start + 2 * i\\n    }\\n    return xor\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 751949,
                "title": "o-1-o-1-constant-memory-constant-space-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int startWithoutFirstBit = start >> 1; // remove first bit\\n        \\n        int from = startWithoutFirstBit;\\n        int to = startWithoutFirstBit + n - 1;\\n        \\n        int result = xorOfRange(from, to);\\n\\t\\t\\n\\t\\t// return first bit\\n        result = result << 1;\\n        if ((start % 2 == 1) && (n % 2 == 1)) result = result | 1;\\n        \\n        return result;\\n    }\\n    \\n    int xorOfRange(int from, int to) {\\n        return xorFromZeroTo(to) ^ xorFromZeroTo(from - 1);\\n    }\\n    \\n    int xorOfRangeFromZeroToN(int n) {\\n        int mod = n % 4;\\n        if (mod == 0) return n;\\n        if (mod == 1) return 1;\\n        if (mod == 2) return n + 1;\\n        if (mod == 3) return 0;\\n        return 0;\\n    }\\n}\\n```\\n \\n`xorOfRangeFromZeroToN` method is based on the following observation: for any range `0..N` XOR of all elements of this range will be equal to:\\n1. `N` if `N mod 4 == 0`\\n2. `1` if `N mod 4 == 1`\\n3. `N + 1` if `N mod 4 == 2`\\n4. `0` if `N mod 4 == 3`\\n\\nBased on this method we can build method `xorOfRange` which calculates XOR of all elements of range `A..B`:\\n1. XOR is a comutative operation: `X ^ Y = Y ^ X`\\n2. `X ^ X = 0`\\n2. `F(A) = xorOfRangeFromZeroToN(A) = 0 ^ 1 ^ 2 ... ^ A`\\n3. `F(B) =  0 ^ 1 ^ 2 ... ^ A ^ A+1 ^ ... ^ B`\\n4. `xorOfRange(A, B) = F(A - 1) ^ F(B) = (0 ^ 0) ^ (1 ^ 1) ^ (2 ^ 2) ^ ... (A-1 ^ A-1) ^ A ^ A+1 ^ ... ^ B = A ^ A+1 ^ ... ^ B`\\n\\nNow comming back to our problem. We need to calculate XOR of all elements in `start, start + 2, start + 4, ... start + 2n`. If we remove least significan bit from every number of this range, we will have a new range `start/2, start/2 + 1, start/2 + 2, ... start + n`. Example, lets say we have a range with start = 5 and n = 4, so we need to calculate `5 ^ 7 ^ 9 ^ 11`:\\n* 5 = **1**01\\n* 7 = **1**11\\n* 9 = **1**001\\n* 11 = **1**101\\n\\nAs you can see first bit never changes. If we remove least significat bit remaining part of number increments by 1 on each step:\\n* 2 = 01\\n* 3 = 11\\n* 4 = 001\\n* 5 = 101\\n\\nWe can calulate range like this, using method `xorOfRange(2, 5)`.\\n\\nThe last thing we need to do is to return bit that we removed. This bit will be 0, if `start` had least significant bit equal to 0. Otherwise if it was 1, value of this bit will be `1 ^ 1 ^ 1 ^ ... ^ 1` and if length of range(`n`) is odd it will be 1 and 0 otherwise.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int startWithoutFirstBit = start >> 1; // remove first bit\\n        \\n        int from = startWithoutFirstBit;\\n        int to = startWithoutFirstBit + n - 1;\\n        \\n        int result = xorOfRange(from, to);\\n\\t\\t\\n\\t\\t// return first bit\\n        result = result << 1;\\n        if ((start % 2 == 1) && (n % 2 == 1)) result = result | 1;\\n        \\n        return result;\\n    }\\n    \\n    int xorOfRange(int from, int to) {\\n        return xorFromZeroTo(to) ^ xorFromZeroTo(from - 1);\\n    }\\n    \\n    int xorOfRangeFromZeroToN(int n) {\\n        int mod = n % 4;\\n        if (mod == 0) return n;\\n        if (mod == 1) return 1;\\n        if (mod == 2) return n + 1;\\n        if (mod == 3) return 0;\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1124283,
                "title": "c-4-lines-code-beginner-friendly",
                "content": "Plz Upvote -\\n\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans=0;\\n        \\n        for(int i=0;i<n;i++)\\n            ans=ans^(start+2*i);\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans=0;\\n        \\n        for(int i=0;i<n;i++)\\n            ans=ans^(start+2*i);\\n        \\n        return ans;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 897642,
                "title": "java-cool-one-line-solution-using-java-8-stream-api",
                "content": "If u liked my solution, please vote it up) thx)\\n```\\nclass Solution {\\n   public int xorOperation(int n, int start) {\\n\\t\\treturn Stream.iterate(0, integer -> integer+1)\\n\\t\\t\\t\\t.map(integer ->start+2*integer)\\n\\t\\t\\t\\t.limit(n)\\n\\t\\t\\t\\t.reduce((a,b)->a^b).orElse(0);\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n   public int xorOperation(int n, int start) {\\n\\t\\treturn Stream.iterate(0, integer -> integer+1)\\n\\t\\t\\t\\t.map(integer ->start+2*integer)\\n\\t\\t\\t\\t.limit(n)\\n\\t\\t\\t\\t.reduce((a,b)->a^b).orElse(0);\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 703026,
                "title": "one-liner-o-1-time-with-no-recursion-and-detailed-explanation",
                "content": "Just for clarity, I marked three intermediate variables as end, a and b, \\nbut if you want, you can plug in these three numbers, and you\\'ll get bona fide one-liner solution.\\n\\n\\tclass Solution:\\n\\t\\t# O(1) solution, without recursion\\n\\t\\tdef xorOperation(self, n: int, start: int) -> int:\\n\\t\\t\\tend = start + n * 2\\n\\t\\t\\ta, b = start // 2, end // 2\\n\\t\\t\\treturn (start % 2) * (n % 2) + \\\\\\n\\t\\t\\t\\t\\t((((a - 1) * (a % 2)) ^ ((a // 2) % 2)) ^ ((b - 1) * (b % 2)) ^ ((b // 2) % 2)) * 2\\n\\t\\nExplanation:\\nWe can divide the results into two parts:\\n1) XOR for the last digits\\n2) XOR for all previous digits\\n\\n**Why do we do that?**\\nBecause as we are dealing with a sequence with a difference of 2.\\nThe last bit is 1 after all XOR operations iff start is odd and n is odd.\\nOtherwise, the last digit will be 0\\nSo, we write the XOR of all last digits as\\n\\n\\t(start % 2) * (n % 2)\\n\\nNow we focus on all other previous bits in the binary presentation.\\nNote that when we divide all numbers by 2,\\nwe are effectively calculating\\n\\n( 0^1^2^...^(a-1) ) ^ (0^1^2^...^b) if we want to get a^(a+1)^...^b\\nHere, a and b are the start and end position of the array divided by 2\\nSo, we have \\n\\t\\n\\ta, b = start // 2, end // 2\\nNote that we have already dealt with the last bit earlier, so we can directly use // here.\\n\\nOK. **Now how do we calculate (0^1^2^...^a) in O(1) time**?\\nIf we write all numbers in its binary form, we will notice that \\n\\n\\t0^1 = 000^001 = 1\\n\\t2^3 = 010^011 = 1 \\n\\t4^5 = 100^101 = 1\\nWe are almost there!\\n\\nSo, (0^1^2^...^a) would be 1 or 0 for the first a//2 pairs of numbers: (a//2)%2 will be 1, otherwise 0.\\nWe may have one term left over at the end, so the result becomes\\nThe last part (a-1) * (a%2) is for the remaining term\\n\\n\\t(a//2)%2 ^ (a-1)*(a%2)\\n\\t\\nGreat, so similarly, we can calculate (0^1^2...^b) as \\n\\t\\n\\t(b//2)%2 ^ (b-1)*(b%2)\\n\\nNow we combine the two parts together:\\n\\tPart1 + Part2*2 \\n\\twill be our final result\\n\\n(start % 2) * (n % 2) + ((((a - 1) * (a % 2)) ^ ((a // 2) % 2)) ^ ((b - 1) * (b % 2)) ^ ((b // 2) % 2)) * 2\\n\\nHope you like this one liner O(1) iterative solution! Please vote up if you like!\\nThis is just for fun. I wouldn\\'t suggest writing a solution like this in a contest though.",
                "solutionTags": [],
                "code": "Just for clarity, I marked three intermediate variables as end, a and b, \\nbut if you want, you can plug in these three numbers, and you\\'ll get bona fide one-liner solution.\\n\\n\\tclass Solution:\\n\\t\\t# O(1) solution, without recursion\\n\\t\\tdef xorOperation(self, n: int, start: int) -> int:\\n\\t\\t\\tend = start + n * 2\\n\\t\\t\\ta, b = start // 2, end // 2\\n\\t\\t\\treturn (start % 2) * (n % 2) + \\\\\\n\\t\\t\\t\\t\\t((((a - 1) * (a % 2)) ^ ((a // 2) % 2)) ^ ((b - 1) * (b % 2)) ^ ((b // 2) % 2)) * 2\\n\\t\\nExplanation:\\nWe can divide the results into two parts:\\n1) XOR for the last digits\\n2) XOR for all previous digits\\n\\n**Why do we do that?**\\nBecause as we are dealing with a sequence with a difference of 2.\\nThe last bit is 1 after all XOR operations iff start is odd and n is odd.\\nOtherwise, the last digit will be 0\\nSo, we write the XOR of all last digits as\\n\\n\\t(start % 2) * (n % 2)\\n\\nNow we focus on all other previous bits in the binary presentation.\\nNote that when we divide all numbers by 2,\\nwe are effectively calculating\\n\\n( 0^1^2^...^(a-1) ) ^ (0^1^2^...^b) if we want to get a^(a+1)^...^b\\nHere, a and b are the start and end position of the array divided by 2\\nSo, we have \\n\\t\\n\\ta, b = start // 2, end // 2\\nNote that we have already dealt with the last bit earlier, so we can directly use // here.\\n\\nOK. **Now how do we calculate (0^1^2^...^a) in O(1) time**?\\nIf we write all numbers in its binary form, we will notice that \\n\\n\\t0^1 = 000^001 = 1\\n\\t2^3 = 010^011 = 1 \\n\\t4^5 = 100^101 = 1\\nWe are almost there!\\n\\nSo, (0^1^2^...^a) would be 1 or 0 for the first a//2 pairs of numbers: (a//2)%2 will be 1, otherwise 0.\\nWe may have one term left over at the end, so the result becomes\\nThe last part (a-1) * (a%2) is for the remaining term\\n\\n\\t(a//2)%2 ^ (a-1)*(a%2)\\n\\t\\nGreat, so similarly, we can calculate (0^1^2...^b) as \\n\\t\\n\\t(b//2)%2 ^ (b-1)*(b%2)\\n\\nNow we combine the two parts together:\\n\\tPart1 + Part2*2 \\n\\twill be our final result\\n\\n(start % 2) * (n % 2) + ((((a - 1) * (a % 2)) ^ ((a // 2) % 2)) ^ ((b - 1) * (b % 2)) ^ ((b // 2) % 2)) * 2\\n\\nHope you like this one liner O(1) iterative solution! Please vote up if you like!\\nThis is just for fun. I wouldn\\'t suggest writing a solution like this in a contest though.",
                "codeTag": "Java"
            },
            {
                "id": 3419065,
                "title": "easy-c-code-beats-100-time",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ndirectly use the given formula as it is, and simultaneously XOR the result.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int k=0;\\n        for(int i=0;i<n;i++)\\n            k=k^(start+2*i);\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int k=0;\\n        for(int i=0;i<n;i++)\\n            k=k^(start+2*i);\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 942598,
                "title": "simple-python-solutions",
                "content": "####  **Solution 1: Using Loop**\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans=0\\n        for i in range(n):\\n            ans^=start+(2*i)\\n        return ans\\n```\\n\\n#### **Solution 2: Using reduce**\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(operator.xor,[start+(2*i) for i in range(n)])\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans=0\\n        for i in range(n):\\n            ans^=start+(2*i)\\n        return ans\\n```\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(operator.xor,[start+(2*i) for i in range(n)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697822,
                "title": "clean-python-3-one-liner-and-o-1-solution",
                "content": "Time: `O(N)`\\nSpace: `O(1)`\\nThanks [_xavier_](https://leetcode.com/_xavier_/) for his suggestions.\\n```\\nimport functools\\nimport operator\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return functools.reduce(operator.xor, range(start, start + 2 * n, 2))\\n```\\n\\nUpdate: O(1) time [solution](https://leetcode.com/problems/xor-operation-in-an-array/discuss/698854/PYTHON-O(1)-Time-O(1)-Space) by [lonely7yk](https://leetcode.com/lonely7yk/)\\nTime: `O(1)`\\nSpace: `O(1)`\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        last = start + 2 * (n - 1)\\n        if start % 4 < 2:\\n            start = 0\\n        else:\\n            n -= 1\\n        if n % 2 == 0: return start ^ (n & 2)\\n        return start ^ last ^ (n & 2)\\n```",
                "solutionTags": [],
                "code": "```\\nimport functools\\nimport operator\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return functools.reduce(operator.xor, range(start, start + 2 * n, 2))\\n```\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        last = start + 2 * (n - 1)\\n        if start % 4 < 2:\\n            start = 0\\n        else:\\n            n -= 1\\n        if n % 2 == 0: return start ^ (n & 2)\\n        return start ^ last ^ (n & 2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 765051,
                "title": "javascript-1-line",
                "content": "```\\nvar xorOperation = function(n, start) {\\n  return Array(n)\\n    .fill()\\n    .map((x, i) => start + 2 * i)\\n    .reduce((c, x) => c ^ x);\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar xorOperation = function(n, start) {\\n  return Array(n)\\n    .fill()\\n    .map((x, i) => start + 2 * i)\\n    .reduce((c, x) => c ^ x);\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 697815,
                "title": "easy-c-o-1-space-o-n-time",
                "content": "```\\nint xorOperation(int n, int start) {\\n        int res = start;\\n        for(int i =1; i < n; i++)\\n        {\\n            res ^= (start + 2*i);\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "```\\nint xorOperation(int n, int start) {\\n        int res = start;\\n        for(int i =1; i < n; i++)\\n        {\\n            res ^= (start + 2*i);\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3505320,
                "title": "my-xoroperation",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @param {number} start\\n * @return {number}\\n */\\nvar xorOperation = function (n, start) {\\n\\tlet result = start;\\n\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tresult ^= start + 2 * i;\\n\\t}\\n\\n\\treturn result;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} start\\n * @return {number}\\n */\\nvar xorOperation = function (n, start) {\\n\\tlet result = start;\\n\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tresult ^= start + 2 * i;\\n\\t}\\n\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 700800,
                "title": "a-few-solutions",
                "content": "Each value of the array of size `n` is monotonically increasing by `2`.  Thus, we can write naive solutions which calculate the xor, starting at `x`.\\n\\n---\\n\\n**Recursive Solutions:**\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun xorOperation(n: Int, x: Int): Int { return if (0 < n) x xor xorOperation(n - 1, x + 2) else 0 }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet xorOperation = (n, x) => n ? x ^ xorOperation(n - 1, x + 2) : 0;\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    xorOperation = lambda self, n, x: x ^ self.xorOperation(n - 1, x + 2) if n else 0\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int x) { return n ? x ^ xorOperation(n - 1, x + 2) : 0; }\\n};\\n```\\n\\n---\\n\\n**Iterative Solutions:**\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    var xorOperation = { n: Int, x: Int -> (0 until n).map{ x + 2 * it }.reduce{ t: Int, x: Int -> t xor x } }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet xorOperation = (n, x) => [...Array(n)].map((_, i) => x + 2 * i).reduce((a, b) => a ^ b , 0);\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, x: int) -> int:\\n        return reduce(lambda a, b: a ^ b, (map(lambda i: x + 2 * i, [i for i in range(n)])), 0)\\n```\\n\\n*Rust*\\n```\\nimpl Solution {\\n    pub fn xor_operation(n: i32, x: i32) -> i32 {\\n        let mut ans = 0;\\n        for i in 0..n {\\n            ans ^= x + 2 * i;\\n        }\\n        ans\\n    }\\n}\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int x, int ans = 0) {\\n       for (auto i{ 0 }; i < n; ++i)\\n           ans ^= x + 2 * i;\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun xorOperation(n: Int, x: Int): Int { return if (0 < n) x xor xorOperation(n - 1, x + 2) else 0 }\\n}\\n```\n```\\nlet xorOperation = (n, x) => n ? x ^ xorOperation(n - 1, x + 2) : 0;\\n```\n```\\nclass Solution:\\n    xorOperation = lambda self, n, x: x ^ self.xorOperation(n - 1, x + 2) if n else 0\\n```\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int x) { return n ? x ^ xorOperation(n - 1, x + 2) : 0; }\\n};\\n```\n```\\nclass Solution {\\n    var xorOperation = { n: Int, x: Int -> (0 until n).map{ x + 2 * it }.reduce{ t: Int, x: Int -> t xor x } }\\n}\\n```\n```\\nlet xorOperation = (n, x) => [...Array(n)].map((_, i) => x + 2 * i).reduce((a, b) => a ^ b , 0);\\n```\n```\\nclass Solution:\\n    def xorOperation(self, n: int, x: int) -> int:\\n        return reduce(lambda a, b: a ^ b, (map(lambda i: x + 2 * i, [i for i in range(n)])), 0)\\n```\n```\\nimpl Solution {\\n    pub fn xor_operation(n: i32, x: i32) -> i32 {\\n        let mut ans = 0;\\n        for i in 0..n {\\n            ans ^= x + 2 * i;\\n        }\\n        ans\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int x, int ans = 0) {\\n       for (auto i{ 0 }; i < n; ++i)\\n           ans ^= x + 2 * i;\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2074114,
                "title": "java-0ms-faster-than-100-00-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int result = 0;\\n        for (int i = 0; i < n; i++) {\\n            int num = start + 2 * i;\\n            result ^= num;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int result = 0;\\n        for (int i = 0; i < n; i++) {\\n            int num = start + 2 * i;\\n            result ^= num;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2023866,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int i=0;\\n        int xor_result=0;\\n        while(i<n){\\n            xor_result^=start+2*i;\\n            i++;\\n        }\\n        return xor_result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int i=0;\\n        int xor_result=0;\\n        while(i<n){\\n            xor_result^=start+2*i;\\n            i++;\\n        }\\n        return xor_result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1334322,
                "title": "c-100-faster-easy-peasy",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n       vector<int> nums; int xorr=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            xorr=xorr ^ (start+(2*i));\\n        }\\n        \\n        return xorr;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n       vector<int> nums; int xorr=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            xorr=xorr ^ (start+(2*i));\\n        }\\n        \\n        return xorr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1119403,
                "title": "o-1-java-o-1-space",
                "content": "\\nLogic:\\nXor of every 4 consec even and 4 odd numbers are repeated with a pattern(irrespective of start).(even for 1..n every 4 consec number repeat a pattern)\\nAlso, a^b^a^b = 0\\n\\nSo 6^8^10^12 can be re written as 2^4^6^8^10^12 ^2 ^4(2^4^2^4 will result in 0)\\n\\nFor even numbers starting from 2\\n0^2->2 (2)\\n2^4->6 (n+2)\\n6^6->0 (0)\\n0^8->8 (n)\\n8^10->2 (2)\\n10^12->14 (n+2)\\n14^14->0 (0)\\n0^16->16 (n)\\n\\nSimilarly for odd:\\n1 -> 1 (n)\\n1^3->2(n-1)\\n3^5 -> 7 (n+2)\\n7^7 -> 0 (0)\\n\\nNow that we have the pattern for numbers starting from 2(for even) and 1(odd),\\nwe can always use this to get the result based on the end number.\\n\\nEx, n-4, start->6\\nend number = 12 . Using our pattern, for even numbers we would have the result as 14(n+2).\\nSince the start is from 6, and our pattern starts from 2, we  can xor this result with 2^4.\\nSo the final result will be 14^6 = 8\\n\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int result= 0;\\n        if(n==0 || n==1)\\n            return start;\\n        int end = start + 2*(n-1);\\n        int prevEnd = (start-2)<=0?0:(start-2);\\n        if(start%2==0){\\n            result = getEvenXor(end) ^ getEvenXor(prevEnd);\\n        \\n        }else{\\n            result = getOddXor(end) ^ getOddXor(prevEnd);\\n        }\\n        return result;\\n    }\\n    public int getEvenXor(int n){\\n        if(n==0)\\n            return 0;\\n        if(n%4==0){\\n            if((n/4)%2==0)\\n            {\\n                return n;\\n            }\\n            else{\\n                return n+2;\\n            }\\n        }\\n        else{\\n            if(((n-2)/4)%2 ==0)\\n            {\\n                return 2;\\n            }    \\n            else\\n            {\\n                return 0;\\n            }\\n                \\n        }\\n    }\\n    public int getOddXor(int n){\\n        if(n==0)\\n            return 0;\\n        if(n%4==1){\\n            if(((n-1)/4 %2)==0){\\n                return n;\\n            }\\n            else{\\n                return n+2;\\n            } \\n        }\\n        else{\\n            if(((n+1)/4)%2==0)\\n            {\\n                return 0;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int result= 0;\\n        if(n==0 || n==1)\\n            return start;\\n        int end = start + 2*(n-1);\\n        int prevEnd = (start-2)<=0?0:(start-2);\\n        if(start%2==0){\\n            result = getEvenXor(end) ^ getEvenXor(prevEnd);\\n        \\n        }else{\\n            result = getOddXor(end) ^ getOddXor(prevEnd);\\n        }\\n        return result;\\n    }\\n    public int getEvenXor(int n){\\n        if(n==0)\\n            return 0;\\n        if(n%4==0){\\n            if((n/4)%2==0)\\n            {\\n                return n;\\n            }\\n            else{\\n                return n+2;\\n            }\\n        }\\n        else{\\n            if(((n-2)/4)%2 ==0)\\n            {\\n                return 2;\\n            }    \\n            else\\n            {\\n                return 0;\\n            }\\n                \\n        }\\n    }\\n    public int getOddXor(int n){\\n        if(n==0)\\n            return 0;\\n        if(n%4==1){\\n            if(((n-1)/4 %2)==0){\\n                return n;\\n            }\\n            else{\\n                return n+2;\\n            } \\n        }\\n        else{\\n            if(((n+1)/4)%2==0)\\n            {\\n                return 0;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 698902,
                "title": "c-o-1-no-recursion-using-range-xor-formula",
                "content": "```\\nclass Solution {\\npublic:\\n    //Geeks For Geeks - Calculate XOR from 1 to n\\n    int cx(int n) //function to compute xor from 1 to n\\n    { \\n        switch(n & 3)\\n        { \\n            case 0: return n;    \\n            case 1: return 1;    \\n            case 2: return n + 1;\\n            case 3: return 0;    \\n        } \\n        return 0; //dummy return to avoid warnings\\n    } \\n    \\n    int xorOperation(int n, int start) {\\n        int lbit= start&n&1 ?1:0;   //LSB(Unit digit bit)\\n        int nn=start/2;             //To convert question to gap of 1 instead of 2\\n        int onelr= cx(nn+n-1)^cx(nn-1);\\n        // l^(l+1)^...^r is equivalent to\\n        // (1^2^...^r)^(1^2^...^(l-1))\\n        \\n        int ans=(onelr<<1)+lbit;    //Appending LSB to answer\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //Geeks For Geeks - Calculate XOR from 1 to n\\n    int cx(int n) //function to compute xor from 1 to n\\n    { \\n        switch(n & 3)\\n        { \\n            case 0: return n;    \\n            case 1: return 1;    \\n            case 2: return n + 1;\\n            case 3: return 0;    \\n        } \\n        return 0; //dummy return to avoid warnings\\n    } \\n    \\n    int xorOperation(int n, int start) {\\n        int lbit= start&n&1 ?1:0;   //LSB(Unit digit bit)\\n        int nn=start/2;             //To convert question to gap of 1 instead of 2\\n        int onelr= cx(nn+n-1)^cx(nn-1);\\n        // l^(l+1)^...^r is equivalent to\\n        // (1^2^...^r)^(1^2^...^(l-1))\\n        \\n        int ans=(onelr<<1)+lbit;    //Appending LSB to answer\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2765679,
                "title": "python-faster-than-90-python-solution-beginner-friendly-explained",
                "content": "\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        arr = [None] * n #create a list with n elements\\n        target = 0\\n        for i in range(0,n):\\n            arr[i] = start + 2*i  #replace the value at i postion to the value of start + 2*i\\n        for i in arr:  # target is set 0 because 0 ^ n = n , so 0 ^ i will give us i at first. \\n            target ^= i  # xor the value in arr one by one \\n        return target\\n            \\n```\\n**Upvote if you like the solution.**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        arr = [None] * n #create a list with n elements\\n        target = 0\\n        for i in range(0,n):\\n            arr[i] = start + 2*i  #replace the value at i postion to the value of start + 2*i\\n        for i in arr:  # target is set 0 because 0 ^ n = n , so 0 ^ i will give us i at first. \\n            target ^= i  # xor the value in arr one by one \\n        return target\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 850122,
                "title": "python-99-87-one-line",
                "content": "```python\\nfrom functools import reduce\\nfrom operator import xor\\n\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(xor, range(start, start + n * 2 - 1, 2))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nfrom functools import reduce\\nfrom operator import xor\\n\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(xor, range(start, start + n * 2 - 1, 2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534773,
                "title": "this-is-easy-way-to-solve-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int [] nums = new int[n];\\n        for(int i = 0; i<n; i++){\\n            nums[i] = start + 2*i; \\n        }\\n\\n        int sum = nums[0];\\n\\n         for(int i = 1; i<n; i++){\\n            sum ^= nums[i];\\n        }\\n     \\n     return sum;\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int [] nums = new int[n];\\n        for(int i = 0; i<n; i++){\\n            nums[i] = start + 2*i; \\n        }\\n\\n        int sum = nums[0];\\n\\n         for(int i = 1; i<n; i++){\\n            sum ^= nums[i];\\n        }\\n     \\n     return sum;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3250809,
                "title": "python3-beats-94-67",
                "content": "![image.png](https://assets.leetcode.com/users/images/84b4c13f-dcee-4283-9527-009b2954a5d0_1677827043.7104824.png)\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        s1=[]\\n        r = 0\\n        for i in range(n):\\n            s=start+(i*2)\\n            s1.append(s)\\n        for i in range(len(s1)):\\n            r = r ^ s1[i]\\n        return r\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        s1=[]\\n        r = 0\\n        for i in range(n):\\n            s=start+(i*2)\\n            s1.append(s)\\n        for i in range(len(s1)):\\n            r = r ^ s1[i]\\n        return r\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247115,
                "title": "100-runtime-beats-c-solution",
                "content": "# Intuition\\nLooping and XORing through the array.\\n\\n# Approach\\nJust we\\'ve defined a vector array called *ans* and pushed the values according to the equation that was given *nums[i] = start + 2 * i* in my case I named it as *ans* so the equation for me becomes *ans[i] = start + 2 * i*. Then I created another integer variable and named it as *\"ope\"* and stored the first value of the created array in it, so that we could start EXORing with the other values in the array. Then we ran a *for loop* from the *1st index to the size of the array* and just went on XORing all the elements, and meanwhile kept on storing it in *ope* variable. And finally returned *ope*.\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int>arr = {};\\n        for(int i = 0; i < n; i++) {\\n            arr.push_back(start + 2 * i);\\n        }\\n        int ope = arr[0];\\n        for(int i = 1; i < arr.size(); i++) {\\n            ope = ope ^ arr[i];\\n        }\\n        return ope;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int>arr = {};\\n        for(int i = 0; i < n; i++) {\\n            arr.push_back(start + 2 * i);\\n        }\\n        int ope = arr[0];\\n        for(int i = 1; i < arr.size(); i++) {\\n            ope = ope ^ arr[i];\\n        }\\n        return ope;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3226372,
                "title": "o-1-time-space-without-ifs-cases-intuitive-proof-and-explanation",
                "content": "# Intuition\\nThe key observation is to notice that x^(x+2) == 2 when the second bit of x is set to 0, which makes the XOR-sum zero every four terms.\\n\\n\\n# Approach\\nExplanation:\\nIf x has the second bit set to 0 then it follows that x ^ (x + 2) == 2:\\n  From that we can conclude that the XOR sum becomes 0 for every 4 terms:\\n  x ^ (x + 2) ^ (x + 4) ^ (x + 6) == x ^ (x + 2) ^ (x + 4) ^ ( (x + 4) + 2) == 2 ^ 2 == 0\\n\\nSo in that case, we only care to XOR-add the n % 4 last terms\\n\\nIf x has the second bit set to 1, then we need to compute the following XOR-sum:\\nx ^ (x + 2) ^ (x + 4) ^ ... ^ (x + 2* (n-1))\\n\\nsince x has the second bit set to 1, x + 2 has the second bit set to 0. If we let y == x + 2,\\nwe can rewrite this XOR-sum as follows:\\nx ^ [ y ^ (y + 2) ^ ... ^ (y + 2* (n-2)) ]\\n\\nThe XOR-sum in the brackets is a XOR-sum where the first term (y) has the second bit set to 0,\\nwhich we have computed in the first case. So we compute that just like we do in the first case\\nand we XOR it with x.\\n\\nWritting cases/switches/ifs depending on the modulo result like the other solutions here doesn\\'t really matter since it\\'s only up to four terms we need to XOR-sum (so still O(1) if we ignore cases) and makes the solution easier to reason about and remember.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n\\nPython3:\\n\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        has2ndBitSet = bool(start & 2)\\n        end = start + 2*(n-1)\\n        k = (n - 1*has2ndBitSet) % 4\\n\\n        # This reduce is O(1) time and space because k < 4 \\n        return (start*has2ndBitSet) ^ reduce(operator.xor, [end - 2*i for i in range(k)], 0)\\n\\n```\\n\\nC++:\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        bool has2ndBitSet = start & 2;\\n        int end = start + 2*(n-1);\\n        int k = (n - 1 * has2ndBitSet) % 4;\\n        int res = start*has2ndBitSet;\\n\\n        // This loop is O(1) time and space because k < 4\\n        for (int i = 0; i < k; i ++) {\\n            res ^= end - 2*i;\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        has2ndBitSet = bool(start & 2)\\n        end = start + 2*(n-1)\\n        k = (n - 1*has2ndBitSet) % 4\\n\\n        # This reduce is O(1) time and space because k < 4 \\n        return (start*has2ndBitSet) ^ reduce(operator.xor, [end - 2*i for i in range(k)], 0)\\n\\n```\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        bool has2ndBitSet = start & 2;\\n        int end = start + 2*(n-1);\\n        int k = (n - 1 * has2ndBitSet) % 4;\\n        int res = start*has2ndBitSet;\\n\\n        // This loop is O(1) time and space because k < 4\\n        for (int i = 0; i < k; i ++) {\\n            res ^= end - 2*i;\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3081505,
                "title": "java-easy-solution-beats-100-runtime-0ms",
                "content": "\\n\\n# Approach\\nUsing Bit Manipulation- \\nTo solve the question, we iterate all nos. from 0 to n-1 one by one using a for loop and calculate each value(of the hypoyhetical array without actually creating an array) using the formula given- (start + 2*i). Simultaneously, we calculate its XOR operation with the previous value(or 0 in case of the first number at index 0) and store it in the result variable. At last, we return the result.\\n\\nConcept behind performing XOR operation with 0 at first(i.e. keeping initial value of result=0):-\\n\\nPerforming XOR operation of any number gives back the same number.\\ne.g. 2^0 = 2\\nsince, 2= 0010 , 0=0000\\n(0010) ^ (0000) = 0010\\n\\nthis happens because, \\nXOR of 1 with 0 => 0^1 =1 ,and \\nXOR of 0 with 0 => 0^0 =0 \\n\\nHope this helps!!\\nDo Upvote if you like it.\\n\\nThanks :)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int val=0; \\n        int result=0; //since performing XOR operation of any number with 0 gives back the same number\\n        for(int i=0; i<n; i++){  //loop for iterating numbers from 0 to n-1 \\n            val= start+ 2*i; // calculating each value of the array(i.e. hypothetical array) without actually storing it in an array\\n            result^=val; // performing XOR operation one by for for each element of the array and storing it in result variable\\n\\n        }\\n        return result;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int val=0; \\n        int result=0; //since performing XOR operation of any number with 0 gives back the same number\\n        for(int i=0; i<n; i++){  //loop for iterating numbers from 0 to n-1 \\n            val= start+ 2*i; // calculating each value of the array(i.e. hypothetical array) without actually storing it in an array\\n            result^=val; // performing XOR operation one by for for each element of the array and storing it in result variable\\n\\n        }\\n        return result;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2790634,
                "title": "python-simple-solution-beginner-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        xor = 0\\n        for i in range(n):\\n            xor = xor ^ start\\n            start+=2\\n        return xor\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        xor = 0\\n        for i in range(n):\\n            xor = xor ^ start\\n            start+=2\\n        return xor\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696772,
                "title": "c-100-faster-than-all-easy",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        if(n==0){\\n            return 0;\\n        }\\n        int count = 0;\\n        for(int i = 0 ;i < n; i++){\\n            count ^= start + i*2;;\\n        }\\n        return count;\\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        if(n==0){\\n            return 0;\\n        }\\n        int count = 0;\\n        for(int i = 0 ;i < n; i++){\\n            count ^= start + i*2;;\\n        }\\n        return count;\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2425887,
                "title": "java-easiest-solution-0ms-runtime-faster-than-100-online-submission-4-liner",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans=0;\\n        for(int i=0;i<n;i++){\\n            ans = ans ^ start+2*i;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans=0;\\n        for(int i=0;i<n;i++){\\n            ans = ans ^ start+2*i;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1837333,
                "title": "o-1-complexity-0ms-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans=0,nums[n];\\n        for(int i=0;i<n;++i)\\n        {\\n            nums[i]=start+(2*i);\\n            ans^=nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans=0,nums[n];\\n        for(int i=0;i<n;++i)\\n        {\\n            nums[i]=start+(2*i);\\n            ans^=nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1228123,
                "title": "python3-time-o-n-space-o-1-reduce-function-explanation",
                "content": "## **How *xor* works**\\n**Exclusive or** -  *is a logical operation that is true if and only if its arguments differ (one is true, the other is false). **[Wiki Link](https://en.wikipedia.org/wiki/Exclusiveor)***\\n\\n![image](https://assets.leetcode.com/users/images/e3d1c5ac-0679-4f70-9136-d5e3b93a08c7_1621876640.3559592.png)\\n\\n\\n\\n##### Simple case:\\n\\n*10 xor 12 = 1010 xor 1100 = 0110 = 6*\\n\\n\\n## **How *reduce* works**\\n```\\nfunctools.reduce(function, iterable)\\n```\\n* function: the first argument that defines the function to apply, also known as the predicate of reduce function\\n* the second argument with the values to be passed to function\\n\\n#### Example:\\nIn this example, we are summing all the elements of the list:\\n```\\narr = [1, 3, 4]\\nresult = reduce(lambda a,b : a+b, arr)\\narr // == 8\\n```\\n\\nYou can find more examples *[at this link](https://levelup.gitconnected.com/understanding-the-python-reduce-function-with-examples-ddfac8b078d4)*\\n\\n## **What is `__xor__`?**\\n```\\na ^ b\\n```\\nthis is an analogue of\\n```\\na.__xor__(b)\\n```\\nThis is called the *magic method*. You can read more about them on the *[medium at this link.](https://medium.com/fintechexplained/advanced-python-what-are-magic-methods-d21891cf9a08)*\\n\\n# **Solution:**\\n```\\nfrom functools import reduce\\n\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(int.__xor__, range(start, start+n*2, 2))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfunctools.reduce(function, iterable)\\n```\n```\\narr = [1, 3, 4]\\nresult = reduce(lambda a,b : a+b, arr)\\narr // == 8\\n```\n```\\na ^ b\\n```\n```\\na.__xor__(b)\\n```\n```\\nfrom functools import reduce\\n\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(int.__xor__, range(start, start+n*2, 2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1163962,
                "title": "python3-simple-44ms-solution",
                "content": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = start\\n        for i in range(1 , n):\\n            ans ^= start + (2 * i)\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = start\\n        for i in range(1 , n):\\n            ans ^= start + (2 * i)\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118640,
                "title": "o-1-solution-in-java",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int start1 = start / 2;\\n        int end1 = start1 + n - 1;\\n        int xor = XOR(start1 - 1) ^ XOR(end1);\\n        int ans = 0;\\n        if(start % 2 == 0 || n % 2 == 0) {\\n            ans = xor * 2;\\n        } else {\\n            ans = xor * 2 + 1;\\n        }\\n        return ans;\\n    }\\n    public static int XOR(int x) {\\n        if(x % 4 == 0) {\\n            return x;\\n        }\\n        if(x % 4 == 1) {\\n            return 1;\\n        }\\n        if(x % 4 == 2) {\\n            return x + 1;\\n        }\\n        if(x % 4 == 3) {\\n            return 0;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int start1 = start / 2;\\n        int end1 = start1 + n - 1;\\n        int xor = XOR(start1 - 1) ^ XOR(end1);\\n        int ans = 0;\\n        if(start % 2 == 0 || n % 2 == 0) {\\n            ans = xor * 2;\\n        } else {\\n            ans = xor * 2 + 1;\\n        }\\n        return ans;\\n    }\\n    public static int XOR(int x) {\\n        if(x % 4 == 0) {\\n            return x;\\n        }\\n        if(x % 4 == 1) {\\n            return 1;\\n        }\\n        if(x % 4 == 2) {\\n            return x + 1;\\n        }\\n        if(x % 4 == 3) {\\n            return 0;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 953921,
                "title": "my-simplest-o-n-c-solution-beats-100",
                "content": "```\\nint xorOperation(int n, int start) {\\n        vector<int> v;\\n        int i = 0, res = start;\\n        while(i < n){\\n            int temp = start + 2*i;\\n            if(i)res ^= temp;\\n            i++;\\n        }\\n        return res;\\n    }\\n```\\n***Please vote if it hepled you***",
                "solutionTags": [],
                "code": "```\\nint xorOperation(int n, int start) {\\n        vector<int> v;\\n        int i = 0, res = start;\\n        while(i < n){\\n            int temp = start + 2*i;\\n            if(i)res ^= temp;\\n            i++;\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 818290,
                "title": "c-simple-solution-0ms-runtime-100",
                "content": "Solution:\\n```\\nclass Solution\\n{\\npublic:\\n    int xorOperation(int n, int start)\\n    {\\n        int res = start, temp = 2;\\n        for (int i = 1; i < n; i++)\\n        {\\n            res ^= (start + temp);\\n            temp += 2;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int xorOperation(int n, int start)\\n    {\\n        int res = start, temp = 2;\\n        for (int i = 1; i < n; i++)\\n        {\\n            res ^= (start + temp);\\n            temp += 2;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 704778,
                "title": "c",
                "content": "```\\npublic int XorOperation(int n, int start) =>\\n\\tEnumerable.Range(0, n)\\n\\t.Select(x => x * 2 + start)\\n\\t.Aggregate((x, y) => x ^ y);\\n```",
                "solutionTags": [],
                "code": "```\\npublic int XorOperation(int n, int start) =>\\n\\tEnumerable.Range(0, n)\\n\\t.Select(x => x * 2 + start)\\n\\t.Aggregate((x, y) => x ^ y);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 702619,
                "title": "c-2-lines",
                "content": "```\\nint xorOperation(int n, int start){\\n    for (int x = 0x0 ; n || (start = x, 0) ; x ^= start + (--n << 1));\\n    return start;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint xorOperation(int n, int start){\\n    for (int x = 0x0 ; n || (start = x, 0) ; x ^= start + (--n << 1));\\n    return start;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 698268,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            ans ^= start + i * 2;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            ans ^= start + i * 2;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697879,
                "title": "o-1-time-and-space-math",
                "content": "Let f(x)=0^1^2^...^x, by observation we see that f(x) can be simply decided by x%4, which you can prove by induction.\\nSince the step in this problem is 2, we can consider the last binary digit and the other digits separately. The last digit is 1 iff start is odd and n is odd. And with prefix-sum technique, we can get the rest digits.\\n```\\nclass Solution {\\npublic:\\n    int f(int x)\\n    {\\n        if(x<0)x=0;\\n        switch(x%4)\\n        {\\n            case 0:\\n                return x;\\n            case 1:\\n                return 1;\\n            case 2:\\n                return x+1;\\n            default:\\n                return 0;\\n        }\\n    }\\n    int xorOperation(int n, int start) {\\n        return 2*(f(start/2+n-1)^f(start/2-1))|(start&n&1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int f(int x)\\n    {\\n        if(x<0)x=0;\\n        switch(x%4)\\n        {\\n            case 0:\\n                return x;\\n            case 1:\\n                return 1;\\n            case 2:\\n                return x+1;\\n            default:\\n                return 0;\\n        }\\n    }\\n    int xorOperation(int n, int start) {\\n        return 2*(f(start/2+n-1)^f(start/2-1))|(start&n&1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3868979,
                "title": "beats-100-java-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] arr = new int[n];\\n        int ans = 0;\\n        for(int i=0; i<arr.length; i++){\\n            arr[i] = start+2*i;\\n            ans = ans^arr[i];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] arr = new int[n];\\n        int ans = 0;\\n        for(int i=0; i<arr.length; i++){\\n            arr[i] = start+2*i;\\n            ans = ans^arr[i];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3662024,
                "title": "1486-xor-operation-in-an-array-100-easy-java-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int x=0;\\n        int res=0;\\n        for(int i=0; i<n; i++){\\n            x = start+2*i;\\n            res ^=x;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int x=0;\\n        int res=0;\\n        for(int i=0; i<n; i++){\\n            x = start+2*i;\\n            res ^=x;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3540912,
                "title": "c-easy-code-by-array-declaration-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n      int arr[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            arr[i] = start + 2*i;\\n        }\\n\\n        int ans  = 0;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            ans = ans ^ arr[i];\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n      int arr[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            arr[i] = start + 2*i;\\n        }\\n\\n        int ans  = 0;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            ans = ans ^ arr[i];\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3525754,
                "title": "simplest-efficient-c-code-time-o-n-space-o-n",
                "content": "# Intuition\\nThe problem is asking to perform an XOR operation on an array of n elements starting from the given \"start\" value with a constant 2*i increment. The XOR operator can be easily implemented using a loop, by iterating through the array and performing the XOR operation on each element.\\n\\n# Approach\\nThe given code is using a loop to create the array of n elements and perform XOR operation on each element. The loop iterates n times and in each iteration, it computes the value of arr[i] as start + 2*i, and also performs the XOR operation on the current value of x with arr[i]. Finally, the code returns the final value of x as the result.\\n\\n# Complexity\\n- Time complexity: $O(n)$ because it iterates n times to create the array and perform the XOR operation.\\n\\n- Space complexity: $O(n)$ because it creates an array of n elements.\\n\\n# Code\\n```\\nint xorOperation(int n, int start)\\n{\\n    int arr[n],x=0;\\n    for(int i=0;i<n;i++)\\n    {\\n        arr[i] = start + 2*i;\\n        x = x^arr[i];\\n    }\\n    return x;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint xorOperation(int n, int start)\\n{\\n    int arr[n],x=0;\\n    for(int i=0;i<n;i++)\\n    {\\n        arr[i] = start + 2*i;\\n        x = x^arr[i];\\n    }\\n    return x;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3467593,
                "title": "beats-100-very-simple-c-solution-using-array",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAccording to XOR operation :-\\nEx:- lets take a number 6, then 6^0=6 only.\\nSo i have taken a variable sum in my code for calculating xor value of elements stored in array.\\n\\n# Complexity\\n- Time complexity:O(n)\\n\\n# Code\\n```\\nint xorOperation(int n, int start){\\n   int ans[n];\\n    int sum=0;\\n    for(int i=0;i<n;i++)\\n    {\\n        ans[i]=start+2*i;\\n    }\\n    for(int j=0;j<n;j++)\\n    {\\n        sum=sum^ans[j];\\n    }\\n    return sum;\\n\\n}\\nPLEASE UPVOTE IF YOU FIND IT HELPFUL,THANKYOU :)",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAccording to XOR operation :-\\nEx:- lets take a number 6, then 6^0=6 only.\\nSo i have taken a variable sum in my code for calculating xor value of elements stored in array.\\n\\n# Complexity\\n- Time complexity:O(n)\\n\\n# Code\\n```\\nint xorOperation(int n, int start){\\n   int ans[n];\\n    int sum=0;\\n    for(int i=0;i<n;i++)\\n    {\\n        ans[i]=start+2*i;\\n    }\\n    for(int j=0;j<n;j++)\\n    {\\n        sum=sum^ans[j];\\n    }\\n    return sum;\\n\\n}\\nPLEASE UPVOTE IF YOU FIND IT HELPFUL,THANKYOU :)",
                "codeTag": "Unknown"
            },
            {
                "id": 3364943,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> nums;\\n        for(int i=0;i<n;i++){\\n            nums.push_back(start + 2*i);\\n        }\\n        //int res = nums[0];\\n        int res = start;\\n        for(int i=1;i<n;i++){\\n            res ^= (start + 2 * i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> nums;\\n        for(int i=0;i<n;i++){\\n            nums.push_back(start + 2*i);\\n        }\\n        //int res = nums[0];\\n        int res = start;\\n        for(int i=1;i<n;i++){\\n            res ^= (start + 2 * i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3253564,
                "title": "easy-c-solution-for-beginners-runtime-beats-100-0-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=start;\\n        for(int i=start+2,j=2;j<=n;i+=2,j++)\\n            res=res^i;\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=start;\\n        for(int i=start+2,j=2;j<=n;i+=2,j++)\\n            res=res^i;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3236655,
                "title": "c-solution-easy-xor",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nint xorOperation(int n, int start) {\\nint res = start;\\nfor (int i=1; i<n; i++){\\nres = res ^ (start + 2 * i);\\n}\\nreturn res;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint xorOperation(int n, int start) {\\nint res = start;\\nfor (int i=1; i<n; i++){\\nres = res ^ (start + 2 * i);\\n}\\nreturn res;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3221226,
                "title": "beats-100-runtime",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] nums=new int[n];\\n        int xor=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            nums[i]=(start+2*i);\\n            xor=xor^nums[i];\\n        }\\n        return xor;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] nums=new int[n];\\n        int xor=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            nums[i]=(start+2*i);\\n            xor=xor^nums[i];\\n        }\\n        return xor;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3194990,
                "title": "3-solution-list-lambda-one-liner-python-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. list Comprehension\\n2. lambda\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n\\n        # Approch 1  (list Comprehension)\\n\\n        nums = []   \\n        for i in range(n):              #1\\n            nums.append(start+2*i)      #2\\n        x = nums[0]\\n        for i in range(1, len(nums)):\\n            x ^= nums[i]\\n        return x \\n        \\n\\n        # Approch 2 (lambda Function )\\n\\n        Line 1 and 2 also written as:\\n        nums = [start+2*i for i in range(x)]\\n        x = nums[0]\\n        result = reduce(lambda x, y: x ^ y, arr)\\n        return result\\n\\n        # One-liner \\n        return reduce(lambda x, y: x ^ y, [start+2*i for i in range(x)])\\n\\n\\n        \\n\\n        \\n        \\n            \\n\\n\\n        \\n\\n        \\n        \\n            \\n\\n        \\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n\\n        # Approch 1  (list Comprehension)\\n\\n        nums = []   \\n        for i in range(n):              #1\\n            nums.append(start+2*i)      #2\\n        x = nums[0]\\n        for i in range(1, len(nums)):\\n            x ^= nums[i]\\n        return x \\n        \\n\\n        # Approch 2 (lambda Function )\\n\\n        Line 1 and 2 also written as:\\n        nums = [start+2*i for i in range(x)]\\n        x = nums[0]\\n        result = reduce(lambda x, y: x ^ y, arr)\\n        return result\\n\\n        # One-liner \\n        return reduce(lambda x, y: x ^ y, [start+2*i for i in range(x)])\\n\\n\\n        \\n\\n        \\n        \\n            \\n\\n\\n        \\n\\n        \\n        \\n            \\n\\n        \\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3182072,
                "title": "3-line-super-easy-java-solution-0ms-100-faster",
                "content": "# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int res = start + 2 * 0;\\n        for (int i = 1; i < n; i++) res ^= start + 2 * i;\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int res = start + 2 * 0;\\n        for (int i = 1; i < n; i++) res ^= start + 2 * i;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3128492,
                "title": "beats-54-91-xor-operation-in-an-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        nums=[]\\n        xor=0\\n        i=0\\n        while i!=n:\\n            nums.append(start+2*i)\\n            i+=1\\n        for i in range(len(nums)):\\n            xor^=nums[i]\\n        return xor\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        nums=[]\\n        xor=0\\n        i=0\\n        while i!=n:\\n            nums.append(start+2*i)\\n            i+=1\\n        for i in range(len(nums)):\\n            xor^=nums[i]\\n        return xor\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2843201,
                "title": "swift-easy-one-line-100-speed",
                "content": "```\\nclass Solution {\\n    func xorOperation(_ n: Int, _ start: Int) -> Int {\\n        return (0..<n).map({ start + $0 * 2 }).reduce(0, ^)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func xorOperation(_ n: Int, _ start: Int) -> Int {\\n        return (0..<n).map({ start + $0 * 2 }).reduce(0, ^)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2671871,
                "title": "cpp-solution-faster-than-100-c-submissions-easy-to-understand",
                "content": "```\\nint xorOperation(int n, int start) {\\n        if(n==0){\\n            return 0;\\n        }\\n        int arr[n];\\n        for(int i = 0; i < n; i++){\\n            arr[i] = start + 2*i;\\n        }\\n        int count = 0;\\n        for(int i = 0 ;i < n; i++){\\n            count = count^arr[i];\\n        }\\n        return count;\\n    }\\n\\t\\n\\t\\n\\tUpdated Code\\n\\t\\n\\t\\n\\tint xorOperation(int n, int start) {\\n        int count = 0;\\n        for(int i = 0 ;i < n; i++){\\n            count ^= start + i*2;;\\n        }\\n        return count;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nint xorOperation(int n, int start) {\\n        if(n==0){\\n            return 0;\\n        }\\n        int arr[n];\\n        for(int i = 0; i < n; i++){\\n            arr[i] = start + 2*i;\\n        }\\n        int count = 0;\\n        for(int i = 0 ;i < n; i++){\\n            count = count^arr[i];\\n        }\\n        return count;\\n    }\\n\\t\\n\\t\\n\\tUpdated Code\\n\\t\\n\\t\\n\\tint xorOperation(int n, int start) {\\n        int count = 0;\\n        for(int i = 0 ;i < n; i++){\\n            count ^= start + i*2;;\\n        }\\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2605941,
                "title": "simple-python3-solution-easiest-code",
                "content": "***UPVOTE*** if it is helpful\\n``` \\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = 0\\n        for i in range(n):\\n            ans ^= start\\n            start+=2\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "``` \\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = 0\\n        for i in range(n):\\n            ans ^= start\\n            start+=2\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2575489,
                "title": "java-easy-o-1-space",
                "content": "# Please Upvote guys \\uD83D\\uDE4F\\uD83D\\uDE4F\\uD83D\\uDE4F\\n```\\n\\t\\tint ans = start;\\n        for(int i = 1; i < n; i++)\\n            ans ^= start + 2 * i;\\n        return ans;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t\\tint ans = start;\\n        for(int i = 1; i < n; i++)\\n            ans ^= start + 2 * i;\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2421169,
                "title": "cpp17-solution-100-faster",
                "content": "\\n```\\n/*** 1486. XOR Operation in an Array ***/\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int arr[n];\\n        for(int i=0;i<n;i++){\\n            arr[i]=start;\\n            start+=2;\\n        }\\n        long long ans =0;\\n        for(int i=0;i<n;i++){\\n            ans^=arr[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/*** 1486. XOR Operation in an Array ***/\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int arr[n];\\n        for(int i=0;i<n;i++){\\n            arr[i]=start;\\n            start+=2;\\n        }\\n        long long ans =0;\\n        for(int i=0;i<n;i++){\\n            ans^=arr[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1758111,
                "title": "100-faster-c-solution-0ms-runtime",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=0;\\n        for(int i=0;i<n;i++){\\n            int temp=start+ 2*i;\\n            res=res^temp;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=0;\\n        for(int i=0;i<n;i++){\\n            int temp=start+ 2*i;\\n            res=res^temp;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1698651,
                "title": "c-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int>arr(n);\\n        int ans=0;\\n        \\n       for(int i=0;i<n;i++)\\n           arr[i]=start + 2 * i;\\n        \\n        for(auto x:arr)\\n            ans^=x;\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int>arr(n);\\n        int ans=0;\\n        \\n       for(int i=0;i<n;i++)\\n           arr[i]=start + 2 * i;\\n        \\n        for(auto x:arr)\\n            ans^=x;\\n        return ans;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1452278,
                "title": "c-optimized",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n\\t// Find XOR of first n numbers\\n    int XOR_of_n(int n)\\n    {\\n        int modVal = n % 4;\\n        \\n        if (modVal == 0)\\n        {\\n            return n;\\n        }\\n        if (modVal == 1)\\n        {\\n            return 1;\\n        }\\n        if (modVal == 2)\\n        {\\n            return n + 1;\\n        }\\n        if (modVal == 3)\\n        {\\n            return 0;\\n        }\\n        \\n        return 0;\\n    }\\n    \\n    int xorOperation(int n, int start)\\n    {\\n \\xA0 \\xA0 \\xA0 \\xA0// First, understand that for the given sequence, the first bit depends on start being even. \\n \\xA0 \\xA0 \\xA0 \\xA0// First bit is 1 if start is odd and n is odd (because 2*i doesn\\'t contribute to the last bit)\\n        // Then find the remaining bits by shifting the bits right by 1. This converts the remaining problem\\n        // to XOR_of_n()\\n        \\n        // shift the sequence to right by 1\\n        int begin = start/2;\\n        int end = start/2 + n - 1;\\n        \\n        // find the XOR of remaining bits. XOR is associative so XOR of numbers\\n\\t\\t// between n1 and n2 is XOR(1, n1) ^ XOR(1, n2)\\n        int XOR_shifted = XOR_of_n(begin - 1) ^ XOR_of_n(end);\\n        \\n        // combine the last bit with the remaining bits and return\\n        return (XOR_shifted << 1) | (start & (n & 1));\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n\\t// Find XOR of first n numbers\\n    int XOR_of_n(int n)\\n    {\\n        int modVal = n % 4;\\n        \\n        if (modVal == 0)\\n        {\\n            return n;\\n        }\\n        if (modVal == 1)\\n        {\\n            return 1;\\n        }\\n        if (modVal == 2)\\n        {\\n            return n + 1;\\n        }\\n        if (modVal == 3)\\n        {\\n            return 0;\\n        }\\n        \\n        return 0;\\n    }\\n    \\n    int xorOperation(int n, int start)\\n    {\\n \\xA0 \\xA0 \\xA0 \\xA0// First, understand that for the given sequence, the first bit depends on start being even. \\n \\xA0 \\xA0 \\xA0 \\xA0// First bit is 1 if start is odd and n is odd (because 2*i doesn\\'t contribute to the last bit)\\n        // Then find the remaining bits by shifting the bits right by 1. This converts the remaining problem\\n        // to XOR_of_n()\\n        \\n        // shift the sequence to right by 1\\n        int begin = start/2;\\n        int end = start/2 + n - 1;\\n        \\n        // find the XOR of remaining bits. XOR is associative so XOR of numbers\\n\\t\\t// between n1 and n2 is XOR(1, n1) ^ XOR(1, n2)\\n        int XOR_shifted = XOR_of_n(begin - 1) ^ XOR_of_n(end);\\n        \\n        // combine the last bit with the remaining bits and return\\n        return (XOR_shifted << 1) | (start & (n & 1));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1449517,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> v; \\n        int sum=0;\\n        for(int i=0; i<n; i++){\\n            v.push_back(start+2*i);     \\n        }\\n        for(int i=0; i<v.size();i++){\\n            sum=sum^v[i];\\n        }\\n        return sum; \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> v; \\n        int sum=0;\\n        for(int i=0; i<n; i++){\\n            v.push_back(start+2*i);     \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1432930,
                "title": "java-100-faster",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int res = start;\\n        for(int i=1; i<n; i++){\\n            res^=start + 2*i;\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\nThat is all :)\\nfrom Uzbekistan\\uD83C\\uDDFA\\uD83C\\uDDFF",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int res = start;\\n        for(int i=1; i<n; i++){\\n            res^=start + 2*i;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1368844,
                "title": "java-clean-code-100-faster",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; i++){\\n            ans ^= start + 2*i;;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; i++){\\n            ans ^= start + 2*i;;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1306618,
                "title": "easy-python-solution-99-17",
                "content": "Runtime: 20 ms, faster than 99.17% of Python3 online submissions for XOR Operation in an Array.\\nMemory Usage: 14.3 MB, less than 18.70% of Python3 online submissions for XOR Operation in an Array.\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        c=0\\n        for i in range(n):\\n            c^=(start+2*i)\\n        return c",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "Runtime: 20 ms, faster than 99.17% of Python3 online submissions for XOR Operation in an Array.\\nMemory Usage: 14.3 MB, less than 18.70% of Python3 online submissions for XOR Operation in an Array.\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        c=0\\n        for i in range(n):\\n            c^=(start+2*i)\\n        return c",
                "codeTag": "Java"
            },
            {
                "id": 1293178,
                "title": "1-line-java-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        return IntStream.range(0,n).map(i -> start + 2 * i).reduce(0, (a,b) -> a ^ b);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        return IntStream.range(0,n).map(i -> start + 2 * i).reduce(0, (a,b) -> a ^ b);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1272615,
                "title": "c-0ms-no-array-created-speedy-solution",
                "content": "```\\nint xorOperation(int n, int start) {\\n        int ans=start;\\n        for(int i=1;i<n;i++){\\n            ans^=(start+2*i);\\n        }\\n        return ans;\\n    }",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint xorOperation(int n, int start) {\\n        int ans=start;\\n        for(int i=1;i<n;i++){\\n            ans^=(start+2*i);\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1239005,
                "title": "python-solution-faster-than-95",
                "content": "\\n    def xorOperation(self, n: int, start: int) -> int:\\n        nums = []\\n        for i in range(n):\\n            nums.append(start + 2*i)\\n        return reduce(lambda x, y: x ^ y, nums)\\n",
                "solutionTags": [],
                "code": "\\n    def xorOperation(self, n: int, start: int) -> int:\\n        nums = []\\n        for i in range(n):\\n            nums.append(start + 2*i)\\n        return reduce(lambda x, y: x ^ y, nums)\\n",
                "codeTag": "Python3"
            },
            {
                "id": 1147864,
                "title": "a-simple-and-readable-solution-for-this-problem-4-lines",
                "content": "**Runtime Beats 94.28% of Python3 submissions**\\n\\n**Code**\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = start\\n        for i in range(1 , n):\\n            ans ^= start + (2 * i)\\n        return(ans)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = start\\n        for i in range(1 , n):\\n            ans ^= start + (2 * i)\\n        return(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1111030,
                "title": "one-line-javascript-faster-than-99-39",
                "content": "This possibly the most concise format for this solution\\n\\n```\\nvar xorOperation = (n, start) => new Array(n).fill(start).reduce((x,e,i)=>i!=0 ? x^(start +2*i) :x ,start)\\n```",
                "solutionTags": [],
                "code": "```\\nvar xorOperation = (n, start) => new Array(n).fill(start).reduce((x,e,i)=>i!=0 ? x^(start +2*i) :x ,start)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1111026,
                "title": "simple-js-solution-faster-than-95",
                "content": "```\\nvar xorOperation = function(n, start) {\\n    let nums = new Array(n)\\n    for(let i=1; i<n; i++) nums[i] = start+2*i\\n  \\n    return nums.reduce((x,e,i)=>i!=0 ? x^(start +2*i) :x ,start)\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar xorOperation = function(n, start) {\\n    let nums = new Array(n)\\n    for(let i=1; i<n; i++) nums[i] = start+2*i\\n  \\n    return nums.reduce((x,e,i)=>i!=0 ? x^(start +2*i) :x ,start)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 959881,
                "title": "javascript-fast-solution",
                "content": "```\\nvar xorOperation = function(n, start) {\\n  let result = start;\\n  \\n  for (let i = 1; i < n; i ++) {\\n    result ^= start + i * 2;\\n  }\\n  \\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar xorOperation = function(n, start) {\\n  let result = start;\\n  \\n  for (let i = 1; i < n; i ++) {\\n    result ^= start + i * 2;\\n  }\\n  \\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 892607,
                "title": "1486-xor-operation-in-an-array-javascript-soluitons-time-o-1-space-o-1",
                "content": "Time: O(1)\\nSpace: O(1)\\nsolution by [lonely7yk](https://leetcode.com/lonely7yk/)\\n```\\nvar xorOperation = function(n, start) {\\n    let last = start + 2 * (n - 1)\\n    if (start % 4 < 2) {\\n        start = 0\\n    } else {\\n        n -= 1\\n    }\\n    if (n % 2 == 0) return start ^ (n & 2);\\n\\n    return start ^ last ^ (n & 2)\\n};\\n\\n```\\nMy solutions \\nTime O(n) \\nSpace O(1)\\n```\\nvar xorOperation = function(n, start) {\\n    let arr = [];\\n    for (let i = 0; i < n; i++) {\\n        arr[i] = start + 2 * i;\\n    }\\n    return arr.reduce((acc, cur) => acc ^ cur, 0);\\n};\\n```\\n```\\nvar xorOperation = function(n, start) {\\n    let bitwiseXor = 0;\\n    for (let i = 0; i < n; i++) {\\n        bitwiseXor ^= start + 2 * i;\\n    }\\n    return bitwiseXor;\\n};\\n```\\n```\\nvar xorOperation = function(n, start) {\\n    let bitwiseXor = start;\\n    for (let i = 1; i < n; i++) {\\n        bitwiseXor ^= start + 2 * i;\\n    }\\n    return bitwiseXor;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar xorOperation = function(n, start) {\\n    let last = start + 2 * (n - 1)\\n    if (start % 4 < 2) {\\n        start = 0\\n    } else {\\n        n -= 1\\n    }\\n    if (n % 2 == 0) return start ^ (n & 2);\\n\\n    return start ^ last ^ (n & 2)\\n};\\n\\n```\n```\\nvar xorOperation = function(n, start) {\\n    let arr = [];\\n    for (let i = 0; i < n; i++) {\\n        arr[i] = start + 2 * i;\\n    }\\n    return arr.reduce((acc, cur) => acc ^ cur, 0);\\n};\\n```\n```\\nvar xorOperation = function(n, start) {\\n    let bitwiseXor = 0;\\n    for (let i = 0; i < n; i++) {\\n        bitwiseXor ^= start + 2 * i;\\n    }\\n    return bitwiseXor;\\n};\\n```\n```\\nvar xorOperation = function(n, start) {\\n    let bitwiseXor = start;\\n    for (let i = 1; i < n; i++) {\\n        bitwiseXor ^= start + 2 * i;\\n    }\\n    return bitwiseXor;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 883412,
                "title": "python-xor-1-line",
                "content": "```\\n        from operator import xor \\n        return reduce(xor,[start+2*i for i in range(n)])\\n\\t\\t\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n        from operator import xor \\n        return reduce(xor,[start+2*i for i in range(n)])\\n\\t\\t\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 836645,
                "title": "c-faster-than-100-solution",
                "content": "# C++ Solution\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res = start;\\n        while(n > 1){\\n            start += 2;\\n            res = res ^ start; // compute XOR of res and start\\n            n--;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res = start;\\n        while(n > 1){\\n            start += 2;\\n            res = res ^ start; // compute XOR of res and start\\n            n--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 765497,
                "title": "java-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "Any suggestions would be welcome. Cheers :)\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int nums[]=new int[n];\\n        int i,bit=0;\\n        for(i=0;i<nums.length;i++) nums[i]=start+2*i;\\n        for(i=0;i<nums.length;i++) bit^=nums[i];\\n        return bit;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int nums[]=new int[n];\\n        int i,bit=0;\\n        for(i=0;i<nums.length;i++) nums[i]=start+2*i;\\n        for(i=0;i<nums.length;i++) bit^=nums[i];\\n        return bit;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 741364,
                "title": "java-o-1-100-runtime-and-memory",
                "content": "```java\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        /**\\n            First of all, we need to know (2^4^6^8^10) == 2^(4^6^8^10) == 2^((4^6)^(8^10)) = 2^(2^2) = 2\\n        \\n            (1) start >> 1, to match add 2*n as add n;\\n            (2) then &1 to check if start >> 1 is odd or even, so we will know last digit start with 0 or 1.\\n            (3) then &1 to figure out n is odd or even\\n            (4) start >> 1 is odd, then n is odd, result is (^pairs of 1)^ first one\\n                                   then n is even, result is (^pairs of 1)^ last one ^ first one\\n            (5) start >> 1 is even, then n is even, the result is (^pairs of 1)\\n                                    then n is odd, the result is (^pairs of 1)^last one.\\n            (6) the final result: (result from step 4, 5) * 2 + ss;  ss is the last digit XOR result.\\n        **/ \\n            int ss = 0;\\n            if( start % 2 == 1 && n % 2 == 1){\\n                ss = 1;\\n            }\\n            start = start>>1;\\n            if( (start & 1) == 1){\\n                if( (n & 1) == 1){\\n                    return (((n-1)/2 & 1) ^ start) * 2 + ss;\\n                }\\n                else{\\n                    return (((n-2)/2 & 1) ^ start ^ (start + n-1)) * 2 + ss;\\n                }\\n            }\\n            else{\\n                if( (n & 1) == 1){\\n                    return (((n-1)/2 & 1) ^ (start + n - 1)) * 2 + ss;\\n                }\\n                else{\\n                    return (n/2 & 1) * 2 + ss;\\n                }\\n            }     \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        /**\\n            First of all, we need to know (2^4^6^8^10) == 2^(4^6^8^10) == 2^((4^6)^(8^10)) = 2^(2^2) = 2\\n        \\n            (1) start >> 1, to match add 2*n as add n;\\n            (2) then &1 to check if start >> 1 is odd or even, so we will know last digit start with 0 or 1.\\n            (3) then &1 to figure out n is odd or even\\n            (4) start >> 1 is odd, then n is odd, result is (^pairs of 1)^ first one\\n                                   then n is even, result is (^pairs of 1)^ last one ^ first one\\n            (5) start >> 1 is even, then n is even, the result is (^pairs of 1)\\n                                    then n is odd, the result is (^pairs of 1)^last one.\\n            (6) the final result: (result from step 4, 5) * 2 + ss;  ss is the last digit XOR result.\\n        **/ \\n            int ss = 0;\\n            if( start % 2 == 1 && n % 2 == 1){\\n                ss = 1;\\n            }\\n            start = start>>1;\\n            if( (start & 1) == 1){\\n                if( (n & 1) == 1){\\n                    return (((n-1)/2 & 1) ^ start) * 2 + ss;\\n                }\\n                else{\\n                    return (((n-2)/2 & 1) ^ start ^ (start + n-1)) * 2 + ss;\\n                }\\n            }\\n            else{\\n                if( (n & 1) == 1){\\n                    return (((n-1)/2 & 1) ^ (start + n - 1)) * 2 + ss;\\n                }\\n                else{\\n                    return (n/2 & 1) * 2 + ss;\\n                }\\n            }     \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 738685,
                "title": "rust-1-line",
                "content": "Runtime: 0 ms, faster than 100.00% of Rust online submissions for XOR Operation in an Array.\\nMemory Usage: 2.1 MB, less than 100.00% of Rust online submissions for XOR Operation in an Array.\\n\\n```rust\\nimpl Solution {\\n    pub fn xor_operation(n: i32, start: i32) -> i32 {\\n        (start..)\\n            .step_by(2)\\n            .take(n as usize)\\n            .fold(0, |acc, x| acc ^ x)\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n    #[test]\\n    fn test_xor_operation() {\\n        assert_eq!(Solution::xor_operation(5, 0), 8)\\n    }\\n\\n    #[test]\\n    fn test_xor_operation_02() {\\n        assert_eq!(Solution::xor_operation(4, 3), 8)\\n    }\\n\\n    #[test]\\n    fn test_xor_operation_03() {\\n        assert_eq!(Solution::xor_operation(1, 7), 7)\\n    }\\n\\n    #[test]\\n    fn test_xor_operation_04() {\\n        assert_eq!(Solution::xor_operation(10, 5), 2)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn xor_operation(n: i32, start: i32) -> i32 {\\n        (start..)\\n            .step_by(2)\\n            .take(n as usize)\\n            .fold(0, |acc, x| acc ^ x)\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n    #[test]\\n    fn test_xor_operation() {\\n        assert_eq!(Solution::xor_operation(5, 0), 8)\\n    }\\n\\n    #[test]\\n    fn test_xor_operation_02() {\\n        assert_eq!(Solution::xor_operation(4, 3), 8)\\n    }\\n\\n    #[test]\\n    fn test_xor_operation_03() {\\n        assert_eq!(Solution::xor_operation(1, 7), 7)\\n    }\\n\\n    #[test]\\n    fn test_xor_operation_04() {\\n        assert_eq!(Solution::xor_operation(10, 5), 2)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 731134,
                "title": "c-solution",
                "content": "Below is a simple c# solution. \\n```\\npublic class Solution {\\n    public int XorOperation(int n, int start) {\\n        int result = 0; int i =0;\\n        while (n > 0)\\n        {\\n            result = result ^ (start + 2 * i);\\n            i++; n--;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int XorOperation(int n, int start) {\\n        int result = 0; int i =0;\\n        while (n > 0)\\n        {\\n            result = result ^ (start + 2 * i);\\n            i++; n--;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 724150,
                "title": "one-line-solution-in-ruby",
                "content": "```ruby\\ndef xor_operation(n, start)\\n  (1...n).inject(start) {|res, i| res ^ (start + 2*i) }\\nend\\n```",
                "solutionTags": [],
                "code": "```ruby\\ndef xor_operation(n, start)\\n  (1...n).inject(start) {|res, i| res ^ (start + 2*i) }\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 712745,
                "title": "one-line-swift-solution",
                "content": "One-line Swift solution\\n```\\nclass Solution {\\n    func xorOperation(_ n: Int, _ start: Int) -> Int {\\n        return (0..<n).map({ start + $0 * 2 }).reduce(0, ^)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func xorOperation(_ n: Int, _ start: Int) -> Int {\\n        return (0..<n).map({ start + $0 * 2 }).reduce(0, ^)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 710115,
                "title": "simple-c-speed-100-memory-100",
                "content": "```\\nint xorOperation(int n, int start) {\\n        \\n        int data = start;\\n        bitset<32> b1(data);\\n        for(int i=1;i<n;i++)\\n        {\\n            data = start + 2*i;\\n            bitset<32> b2(data);\\n            b1 = b1^b2;\\n        }\\n        \\n        return b1.to_ulong();\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint xorOperation(int n, int start) {\\n        \\n        int data = start;\\n        bitset<32> b1(data);\\n        for(int i=1;i<n;i++)\\n        {\\n            data = start + 2*i;\\n            bitset<32> b2(data);\\n            b1 = b1^b2;\\n        }\\n        \\n        return b1.to_ulong();\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 699469,
                "title": "rust-one-line-functional-programming",
                "content": "```rust\\nimpl Solution {\\n    pub fn xor_operation(n: i32, start: i32) -> i32 {\\n        (0..n).fold(0, |mut ans, x| { ans ^= 2 * x + start; ans })\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn xor_operation(n: i32, start: i32) -> i32 {\\n        (0..n).fold(0, |mut ans, x| { ans ^= 2 * x + start; ans })\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697901,
                "title": "1-line-python",
                "content": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(lambda x,y:x^(start+2*y),range(n),0)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(lambda x,y:x^(start+2*y),range(n),0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697860,
                "title": "java-c-python3-clean-code",
                "content": "```\\nJava:-\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; i++)\\n            ans ^= (start + 2 * i);            \\n        return ans;\\n    }\\n}\\n\\nC++:-\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; i++)\\n            ans ^= (start + 2*i);\\n        return ans;\\n    }\\n};\\n\\nPython3:-\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = 0\\n        for i in range(n):\\n            ans ^= (start + 2*i)\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nJava:-\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; i++)\\n            ans ^= (start + 2 * i);            \\n        return ans;\\n    }\\n}\\n\\nC++:-\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; i++)\\n            ans ^= (start + 2*i);\\n        return ans;\\n    }\\n};\\n\\nPython3:-\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        ans = 0\\n        for i in range(n):\\n            ans ^= (start + 2*i)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697764,
                "title": "java-easy-straightforward-linear-time-o-1-space",
                "content": "```\\npublic int xorOperation(int n, int start) {\\n        int xor=0;\\n        for (int i = 0; i<n; i++)\\n            xor ^= start + 2*i;\\n        return xor;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic int xorOperation(int n, int start) {\\n        int xor=0;\\n        for (int i = 0; i<n; i++)\\n            xor ^= start + 2*i;\\n        return xor;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 697693,
                "title": "javascript",
                "content": "```\\n/**\\n * @param {number} n\\n * @param {number} start\\n * @return {number}\\n */\\nvar xorOperation = function(n, start) {\\n    let arr = [],xor\\n    for(let i=0;i<n;i++){\\n        arr.push(start+(i*2))\\n    }\\n    xor = arr[0]\\n    for(let i=1;i<n;i++){\\n        xor = xor^arr[i]\\n    }\\n    return xor\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} start\\n * @return {number}\\n */\\nvar xorOperation = function(n, start) {\\n    let arr = [],xor\\n    for(let i=0;i<n;i++){\\n        arr.push(start+(i*2))\\n    }\\n    xor = arr[0]\\n    for(let i=1;i<n;i++){\\n        xor = xor^arr[i]\\n    }\\n    return xor\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4009735,
                "title": "the-power-of-high-order-function-hof",
                "content": "It is always fun to avoid using explicit for-loop when we can try out HOF\\n# Code\\n```\\nfunction xorOperation(n: number, start: number): number {\\n    return Array.from({ length: n }, (_, index) => start + index * 2).reduce((acc, cur) => cur^acc, 0)\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction xorOperation(n: number, start: number): number {\\n    return Array.from({ length: n }, (_, index) => start + index * 2).reduce((acc, cur) => cur^acc, 0)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3796329,
                "title": "fully-explained-c-easy-to-understand",
                "content": "# Intuition & Approach\\nThe given code defines a function ```xorOperation``` that takes *two integer parameters* ```n``` and ```start```. It calculates the XOR (exclusive OR) of n numbers starting from the value of start with a common difference of 2. The function then returns the final XOR result.\\n\\n##### Step-by-step explanation of how the function works:\\n\\n1. Initialize a variable ```num``` with the value of ```start```. This variable will hold the current XOR result.\\n2. Loop through the numbers ```i``` from ```1 to n-1``` (since the loop starts from 1, not 0).\\n\\n3. Inside the loop, calculate the next number in the sequence using ```start + 2*i```.\\n4. ```XOR``` the current value of ```num``` with the calculated number, and store the result back into ```num```. This operation updates the XOR result as we iterate through the sequence.\\n5. After the loop finishes, return the final value of ```num```, which will be the XOR of all ```n``` numbers.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n\\n        int num = start;\\n        \\n        for(int i = 1; i < n; i++){\\n\\n            num = num ^ (start + 2*i);\\n\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```xorOperation```\n```n```\n```start```\n```num```\n```start```\n```i```\n```1 to n-1```\n```start + 2*i```\n```XOR```\n```num```\n```num```\n```num```\n```n```\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n\\n        int num = start;\\n        \\n        for(int i = 1; i < n; i++){\\n\\n            num = num ^ (start + 2*i);\\n\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3707839,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing for loop\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIterate in the array from 1 to n, storing it int answer variable which is intialize with start, then returning the answer\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = start;\\n        for(int i=1; i<n; i++){\\n            ans = ans ^ (start+2*i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = start;\\n        for(int i=1; i<n; i++){\\n            ans = ans ^ (start+2*i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3540904,
                "title": "c-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int nums[n];\\n        for(int i=0; i<n; i++){\\n            nums[i] = start + 2*i;\\n        }\\n\\n        int ans = 0;\\n        for(int i=0; i<n; i++){\\n\\n            ans = ans ^ nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int nums[n];\\n        for(int i=0; i<n; i++){\\n            nums[i] = start + 2*i;\\n        }\\n\\n        int ans = 0;\\n        for(int i=0; i<n; i++){\\n\\n            ans = ans ^ nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534779,
                "title": "this-is-very-easy-but-it-is-working-very-fast-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int []nums=new int[n];\\n        for(int i=0;i<n;i++){\\n            nums[i]=start+2*i;\\n        }\\n        int sum=nums[0];\\n        for(int i=1;i<n;i++){\\n            sum^=nums[i];\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int []nums=new int[n];\\n        for(int i=0;i<n;i++){\\n            nums[i]=start+2*i;\\n        }\\n        int sum=nums[0];\\n        for(int i=1;i<n;i++){\\n            sum^=nums[i];\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3514935,
                "title": "answer-is-in-the-question",
                "content": "# Intuition\\nI Just Write the code as Question says!!\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans=0;\\n        int[] arr = new int[n];\\n        for(int i=0;i<n;i++){\\n            arr[i]= start + (2*i);\\n            ans^=arr[i];\\n        }\\n        return ans;\\n    }\\n}\\n```\\n![upvote.png](https://assets.leetcode.com/users/images/6aa6f8ce-120a-454e-ba81-ed004161d22e_1683800198.3876867.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans=0;\\n        int[] arr = new int[n];\\n        for(int i=0;i<n;i++){\\n            arr[i]= start + (2*i);\\n            ans^=arr[i];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3252212,
                "title": "constant-space",
                "content": "# Code\\n```\\npublic class Solution \\n{\\n    public int XorOperation(int n, int start) \\n    { \\n        int ans=start;\\n        for(var i=1; i<n;i++) \\n            ans=ans^(start+2*i); \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int XorOperation(int n, int start) \\n    { \\n        int ans=start;\\n        for(var i=1; i<n;i++) \\n            ans=ans^(start+2*i); \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232676,
                "title": "java-100-faster-than",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int x = start;\\n        for(int i = start+2; i <= n * 2 - 2 + start; i += 2){\\n            x ^= i;\\n        }\\n        return x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int x = start;\\n        for(int i = start+2; i <= n * 2 - 2 + start; i += 2){\\n            x ^= i;\\n        }\\n        return x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3172640,
                "title": "xor-operation-in-an-array-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nuse a for loop to do multiple XOR operations\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor loop is used\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int i, j, num, x;\\n        for(i=0 ; i<n ; i++)\\n        {\\n            num = start + 2*i;\\n            if(i==0)\\n            {\\n                x = num;\\n            }\\n            else\\n            {\\n                x = x^num;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int i, j, num, x;\\n        for(i=0 ; i<n ; i++)\\n        {\\n            num = start + 2*i;\\n            if(i==0)\\n            {\\n                x = num;\\n            }\\n            else\\n            {\\n                x = x^num;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2909030,
                "title": "c-simple-loop-21ms-97",
                "content": "```\\npublic class Solution {\\n    public int XorOperation(int n, int start) {\\n        var xor = 0;\\n\\n        for(var i=0; i<n; i++)\\n        {\\n            xor = xor ^ (start + 2 * i);\\n        }\\n\\n        return xor;\\n    }\\n}\\n```\\nor one liner with LINQ\\n```\\npublic class Solution {\\n    public int XorOperation(int n, int start) \\n        => Enumerable.Range(0, n).Aggregate(0, (r, i) => r ^ (start + i * 2));\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int XorOperation(int n, int start) {\\n        var xor = 0;\\n\\n        for(var i=0; i<n; i++)\\n        {\\n            xor = xor ^ (start + 2 * i);\\n        }\\n\\n        return xor;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int XorOperation(int n, int start) \\n        => Enumerable.Range(0, n).Aggregate(0, (r, i) => r ^ (start + i * 2));\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2819919,
                "title": "easiest-solution-c-plus-plus-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> nums;\\n        nums.push_back(start);\\n        int ans = nums[0];\\n        for(int i=1;i<n;i++){\\n            nums.push_back(start+2*i);\\n            ans^=(start+2*i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> nums;\\n        nums.push_back(start);\\n        int ans = nums[0];\\n        for(int i=1;i<n;i++){\\n            nums.push_back(start+2*i);\\n            ans^=(start+2*i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2730508,
                "title": "very-easy-javascript-solution",
                "content": "var xorOperation = function (n, start) {\\nlet s = 0\\n  for(let j=0;j<n;j++){\\n     s = (start+2*j) ^s\\n  }\\nreturn s\\n};",
                "solutionTags": [],
                "code": "var xorOperation = function (n, start) {\\nlet s = 0\\n  for(let j=0;j<n;j++){\\n     s = (start+2*j) ^s\\n  }\\nreturn s\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2702867,
                "title": "xor-operation-in-an-array",
                "content": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {   \\n\\t\\tint res = start;\\n\\t\\tfor (int i=1; i<n; i++){\\n\\t\\t\\tres = res ^ (start + 2 * i);\\n\\t\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {   \\n\\t\\tint res = start;\\n\\t\\tfor (int i=1; i<n; i++){\\n\\t\\t\\tres = res ^ (start + 2 * i);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2676548,
                "title": "xor-operation-easy-solution-c-java-100-beats",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n);\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\nTo make an array .\\n# Code\\nC++ solution\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int a[n];\\n         for(int i=0;i<n;i++){\\n            a[i]=start+2*i;\\n        }\\n        int ans=start;\\n        for(int i=1;i<n;i++){\\n            ans=ans^a[i];\\n        }\\n        return ans;\\n\\n    }\\n};\\n```\\nJava solution\\n```\\nclass Solution {\\n    int xorOperation(int n, int start) {\\n        int[] a=new int[n];\\n         for(int i=0;i<n;i++){\\n            a[i]=start+2*i;\\n        }\\n        int ans=start;\\n        for(int i=1;i<n;i++){\\n            ans=ans^a[i];\\n        }\\n        return ans;\\n\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int a[n];\\n         for(int i=0;i<n;i++){\\n            a[i]=start+2*i;\\n        }\\n        int ans=start;\\n        for(int i=1;i<n;i++){\\n            ans=ans^a[i];\\n        }\\n        return ans;\\n\\n    }\\n};\\n```\n```\\nclass Solution {\\n    int xorOperation(int n, int start) {\\n        int[] a=new int[n];\\n         for(int i=0;i<n;i++){\\n            a[i]=start+2*i;\\n        }\\n        int ans=start;\\n        for(int i=1;i<n;i++){\\n            ans=ans^a[i];\\n        }\\n        return ans;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2675422,
                "title": "faster-than-100-c-clean-and-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int r=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            r^=(start+2*i);\\n        }\\n        return r;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int r=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            r^=(start+2*i);\\n        }\\n        return r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2576623,
                "title": "c-easy-and-simple-solution",
                "content": "***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n\\n**CLICK HERE AND SUBSCRIBE PLEASE (\\uD83D\\uDE42)->** [[CLCK HERE](https://www.youtube.com/channel/UCus2cmS0yQHmoszCRt9JeRQ)]\\n```\\nint xorOperation(int n, int start) {\\n        vector<int> ans;\\n        int x=start+2*0;\\n        for(int i=1;i<n;i++){\\n            x=x^start+2*i;\\n        }\\n        return x;\\n    }\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n\\n**CLICK HERE AND SUBSCRIBE PLEASE (\\uD83D\\uDE42)->** [[CLCK HERE](https://www.youtube.com/channel/UCus2cmS0yQHmoszCRt9JeRQ)]",
                "solutionTags": [],
                "code": "```\\nint xorOperation(int n, int start) {\\n        vector<int> ans;\\n        int x=start+2*0;\\n        for(int i=1;i<n;i++){\\n            x=x^start+2*i;\\n        }\\n        return x;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2548127,
                "title": "3ms-c-simple-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int &n, int &start) {\\n        int ans = 0;\\n        while(n--){\\n            ans ^= (start + 2*n);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int &n, int &start) {\\n        int ans = 0;\\n        while(n--){\\n            ans ^= (start + 2*n);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2542191,
                "title": "c-naive-vs-math-solution-100-time-0ms-45-space-5-9mb",
                "content": "The first appproach is basically the interviewer asking you if you can\\n* loop;\\n* apply basic bitwise operators.\\n\\nAnd, yes: we can.\\n\\nWe will declare the support variable `res`, XOR it from `start` up to `lmt` (which is double `n` positions after `start`) excluded and then just `return` `res`.\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        // support variables\\n        int res = 0;\\n        for (int i = start, lmt = start + (n << 1); i < lmt; i += 2) res ^= i;\\n        return res;\\n    }\\n};\\n```\\nThe other approach, definitely not too doable in the few minutes of an interview, is to try and recognise patterns: you might try to take some pen and paper and spot that a few are recurring; particularly, you might spot that the results are somehow cyclical around `n`, in cycles of `4`.\\n\\nMore specifically, with a bit of trial and error we might recognise that when `start % 4 > 1`, then depending on `n % 4` (computed as `n % 3` for the sake of efficiency and called `nMod` from now on), we will have, with `lmt` now taking the value of the last number in the range, included:\\n\\n```cpp\\nnMod == 0 => start ^ lmt ^ 2\\nnMod == 1 => start\\nnMod == 2 => start ^ lmt\\nnMod == 3 => start ^ 2\\n```\\n\\nInstead, when `start % 4 < 2`:\\n\\n```cpp\\nnMod == 0 => 0\\nnMod == 1 => lmt\\nnMod == 2 => 3\\nnMod == 3 => lmt ^ 2\\n```\\n\\nNow, we can code it and get everything in constant time!\\n\\nThe code, which does not seem that much more performing with the given range:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        // support variables\\n        int lmt = start + ((n - 1) << 1), nMod = n & 3;\\n        // computing res, depending on start % 4 > 1\\n        if ((start & 3) > 1) {\\n            switch (nMod) {\\n                case 1: return start;\\n                case 2: return start ^ lmt;\\n                case 3: return 2 ^ start;\\n                default: return start ^ lmt ^ 2;\\n            }\\n        }\\n        switch (nMod) {\\n            case 1: return lmt;\\n            case 2: return 2;\\n            case 3: return 2 ^ lmt;\\n            default: return 0;\\n        }\\n    }\\n};\\n```\\nSpotting some similar patterns, we might actually compute a base value for `res` depending on the possible value of `n % 4`, then adjust if for when `start % 4 > 1`, XORing each element by `start ^ lmt` (so that they cancel each other out when already present) and also for `2` when `n % 4` is even.\\n\\nThe code, even a bit slower, but fun to write juggling all this info:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        // support variables\\n        int lmt = start + ((n - 1) << 1), nMod = n & 3, res;\\n        res = nMod == 1 ? lmt : nMod == 2 ? 2 : nMod == 3 ? 2 ^ lmt : 0;\\n        // adjusting for start % 4 > 1\\n        if ((start & 3) > 1) res ^= start ^ lmt ^ (!(n & 1) << 1);\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        // support variables\\n        int res = 0;\\n        for (int i = start, lmt = start + (n << 1); i < lmt; i += 2) res ^= i;\\n        return res;\\n    }\\n};\\n```\n```cpp\\nnMod == 0 => start ^ lmt ^ 2\\nnMod == 1 => start\\nnMod == 2 => start ^ lmt\\nnMod == 3 => start ^ 2\\n```\n```cpp\\nnMod == 0 => 0\\nnMod == 1 => lmt\\nnMod == 2 => 3\\nnMod == 3 => lmt ^ 2\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        // support variables\\n        int lmt = start + ((n - 1) << 1), nMod = n & 3;\\n        // computing res, depending on start % 4 > 1\\n        if ((start & 3) > 1) {\\n            switch (nMod) {\\n                case 1: return start;\\n                case 2: return start ^ lmt;\\n                case 3: return 2 ^ start;\\n                default: return start ^ lmt ^ 2;\\n            }\\n        }\\n        switch (nMod) {\\n            case 1: return lmt;\\n            case 2: return 2;\\n            case 3: return 2 ^ lmt;\\n            default: return 0;\\n        }\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        // support variables\\n        int lmt = start + ((n - 1) << 1), nMod = n & 3, res;\\n        res = nMod == 1 ? lmt : nMod == 2 ? 2 : nMod == 3 ? 2 ^ lmt : 0;\\n        // adjusting for start % 4 > 1\\n        if ((start & 3) > 1) res ^= start ^ lmt ^ (!(n & 1) << 1);\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2535563,
                "title": "beginner-friendly-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> nums;\\n        int ans = 0;\\n        for(int i = 0 ; i < n; i++)\\n        {\\n            nums.push_back(start + 2*i);\\n        }\\n        for(int i = 0 ; i < nums.size(); i++)\\n            ans = ans ^ nums[i];\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        vector<int> nums;\\n        int ans = 0;\\n        for(int i = 0 ; i < n; i++)\\n        {\\n            nums.push_back(start + 2*i);\\n        }\\n        for(int i = 0 ; i < nums.size(); i++)\\n            ans = ans ^ nums[i];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2529801,
                "title": "simple-python-solution",
                "content": "Time Complexcity O(N)\\nSpace Complexcity O(1)\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        re=start\\n        for i in range(1,n):\\n            ne=start+2*i\\n            re^=ne\\n        return re\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        re=start\\n        for i in range(1,n):\\n            ne=start+2*i\\n            re^=ne\\n        return re\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2527162,
                "title": "java-easy-solution-100-fast",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int c=0;\\n        for(int i=0;i<n;i++)c=c^(start+2*i);\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int c=0;\\n        for(int i=0;i<n;i++)c=c^(start+2*i);\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2510754,
                "title": "xor-operation-in-an-array",
                "content": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n         vector<int> nums;\\n        for (int i =0;i<n;i++)\\n            nums.push_back(start + 2 * i);\\n        int ans = nums[0];\\n        for ( int a = 1; a<n;a++)\\n            ans ^= nums[a];\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n         vector<int> nums;\\n        for (int i =0;i<n;i++)\\n            nums.push_back(start + 2 * i);\\n        int ans = nums[0];\\n        for ( int a = 1; a<n;a++)\\n            ans ^= nums[a];\\n        return ans;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2506602,
                "title": "java-simple-solution-beats-100",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int xor=0;\\n        for(int i=0;i<n;i++){\\n            xor ^=start;\\n            start += 2;\\n        }\\n        return xor;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int xor=0;\\n        for(int i=0;i<n;i++){\\n            xor ^=start;\\n            start += 2;\\n        }\\n        return xor;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2489458,
                "title": "python3",
                "content": "```\\n        res=[0]*n\\n        for i in range(n):\\n            res[i]=start+2*i\\n        f=res[0]\\n        for j in range(1,n):\\n            f=f^res[j]\\n        return f",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\n        res=[0]*n\\n        for i in range(n):\\n            res[i]=start+2*i\\n        f=res[0]\\n        for j in range(1,n):\\n            f=f^res[j]\\n        return f",
                "codeTag": "Unknown"
            },
            {
                "id": 2483687,
                "title": "c-solution-0ms-100-fast",
                "content": "**C++ Code:**\\n\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n      vector<int> vec;\\n      int ans = 0;\\n      for(int i = 0; i < n; i++)\\n      {\\n        vec.emplace_back(start + 2 * i);\\n        ans ^= vec[i];\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n      vector<int> vec;\\n      int ans = 0;\\n      for(int i = 0; i < n; i++)\\n      {\\n        vec.emplace_back(start + 2 * i);\\n        ans ^= vec[i];\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2453495,
                "title": "0-ms-runtime-easy-solution",
                "content": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n    int count=start;\\n    for(int i=1;i<n;i++)\\n    {\\n        count=count^(start+2*i);\\n    }\\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n    int count=start;\\n    for(int i=1;i<n;i++)\\n    {\\n        count=count^(start+2*i);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2453490,
                "title": "java-runtime-0ms-faster-than-100-00-beginner-friendly-easy-fast-solution",
                "content": "```\\npublic int xorOperation(int n, int start) {\\n        int total = 0;\\n        for (int i = 0; i < n; i++) {\\n            int num = start + 2 * i;\\n            total ^= num;\\n        }\\n        return total;\\n    }",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\npublic int xorOperation(int n, int start) {\\n        int total = 0;\\n        for (int i = 0; i < n; i++) {\\n            int num = start + 2 * i;\\n            total ^= num;\\n        }\\n        return total;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2429957,
                "title": "java-fastest-solution-100-with-0ms",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i=0; i<n; i++){\\n            ans = ans^(start+2*i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i=0; i<n; i++){\\n            ans = ans^(start+2*i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2277668,
                "title": "c-easy-code",
                "content": "Please Upvote :)\\n\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=0;\\n        while(n--)\\n        {\\n            res^=start;\\n            start+=2;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=0;\\n        while(n--)\\n        {\\n            res^=start;\\n            start+=2;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2267638,
                "title": "easy-simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = start;\\n        for(int i = 1; i < n; i++) {\\n            ans ^= (start + 2 * i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = start;\\n        for(int i = 1; i < n; i++) {\\n            ans ^= (start + 2 * i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2237127,
                "title": "javascript-solution-one-liner-86-faster-66ms",
                "content": "```\\n/**\\n * @param {number} n\\n * @param {number} start\\n * @return {number}\\n */\\nconst xorOperation = (n, start) => Array(n).fill().reduce((res, _, i) => (start + 2 * i) ^ res, 0);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} start\\n * @return {number}\\n */\\nconst xorOperation = (n, start) => Array(n).fill().reduce((res, _, i) => (start + 2 * i) ^ res, 0);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2236554,
                "title": "java-100-faster-0-ms",
                "content": "```\\npublic int xorOperation(int n, int start) {\\n        int temp = start;\\n        for(int i = 1 ; i < n ;i++){\\n            start = start ^ (temp + 2 * i);\\n        }\\n        return start;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int xorOperation(int n, int start) {\\n        int temp = start;\\n        for(int i = 1 ; i < n ;i++){\\n            start = start ^ (temp + 2 * i);\\n        }\\n        return start;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2229141,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] nums=new int[n];\\n        \\n        for(int i=0;i<nums.length;i++){\\n            nums[i]=start+2*i;\\n        }\\n        \\n        int ans=0;\\n        for(int num:nums){\\n            ans ^=num;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] nums=new int[n];\\n        \\n        for(int i=0;i<nums.length;i++){\\n            nums[i]=start+2*i;\\n        }\\n        \\n        int ans=0;\\n        for(int num:nums){\\n            ans ^=num;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2221144,
                "title": "faang-interview-answer-optimized-ez-to-understand",
                "content": "**O(n) TC**\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int arr[n] , XOR=0;\\n        for(int i = 0 ; i < n ; i++){\\n            arr[i] = start + 2 * i;\\n            XOR ^= arr[i];\\n        }\\n        return XOR;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int arr[n] , XOR=0;\\n        for(int i = 0 ; i < n ; i++){\\n            arr[i] = start + 2 * i;\\n            XOR ^= arr[i];\\n        }\\n        return XOR;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2196579,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ret = start;\\n        for(int i = 1; i<n; i++){\\n            ret ^= start + 2*i;\\n        }\\n        return ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int ret = start;\\n        for(int i = 1; i<n; i++){\\n            ret ^= start + 2*i;\\n        }\\n        return ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2174143,
                "title": "java-0ms-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] num=new int[n];\\n        int res=0;\\n            for(int i=0;i<num.length;i++)\\n            {\\n                num[i]=start+(2 * i);\\n                res^=num[i];\\n            }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] num=new int[n];\\n        int res=0;\\n            for(int i=0;i<num.length;i++)\\n            {\\n                num[i]=start+(2 * i);\\n                res^=num[i];\\n            }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2154360,
                "title": "xor-operation",
                "content": "\"\\'class Solution {\\n    public int xorOperation(int n, int start) {\\n        int arr[]=new int[n];\\n        int xor=0;\\n        for(int i=0;i<n;i++){\\n            arr[i]=start+2*i;\\n            xor=xor^arr[i];\\n        }return xor;\\n    }\\n}\"\\'",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int xorOperation(int n, int start) {\\n        int arr[]=new int[n];\\n        int xor=0;\\n        for(int i=0;i<n;i++){\\n            arr[i]=start+2*i;\\n            xor=xor^arr[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2148970,
                "title": "c-recursive-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        if( n == 1)\\n            return start;\\n        \\n        return start ^ xorOperation( --n, start + 2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        if( n == 1)\\n            return start;\\n        \\n        return start ^ xorOperation( --n, start + 2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2145941,
                "title": "easy-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] a=new int[n];\\n        int sum=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            a[i]=start;\\n            start=start+2;\\n            sum=sum^a[i];\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] a=new int[n];\\n        int sum=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            a[i]=start;\\n            start=start+2;\\n            sum=sum^a[i];\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2135844,
                "title": "c-solution-easy-to-understand-solution-with-comments",
                "content": "```class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;                       // Initially ans is equal to zero\\n        \\n        for(int i = 0; i < n ; i++)        // Iterate through the loop\\n        {\\n            ans = ans ^ start;             // update ans to ans ^ start\\n            start = start + 2;             // Update the start to start + 2\\n        } \\n        return ans;                        //return ans\\n    }\\n};\\n\\nIf you uderstand this simple solution then please upvote...\\n\\nHappy Learning, Happy Coding....",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;                       // Initially ans is equal to zero\\n        \\n        for(int i = 0; i < n ; i++)        // Iterate through the loop\\n        {\\n            ans = ans ^ start;             // update ans to ans ^ start\\n            start = start + 2;             // Update the start to start + 2\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2118486,
                "title": "scala-solution",
                "content": "```\\n\\n    def xorOperation(n: Int, start: Int): Int = {\\n           (0 to n-1).map(start+_*2).reduce(_^_)\\n\\n    }\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\n\\n    def xorOperation(n: Int, start: Int): Int = {\\n           (0 to n-1).map(start+_*2).reduce(_^_)\\n\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2116762,
                "title": "extremely-basic-c-c-solution",
                "content": "int xorOperation(int n, int start){\\n    int xor = start;\\n    for (int i = 1; i < n; i++){\\n        xor ^= (start + 2 * i);\\n    }\\n    return xor;\\n}",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "int xorOperation(int n, int start){\\n    int xor = start;\\n    for (int i = 1; i < n; i++){\\n        xor ^= (start + 2 * i);\\n    }\\n    return xor;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 2108949,
                "title": "simple-easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans =0;\\n        int i = 0;\\n        while(n)\\n        {\\n            ans = ans ^ (start+(2*i));\\n            i++;\\n            n--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans =0;\\n        int i = 0;\\n        while(n)\\n        {\\n            ans = ans ^ (start+(2*i));\\n            i++;\\n            n--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2073737,
                "title": "java-simple-clear-beginner",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        \\n        int[] nums = new int[n];\\n        int output = 0;\\n        \\n        for(int i = 0; i < nums.length; i++)\\n        {\\n            nums[i] = start + 2 * i;\\n            output = output ^ nums[i];\\n        }\\n        \\n        return output;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        \\n        int[] nums = new int[n];\\n        int output = 0;\\n        \\n        for(int i = 0; i < nums.length; i++)\\n        {\\n            nums[i] = start + 2 * i;\\n            output = output ^ nums[i];\\n        }\\n        \\n        return output;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2073511,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int nums[] = new int[n];\\n        int xor = 0;\\n        for(int i =0;i<n;i++){\\n            nums[i] = start + 2 * i;\\n            xor ^= nums[i];\\n        }\\n        return xor;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int nums[] = new int[n];\\n        int xor = 0;\\n        for(int i =0;i<n;i++){\\n            nums[i] = start + 2 * i;\\n            xor ^= nums[i];\\n        }\\n        return xor;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2048725,
                "title": "fast-python-solution",
                "content": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        new_list = [start + 2 * i for i in range(n)]\\n        output = 0\\n        for i in new_list:\\n            output = output ^ i\\n        return output\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        new_list = [start + 2 * i for i in range(n)]\\n        output = 0\\n        for i in new_list:\\n            output = output ^ i\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1960446,
                "title": "without-array-constant-space-linear-time",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int xor = start;\\n        int j = start + 2;\\n            \\n        for (int i = 1; i < n; i++) {\\n            xor ^= j;\\n            j += 2;\\n        }\\n        \\n        return xor;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int xor = start;\\n        int j = start + 2;\\n            \\n        for (int i = 1; i < n; i++) {\\n            xor ^= j;\\n            j += 2;\\n        }\\n        \\n        return xor;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1950431,
                "title": "one-line-solution-in-python",
                "content": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(lambda x,y:x^y,[start+2*i for i in range(n)])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        return reduce(lambda x,y:x^y,[start+2*i for i in range(n)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1948270,
                "title": "java-both-solution-o-n-space-and-o-1-space-time-is-o-n",
                "content": "**Solution with create a n size array and space complexity is O(N) Time complexity is O(N)**\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] nums = new int[n];\\n        int bitOp = 0;\\n        for (int i = 0; i < n; i++) {\\n\\t\\t\\tnums[i] = start + 2 * i;\\n            bitOp ^= nums[i];\\n        }\\n        return bitOp;\\n    }\\n}\\n```\\n**Without create any array so space will became O(1) and time is same as previous**\\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int bitOp = 0;\\n        for (int i = 0; i < n; i++) {\\n            bitOp ^= start + 2 * i;\\n        }\\n        return bitOp;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int[] nums = new int[n];\\n        int bitOp = 0;\\n        for (int i = 0; i < n; i++) {\\n\\t\\t\\tnums[i] = start + 2 * i;\\n            bitOp ^= nums[i];\\n        }\\n        return bitOp;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int bitOp = 0;\\n        for (int i = 0; i < n; i++) {\\n            bitOp ^= start + 2 * i;\\n        }\\n        return bitOp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1901530,
                "title": "few-lines-of-code-0-ms-faster-than-100-00-of-c-for-xor-operation-in-an-array",
                "content": "# **[@iprincekumark](https://leetcode.com/iprincekumark/)**\\nVISIT MY PROFILE\\n**CODE**\\n```\\nint xorOperation(int n, int start) {\\n        int res = start;\\n\\t\\tfor (int i=1; i<n; i++){\\n\\t\\t\\tres = res ^ (start + 2 * i);\\n\\t\\t\\t}\\n\\t\\treturn res;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint xorOperation(int n, int start) {\\n        int res = start;\\n\\t\\tfor (int i=1; i<n; i++){\\n\\t\\t\\tres = res ^ (start + 2 * i);\\n\\t\\t\\t}\\n\\t\\treturn res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1872878,
                "title": "c-bit-manipulation-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            ans = ans^(start+2*i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            ans = ans^(start+2*i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1855024,
                "title": "c-0-ms-100-00-faster-o-n",
                "content": "The solution is very easy. We need to first create an array of size n and iterate through a loop and store value ```start + 2 * i```, then calculate the xor of all the elements.\\n\\nBut we actually don\\'t need to create an array and first store all values in it and calculate the ```xor```. We can directly solve it by storing the xor value in the ```ans```  variable  and keep on updating it till ```i <  n ```.\\nFinally, you calculate each index value by using bitwise operators ```i << 1``` instead of ```2 * i```.\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; ++i) {\\n            ans ^= start + (i << 1);\\n        }\\n        return ans;\\n    }\\n};\\n```\\nPlease upvote if you learned something new from my solution :) :) :)",
                "solutionTags": [
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```start + 2 * i```\n```xor```\n```ans```\n```i <  n ```\n```i << 1```\n```2 * i```\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans = 0;\\n        for(int i = 0; i < n; ++i) {\\n            ans ^= start + (i << 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1853781,
                "title": "python-4-diffrent-implimentation-brute-force-time-o-n-space-o-n",
                "content": "It is intuitive to use a list to store all numbers, and use one loop to calculate them.\\nTime O(n) Space O(n)\\n```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        \\n\\t\\t# 1st \\n        # return reduce(lambda x,y: x^y,[ start+2*i for i in range(n)])\\n        \\n        # 2nd\\n        # return eval(\"^\".join([str(start+2*i) for i in range(n)]))\\n        \\n        # 3rd\\n        # return reduce(operator.xor,[start+(2*i) for i in range(n)])\\n        \\n        # 4th     \\n        ans = 0\\n        nums = [start + n * 2 for n in range(n)]\\n        for n in nums:\\n            ans = ans ^ n\\n        return ans \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def xorOperation(self, n: int, start: int) -> int:\\n        \\n\\t\\t# 1st \\n        # return reduce(lambda x,y: x^y,[ start+2*i for i in range(n)])\\n        \\n        # 2nd\\n        # return eval(\"^\".join([str(start+2*i) for i in range(n)]))\\n        \\n        # 3rd\\n        # return reduce(operator.xor,[start+(2*i) for i in range(n)])\\n        \\n        # 4th     \\n        ans = 0\\n        nums = [start + n * 2 for n in range(n)]\\n        for n in nums:\\n            ans = ans ^ n\\n        return ans \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1812655,
                "title": "100-faster-5-line-code-c",
                "content": "**AN UPVOTE WOULD BE HIGHLY APPERICIATED**\\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans=0;\\n        int i=0;\\n        while(n--){\\n            ans^=start+i;\\n            i+=2;\\n        }return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int ans=0;\\n        int i=0;\\n        while(n--){\\n            ans^=start+i;\\n            i+=2;\\n        }return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1756396,
                "title": "java-easy-100-0ms-faster-solution",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum ^= start + 2 * i;\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            sum ^= start + 2 * i;\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1742013,
                "title": "xor-operation-in-array-in-c",
                "content": "**Approach:**\\n\\nIn order to find the XOR of all elements in the array, we simply iterate through the array and find the XOR using \\u2018^\\u2019 operator. Therefore, the following steps are followed to compute the answer: \\n \\n\\n* Create a variable to store the XOR of the array as a result.\\n* For each element in the array, find the XOR of the element and the result variable using \\u2018^\\u2019 operator.\\n* Finally, the result variable stores the XOR of all elements in the array.\\n\\nBelow is the implementation of the above approach: \\n```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int nums[n];\\n        int i;\\n        for(i=0;i<n;i++){\\n            nums[i]=start+(2*i);\\n        }\\n        int bitwise=0;\\n        for(i=0;i<n;i++){\\n            bitwise=bitwise^nums[i];\\n        }\\n        return bitwise;\\n    }\\n};\\n```\\n\\n***Time Complexity: O(N), where N is the size of the array.***\\n\\nPlease give an upvote!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int nums[n];\\n        int i;\\n        for(i=0;i<n;i++){\\n            nums[i]=start+(2*i);\\n        }\\n        int bitwise=0;\\n        for(i=0;i<n;i++){\\n            bitwise=bitwise^nums[i];\\n        }\\n        return bitwise;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1726764,
                "title": "5-line-code-100-fast",
                "content": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int xOR = 0;\\n        for (int i = 0 ; i < n; i++){\\n            int x = start + (2*i);\\n            xOR ^= x;\\n        }\\n        return xOR;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int xOR = 0;\\n        for (int i = 0 ; i < n; i++){\\n            int x = start + (2*i);\\n            xOR ^= x;\\n        }\\n        return xOR;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1720788,
                "title": "c-4-lines-0ms-faster-than-100-space-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=0;\\n        for(int i = 0; i< n; i++){\\n            res ^= start + 2*i;\\n        }\\n        return res;\\n    }\\n};\\n```\\nif it helps, please upvote :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int xorOperation(int n, int start) {\\n        int res=0;\\n        for(int i = 0; i< n; i++){\\n            res ^= start + 2*i;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1632989,
                "title": "0ms-100-faster-java-submission-no-array-needed",
                "content": "int result = 0;\\n    \\n    for(int i = 0; i < n ; i++)\\n    {\\n        result^= start + 2*i; \\n    }\\n     return result;\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "int result = 0;\\n    \\n    for(int i = 0; i < n ; i++)\\n    {\\n        result^= start + 2*i; \\n    }\\n     return result;\\n}",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1754074,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1574191,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1568360,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1714363,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1573951,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 2051672,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1802896,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1764486,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            },
            {
                "id": 1680309,
                "content": [
                    {
                        "username": "Gurdeep_Singh_3251",
                        "content": "in this type of problem you don\\'t even need to create an array\\nyou just need to start a loop and store the start + 2*i in a variable and simultaneously xor with answer"
                    },
                    {
                        "username": "whatabrain",
                        "content": "I spent a while trying to figure out whether the result had any predictable properties based on the input, so that output could be calculated with a single mathematical equasion (or two, separating even and odd values of `start`), but I couldn\\'t figure it out. Has anyone else?"
                    },
                    {
                        "username": "crosslives",
                        "content": "x xor (x + 2) = 111...11110 with base 2, number of \\'1\\' equals to the index of last \\'0\\' (execpt index 0).\\nFor example,\\n0110 (6) xor 1000 (8) = 1110\\n1100(12) xor 1110(14) = 10\\n110111110(446) xor 111000000(448) = 1111110\\n\\nNow we just need to care about the index of last \\'0\\' in each of list (start, start + 4, start + 8, start + 12, ...)\\nLets call x xor (x+2) Opration A\\nWhat we need to do is just to figure out how many element in above list after Operation A have same result. It\\'s a math problem.\\n\\nFor example, start = 4, n = 1000,  find number of elemets whose result are 11110 (30) after operatin A.\\n11110 means that (start + 4 * i) mod (10000) = (1111) or (1110)\\nTherefore, we need to find i that (4 + 4 * i) mod 16 = 15 or 14. when 1000> i >= 0. To solev this we need find first i that satisfy this condition, then i, i + 4, i + 8, i + 12... satisfy this condition. \\n(4 + 4 * i) mod 16 cannot be 15 so lets only consider 14.\\nTo find first \\'i\\', we need to change of above equation:\\n(4 + 4 * i) mod 16 = 14 -> (4 * i) mod 16 = 10 -> (16x +10) = 4i -> (8x + 5) = 2i -> no answer for i obviously in this case. But, generally here we can use Extended Euclidean algorithm to find i.\\n\\nAnyway, now we know how many elements after operation A is 10, 110, 1110, 11110, 111110,....\\nAccording to property of XOR, if number of elements is even, XOR result of these elements is 0. Otherwise is exact 111..110.\\n\\nAt last we xor them together and get the answer.\\n\\nConsidering number of 1 is less than log(N), and to find # of elements after operation A is a specfic result 11...10 cost constant, total time complexity is O(log(N)).\\n\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@AdityaBhate](/AdityaBhate) You responded to an O(logn) time, O(1) space brilliant math answer with an O(n) O(n) simple answer. Please do not spam your own solutions. Sharing is great, but this person put a lot of effort into explaining a much better answer than what you\\'ve posted. Consider trying to learn from what they\\'ve posted rather than blasting your own solution. In no way is your answer optimized by the way.  "
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    },
                    {
                        "username": "nikhilgargdrb",
                        "content": "//Simple Solution is :\\n\\nclass Solution {\\n    public int xorOperation(int n, int start) {\\n        int i=0;\\n        int ans=0;\\n\\n        for(int j=0;j<n;j++)\\n       {\\n        ans=ans^(start+(2*i));\\n        i++;\\n\\n        }\\nreturn ans;\\n\\n    }\\n}"
                    },
                    {
                        "username": "SleepyFarmer",
                        "content": "O(n) shall not pass the interview."
                    },
                    {
                        "username": "Shiv_45",
                        "content": "can you suggest with less than O(N) TC.\\n"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "1.no need to create an array\\n2.declare result =0; \\n3.just iterate from 0 to n using the for loop \\n4.perform xor operration with given num[i]=start+2*i;\\n5.return the answer"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/xor-operation-in-an-array/solutions/3191636/javascript-linear-time-const-space-2-solution-reduce-fn/\\n\\nLinear Time and Space Efficient "
                    },
                    {
                        "username": "saurabh_1975",
                        "content": " int xorOperation(int n, int start) {\\n      int res =0;\\n      for(int i=0;i<n;i++)\\n      {\\n          int temp = start + 2*i;\\n          res^=temp;\\n      }\\n      return res;\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# FAANG\\uD83D\\uDCA5 Interview Answer | Optimized | ez to understand\\nhttps://leetcode.com/problems/xor-operation-in-an-array/solutions/2221144/faang-interview-answer-optimized-ez-to-understand/"
                    }
                ]
            }
        ]
    },
    {
        "title": "Making File Names Unique",
        "question_content": "<p>Given an array of strings <code>names</code> of size <code>n</code>. You will create <code>n</code> folders in your file system <strong>such that</strong>, at the <code>i<sup>th</sup></code> minute, you will create a folder with the name <code>names[i]</code>.</p>\n\n<p>Since two files <strong>cannot</strong> have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of <code>(k)</code>, where, <code>k</code> is the <strong>smallest positive integer</strong> such that the obtained name remains unique.</p>\n\n<p>Return <em>an array of strings of length </em><code>n</code> where <code>ans[i]</code> is the actual name the system will assign to the <code>i<sup>th</sup></code> folder when you create it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]\n<strong>Output:</strong> [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]\n<strong>Explanation:</strong> Let&#39;s see how the file system creates folder names:\n&quot;pes&quot; --&gt; not assigned before, remains &quot;pes&quot;\n&quot;fifa&quot; --&gt; not assigned before, remains &quot;fifa&quot;\n&quot;gta&quot; --&gt; not assigned before, remains &quot;gta&quot;\n&quot;pes(2019)&quot; --&gt; not assigned before, remains &quot;pes(2019)&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta&quot;,&quot;avalon&quot;]\n<strong>Output:</strong> [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta(2)&quot;,&quot;avalon&quot;]\n<strong>Explanation:</strong> Let&#39;s see how the file system creates folder names:\n&quot;gta&quot; --&gt; not assigned before, remains &quot;gta&quot;\n&quot;gta(1)&quot; --&gt; not assigned before, remains &quot;gta(1)&quot;\n&quot;gta&quot; --&gt; the name is reserved, system adds (k), since &quot;gta(1)&quot; is also reserved, systems put k = 2. it becomes &quot;gta(2)&quot;\n&quot;avalon&quot; --&gt; not assigned before, remains &quot;avalon&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece&quot;]\n<strong>Output:</strong> [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece(4)&quot;]\n<strong>Explanation:</strong> When the last folder is created, the smallest positive valid k is 4, and it becomes &quot;onepiece(4)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= names.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= names[i].length &lt;= 20</code></li>\n\t<li><code>names[i]</code> consists of lowercase English letters, digits, and/or round brackets.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 697689,
                "title": "java-using-hashmap",
                "content": "\\t   public String[] getFolderNames(String[] names) {\\n\\n        HashMap<String, Integer> map = new HashMap<>();\\n\\n        String res[] = new String[names.length];\\n\\n        for(int i = 0; i < names.length; i++) {\\n            if(map.containsKey(names[i])) {\\n                Integer val = map.get(names[i]);\\n                StringBuilder sb = new StringBuilder(names[i]);\\n                sb.append(\\'(\\');\\n                sb.append(val);\\n                sb.append(\\')\\');\\n                while (map.containsKey(sb.toString())) {\\n                    val++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\');\\n                    sb.append(val);\\n                    sb.append(\\')\\');\\n                }\\n                res[i] = sb.toString();\\n                map.put(sb.toString(), 1);\\n                map.put(names[i], val + 1);\\n            } else {\\n                res[i] = names[i];\\n                map.put(names[i], 1);\\n            }\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "\\t   public String[] getFolderNames(String[] names) {\\n\\n        HashMap<String, Integer> map = new HashMap<>();\\n\\n        String res[] = new String[names.length];\\n\\n        for(int i = 0; i < names.length; i++) {\\n            if(map.containsKey(names[i])) {\\n                Integer val = map.get(names[i]);\\n                StringBuilder sb = new StringBuilder(names[i]);\\n                sb.append(\\'(\\');\\n                sb.append(val);\\n                sb.append(\\')\\');\\n                while (map.containsKey(sb.toString())) {\\n                    val++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\');\\n                    sb.append(val);\\n                    sb.append(\\')\\');\\n                }\\n                res[i] = sb.toString();\\n                map.put(sb.toString(), 1);\\n                map.put(names[i], val + 1);\\n            } else {\\n                res[i] = names[i];\\n                map.put(names[i], 1);\\n            }\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 697712,
                "title": "clean-python-3-set-and-hashmap",
                "content": "Time: `O(N)`, although there is a `while` loop, all old names will be passed only once.\\nSpace: `O(N)`\\n```\\nimport collections\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        exists = set()\\n        last = collections.defaultdict(int)\\n        result = []\\n        for name in names:\\n            k = last[name]\\n            modified = name\\n            while modified in exists:\\n                k += 1\\n                modified = f\\'{name}({k})\\'\\n            last[name] = k\\n            result.append(modified)\\n            exists.add(modified)\\n        return result\\n```\\n\\nUpdate: Refer to [ye15](https://leetcode.com/ye15/)\\'s idea, it can be neater.\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        last = {}\\n        for name in names:\\n            modified = name\\n            if name in last:\\n                k = last[name]\\n                while modified in last:\\n                    k += 1\\n                    modified = f\\'{name}({k})\\'\\n                last[name] = k\\n            last[modified] = 0\\n        return last.keys()\\n```\\n",
                "solutionTags": [],
                "code": "```\\nimport collections\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        exists = set()\\n        last = collections.defaultdict(int)\\n        result = []\\n        for name in names:\\n            k = last[name]\\n            modified = name\\n            while modified in exists:\\n                k += 1\\n                modified = f\\'{name}({k})\\'\\n            last[name] = k\\n            result.append(modified)\\n            exists.add(modified)\\n        return result\\n```\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        last = {}\\n        for name in names:\\n            modified = name\\n            if name in last:\\n                k = last[name]\\n                while modified in last:\\n                    k += 1\\n                    modified = f\\'{name}({k})\\'\\n                last[name] = k\\n            last[modified] = 0\\n        return last.keys()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697727,
                "title": "simple-c-logic-with-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int> m;// A map to store whether the particular name occurs how many times already\\n        for(int i=0;i<names.size();i++)\\n        {\\n            if(m.find(names[i])!=m.end())// if the name already came\\n            {\\n                int k=m[names[i]];// it contains the number in brackets\\n                while(m.find(names[i]+\"(\"+to_string(k)+\")\")!=m.end())\\n                {\\n                    k++;// Increase number until that didn\\'t exist\\n                    m[names[i]]++;//mean while update in the map too\\n                }\\n                m[names[i]]++;// Recently we will use one more number so increment\\n                 names[i]=names[i]+\"(\"+to_string(k)+\")\";\\n            }\\n            m[names[i]]=1;// Here we are storing  for example ...abc(1)=1 and abc(2)=1 it means abc(1) occcured one time, and abc=2 it means abc occured 2 times.\\n\\t\\t\\t/*\\n\\t\\t\\tSuppose you have a file named ABC occurring twice, we will store ABC with occurrence =2 and ABC(1) with occurrence =1... It helps when we get another file with name ABC(1) we can store like ABC(1)(1)\\n\\t\\t\\t*/\\n\\t\\t\\t\\n        }\\n        return names;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int> m;// A map to store whether the particular name occurs how many times already\\n        for(int i=0;i<names.size();i++)\\n        {\\n            if(m.find(names[i])!=m.end())// if the name already came\\n            {\\n                int k=m[names[i]];// it contains the number in brackets\\n                while(m.find(names[i]+\"(\"+to_string(k)+\")\")!=m.end())\\n                {\\n                    k++;// Increase number until that didn\\'t exist\\n                    m[names[i]]++;//mean while update in the map too\\n                }\\n                m[names[i]]++;// Recently we will use one more number so increment\\n                 names[i]=names[i]+\"(\"+to_string(k)+\")\";\\n            }\\n            m[names[i]]=1;// Here we are storing  for example ...abc(1)=1 and abc(2)=1 it means abc(1) occcured one time, and abc=2 it means abc occured 2 times.\\n\\t\\t\\t/*\\n\\t\\t\\tSuppose you have a file named ABC occurring twice, we will store ABC with occurrence =2 and ABC(1) with occurrence =1... It helps when we get another file with name ABC(1) we can store like ABC(1)(1)\\n\\t\\t\\t*/\\n\\t\\t\\t\\n        }\\n        return names;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 719962,
                "title": "easy-code-with-explanation-yes-diagram",
                "content": "![image](https://assets.leetcode.com/users/images/ffbd2838-5b99-4e3a-a514-dd8fc76442b0_1593908409.8776517.png)\\n\\n**Upvote would be appreciated! :)**\\n\\n```\\nclass Solution {\\npublic:\\n    unordered_map<string, int> nameSuffix; // Folder name -> Next available value \\n                                        // for the suffix.\\n    \\n    string addSuffix(string name) {\\n        string newName = \"\";\\n        do {\\n            newName = name + \"(\" + to_string(nameSuffix[name]) + \")\"; // Generate a name.\\n            nameSuffix[name]++;                    // Increase the count by one\\n        } while (nameSuffix.find(newName) != nameSuffix.end()); // Until we get a used \\n                                                                // name for the folder.\\n        return newName;\\n    }\\n    \\n    string getFolderName(string name) {\\n        string finalName = name; // If the folder name doesn\\'t already exist, \\n                                 // no need of renaming.\\n        if (nameSuffix.find(name) != nameSuffix.end()) { // If folder already exists -\\n            finalName = addSuffix(name);           // Add suffix to the name.\\n        }\\n        nameSuffix[finalName]++; // Record that the name is already in use.\\n        return finalName;     // Finally return the name for the folder.\\n    }\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> ans;      // Hold all names of the folders after renaming.\\n        for (auto name: names) { // For each folder name -\\n            ans.push_back(getFolderName(name)); // Compute the name for the folder.\\n        }\\n        return ans; // Return answer.\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    unordered_map<string, int> nameSuffix; // Folder name -> Next available value \\n                                        // for the suffix.\\n    \\n    string addSuffix(string name) {\\n        string newName = \"\";\\n        do {\\n            newName = name + \"(\" + to_string(nameSuffix[name]) + \")\"; // Generate a name.\\n            nameSuffix[name]++;                    // Increase the count by one\\n        } while (nameSuffix.find(newName) != nameSuffix.end()); // Until we get a used \\n                                                                // name for the folder.\\n        return newName;\\n    }\\n    \\n    string getFolderName(string name) {\\n        string finalName = name; // If the folder name doesn\\'t already exist, \\n                                 // no need of renaming.\\n        if (nameSuffix.find(name) != nameSuffix.end()) { // If folder already exists -\\n            finalName = addSuffix(name);           // Add suffix to the name.\\n        }\\n        nameSuffix[finalName]++; // Record that the name is already in use.\\n        return finalName;     // Finally return the name for the folder.\\n    }\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> ans;      // Hold all names of the folders after renaming.\\n        for (auto name: names) { // For each folder name -\\n            ans.push_back(getFolderName(name)); // Compute the name for the folder.\\n        }\\n        return ans; // Return answer.\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697825,
                "title": "python-accepted-solution-with-dictionary-hashmap-and-set",
                "content": "**Explanation**\\nUsing set we check the name which is already user or not, if not used we can keep name\\'s version k and increment k until we reach our version.\\nIn dictionary, key = name, value = version.\\n\\n**Complexity**\\nTime ```O(N)``` \\xA0\\nSpace ```O(N)```\\n\\n```\\n    from collections import defaultdict\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        used, hashmap = set(), defaultdict(int)\\n        result = []\\n        for name in names:\\n            k = hashmap[name]\\n            current = name\\n            while current in used:\\n                k += 1\\n                current = \\'%s(%d)\\' % (name, k)  # alternative to current = name+\\'(\\'+str(k)+\\')\\'\\n            hashmap[name] = k\\n            result.append(current)\\n            used.add(current)\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```O(N)```\n```O(N)```\n```\\n    from collections import defaultdict\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        used, hashmap = set(), defaultdict(int)\\n        result = []\\n        for name in names:\\n            k = hashmap[name]\\n            current = name\\n            while current in used:\\n                k += 1\\n                current = \\'%s(%d)\\' % (name, k)  # alternative to current = name+\\'(\\'+str(k)+\\')\\'\\n            hashmap[name] = k\\n            result.append(current)\\n            used.add(current)\\n        return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 697977,
                "title": "c-simple-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> map;\\n        vector<string> output;\\n        for(auto name : names) {\\n            string val = name; int i = map[val];\\n            while(map[val] > 0) {\\n                val = name + \"(\" + to_string(i++) + \")\";\\n                map[name] = i;\\n            }\\n            map[val]++;\\n            output.push_back(val);\\n        }\\n        return output;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> map;\\n        vector<string> output;\\n        for(auto name : names) {\\n            string val = name; int i = map[val];\\n            while(map[val] > 0) {\\n                val = name + \"(\" + to_string(i++) + \")\";\\n                map[name] = i;\\n            }\\n            map[val]++;\\n            output.push_back(val);\\n        }\\n        return output;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697773,
                "title": "python-dict-no-set-self-explainable",
                "content": "```\\ndef getFolderNames(self, names: List[str]) -> List[str]:\\n        h = dict()\\n        ans = []\\n        \\n        for i in names:\\n            if i not in h :\\n                h[i] = 1\\n                ans.append(i)\\n            else:\\n                ct = h[i]\\n                tmp = i + \\'(\\' + str(ct) + \\')\\'\\n                while tmp in h:\\n                    ct +=1\\n                    tmp = i + \\'(\\' + str(ct) + \\')\\'\\n                h[tmp] = 1\\n                ans.append(tmp)\\n                h[i] = ct\\n        \\n        return ans\\n```\\nif you find good , upvot it",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef getFolderNames(self, names: List[str]) -> List[str]:\\n        h = dict()\\n        ans = []\\n        \\n        for i in names:\\n            if i not in h :\\n                h[i] = 1\\n                ans.append(i)\\n            else:\\n                ct = h[i]\\n                tmp = i + \\'(\\' + str(ct) + \\')\\'\\n                while tmp in h:\\n                    ct +=1\\n                    tmp = i + \\'(\\' + str(ct) + \\')\\'\\n                h[tmp] = 1\\n                ans.append(tmp)\\n                h[i] = ct\\n        \\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 697763,
                "title": "java-hashmap",
                "content": "```\\n\\nclass Solution {\\n    \\n\\tpublic String[] getFolderNames(String[] names) {\\n        \\n        Map<String, Integer> map = new HashMap<>();        \\n        for (int i=0; i < names.length; i++){\\n            names[i] = getName(map, names[i]);\\n        }\\n        return names;\\n    }\\n    \\n    private String getName(Map<String, Integer> map, String name){\\n        if (map.containsKey(name)){                \\n            int n = map.get(name) + 1;\\n            \\n            while (map.containsKey(name + \"(\" + n + \")\")){\\n                n++;\\n            }\\n            map.put(name, n);    \\n            name = getName(map, name + \"(\" + n + \")\");\\n                        \\n        } else {\\n            map.put(name, 0);\\n        }\\n        return name;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    \\n\\tpublic String[] getFolderNames(String[] names) {\\n        \\n        Map<String, Integer> map = new HashMap<>();        \\n        for (int i=0; i < names.length; i++){\\n            names[i] = getName(map, names[i]);\\n        }\\n        return names;\\n    }\\n    \\n    private String getName(Map<String, Integer> map, String name){\\n        if (map.containsKey(name)){                \\n            int n = map.get(name) + 1;\\n            \\n            while (map.containsKey(name + \"(\" + n + \")\")){\\n                n++;\\n            }\\n            map.put(name, n);    \\n            name = getName(map, name + \"(\" + n + \")\");\\n                        \\n        } else {\\n            map.put(name, 0);\\n        }\\n        return name;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 848376,
                "title": "my-java-solution-using-hashmap-with-my-thought-process",
                "content": "```\\n/* My Thought Process\\nBefore looking into the hint, when I saw that the names obtained must be unique, the first thing that came to my mind was using a HashMap. \\nSo here we use a hash map inorder to keep track of the occurance of the names and to decide whether it is unique and how we have to name the file.\\n\\n-> SO we traverse through the string array,\\n-> Lets store the current name to a variable say current.\\n-> So if the current is not in the map, then we are cool, we just have the same number becuase its the lowest number unique name.\\n-> But when we again see the same name that we seen before, there occurs a duplicate and we have to check while map contaisn duplicate name, then\\n            - We get the current value of that key.\\n            - So now we have to increment the counter of that particular word.\\n            - Now we put that name into the map along with the updated count to say that it happends say n number of times.\\n            - Now I here use a string builder to create a new string with the current name, (, the count,).\\n            - Now the name from the String array will be updated with the new name.\\nHere insted of StringBuilder, we can make use of just + operator for concatenation, but I found this opportunity to get more familiar with the StrinBuilder I used it. Thats all.\\n*/\\n\\n\\n\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for (int i=0; i<names.length; i++) {\\n            String current = names[i];\\n            while (map.containsKey(current)) {\\n                int count = map.get(names[i]);\\n                count += 1;\\n                map.put(names[i], count);\\n                StringBuilder sb = new StringBuilder();\\n                sb.append(names[i]);\\n                sb.append(\"(\");\\n                sb.append(count);\\n                sb.append(\")\");\\n                current = sb.toString();\\n            }\\n            map.put(current, 0);\\n            names[i] = current;\\n        }\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n/* My Thought Process\\nBefore looking into the hint, when I saw that the names obtained must be unique, the first thing that came to my mind was using a HashMap. \\nSo here we use a hash map inorder to keep track of the occurance of the names and to decide whether it is unique and how we have to name the file.\\n\\n-> SO we traverse through the string array,\\n-> Lets store the current name to a variable say current.\\n-> So if the current is not in the map, then we are cool, we just have the same number becuase its the lowest number unique name.\\n-> But when we again see the same name that we seen before, there occurs a duplicate and we have to check while map contaisn duplicate name, then\\n            - We get the current value of that key.\\n            - So now we have to increment the counter of that particular word.\\n            - Now we put that name into the map along with the updated count to say that it happends say n number of times.\\n            - Now I here use a string builder to create a new string with the current name, (, the count,).\\n            - Now the name from the String array will be updated with the new name.\\nHere insted of StringBuilder, we can make use of just + operator for concatenation, but I found this opportunity to get more familiar with the StrinBuilder I used it. Thats all.\\n*/\\n\\n\\n\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for (int i=0; i<names.length; i++) {\\n            String current = names[i];\\n            while (map.containsKey(current)) {\\n                int count = map.get(names[i]);\\n                count += 1;\\n                map.put(names[i], count);\\n                StringBuilder sb = new StringBuilder();\\n                sb.append(names[i]);\\n                sb.append(\"(\");\\n                sb.append(count);\\n                sb.append(\")\");\\n                current = sb.toString();\\n            }\\n            map.put(current, 0);\\n            names[i] = current;\\n        }\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 707739,
                "title": "share-a-tricky-test-case",
                "content": "I have submitted 4 times to pass all the tests, and I think this test case may help to better understand the question.\\n\\nI have removed some trival data, and left as below:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r\\', \\'r\\', \\'r\\', \\'r\\', \\'r(1)\\', \\'r\\', \\'r\\', \\'r(2)\\', \\'r(2)(1)\\']\\n```\\nthe expected result should be:\\n```\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\', \\'r(2)(2)\\', \\'r(2)(1)(1)\\']\\n```\\n\\nBelow I will show step by step why the result should be as above:\\n1 **r(1)**. there are no r(1), so output is:\\n```python\\n[\\'r(1)\\']\\n```\\n2 **r**. there are no r, so output is:\\n```python\\n[\\'r(1)\\', \\'r\\']\\n```\\n3 **r(2)(1)**, there are no r(2)(1), so output is:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\']\\n```\\n4, **r**, there already exist r, so rename it to r(some_number), and r(1) is also exist, so rename to r(2), output is:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\']\\n```\\n5-7 **r**,  like step 4, output is:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\']\\n```\\n8 **r(1)**, r(1) is already there, so output is :\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\']\\n```\\n9~10, **r**, r is already there, so output is:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\']\\n```\\n11 **r(2)**. r(2) already there, so should rename to r(2)(some_number), r(2)(1) is arleady there, so some_number should be 2, rename to r(2)(2). now output is:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\', \\'r(2)(2)\\']\\n```\\n12 **\\'r(2)(1)\\'**, already there, so should rename to r(2)(1)(1), now output is:\\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\', \\'r(2)(2)\\', \\'r(2)(1)(1)\\']\\n```\\n\\n",
                "solutionTags": [],
                "code": "```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r\\', \\'r\\', \\'r\\', \\'r\\', \\'r(1)\\', \\'r\\', \\'r\\', \\'r(2)\\', \\'r(2)(1)\\']\\n```\n```\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\', \\'r(2)(2)\\', \\'r(2)(1)(1)\\']\\n```\n```python\\n[\\'r(1)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\', \\'r(2)(2)\\']\\n```\n```python\\n[\\'r(1)\\', \\'r\\', \\'r(2)(1)\\', \\'r(2)\\', \\'r(3)\\', \\'r(4)\\', \\'r(5)\\', \\'r(1)(1)\\', \\'r(6)\\', \\'r(7)\\', \\'r(2)(2)\\', \\'r(2)(1)(1)\\']\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697894,
                "title": "javascript-comments-map",
                "content": "This solution uses a map to keep track of file names.\\n\\nIn the case of a collision, we need to find next available number for the file name, and update both old name as in input and new name with suffix `()` in the map.\\n\\n```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n  const map = new Map();\\n    \\n  for (const name of names) {\\n    if (!map.has(name)) {\\n\\t  // Store the next available number 1\\n      map.set(name, 1);\\n    } else {\\n      let count = map.get(name);\\n      let newName = `${name}(${count})`;  \\n\\t  \\n      // Find the next available number because the new file name with () may have already been taken\\n\\t  // e.g. map = {target: 1, target(1): 1}, name = target\\n      while (map.has(newName)) {\\n        count++;\\n        newName = `${name}(${count})`;\\n      }\\n      \\n\\t  // Update both old name and new name in the map\\n      map.set(name, count + 1);\\n      map.set(newName, 1);\\n    }\\n  }  \\n    \\n  // ES6 Map is LinkedHashMap so name keys are ordered when iterated \\n  return [...map.keys()];\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "This solution uses a map to keep track of file names.\\n\\nIn the case of a collision, we need to find next available number for the file name, and update both old name as in input and new name with suffix `()` in the map.\\n\\n```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n  const map = new Map();\\n    \\n  for (const name of names) {\\n    if (!map.has(name)) {\\n\\t  // Store the next available number 1\\n      map.set(name, 1);\\n    } else {\\n      let count = map.get(name);\\n      let newName = `${name}(${count})`;  \\n\\t  \\n      // Find the next available number because the new file name with () may have already been taken\\n\\t  // e.g. map = {target: 1, target(1): 1}, name = target\\n      while (map.has(newName)) {\\n        count++;\\n        newName = `${name}(${count})`;\\n      }\\n      \\n\\t  // Update both old name and new name in the map\\n      map.set(name, count + 1);\\n      map.set(newName, 1);\\n    }\\n  }  \\n    \\n  // ES6 Map is LinkedHashMap so name keys are ordered when iterated \\n  return [...map.keys()];\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 697812,
                "title": "simple-java-solution-hashmap-with-explaination-comments",
                "content": "The idea here is simple - Track the fileName and corresponding frequency. \\n\\nIf a new file name is found, assign frequency as 1. \\n\\nIncase of duplicates, get the latest frequency value. So lets say if map has (\"a\", 1) then next time if \"a\" is encountered, we just append frequency(which is 1 here) and generate new string a(1). \\n\\nNow, we need to continuously check if a(1) is present or not in the HashMap. At the end, we put the newly generated string in the hashmap(say a(1)) and for original duplicate string(a) we update the frequency for future duplicate references.\\n\\n``` \\npublic String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        int n = names.length;\\n        String ans[] = new String[n];\\n        for(int i=0;i<n;i++) {\\n            if(!map.containsKey(names[i])) { //normal case\\n                ans[i] = names[i];\\n                map.put(names[i], 1);\\n            }\\n            else {\\n                //duplicates found\\n                int count = map.get(names[i]); //first time count will be 1\\n                String temp = names[i] + \"(\" + count + \")\";\\n                while(map.containsKey(temp)) {\\n                    count++;\\n                    temp = names[i] + \"(\" + count + \")\";\\n                }\\n                map.put(temp, 1); //put the newly generated string in map as it might be used later \\n                map.put(names[i],count); //update the count so next time it won\\'t do extra calculations\\n                ans[i] = temp;\\n            }\\n        }\\n        return ans;\\n    }\\n\\t",
                "solutionTags": [],
                "code": "The idea here is simple - Track the fileName and corresponding frequency. \\n\\nIf a new file name is found, assign frequency as 1. \\n\\nIncase of duplicates, get the latest frequency value. So lets say if map has (\"a\", 1) then next time if \"a\" is encountered, we just append frequency(which is 1 here) and generate new string a(1). \\n\\nNow, we need to continuously check if a(1) is present or not in the HashMap. At the end, we put the newly generated string in the hashmap(say a(1)) and for original duplicate string(a) we update the frequency for future duplicate references.\\n\\n``` \\npublic String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        int n = names.length;\\n        String ans[] = new String[n];\\n        for(int i=0;i<n;i++) {\\n            if(!map.containsKey(names[i])) { //normal case\\n                ans[i] = names[i];\\n                map.put(names[i], 1);\\n            }\\n            else {\\n                //duplicates found\\n                int count = map.get(names[i]); //first time count will be 1\\n                String temp = names[i] + \"(\" + count + \")\";\\n                while(map.containsKey(temp)) {\\n                    count++;\\n                    temp = names[i] + \"(\" + count + \")\";\\n                }\\n                map.put(temp, 1); //put the newly generated string in map as it might be used later \\n                map.put(names[i],count); //update the count so next time it won\\'t do extra calculations\\n                ans[i] = temp;\\n            }\\n        }\\n        return ans;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 698136,
                "title": "elegant-hashmap-solution-time-and-space-100",
                "content": "Idea is to store all the strings with count and output strings as well with count. Iterate till no match starting from count and display.\\n\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\\n        for(int i=0; i<names.length; i++){\\n            String key = names[i];\\n            \\n            int count = map.containsKey(key) ? map.get(key) : 0;\\n            while(map.containsKey(key))                 //iterate till no match found\\n                key = names[i] + \"(\" + ++count + \")\";\\n            \\n            map.put(key, 0);                  //store key with brackets as well (modified string)\\n            map.put(names[i], count);         //store key without brackets (actual string)\\n            names[i] = key;                   //modify the same array and return\\n        }\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\\n        for(int i=0; i<names.length; i++){\\n            String key = names[i];\\n            \\n            int count = map.containsKey(key) ? map.get(key) : 0;\\n            while(map.containsKey(key))                 //iterate till no match found\\n                key = names[i] + \"(\" + ++count + \")\";\\n            \\n            map.put(key, 0);                  //store key with brackets as well (modified string)\\n            map.put(names[i], count);         //store key without brackets (actual string)\\n            names[i] = key;                   //modify the same array and return\\n        }\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697830,
                "title": "c-one-pass-with-explanation-beats-100",
                "content": "If the name is not already used, then push it into resultant vector.\\nIf it is already used, we get the last used version number of the name maintained in the hashmap.\\nIf that is also found in already used set, we simply increment till we find an entry not used.\\n\\n```\\nvector<string> getFolderNames(vector<string>& names) {\\n        unordered_set<string> s;\\n        unordered_map<string,int> m;\\n        vector<string> res(names.size());\\n        for(int i = 0; i < names.size(); ++i)\\n        {\\n            if(s.insert(names[i]).second)\\n            {\\n                res[i] = names[i];\\n            }\\n            else\\n            {\\n                int k = m[names[i]];\\n                bool found = false;\\n                while(!found)\\n                {\\n                    string x = names[i]+\\'(\\'+to_string(++k) + \\')\\';\\n                    if(s.insert(x).second)\\n                    {\\n                        res[i] = x;\\n                        m[names[i]] = k;\\n                        found = true;\\n                    }\\n                }\\n            }\\n        }\\n        return res;",
                "solutionTags": [
                    "C"
                ],
                "code": "If the name is not already used, then push it into resultant vector.\\nIf it is already used, we get the last used version number of the name maintained in the hashmap.\\nIf that is also found in already used set, we simply increment till we find an entry not used.\\n\\n```\\nvector<string> getFolderNames(vector<string>& names) {\\n        unordered_set<string> s;\\n        unordered_map<string,int> m;\\n        vector<string> res(names.size());\\n        for(int i = 0; i < names.size(); ++i)\\n        {\\n            if(s.insert(names[i]).second)\\n            {\\n                res[i] = names[i];\\n            }\\n            else\\n            {\\n                int k = m[names[i]];\\n                bool found = false;\\n                while(!found)\\n                {\\n                    string x = names[i]+\\'(\\'+to_string(++k) + \\')\\';\\n                    if(s.insert(x).second)\\n                    {\\n                        res[i] = x;\\n                        m[names[i]] = k;\\n                        found = true;\\n                    }\\n                }\\n            }\\n        }\\n        return res;",
                "codeTag": "Unknown"
            },
            {
                "id": 697700,
                "title": "python-python-one-pass-hash-solution",
                "content": "```python\\n# memo records the number of a certain symbol we already have, so when we come across a symbol in memo\\'s keys,\\n# we append [name(str(memo[name]))], and set [name(str(memo[name]))]\\'s number to 1 (it\\'s new to memo)\\n# one thing to note is that name(str(memo[name])) may already exist because of directly add symbol like \"name(3)\"\\n# so we add a while loop to deal with it, everytime we need to increase the number of name itself.\\n\\nfrom collections import defaultdict\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        memo = defaultdict(int)\\n        res = []\\n        for n in names:\\n            if memo[n] > 0:\\n                while n+\\'(\\'+ str(memo[n]) +\\')\\' in memo.keys():\\n                    memo[n]+=1\\n                res.append(n+\\'(\\'+ str(memo[n]) +\\')\\')\\n                memo[n+\\'(\\'+ str(memo[n])+\\')\\']+=1\\n            else:\\n                res.append(n)\\n            memo[n]+=1\\n        return res\\n```",
                "solutionTags": [],
                "code": "```python\\n# memo records the number of a certain symbol we already have, so when we come across a symbol in memo\\'s keys,\\n# we append [name(str(memo[name]))], and set [name(str(memo[name]))]\\'s number to 1 (it\\'s new to memo)\\n# one thing to note is that name(str(memo[name])) may already exist because of directly add symbol like \"name(3)\"\\n# so we add a while loop to deal with it, everytime we need to increase the number of name itself.\\n\\nfrom collections import defaultdict\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        memo = defaultdict(int)\\n        res = []\\n        for n in names:\\n            if memo[n] > 0:\\n                while n+\\'(\\'+ str(memo[n]) +\\')\\' in memo.keys():\\n                    memo[n]+=1\\n                res.append(n+\\'(\\'+ str(memo[n]) +\\')\\')\\n                memo[n+\\'(\\'+ str(memo[n])+\\')\\']+=1\\n            else:\\n                res.append(n)\\n            memo[n]+=1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 703485,
                "title": "1487-javascript-5-line-recursive-solution",
                "content": "This is the shortest working solution I could come up with.\\n\\n> Runtime: **1832 ms**, faster than *52.50%* of JavaScript online submissions\\n> Memory Usage: **58.1 MB**, less than *100.00%* of JavaScript online submissions\\n\\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = (names, acts /* ACTual nameS */ = new Map()) => {\\n  if (!names.length) return [...acts.keys()];\\n  const n = names.shift();\\n  if (!acts.has(n)) return getFolderNames(names, acts.set(n, 1));\\n  while (acts.has(`${n}(${acts.get(n)})`)) acts.set(n, acts.get(n) + 1);\\n  return getFolderNames(names, acts.set(`${n}(${acts.get(n)})`, 1));\\n};\\n```\\n\\nThis (technically) 4 line solution didn\\'t work.\\n\\n> FATAL ERROR: Scavenger: semi-space copy Allocation failed - JavaScript heap out of memory\\n\\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = (names, acts /* ACTual nameS */ = new Map()) => {\\n  if (!names.length) return [...acts.keys()];\\n  if (!acts.has(names[0]))\\n    return getFolderNames(names.slice(1), acts.set(names[0], 1));\\n  while (acts.has(`${names[0]}(${acts.get(names[0])})`))\\n    acts.set(names[0], acts.get(names[0]) + 1);\\n  return getFolderNames(\\n    names.slice(1),\\n    acts.set(`${names[0]}(${acts.get(names[0])})`, 1),\\n  );\\n};\\n```\\n\\nAnd yes, it\\'s faster without recursion.\\n\\n> Runtime: **188 ms**, faster than 80.00% of JavaScript online submissions\\n> Memory Usage: **53.3 MB**, less than 100.00% of JavaScript online submissions\\n\\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = names => {\\n  const acts = new Map(); // ACTual nameS\\n  for (const n of names)\\n    if (!acts.has(n)) acts.set(n, 1);\\n    else {\\n      while (acts.has(`${n}(${acts.get(n)})`)) acts.set(n, acts.get(n) + 1);\\n      acts.set(`${n}(${acts.get(n)})`, 1);\\n    }\\n  return [...acts.keys()];\\n};\\n```\\n\\nAnd slower when using a Set instead of a Map.\\n\\n> Runtime: **3984 ms**, faster than *43.00%* of JavaScript online submissions\\n> Memory Usage: **54.3 MB**, less than *100.00%* of JavaScript online submissions\\n\\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = names => {\\n  const acts = new Set(); // ACTual nameS\\n  for (const n of names)\\n    if (!acts.has(n)) acts.add(n);\\n    else {\\n      let i = 1;\\n      while (acts.has(`${n}(${i})`)) i++;\\n      acts.add(`${n}(${i})`);\\n    }\\n  return [...acts];\\n};\\n```\\n\\nAnd is far too slow when using an array.\\n\\n> Status: Time Limit Exceeded\\n\\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = names => {\\n  const acts = []; // ACTual nameS\\n  for (const n of names)\\n    if (!acts.includes(n)) acts.push(n);\\n    else {\\n      let i = 1;\\n      while (acts.includes(`${n}(${i})`)) i++;\\n      acts.push(`${n}(${i})`);\\n    }\\n  return acts;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = (names, acts /* ACTual nameS */ = new Map()) => {\\n  if (!names.length) return [...acts.keys()];\\n  const n = names.shift();\\n  if (!acts.has(n)) return getFolderNames(names, acts.set(n, 1));\\n  while (acts.has(`${n}(${acts.get(n)})`)) acts.set(n, acts.get(n) + 1);\\n  return getFolderNames(names, acts.set(`${n}(${acts.get(n)})`, 1));\\n};\\n```\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = (names, acts /* ACTual nameS */ = new Map()) => {\\n  if (!names.length) return [...acts.keys()];\\n  if (!acts.has(names[0]))\\n    return getFolderNames(names.slice(1), acts.set(names[0], 1));\\n  while (acts.has(`${names[0]}(${acts.get(names[0])})`))\\n    acts.set(names[0], acts.get(names[0]) + 1);\\n  return getFolderNames(\\n    names.slice(1),\\n    acts.set(`${names[0]}(${acts.get(names[0])})`, 1),\\n  );\\n};\\n```\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = names => {\\n  const acts = new Map(); // ACTual nameS\\n  for (const n of names)\\n    if (!acts.has(n)) acts.set(n, 1);\\n    else {\\n      while (acts.has(`${n}(${acts.get(n)})`)) acts.set(n, acts.get(n) + 1);\\n      acts.set(`${n}(${acts.get(n)})`, 1);\\n    }\\n  return [...acts.keys()];\\n};\\n```\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = names => {\\n  const acts = new Set(); // ACTual nameS\\n  for (const n of names)\\n    if (!acts.has(n)) acts.add(n);\\n    else {\\n      let i = 1;\\n      while (acts.has(`${n}(${i})`)) i++;\\n      acts.add(`${n}(${i})`);\\n    }\\n  return [...acts];\\n};\\n```\n```javascript\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nconst getFolderNames = names => {\\n  const acts = []; // ACTual nameS\\n  for (const n of names)\\n    if (!acts.includes(n)) acts.push(n);\\n    else {\\n      let i = 1;\\n      while (acts.includes(`${n}(${i})`)) i++;\\n      acts.push(`${n}(${i})`);\\n    }\\n  return acts;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697835,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> m = new HashMap<>();\\n        for (int i = 0; i < names.length; i++) {\\n            String name = names[i];\\n            if (!m.containsKey(name)) {\\n                m.put(name, 1);\\n                continue;\\n            }\\n            int n = m.get(name);\\n            String candidate = name + \"(\" + n + \")\";\\n            while (m.containsKey(candidate)) {\\n                n++;\\n                candidate = name + \"(\" + n + \")\";\\n            }\\n            names[i] = candidate;\\n            m.put(name, n + 1);\\n            m.put(candidate, 1);\\n        }\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> m = new HashMap<>();\\n        for (int i = 0; i < names.length; i++) {\\n            String name = names[i];\\n            if (!m.containsKey(name)) {\\n                m.put(name, 1);\\n                continue;\\n            }\\n            int n = m.get(name);\\n            String candidate = name + \"(\" + n + \")\";\\n            while (m.containsKey(candidate)) {\\n                n++;\\n                candidate = name + \"(\" + n + \")\";\\n            }\\n            names[i] = candidate;\\n            m.put(name, n + 1);\\n            m.put(candidate, 1);\\n        }\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697819,
                "title": "java-map-instead-of-set",
                "content": "\\n```\\npublic String[] getFolderNames(String[] names) {\\n        int n = names.length;\\n        String[] res = new String[n];\\n        int index = 0;\\n        \\n        HashMap<String,Integer> map = new HashMap<>(); \\n        for (String s : names) {\\n            StringBuilder newS = new StringBuilder(s);\\n            \\n            for (int i = map.getOrDefault(newS.toString(),1); i <= n; i++) {\\n                if (!map.containsKey(newS.toString())) {\\n                    res[index++] = newS.toString();\\n                    map.put(newS.toString(),0);\\n                    map.put(s, map.get(s) + 1);\\n                    break;\\n                } else {\\n                    newS = new StringBuilder(s); \\n                    newS.append(\"(\");\\n                    if (i == 0) i++;\\n                    newS.append(i);\\n                    newS.append(\")\");\\n                }\\n            }\\n        }\\n        \\n        return res;\\n    }\\n```\\t",
                "solutionTags": [],
                "code": "```\\npublic String[] getFolderNames(String[] names) {\\n        int n = names.length;\\n        String[] res = new String[n];\\n        int index = 0;\\n        \\n        HashMap<String,Integer> map = new HashMap<>(); \\n        for (String s : names) {\\n            StringBuilder newS = new StringBuilder(s);\\n            \\n            for (int i = map.getOrDefault(newS.toString(),1); i <= n; i++) {\\n                if (!map.containsKey(newS.toString())) {\\n                    res[index++] = newS.toString();\\n                    map.put(newS.toString(),0);\\n                    map.put(s, map.get(s) + 1);\\n                    break;\\n                } else {\\n                    newS = new StringBuilder(s); \\n                    newS.append(\"(\");\\n                    if (i == 0) i++;\\n                    newS.append(i);\\n                    newS.append(\")\");\\n                }\\n            }\\n        }\\n        \\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697788,
                "title": "c-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        \\n        int n = names.size();\\n        vector<string>res;\\n        unordered_map<string, int>hm;\\n        for (int i = 0; i < n; i++) {\\n            if (hm.find(names[i]) != hm.end()) {\\n                int j = hm[names[i]]+1;\\n                string p = \\'(\\' + to_string(j) + \\')\\';\\n                while (hm.find(names[i] + p) != hm.end()) {\\n                    j++;\\n                    p = \\'(\\' + to_string(j) + \\')\\';\\n                }\\n                hm[names[i]] = j;\\n                hm[names[i]+p] = 0;\\n                res.push_back(names[i]+p);\\n            } else {\\n                res.push_back(names[i]);\\n                hm[names[i]] = 0;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        \\n        int n = names.size();\\n        vector<string>res;\\n        unordered_map<string, int>hm;\\n        for (int i = 0; i < n; i++) {\\n            if (hm.find(names[i]) != hm.end()) {\\n                int j = hm[names[i]]+1;\\n                string p = \\'(\\' + to_string(j) + \\')\\';\\n                while (hm.find(names[i] + p) != hm.end()) {\\n                    j++;\\n                    p = \\'(\\' + to_string(j) + \\')\\';\\n                }\\n                hm[names[i]] = j;\\n                hm[names[i]+p] = 0;\\n                res.push_back(names[i]+p);\\n            } else {\\n                res.push_back(names[i]);\\n                hm[names[i]] = 0;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697782,
                "title": "java-python-3-count-using-hashmap-dict",
                "content": "1. Use a a HashMap to avoid duplicate and to count the suffix;\\n2. If never seen a name before, keep it intact; otherwise, use the HashMap to keep increase the suffix by one till find a name never seen before;\\n\\n```java\\n    public String[] getFolderNames(String[] names) {\\n        String[] ans = new String[names.length];\\n        Map<String, Integer> suffixNum = new HashMap<>();\\n        int i = 0;\\n        for (String name : names) {\\n            if (!suffixNum.containsKey(name)) { // not duplicate.\\n                ans[i] = name; // no change.\\n            }else { // duplicate found.\\n                while (suffixNum.containsKey(name + \"(\" + suffixNum.get(name) + \")\")) { // Still duplicate with suffix addition?\\n                    suffixNum.put(name, 1 + suffixNum.get(name)); // Increase the number in suffix by 1.\\n                }\\n                ans[i] = name + \"(\" + suffixNum.get(name) + \")\"; // append the smallest positive integer.\\n            }\\n            suffixNum.put(ans[i], 1 + suffixNum.getOrDefault(ans[i++], 0)); // put it into Map to avoid duplicate.\\n        }\\n        return ans;\\n    }\\n```\\n```python\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        ans, suffixNum = [], Counter()\\n        for name in names:\\n            if name in suffixNum:\\n                while name + \\'(\\' + str(suffixNum[name]) + \\')\\' in suffixNum:\\n                    suffixNum[name] += 1\\n                ans.append(name + \\'(\\' + str(suffixNum[name]) + \\')\\')\\n            else:\\n                ans.append(name)\\n            suffixNum[ans[-1]] += 1\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```java\\n    public String[] getFolderNames(String[] names) {\\n        String[] ans = new String[names.length];\\n        Map<String, Integer> suffixNum = new HashMap<>();\\n        int i = 0;\\n        for (String name : names) {\\n            if (!suffixNum.containsKey(name)) { // not duplicate.\\n                ans[i] = name; // no change.\\n            }else { // duplicate found.\\n                while (suffixNum.containsKey(name + \"(\" + suffixNum.get(name) + \")\")) { // Still duplicate with suffix addition?\\n                    suffixNum.put(name, 1 + suffixNum.get(name)); // Increase the number in suffix by 1.\\n                }\\n                ans[i] = name + \"(\" + suffixNum.get(name) + \")\"; // append the smallest positive integer.\\n            }\\n            suffixNum.put(ans[i], 1 + suffixNum.getOrDefault(ans[i++], 0)); // put it into Map to avoid duplicate.\\n        }\\n        return ans;\\n    }\\n```\n```python\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        ans, suffixNum = [], Counter()\\n        for name in names:\\n            if name in suffixNum:\\n                while name + \\'(\\' + str(suffixNum[name]) + \\')\\' in suffixNum:\\n                    suffixNum[name] += 1\\n                ans.append(name + \\'(\\' + str(suffixNum[name]) + \\')\\')\\n            else:\\n                ans.append(name)\\n            suffixNum[ans[-1]] += 1\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 697723,
                "title": "what-the-hell-is-this-seriously",
                "content": "Took a use of HashSet but got a `TLE`, what is fxxk of this problem!\\n\\nI will say this is not a good problem unless Lxxtcode can show your better official solution to this problem.\\n\\n```\\n    public String[] getFolderNames(String[] na) {\\n        String[] res = new String[na.length];\\n        \\n        Set<String> set = new HashSet<>();\\n        for (int i=0; i<na.length; i++) {\\n            if (!set.contains(na[i])) {\\n                res[i] = na[i];\\n                set.add(na[i]);\\n            } else {\\n                int k = 1;\\n                String name = na[i] + String.format(\"(%s)\", k);\\n                while(set.contains(name)) {\\n                    k++;\\n                    name = na[i] + String.format(\"(%s)\", k);\\n                }\\n                res[i] = name;\\n                set.add(name);\\n            }\\n            \\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public String[] getFolderNames(String[] na) {\\n        String[] res = new String[na.length];\\n        \\n        Set<String> set = new HashSet<>();\\n        for (int i=0; i<na.length; i++) {\\n            if (!set.contains(na[i])) {\\n                res[i] = na[i];\\n                set.add(na[i]);\\n            } else {\\n                int k = 1;\\n                String name = na[i] + String.format(\"(%s)\", k);\\n                while(set.contains(name)) {\\n                    k++;\\n                    name = na[i] + String.format(\"(%s)\", k);\\n                }\\n                res[i] = name;\\n                set.add(name);\\n            }\\n            \\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1700003,
                "title": "easy-c-solution-using-map",
                "content": "If you encounter same string just add suffix starting from (1) until it is unique. But this will give TLE\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> mp;\\n        for(int i=0; i<names.size(); i++)\\n        {\\n            int count = 1;\\n            string temp=names[i];\\n            while(mp.find(temp)!=mp.end())\\n            {\\n                temp=names[i]+\\'(\\'+to_string(count)+\\')\\';\\n                count++;\\n            }\\n            names[i] = temp;\\n            mp[temp]=1;\\n        }\\n        return names;\\n    }\\n};\\n```\\n\\nTherefore you can store value in map for that string, so that if you encounter same string again, start from the value instead of checking all way from (1)\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> mp;\\n        for(int i=0; i<names.size(); i++)\\n        {\\n            int count = 1;\\n            string temp=names[i];\\n            if(mp.find(temp)!=mp.end())\\n                count = mp[temp];\\n            while(mp.find(temp)!=mp.end())\\n            {\\n                temp=names[i]+\\'(\\'+to_string(count)+\\')\\';\\n                count++;\\n            }\\n            mp[names[i]] = count;\\n            names[i] = temp;\\n            mp[names[i]] = 1;\\n        }\\n        return names;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> mp;\\n        for(int i=0; i<names.size(); i++)\\n        {\\n            int count = 1;\\n            string temp=names[i];\\n            while(mp.find(temp)!=mp.end())\\n            {\\n                temp=names[i]+\\'(\\'+to_string(count)+\\')\\';\\n                count++;\\n            }\\n            names[i] = temp;\\n            mp[temp]=1;\\n        }\\n        return names;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> mp;\\n        for(int i=0; i<names.size(); i++)\\n        {\\n            int count = 1;\\n            string temp=names[i];\\n            if(mp.find(temp)!=mp.end())\\n                count = mp[temp];\\n            while(mp.find(temp)!=mp.end())\\n            {\\n                temp=names[i]+\\'(\\'+to_string(count)+\\')\\';\\n                count++;\\n            }\\n            mp[names[i]] = count;\\n            names[i] = temp;\\n            mp[names[i]] = 1;\\n        }\\n        return names;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646944,
                "title": "very-simple-python3-solution-using-hashmap-and-comments",
                "content": "Very simple and commented solution: \\n\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # names : array of names\\n        # n : size of names\\n        \\n        # create folders at the i\\'th minute for each name = names[i]\\n        # If name was used previously, append a suffix \"(k)\" - note parenthesis - where k is the smallest pos int\\n        \\n        # return an array of strings where ans[i] is the actual saved variant of names[i]\\n        \\n        n = len(names)\\n        \\n        dictNames = {}\\n        ans = [\\'\\']*n\\n        \\n        # enumerate to grab index so we can return ans list in order\\n        for idx, name in enumerate(names):\\n            # check if we have seen this name before\\n            if name in dictNames:\\n                # if we have grab the next k using last successful low (k) suffix\\n                k = dictNames[name]\\n                # track the name we started so we can update the dict\\n                namestart = name\\n                # cycle through values of increasing k until we are not in a previously used name\\n                while name in dictNames:\\n                    name = namestart + f\"({k})\"\\n                    k += 1\\n                # update the name we started with to the new lowest value of k\\n                dictNames[namestart] = k\\n                # add the new name with k = 1 so if we see this name with the suffix\\n                dictNames[name] = 1\\n            else:\\n                # we havent seen this name so lets start with 1\\n                dictNames[name] = 1\\n            # build the solution\\n            ans[idx] = name\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # names : array of names\\n        # n : size of names\\n        \\n        # create folders at the i\\'th minute for each name = names[i]\\n        # If name was used previously, append a suffix \"(k)\" - note parenthesis - where k is the smallest pos int\\n        \\n        # return an array of strings where ans[i] is the actual saved variant of names[i]\\n        \\n        n = len(names)\\n        \\n        dictNames = {}\\n        ans = [\\'\\']*n\\n        \\n        # enumerate to grab index so we can return ans list in order\\n        for idx, name in enumerate(names):\\n            # check if we have seen this name before\\n            if name in dictNames:\\n                # if we have grab the next k using last successful low (k) suffix\\n                k = dictNames[name]\\n                # track the name we started so we can update the dict\\n                namestart = name\\n                # cycle through values of increasing k until we are not in a previously used name\\n                while name in dictNames:\\n                    name = namestart + f\"({k})\"\\n                    k += 1\\n                # update the name we started with to the new lowest value of k\\n                dictNames[namestart] = k\\n                # add the new name with k = 1 so if we see this name with the suffix\\n                dictNames[name] = 1\\n            else:\\n                # we havent seen this name so lets start with 1\\n                dictNames[name] = 1\\n            # build the solution\\n            ans[idx] = name\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 712905,
                "title": "python-70-faster-100-less-memory-use",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        seen = {}\\n        arr = []\\n        for i in range(len(names)):\\n            if names[i] not in seen:\\n                seen[names[i]] = 1\\n                arr.append(names[i])\\n            else:\\n                n = seen[names[i]]\\n                new_name = names[i] + \"(\" + str(n) + \")\"\\n                while new_name in seen:\\n                    n += 1\\n                    new_name = names[i] + \"(\" + str(n) + \")\"\\n                arr.append(new_name)\\n                seen[names[i]] += 1\\n                seen[new_name] = 1\\n        \\n        return arr\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        seen = {}\\n        arr = []\\n        for i in range(len(names)):\\n            if names[i] not in seen:\\n                seen[names[i]] = 1\\n                arr.append(names[i])\\n            else:\\n                n = seen[names[i]]\\n                new_name = names[i] + \"(\" + str(n) + \")\"\\n                while new_name in seen:\\n                    n += 1\\n                    new_name = names[i] + \"(\" + str(n) + \")\"\\n                arr.append(new_name)\\n                seen[names[i]] += 1\\n                seen[new_name] = 1\\n        \\n        return arr\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 698393,
                "title": "c-solution-with-proper-explanation",
                "content": "This question is tricky. But we can solve it using unordered_maps. We will declare an unordered_map in which we will store a string and an integer which denotes the number of occurences of that string.\\n\\nWe start iterating over the array. We add our string to unordered_map and increase the count as mp[names[i]]++.\\nIf  the count is equal to 1, which signifies that we are ecountering that name for first time, so we add it as it is to our solution array. \\n\\nBut if they are appearing for greater than 1 time, we need to check whether the number we are gonna give it is not already present.\\n\\nFor e.g.: If string is orange and its count is 2 (appearing for second time) so naturally we we give it orange(1) which is by orange(count-1). But imagine if a file name is there with the name of orange(1), we need to name our\\'s as orange(2) so as to avoid the conflict.\\n\\nSo, we can see that the count is the lower possible value but value can be bigger and we need to check. So, we form the orange(1) and check for it in the map, if we get it we increase k by 1 and recheck it until it has become unique. So, for this we initialise k with count-1 since its the minimum possible value for the suffix.\\n\\nSo, after checking finally we form the required filename by appending the value of k as suffix in the prescirbed manner. Then we add that string to our answer array and add the new string to our unordered_map.\\n\\nAfter all this, we return the answer array. We have done it. \\n\\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string>v;\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<names.size();i++)\\n        {\\n            mp[names[i]]++;\\n            if(mp[names[i]]==1)\\n                v.push_back(names[i]);\\n            else\\n            {\\n                int k=mp[names[i]]-1;\\n                while(true)\\n                {\\n                    string t = names[i]+\"(\"+to_string(k)+\")\";\\n                    if(mp.find(t)!=mp.end())\\n                        k++;\\n                    else\\n                        break;\\n                }\\n                string temp = names[i]+\"(\"+to_string(k)+\")\";\\n                v.push_back(temp);\\n                mp[temp]++;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string>v;\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<names.size();i++)\\n        {\\n            mp[names[i]]++;\\n            if(mp[names[i]]==1)\\n                v.push_back(names[i]);\\n            else\\n            {\\n                int k=mp[names[i]]-1;\\n                while(true)\\n                {\\n                    string t = names[i]+\"(\"+to_string(k)+\")\";\\n                    if(mp.find(t)!=mp.end())\\n                        k++;\\n                    else\\n                        break;\\n                }\\n                string temp = names[i]+\"(\"+to_string(k)+\")\";\\n                v.push_back(temp);\\n                mp[temp]++;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697863,
                "title": "c-using-only-dictionary",
                "content": "```csharp\\npublic string[] GetFolderNames(string[] names)\\n{\\n\\tstring[] result = new string[names.Length];       \\n\\tDictionary<string, int> suffixMap = new Dictionary<string, int>();\\n\\n\\tfor(int i = 0; i < names.Length; i++)\\n\\t{\\n\\t\\tstring name = names[i];\\n\\n\\t\\tif(suffixMap.ContainsKey(name))\\n\\t\\t{\\n\\t\\t\\tint next = suffixMap[name] + 1;\\n\\t\\t\\tname = $\"{names[i]}({next})\";\\n\\n\\t\\t\\twhile(suffixMap.ContainsKey(name))\\n\\t\\t\\t{\\n\\t\\t\\t\\tnext++;\\n\\t\\t\\t\\tname = $\"{names[i]}({next})\";                                       \\n\\t\\t\\t}\\n\\n\\t\\t\\tsuffixMap[names[i]] = next;\\n\\t\\t\\tsuffixMap[name] = 0;\\n\\t\\t}\\n\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tsuffixMap.Add(name, 0);                    \\n\\t\\t}\\n\\n\\t\\tresult[i] = name;\\n\\t}\\n\\n\\treturn result;\\n}\\n```",
                "solutionTags": [],
                "code": "```csharp\\npublic string[] GetFolderNames(string[] names)\\n{\\n\\tstring[] result = new string[names.Length];       \\n\\tDictionary<string, int> suffixMap = new Dictionary<string, int>();\\n\\n\\tfor(int i = 0; i < names.Length; i++)\\n\\t{\\n\\t\\tstring name = names[i];\\n\\n\\t\\tif(suffixMap.ContainsKey(name))\\n\\t\\t{\\n\\t\\t\\tint next = suffixMap[name] + 1;\\n\\t\\t\\tname = $\"{names[i]}({next})\";\\n\\n\\t\\t\\twhile(suffixMap.ContainsKey(name))\\n\\t\\t\\t{\\n\\t\\t\\t\\tnext++;\\n\\t\\t\\t\\tname = $\"{names[i]}({next})\";                                       \\n\\t\\t\\t}\\n\\n\\t\\t\\tsuffixMap[names[i]] = next;\\n\\t\\t\\tsuffixMap[name] = 0;\\n\\t\\t}\\n\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tsuffixMap.Add(name, 0);                    \\n\\t\\t}\\n\\n\\t\\tresult[i] = name;\\n\\t}\\n\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697814,
                "title": "c-just-map",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<string> getFolderNames(vector<string>& names) {\\n\\t\\t\\tunordered_map<string, int> mp;\\n\\t\\t\\tfor(int i = 0; i < names.size(); ++i){\\n\\t\\t\\t\\tif(mp.count(names[i])){\\n\\t\\t\\t\\t\\tstring tmp = names[i] + \"(\" + to_string(mp[names[i]]++)+\")\";\\n\\t\\t\\t\\t\\twhile(mp.count(tmp)){\\n\\t\\t\\t\\t\\t\\ttmp = names[i] + \"(\" + to_string(mp[names[i]]++)+\")\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tnames[i] = tmp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmp[names[i]]++;\\n\\t\\t\\t}\\n\\t\\t\\treturn names;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<string> getFolderNames(vector<string>& names) {\\n\\t\\t\\tunordered_map<string, int> mp;\\n\\t\\t\\tfor(int i = 0; i < names.size(); ++i){\\n\\t\\t\\t\\tif(mp.count(names[i])){\\n\\t\\t\\t\\t\\tstring tmp = names[i] + \"(\" + to_string(mp[names[i]]++)+\")\";\\n\\t\\t\\t\\t\\twhile(mp.count(tmp)){\\n\\t\\t\\t\\t\\t\\ttmp = names[i] + \"(\" + to_string(mp[names[i]]++)+\")\";\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 697771,
                "title": "python3-solution-using-dictionary-with-comments",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # A map from each name to it\\'s latest count\\n\\t\\tnames_to_counter = {}\\n\\t\\t# List to store the result\\n\\t\\tres = []\\n        \\n        for name in names:\\n            new_name = name\\n\\t\\t\\t\\n\\t\\t\\t# Repeat as long as the name is already seen\\n\\t\\t\\t# E.g test case that the while loop handles -> [\"fname\", \"fname\", \"fname(1)\"]\\n            while new_name in names_to_counter:\\n\\t\\t\\t    # generate the new name and update its count\\n                new_name = name + \"(\" + str(names_to_counter[name]) + \")\"\\n                names_to_counter[name] += 1\\n            \\n\\t\\t\\tres.append(new_name)\\n\\t\\t\\t\\n\\t\\t\\t# Add the new name to the dictionary too,\\n\\t\\t\\t# so that if later down the list we see this name again, it can be handled\\n\\t\\t\\t# E.g. test case handled by this -> [\"fname\", \"fname\", \"fname(1)\"]\\n            names_to_counter[new_name] = 1\\n        return res\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "class Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # A map from each name to it\\'s latest count\\n\\t\\tnames_to_counter = {}",
                "codeTag": "Java"
            },
            {
                "id": 2580035,
                "title": "pyhton-simple-hashmaps-and-loops",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        \\n        h = {}\\n        for i,name in enumerate(names):\\n            \\n            if name in h:\\n                k = h[name]\\n                while name + \"(\" + str(k) + \")\" in h:\\n                    k += 1\\n                names[i] = name + \"(\"+str(k)+\")\"\\n                h[name + \"(\"+str(k)+\")\"] = 1\\n                h[name] = k\\n            else:\\n                h[name] = 1\\n        return names",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        \\n        h = {}",
                "codeTag": "Java"
            },
            {
                "id": 1808348,
                "title": "java-o-n-unique-directory-creation",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String,Integer> map = new HashMap<>();\\n        for(int i=0;i<names.length;i++){\\n            int prefix = map.getOrDefault(names[i],0);\\n            if(prefix != 0){\\n                String raw = names[i];\\n                while(map.getOrDefault(names[i],0) != 0){\\n                    names[i] = raw + \"(\" + prefix + \")\";\\n                    prefix++;\\n                }\\n                map.put(raw,prefix);\\n            }\\n            map.put(names[i],1);\\n        }\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String,Integer> map = new HashMap<>();\\n        for(int i=0;i<names.length;i++){\\n            int prefix = map.getOrDefault(names[i],0);\\n            if(prefix != 0){\\n                String raw = names[i];\\n                while(map.getOrDefault(names[i],0) != 0){\\n                    names[i] = raw + \"(\" + prefix + \")\";\\n                    prefix++;\\n                }\\n                map.put(raw,prefix);\\n            }\\n            map.put(names[i],1);\\n        }\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1793095,
                "title": "making-file-names-unique-c-fully-explained-code-by-deep-mukherjee",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        \\n        // You can understand the code by seeing explanation below\\n        \\n        unordered_map<string, int> mp;\\n        vector<string> res;\\n        \\n        for(auto i : names){\\n            string val = i;\\n            int cnt = mp[val];\\n            \\n            while(mp[val] != 0){\\n                val = i + \\'(\\' + to_string(cnt) + \\')\\';\\n\\t\\t\\t\\tcnt++;\\n                mp[i] = cnt;\\n\\t\\t\\t\\t   \\n            }\\n            mp[val]++;\\n            res.emplace_back(val);\\n        }\\n        return res;\\n        \\n        \\n        \\n        // For better Understanding Code explained Line by line\\n        \\n        // names = [\"d\", \"d(1)\", \"d(2)\", \"d\"]\\n        \\n        \\n        // running for loop\\n        // val = \"d\";\\n        // cnt = mp[val] = mp[\"d\"] = 0;\\n        // mp[val] = 0, so while loop not executed\\n        // mp[val]++ -> mp[\"d\"] = 0+1 = 1;\\n        // res = [\"d\"]\\n        \\n        // Same for \"d(1)\"\\n        // mp[\"d(1)\"] = 0+1 = 1;\\n        // res = [\"d\", \"d(1)\"]\\n        \\n        // Same for \"d(2)\"\\n        // mp[\"d(2)\"] = 0+1 = 1;\\n        // res = [\"d\", \"d(1)\", \"d(2)\"]\\n        \\n        // now, i = \"d\", val = \"d\";\\n        // cnt = mp[val] = mp[\"d\"] = 1, (appeared before)\\n        // while loop executed bcoz mp[val] = 1 which is greater than 0\\n        // In while loop,\\n        // cnt = 1+1 = 2;\\n        // val = i + \\'(\\' + to_string(cnt) + \\')\\' = \"d(2)\"\\n        // mp[i] = mp[\"d\"] = cnt = 2;\\n        \\n        // now mp[val] = mp[\"d(2)\"] = 1, (appeared before)\\n        // while loop executed bcoz mp[val] = 1 which is greater than 0\\n        // In while loop,\\n        // cnt = 2+1 = 3;\\n        // val = i + \\'(\\' + to_string(cnt) + \\')\\' = \"d(3)\"\\n        // mp[i] = mp[\"d\"] = cnt = 3;\\n        \\n        // now mp[val] = mp[\"d(3)\"] = 0\\n        // while loop closed\\n        // mp[val]++ = mp[\"d(3)\"] = 0+1 = 1;\\n        // res = [\"d\", \"d(1)\", \"d(2)\", \"d(3)\"]\\n        \\n        // now, return res;\\n    }\\n};\\n```\\n\\nUPVOTE PLEASE",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        \\n        // You can understand the code by seeing explanation below\\n        \\n        unordered_map<string, int> mp;\\n        vector<string> res;\\n        \\n        for(auto i : names){\\n            string val = i;\\n            int cnt = mp[val];\\n            \\n            while(mp[val] != 0){\\n                val = i + \\'(\\' + to_string(cnt) + \\')\\';\\n\\t\\t\\t\\tcnt++;\\n                mp[i] = cnt;\\n\\t\\t\\t\\t   \\n            }\\n            mp[val]++;\\n            res.emplace_back(val);\\n        }\\n        return res;\\n        \\n        \\n        \\n        // For better Understanding Code explained Line by line\\n        \\n        // names = [\"d\", \"d(1)\", \"d(2)\", \"d\"]\\n        \\n        \\n        // running for loop\\n        // val = \"d\";\\n        // cnt = mp[val] = mp[\"d\"] = 0;\\n        // mp[val] = 0, so while loop not executed\\n        // mp[val]++ -> mp[\"d\"] = 0+1 = 1;\\n        // res = [\"d\"]\\n        \\n        // Same for \"d(1)\"\\n        // mp[\"d(1)\"] = 0+1 = 1;\\n        // res = [\"d\", \"d(1)\"]\\n        \\n        // Same for \"d(2)\"\\n        // mp[\"d(2)\"] = 0+1 = 1;\\n        // res = [\"d\", \"d(1)\", \"d(2)\"]\\n        \\n        // now, i = \"d\", val = \"d\";\\n        // cnt = mp[val] = mp[\"d\"] = 1, (appeared before)\\n        // while loop executed bcoz mp[val] = 1 which is greater than 0\\n        // In while loop,\\n        // cnt = 1+1 = 2;\\n        // val = i + \\'(\\' + to_string(cnt) + \\')\\' = \"d(2)\"\\n        // mp[i] = mp[\"d\"] = cnt = 2;\\n        \\n        // now mp[val] = mp[\"d(2)\"] = 1, (appeared before)\\n        // while loop executed bcoz mp[val] = 1 which is greater than 0\\n        // In while loop,\\n        // cnt = 2+1 = 3;\\n        // val = i + \\'(\\' + to_string(cnt) + \\')\\' = \"d(3)\"\\n        // mp[i] = mp[\"d\"] = cnt = 3;\\n        \\n        // now mp[val] = mp[\"d(3)\"] = 0\\n        // while loop closed\\n        // mp[val]++ = mp[\"d(3)\"] = 0+1 = 1;\\n        // res = [\"d\", \"d(1)\", \"d(2)\", \"d(3)\"]\\n        \\n        // now, return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1571148,
                "title": "python-using-hash",
                "content": "Every time we update the hash of names to the smallest k such that name(k) is a valid addition, we need to also add name(k) itself to the hash.\\n\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n\\n        cache=dict()\\n        output=[]\\n        \\n        for name in names:\\n            if name not in cache:\\n                output.append(name)\\n                cache[name]=1\\n            else:\\n                k=cache[name]\\n                while name+f\\'({k})\\' in cache:\\n                    k+=1\\n                new_name=name+f\\'({k})\\'\\n                output.append(new_name)\\n                cache[name]+=1\\n                cache[new_name]=1            \\n        \\n        return output\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n\\n        cache=dict()\\n        output=[]\\n        \\n        for name in names:\\n            if name not in cache:\\n                output.append(name)\\n                cache[name]=1\\n            else:\\n                k=cache[name]\\n                while name+f\\'({k})\\' in cache:\\n                    k+=1\\n                new_name=name+f\\'({k})\\'\\n                output.append(new_name)\\n                cache[name]+=1\\n                cache[new_name]=1            \\n        \\n        return output\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1390618,
                "title": "java-single-hashmap-beats-84-with-comments-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        \\n        String[] output = new String[names.length];\\n        \\n        for(int i=0; i<names.length; i++) {\\n            String s = names[i];\\n            // if we haven\\'t seen this string before, just add it in output\\n            if(!map.containsKey(s)) {\\n                map.put(s,1);\\n                output[i] = s;\\n                continue;\\n            }\\n            int k = map.get(s);\\n            String s1 = s + \"(\" + k + \")\";\\n            // if new string exists in the map, keep on incrementing k unless we find a k which is not previously used\\n            while(map.containsKey(s1)) {\\n                k++;\\n                s1 = s + \"(\" + k + \")\";\\n            }\\n            map.put(s1,1);\\n            map.put(s,k+1);\\n            output[i] = s1;\\n        }\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        \\n        String[] output = new String[names.length];\\n        \\n        for(int i=0; i<names.length; i++) {\\n            String s = names[i];\\n            // if we haven\\'t seen this string before, just add it in output\\n            if(!map.containsKey(s)) {\\n                map.put(s,1);\\n                output[i] = s;\\n                continue;\\n            }\\n            int k = map.get(s);\\n            String s1 = s + \"(\" + k + \")\";\\n            // if new string exists in the map, keep on incrementing k unless we find a k which is not previously used\\n            while(map.containsKey(s1)) {\\n                k++;\\n                s1 = s + \"(\" + k + \")\";\\n            }\\n            map.put(s1,1);\\n            map.put(s,k+1);\\n            output[i] = s1;\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699519,
                "title": "python3-9-line-concise-solution",
                "content": "Algo \\nWhat\\'s needed here is just a dictionary with name to number mapping where number is the suffix to be added to the name should conflict occurr. \\n\\nAlso, I am utilizing the fact that dictionary is ordered in Python 3.6+. \\n\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        seen = {}\\n        for name in names: \\n            if name not in seen: seen[name] = 1\\n            else: \\n                k = seen[name]\\n                while (suffix := f\"{name}({k})\") in seen: k += 1\\n                seen[name] = k+1\\n                seen[suffix] = 1\\n        return seen.keys()\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        seen = {}\\n        for name in names: \\n            if name not in seen: seen[name] = 1\\n            else: \\n                k = seen[name]\\n                while (suffix := f\"{name}({k})\") in seen: k += 1\\n                seen[name] = k+1\\n                seen[suffix] = 1\\n        return seen.keys()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699037,
                "title": "java-simple-hashmap",
                "content": "```\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        String[] res = new String[names.length];\\n        for (int i = 0; i < names.length; i++) {\\n            if (!map.containsKey(names[i])) {\\n                res[i] = names[i];\\n                map.put(res[i], 1);\\n                continue;\\n            }\\n            int cnt = map.get(names[i]);\\n            String add = names[i] + \"(\" + cnt + \")\";\\n            while (map.containsKey(add)) {\\n                cnt++;\\n                add = names[i] + \"(\" + cnt + \")\";\\n            }\\n            res[i] = add;\\n            map.put(add, 1);\\n            map.put(names[i], cnt + 1);\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        String[] res = new String[names.length];\\n        for (int i = 0; i < names.length; i++) {\\n            if (!map.containsKey(names[i])) {\\n                res[i] = names[i];\\n                map.put(res[i], 1);\\n                continue;\\n            }\\n            int cnt = map.get(names[i]);\\n            String add = names[i] + \"(\" + cnt + \")\";\\n            while (map.containsKey(add)) {\\n                cnt++;\\n                add = names[i] + \"(\" + cnt + \")\";\\n            }\\n            res[i] = add;\\n            map.put(add, 1);\\n            map.put(names[i], cnt + 1);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 698065,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    var stringDict = [String: Int]()\\n    var results = [String]()\\n    \\n    func getFolderNames(_ names: [String]) -> [String] {\\n        if names.isEmpty { return [] }\\n        for name in names {\\n            if let nameVal = stringDict[name] {\\n                let newStr = addSuffix(name)\\n                results.append(newStr)\\n                stringDict[name] = nameVal + 1\\n                stringDict[newStr] = 1\\n            } else {\\n                results.append(name)\\n                stringDict[name] = 1\\n            }\\n        }\\n        return results\\n    }\\n    \\n    func addSuffix(_ name: String) -> String {\\n        if var nameVal = stringDict[name] {\\n            var newStr = name + \"(\\\\(nameVal))\"\\n            while stringDict[newStr] != nil {\\n                nameVal += 1\\n                newStr = name + \"(\\\\(nameVal))\"\\n            }\\n            return newStr\\n        }\\n        return name\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    var stringDict = [String: Int]()\\n    var results = [String]()\\n    \\n    func getFolderNames(_ names: [String]) -> [String] {\\n        if names.isEmpty { return [] }",
                "codeTag": "Java"
            },
            {
                "id": 697719,
                "title": "c-dictionary-solution",
                "content": "```\\npublic class Solution {\\n    public string[] GetFolderNames(string[] names) {\\n        \\n        List<string> res = new List<string>();\\n        if(names == null || names.Length == 0)\\n            return res.ToArray();\\n        \\n        Dictionary<string,int> dic = new Dictionary<string,int>();\\n        foreach(string str in names)\\n        {           \\n            if(!dic.ContainsKey(str))\\n            {\\n                dic.Add(str, 0);\\n                res.Add(str);\\n            }\\n            else\\n            {\\n                int suffix  = dic[str] + 1;\\n                \\n                // keep increasing suffix if the name has been used\\n                while(dic.ContainsKey(str + \"(\" + suffix + \")\"))\\n                   suffix++;\\n                \\n                // update the smallest positive integer for folder name \\'str\\' \\n                // to reduce the while loop operations when the next \\'str\\' occurs \\n                dic[str] = suffix;\\n                \\n                // add the new folder name to the dictionary\\n                string newName = str + \"(\" + suffix  + \")\"; \\n                res.Add(newName);\\n                dic.Add(newName, 0);\\n            }\\n        }\\n        \\n        return res.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string[] GetFolderNames(string[] names) {\\n        \\n        List<string> res = new List<string>();\\n        if(names == null || names.Length == 0)\\n            return res.ToArray();\\n        \\n        Dictionary<string,int> dic = new Dictionary<string,int>();\\n        foreach(string str in names)\\n        {           \\n            if(!dic.ContainsKey(str))\\n            {\\n                dic.Add(str, 0);\\n                res.Add(str);\\n            }\\n            else\\n            {\\n                int suffix  = dic[str] + 1;\\n                \\n                // keep increasing suffix if the name has been used\\n                while(dic.ContainsKey(str + \"(\" + suffix + \")\"))\\n                   suffix++;\\n                \\n                // update the smallest positive integer for folder name \\'str\\' \\n                // to reduce the while loop operations when the next \\'str\\' occurs \\n                dic[str] = suffix;\\n                \\n                // add the new folder name to the dictionary\\n                string newName = str + \"(\" + suffix  + \")\"; \\n                res.Add(newName);\\n                dic.Add(newName, 0);\\n            }\\n        }\\n        \\n        return res.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697706,
                "title": "javascript-100-beats-runtime",
                "content": "Understand Better, Please visit:\\nhttps://youtu.be/ERYkxar94bk?t=2\\n```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    let words=new Map()\\n    for(let i=0;i<names.length;i++){\\n       if(!words.has(names[i])){\\n           words.set(names[i],0)\\n       }else{\\n           let n = words.get(names[i])\\n           n+=1\\n           let newWord = names[i] + `(${n})`\\n           while(true){\\n               if(words.has(newWord)){\\n                   n+=1\\n                   newWord = names[i] + `(${n})`\\n               }else{\\n                   break\\n               }\\n           }\\n           words.set(names[i],n)\\n           words.set(newWord,0) \\n           names[i] = newWord\\n       }\\n    }\\n    return names\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    let words=new Map()\\n    for(let i=0;i<names.length;i++){\\n       if(!words.has(names[i])){\\n           words.set(names[i],0)\\n       }else{\\n           let n = words.get(names[i])\\n           n+=1\\n           let newWord = names[i] + `(${n})`\\n           while(true){\\n               if(words.has(newWord)){\\n                   n+=1\\n                   newWord = names[i] + `(${n})`\\n               }else{\\n                   break\\n               }\\n           }\\n           words.set(names[i],n)\\n           words.set(newWord,0) \\n           names[i] = newWord\\n       }\\n    }\\n    return names\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938403,
                "title": "python-hashmap-beats-100-with-detailed-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSee comments\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSee comments\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nNote that the while loop will run at most k (occurence of name) times for each name so IN TOTAL at most O(n) times, which does not add to complexity\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # map from name to current min k used for that name\\n        nameMinK = dict()   \\n        res = []\\n        for name in names:\\n            if name not in nameMinK:    # new name\\n                res.append(name)\\n                nameMinK[name] = 0\\n            else:   # already added name\\n                k = nameMinK[name] + 1\\n                tmp = name + \\'(\\' + str(k) + \\')\\'\\n                while tmp in nameMinK:\\n                    k += 1\\n                    tmp = name + \\'(\\' + str(k) + \\')\\'\\n                # try until tmp not in usedName => add AND update minK\\n                res.append(tmp)\\n                nameMinK[name] = k  # NOTE: very tricky here!!!, need to update both name & tmp\\n                nameMinK[tmp] = 0\\n        return res\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # map from name to current min k used for that name\\n        nameMinK = dict()   \\n        res = []\\n        for name in names:\\n            if name not in nameMinK:    # new name\\n                res.append(name)\\n                nameMinK[name] = 0\\n            else:   # already added name\\n                k = nameMinK[name] + 1\\n                tmp = name + \\'(\\' + str(k) + \\')\\'\\n                while tmp in nameMinK:\\n                    k += 1\\n                    tmp = name + \\'(\\' + str(k) + \\')\\'\\n                # try until tmp not in usedName => add AND update minK\\n                res.append(tmp)\\n                nameMinK[name] = k  # NOTE: very tricky here!!!, need to update both name & tmp\\n                nameMinK[tmp] = 0\\n        return res\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3691203,
                "title": "java-easy-100-solution",
                "content": "```java\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        final Map<String, Integer> uniqueNames = new HashMap<>();\\n\\n        for(int i = 0; i < names.length; ++i) {\\n            String file = names[i];\\n\\n            int count = uniqueNames.getOrDefault(file, 0);\\n\\n            while(uniqueNames.containsKey(file))\\n                file = names[i] + \"(\" + ++count + \")\";\\n\\n            uniqueNames.put(names[i], count);\\n            uniqueNames.put(file, 0);\\n            \\n            names[i] = file;\\n        }\\n\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        final Map<String, Integer> uniqueNames = new HashMap<>();\\n\\n        for(int i = 0; i < names.length; ++i) {\\n            String file = names[i];\\n\\n            int count = uniqueNames.getOrDefault(file, 0);\\n\\n            while(uniqueNames.containsKey(file))\\n                file = names[i] + \"(\" + ++count + \")\";\\n\\n            uniqueNames.put(names[i], count);\\n            uniqueNames.put(file, 0);\\n            \\n            names[i] = file;\\n        }\\n\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3280884,
                "title": "noob-solution-dpm07",
                "content": "\\n```\\nfrom typing import List\\n\\n\"\"\"\\n1487. Making File Names Unique\\n\\ncreate n folders in your file system such that, at the ith minute, U will create a folder with the name names[i].\\n\\nSince 2 files cannot have the same name,\\nif you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\\n\\nReturn an arr of str of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.\\n\\n\\nEX:\\n[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\\nO/P -> [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\\n\\nEX:\\n[\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\\no/p: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\\n\\nEx:\\n[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\\no/p: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\\n\"\"\"\\n\\n\\nclass Solution:\\n    \"\"\"\\n    if it\\'s already in the seen dictionary,\\n    append a suffix k to the name until a unique name is found.\\n\\n    Time: O(n^2) in the worst case where all file names are the same\\n    space: O(n)\\n    \"\"\"\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n\\n        ans = []  # stores unique file names\\n        seen = {}\\n\\n        for name in names:\\n            if name not in seen:\\n                ans.append(name)\\n                seen[name] = 1\\n            else:\\n                k = seen[name]\\n                # creating variants\\n                while True:\\n                    new_name = name + \\'(\\' + str(k) + \\')\\'\\n                    if new_name not in seen:\\n                        ans.append(new_name)\\n                        seen[new_name] = 1\\n                        break\\n                    else:\\n                        k += 1\\n\\n                # save the latest version of variant so to avaoid above while\\n                # loop calculation\\n                seen[name] = k\\n            \\n\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom typing import List\\n\\n\"\"\"\\n1487. Making File Names Unique\\n\\ncreate n folders in your file system such that, at the ith minute, U will create a folder with the name names[i].\\n\\nSince 2 files cannot have the same name,\\nif you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\\n\\nReturn an arr of str of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.\\n\\n\\nEX:\\n[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\\nO/P -> [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\\n\\nEX:\\n[\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\\no/p: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\\n\\nEx:\\n[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\\no/p: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\\n\"\"\"\\n\\n\\nclass Solution:\\n    \"\"\"\\n    if it\\'s already in the seen dictionary,\\n    append a suffix k to the name until a unique name is found.\\n\\n    Time: O(n^2) in the worst case where all file names are the same\\n    space: O(n)\\n    \"\"\"\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n\\n        ans = []  # stores unique file names\\n        seen = {}\\n\\n        for name in names:\\n            if name not in seen:\\n                ans.append(name)\\n                seen[name] = 1\\n            else:\\n                k = seen[name]\\n                # creating variants\\n                while True:\\n                    new_name = name + \\'(\\' + str(k) + \\')\\'\\n                    if new_name not in seen:\\n                        ans.append(new_name)\\n                        seen[new_name] = 1\\n                        break\\n                    else:\\n                        k += 1\\n\\n                # save the latest version of variant so to avaoid above while\\n                # loop calculation\\n                seen[name] = k\\n            \\n\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696776,
                "title": "c-easy-short",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n   vector<string> getFolderNames(vector<string>& names) {\\n    unordered_map<string,int>m;\\n    vector<string>ans;\\n    for(int i=0;i<names.size();i++){\\n      if(m.find(names[i])!=m.end())\\n       {\\n          int k = m[names[i]];\\n           string str;\\n          do{\\n           str = names[i]+\\'(\\';\\n          str += to_string(k);\\n              str += \\')\\';\\n            m[names[i]]++;\\n            k++;\\n          }\\n          while(m.find(str)!=m.end());\\n          m[str]++ ;\\n          ans.push_back(str);\\n       }\\n       else\\n       {\\n          m[names[i]]++;\\n          ans.push_back(names[i]);\\n       }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   vector<string> getFolderNames(vector<string>& names) {\\n    unordered_map<string,int>m;\\n    vector<string>ans;\\n    for(int i=0;i<names.size();i++){\\n      if(m.find(names[i])!=m.end())\\n       {\\n          int k = m[names[i]];\\n           string str;\\n          do{\\n           str = names[i]+\\'(\\';\\n          str += to_string(k);\\n              str += \\')\\';\\n            m[names[i]]++;\\n            k++;\\n          }\\n          while(m.find(str)!=m.end());\\n          m[str]++ ;\\n          ans.push_back(str);\\n       }\\n       else\\n       {\\n          m[names[i]]++;\\n          ans.push_back(names[i]);\\n       }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2581005,
                "title": "c-o-n-solution",
                "content": "**C++ Code:**\\n\\n**Method 1: O(n) Solution**\\n*NOTE : This Solutions seems to be O(n^2) but it is not.*\\n\\n```\\n vector<string> getFolderNames(vector<string>& names) {\\n    unordered_map<string,int>m;\\n    vector<string>ans;\\n    for(int i=0;i<names.size();i++){\\n      if(m.find(names[i])!=m.end())\\n       {\\n          int k = m[names[i]];\\n           string str;\\n          do{\\n           str = names[i]+\\'(\\';\\n          str += to_string(k);\\n              str += \\')\\';\\n            m[names[i]]++;\\n            k++;\\n          }\\n          while(m.find(str)!=m.end());\\n          m[str]++ ;\\n          ans.push_back(str);\\n       }\\n       else\\n       {\\n          m[names[i]]++;\\n          ans.push_back(names[i]);\\n       }\\n    }\\n    return ans;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n vector<string> getFolderNames(vector<string>& names) {\\n    unordered_map<string,int>m;\\n    vector<string>ans;\\n    for(int i=0;i<names.size();i++){\\n      if(m.find(names[i])!=m.end())\\n       {\\n          int k = m[names[i]];\\n           string str;\\n          do{\\n           str = names[i]+\\'(\\';\\n          str += to_string(k);\\n              str += \\')\\';\\n            m[names[i]]++;\\n            k++;\\n          }\\n          while(m.find(str)!=m.end());\\n          m[str]++ ;\\n          ans.push_back(str);\\n       }\\n       else\\n       {\\n          m[names[i]]++;\\n          ans.push_back(names[i]);\\n       }\\n    }\\n    return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2452183,
                "title": "java-code-following-the-hints",
                "content": "```\\npublic String[] getFolderNames(String[] names) {\\n        int currId = 0;\\n        String[] sol = new String[names.length];\\n        Map<String, Integer> nameMap = new HashMap<>();\\n\\n        for (String name : names) {\\n            String addStr;\\n            if (!nameMap.containsKey(name)) {\\n                nameMap.put(name, 1);\\n                addStr = name;\\n            } else {\\n                String str = name;\\n                int i = nameMap.get(str);\\n                while (nameMap.containsKey(str)) {\\n                    str = name + \\'(\\' + i + \\')\\';\\n                    i++;\\n                }\\n                \\n                addStr = str;\\n                nameMap.put(name, i);\\n                nameMap.put(addStr, 1);\\n            }\\n\\n//                System.out.println(\"nameMap: \" + nameMap);\\n            sol[currId++] = addStr;\\n        }\\n\\n        return sol;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String[] getFolderNames(String[] names) {\\n        int currId = 0;\\n        String[] sol = new String[names.length];\\n        Map<String, Integer> nameMap = new HashMap<>();\\n\\n        for (String name : names) {\\n            String addStr;\\n            if (!nameMap.containsKey(name)) {\\n                nameMap.put(name, 1);\\n                addStr = name;\\n            } else {\\n                String str = name;\\n                int i = nameMap.get(str);\\n                while (nameMap.containsKey(str)) {\\n                    str = name + \\'(\\' + i + \\')\\';\\n                    i++;\\n                }\\n                \\n                addStr = str;\\n                nameMap.put(name, i);\\n                nameMap.put(addStr, 1);\\n            }\\n\\n//                System.out.println(\"nameMap: \" + nameMap);\\n            sol[currId++] = addStr;\\n        }\\n\\n        return sol;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2309869,
                "title": "easiest-typescript-javascript-solution",
                "content": "The easiest TypeScript solution is\\n```\\nfunction getFolderNames(names: string[]): string[] {\\n  const reserved = new Set<string>();\\n\\n  return names.map((name) => {\\n    let k = 0;\\n    let possibleName = name;\\n    while (reserved.has(possibleName)) {\\n      k++;\\n      possibleName = `${name}(${k})`;\\n    }\\n\\n    reserved.add(possibleName);\\n    return possibleName;\\n  });\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Ordered Set"
                ],
                "code": "```\\nfunction getFolderNames(names: string[]): string[] {\\n  const reserved = new Set<string>();\\n\\n  return names.map((name) => {\\n    let k = 0;\\n    let possibleName = name;\\n    while (reserved.has(possibleName)) {\\n      k++;\\n      possibleName = `${name}(${k})`;\\n    }\\n\\n    reserved.add(possibleName);\\n    return possibleName;\\n  });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2220358,
                "title": "simple-python",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        d ={}\\n        res = []\\n        \\n        for name in names:\\n            \\n            if name not in d:\\n                d[name] = 1\\n                res.append(name)\\n                \\n            else:\\n                num = d[name]\\n                new = name+\"(\"+str(num)+\")\"\\n                \\n                while new in d:\\n                    num+=1\\n                    new = name+\"(\"+str(num)+\")\"\\n                    \\n                res.append(new)\\n                d[name] = num+1\\n                d[new] = 1\\n                \\n        return (res)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        d ={}\\n        res = []\\n        \\n        for name in names:\\n            \\n            if name not in d:\\n                d[name] = 1\\n                res.append(name)\\n                \\n            else:\\n                num = d[name]\\n                new = name+\"(\"+str(num)+\")\"\\n                \\n                while new in d:\\n                    num+=1\\n                    new = name+\"(\"+str(num)+\")\"\\n                    \\n                res.append(new)\\n                d[name] = num+1\\n                d[new] = 1\\n                \\n        return (res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2186593,
                "title": "c-with-explanation",
                "content": "```\\n// my \"cnt\" map records how many times a filename has occured-1\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int>cnt;\\n        vector<string>ans;\\n        for(auto & i:names){\\n            // if the file name is unique till now\\n            if(cnt.count(i)==0){\\n                cnt[i]=0;\\n                ans.push_back(i);\\n            }\\n            else{\\n                // file name is not unique.\\n                while(true){\\n                    // so my next filename can be \"prevname(k)\"\\n                    int k=1+cnt[i];\\n                    string str=i+\"(\"+to_string(k)+\")\";\\n                    //check if this filename is  occupied or not if not then use it\\n                    if(cnt.count(str)==0){\\n                        // important :- we are searching for filename=i,and reached till this point so update the occurence of cnt[i] to avoid O(n*n) time complexity\\n                        cnt[i]=k;\\n                        cnt[str]=0;\\n                        ans.push_back(str);\\n                        break;\\n                    }\\n                    // if filename is already in use then try next value of k\\n                    cnt[i]++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\nDo **UPVOTE** if it helps :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n// my \"cnt\" map records how many times a filename has occured-1\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int>cnt;\\n        vector<string>ans;\\n        for(auto & i:names){\\n            // if the file name is unique till now\\n            if(cnt.count(i)==0){\\n                cnt[i]=0;\\n                ans.push_back(i);\\n            }\\n            else{\\n                // file name is not unique.\\n                while(true){\\n                    // so my next filename can be \"prevname(k)\"\\n                    int k=1+cnt[i];\\n                    string str=i+\"(\"+to_string(k)+\")\";\\n                    //check if this filename is  occupied or not if not then use it\\n                    if(cnt.count(str)==0){\\n                        // important :- we are searching for filename=i,and reached till this point so update the occurence of cnt[i] to avoid O(n*n) time complexity\\n                        cnt[i]=k;\\n                        cnt[str]=0;\\n                        ans.push_back(str);\\n                        break;\\n                    }\\n                    // if filename is already in use then try next value of k\\n                    cnt[i]++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1899412,
                "title": "super-clean-super-easy-super-fast-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n\\n        std::unordered_map<std::string, int> table;\\n        vector<std::string> result;\\n        result.reserve(names.size());\\n        \\n        for (std::string& name : names) {\\n            \\n            std::string crux = name;\\n            int i = table.count(name) ? table[name] : 0;\\n            \\n            while (table.count(name)) {\\n                name = crux + \"(\" + std::to_string(i) + \")\";\\n                i++;\\n            }\\n            \\n            table[crux] = i;\\n            table[name]++;\\n            result.push_back(name);\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n\\n        std::unordered_map<std::string, int> table;\\n        vector<std::string> result;\\n        result.reserve(names.size());\\n        \\n        for (std::string& name : names) {\\n            \\n            std::string crux = name;\\n            int i = table.count(name) ? table[name] : 0;\\n            \\n            while (table.count(name)) {\\n                name = crux + \"(\" + std::to_string(i) + \")\";\\n                i++;\\n            }\\n            \\n            table[crux] = i;\\n            table[name]++;\\n            result.push_back(name);\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1800341,
                "title": "c-hashing-map",
                "content": "class Solution {\\npublic:\\n    \\n\\tvector<string> getFolderNames(vector<string>& s) {\\n        int n = s.size();\\n        unordered_map<string,int>m;\\n        int c;\\n        for(int i=0;i<n;i++){\\n            if(m.find(s[i])==m.end()){\\n                m[s[i]] = 1;\\n            }else{\\n                string t = s[i];\\n                c = m[s[i]]++;\\n                while(m.find(t)!=m.end()){\\n                    t = (s[i]+\"(\"+to_string(c)+\")\");\\n                    c++;\\n                }\\n                s[i] = t;\\n                m[s[i]] = 1;\\n            }\\n        }\\n        return s;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    \\n\\tvector<string> getFolderNames(vector<string>& s) {\\n        int n = s.size();\\n        unordered_map<string,int>m;\\n        int c;\\n        for(int i=0;i<n;i++){\\n            if(m.find(s[i])==m.end()){\\n                m[s[i]] = 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1634502,
                "title": "concise-python-java-o-n",
                "content": "This approach runs in O(NC) time and O(NC) space, where N is the number of words and C is the amount of characters in the longest word\\nFor each word, we have 2 cases\\n1. We haven\\'t seen it before. In that case, set map[word] = 1, verify we haven\\'t seen word(1) before. If we have, set map[word] = 2 and repeat\\n1. We have seen it before. Set map[word]++, verify we haven\\'t seen word(map[word]) before. If we have, map[word]++ and repeat\\n\\n**Python**\\n```\\ndef getFolderNames(self, names: List[str]) -> List[str]:\\n\\tindexMap = {}\\n\\tres = []\\n\\tfor word in names:\\n\\t\\tcurrentWord = word   \\n\\t\\twhile currentWord in indexMap:\\n\\t\\t\\tindexMap[word] += 1\\n\\t\\t\\tcurrentWord = f\"{word}({indexMap[word]})\"\\n\\t\\tindexMap[currentWord] = 0\\n\\t\\tres.append(currentWord)\\n\\treturn res\\n```\\n**Java**\\n```\\npublic String[] getFolderNames(String[] names) {\\n\\tMap<String, Integer> indexMap = new HashMap<>();\\n\\tString[] res = new String[names.length];\\n\\tfor (int i = 0; i < names.length; i++) {\\n\\t\\tString currentWord = names[i];\\n\\t\\twhile (indexMap.containsKey(currentWord)) {\\n\\t\\t\\tindexMap.put(names[i], indexMap.getOrDefault(names[i], 0) + 1);\\n\\t\\t\\tcurrentWord = names[i] + \"(\" + indexMap.get(names[i]) + \")\";\\n\\t\\t}\\n\\t\\tindexMap.put(currentWord, 0);\\n\\t\\tres[i] = currentWord;\\n\\t}\\n\\treturn res;\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\ndef getFolderNames(self, names: List[str]) -> List[str]:\\n\\tindexMap = {}\\n\\tres = []\\n\\tfor word in names:\\n\\t\\tcurrentWord = word   \\n\\t\\twhile currentWord in indexMap:\\n\\t\\t\\tindexMap[word] += 1\\n\\t\\t\\tcurrentWord = f\"{word}({indexMap[word]})\"\\n\\t\\tindexMap[currentWord] = 0\\n\\t\\tres.append(currentWord)\\n\\treturn res\\n```\n```\\npublic String[] getFolderNames(String[] names) {\\n\\tMap<String, Integer> indexMap = new HashMap<>();\\n\\tString[] res = new String[names.length];\\n\\tfor (int i = 0; i < names.length; i++) {\\n\\t\\tString currentWord = names[i];\\n\\t\\twhile (indexMap.containsKey(currentWord)) {\\n\\t\\t\\tindexMap.put(names[i], indexMap.getOrDefault(names[i], 0) + 1);\\n\\t\\t\\tcurrentWord = names[i] + \"(\" + indexMap.get(names[i]) + \")\";\\n\\t\\t}\\n\\t\\tindexMap.put(currentWord, 0);\\n\\t\\tres[i] = currentWord;\\n\\t}\\n\\treturn res;\\n    }\\n\\t```",
                "codeTag": "Python3"
            },
            {
                "id": 1435236,
                "title": "java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        String []ans= new String[names.length];\\n        Map<String,Integer>mp= new HashMap<>();\\n\\t\\t\\n        for(int i=0;i<names.length;i++) {\\n\\t\\t\\n            if(mp.containsKey(names[i])){\\n                Integer idx = mp.get(names[i]);\\n                StringBuilder sb = new StringBuilder(names[i]);\\n                sb.append(\\'(\\'); sb.append(idx); sb.append(\\')\\');\\n\\t\\t\\t\\t\\n                while(mp.containsKey(sb.toString())){\\n                    idx++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\'); sb.append(idx); sb.append(\\')\\');\\n                }\\n\\t\\t\\t\\t\\n                ans[i]=sb.toString();\\n                mp.put(sb.toString(),1);\\n                mp.put(names[i],idx+1);\\n            }\\n\\t\\t\\t\\n            else{\\n                ans[i]=names[i];\\n                mp.put(names[i],1);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        String []ans= new String[names.length];\\n        Map<String,Integer>mp= new HashMap<>();\\n\\t\\t\\n        for(int i=0;i<names.length;i++) {\\n\\t\\t\\n            if(mp.containsKey(names[i])){\\n                Integer idx = mp.get(names[i]);\\n                StringBuilder sb = new StringBuilder(names[i]);\\n                sb.append(\\'(\\'); sb.append(idx); sb.append(\\')\\');\\n\\t\\t\\t\\t\\n                while(mp.containsKey(sb.toString())){\\n                    idx++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\'); sb.append(idx); sb.append(\\')\\');\\n                }\\n\\t\\t\\t\\t\\n                ans[i]=sb.toString();\\n                mp.put(sb.toString(),1);\\n                mp.put(names[i],idx+1);\\n            }\\n\\t\\t\\t\\n            else{\\n                ans[i]=names[i];\\n                mp.put(names[i],1);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1360218,
                "title": "straightforward-java-solution",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> hmap = new HashMap<>();\\n        String[] output = new String[names.length];\\n        int i = 0;\\n        \\n        for(String str : names) {\\n            if(!hmap.containsKey(str)) {\\n                hmap.put(str, 0) ;\\n                output[i] = str;\\n            } else {\\n                int val = hmap.get(str);\\n                val = val + 1;\\n                String newStr = str + \"(\" + val + \")\"; \\n                while(hmap.containsKey(newStr)) {\\n                    val++;\\n                    newStr = str + \"(\" + val + \")\";\\n                }\\n                hmap.put(str, val);\\n                hmap.put(newStr, 0);\\n                output[i] = newStr;\\n            }\\n            i++;\\n        }\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> hmap = new HashMap<>();\\n        String[] output = new String[names.length];\\n        int i = 0;\\n        \\n        for(String str : names) {\\n            if(!hmap.containsKey(str)) {\\n                hmap.put(str, 0) ;\\n                output[i] = str;\\n            } else {\\n                int val = hmap.get(str);\\n                val = val + 1;\\n                String newStr = str + \"(\" + val + \")\"; \\n                while(hmap.containsKey(newStr)) {\\n                    val++;\\n                    newStr = str + \"(\" + val + \")\";\\n                }\\n                hmap.put(str, val);\\n                hmap.put(newStr, 0);\\n                output[i] = newStr;\\n            }\\n            i++;\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1282179,
                "title": "python",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n\\n        dic = collections.defaultdict(int)\\n        ret = []\\n        for i in names:\\n            if i in dic:\\n\\n                dic[i]+=1\\n                key = i+\"(\"+str(dic[i]-1)+\")\"\\n                \\n                while key in dic:\\n                    # saving total number of same name folders\\n                    dic[i]+=1\\n                    # check if this new number folderName(x) is in dic, \\n                    # if it is , need to increase the total same folder count by 1 in next itr\\n                    key = i+\"(\"+str(dic[i]-1)+\")\"\\n                # curr key is now not in the dic, set it to count 1\\n                # this is for the case of name(1) , then create anthoer name(1), second name(1) becomes name(1)(1)\\n                dic[key] = 1\\n                ret.append(i+\"(\"+str(dic[i]-1)+\")\")\\n            else:\\n                dic[i] = 1\\n                ret.append(i)\\n        return ret\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n\\n        dic = collections.defaultdict(int)\\n        ret = []\\n        for i in names:\\n            if i in dic:\\n\\n                dic[i]+=1\\n                key = i+\"(\"+str(dic[i]-1)+\")\"\\n                \\n                while key in dic:\\n                    # saving total number of same name folders\\n                    dic[i]+=1\\n                    # check if this new number folderName(x) is in dic, \\n                    # if it is , need to increase the total same folder count by 1 in next itr\\n                    key = i+\"(\"+str(dic[i]-1)+\")\"\\n                # curr key is now not in the dic, set it to count 1\\n                # this is for the case of name(1) , then create anthoer name(1), second name(1) becomes name(1)(1)\\n                dic[key] = 1\\n                ret.append(i+\"(\"+str(dic[i]-1)+\")\")\\n            else:\\n                dic[i] = 1\\n                ret.append(i)\\n        return ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1224189,
                "title": "straightforward-8-line-python",
                "content": "**Complexity:**\\nTime O(N)  \\nSpace O(N)\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        res = {}\\n        for i in names:\\n            candidate = i\\n            while candidate in res:\\n                candidate = i+f\\'({res[i]})\\'\\n                res[i] += 1\\n            res[candidate] = 1\\n        return list(res.keys())\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        res = {}\\n        for i in names:\\n            candidate = i\\n            while candidate in res:\\n                candidate = i+f\\'({res[i]})\\'\\n                res[i] += 1\\n            res[candidate] = 1\\n        return list(res.keys())\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1173242,
                "title": "java-hashmap",
                "content": "```\\n public static String[] getFolderNames(String[] names) {\\n\\n        HashMap<String, Integer> hm = new HashMap<>();\\n\\n        for (int i  = 0; i < names.length; i++) {\\n            String str  = names[i];\\n            if(hm.containsKey(str)){\\n                int count = hm.get(str);\\n                while (true) {\\n\\n                    String temp = str + \"(\" + count + \")\";\\n                    if (hm.containsKey(temp) == false) {\\n                        hm.put(str, count+1);\\n                        hm.put(temp,1);\\n                        names[i] = temp;\\n                        break;\\n                    }\\n                    else{\\n                        count++;\\n                    }\\n                }\\n            }\\n            else{\\n                hm.put(str, 1);\\n            }\\n        }\\n        return names;\\n\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n public static String[] getFolderNames(String[] names) {\\n\\n        HashMap<String, Integer> hm = new HashMap<>();\\n\\n        for (int i  = 0; i < names.length; i++) {\\n            String str  = names[i];\\n            if(hm.containsKey(str)){\\n                int count = hm.get(str);\\n                while (true) {\\n\\n                    String temp = str + \"(\" + count + \")\";\\n                    if (hm.containsKey(temp) == false) {\\n                        hm.put(str, count+1);\\n                        hm.put(temp,1);\\n                        names[i] = temp;\\n                        break;\\n                    }\\n                    else{\\n                        count++;\\n                    }\\n                }\\n            }\\n            else{\\n                hm.put(str, 1);\\n            }\\n        }\\n        return names;\\n\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1169954,
                "title": "c-map-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> st;\\n        vector<string> ret;\\n        \\n        ret.reserve(names.size());\\n        \\n        for(auto name : names) {\\n            if(st.count(name) == 0) {\\n                st.insert({name, 1});\\n                ret.emplace_back(move(name));\\n                continue;\\n            }\\n            // try to reuse last number assigned to that string\\n            for(int num = st[name];; ++num) {\\n                auto newName = name + \"(\" + to_string(num) + \")\";\\n                if(st.count(newName) == 0) {\\n                    st.insert({newName, 1});\\n                    st[name] = num;\\n                    ret.emplace_back(move(newName));\\n                    break;\\n                }\\n            }\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> st;\\n        vector<string> ret;\\n        \\n        ret.reserve(names.size());\\n        \\n        for(auto name : names) {\\n            if(st.count(name) == 0) {\\n                st.insert({name, 1});\\n                ret.emplace_back(move(name));\\n                continue;\\n            }\\n            // try to reuse last number assigned to that string\\n            for(int num = st[name];; ++num) {\\n                auto newName = name + \"(\" + to_string(num) + \")\";\\n                if(st.count(newName) == 0) {\\n                    st.insert({newName, 1});\\n                    st[name] = num;\\n                    ret.emplace_back(move(newName));\\n                    break;\\n                }\\n            }\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 967376,
                "title": "java-string-vs-arraylist-or-top-4-vs-tle",
                "content": "Nothing new here but I had struggled a lot.. this problem seems easy but that +200KB test case wasn\\'t, so I\\'d like to post about the speed difference between both codes.\\n* The use of StringBuilder makes no difference.\\n* On Eclipse array solution is ~60% faster, list.size is known so I suppose no time is wasted creating new bigger lists while calling list.add().\\n* You can\\'t have a method bigger than 65535 bytes. which is also the max size of a String.\\n\\n```\\nclass Solution {\\n            \\n    HashMap<String, Integer> count = new HashMap<String, Integer>();\\n\\t// List<String> list;\\n    \\n    public String[] getFolderNames(String[] names) {\\n        String[] toReturn = new String[names.length];   //list = new ArrayList<>(names.length);\\n        \\n        for(int i = 0; i< names.length; i++){\\n            if(count.get(names[i]) == null){\\n                toReturn[i] = names[i];                  //list.add(names[i]);\\n                count.put(names[i],0);\\n            }else{\\n                toReturn[i] = makeUnique(names[i],count.get(names[i]) ); //list.add(...)\\n            }\\n        }\\n        return toReturn;                                  //return list.toArray(new String[list.size()]);\\n    }    \\n    private String makeUnique(String name, int k){\\n        String sb = name+ \\'(\\' + (++k) + \\')\\';\\n        if(count.get(sb) != null){\\n             return makeUnique(name,k);\\n        }else{\\n            count.put(sb.toString(),0);\\n            count.put(name,k);\\n            return sb;\\n        }    \\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n            \\n    HashMap<String, Integer> count = new HashMap<String, Integer>();\\n\\t// List<String> list;\\n    \\n    public String[] getFolderNames(String[] names) {\\n        String[] toReturn = new String[names.length];   //list = new ArrayList<>(names.length);\\n        \\n        for(int i = 0; i< names.length; i++){\\n            if(count.get(names[i]) == null){\\n                toReturn[i] = names[i];                  //list.add(names[i]);\\n                count.put(names[i],0);\\n            }else{\\n                toReturn[i] = makeUnique(names[i],count.get(names[i]) ); //list.add(...)\\n            }\\n        }\\n        return toReturn;                                  //return list.toArray(new String[list.size()]);\\n    }    \\n    private String makeUnique(String name, int k){\\n        String sb = name+ \\'(\\' + (++k) + \\')\\';\\n        if(count.get(sb) != null){\\n             return makeUnique(name,k);\\n        }else{\\n            count.put(sb.toString(),0);\\n            count.put(name,k);\\n            return sb;\\n        }    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 954429,
                "title": "python-easy-and-simple-solution-brute-force-with-dict",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        d={}\\n        for i,j in enumerate(names):\\n            d[j]=d.get(j,0)+1\\n            if d[j]>1:\\n                while names[i]+\"(\"+str(d[j]-1)+\")\" in d:\\n                    d[j]+=1\\n                names[i]=names[i]+\"(\"+str(d[j]-1)+\")\"\\n                d[names[i]]=1\\n        return names\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        d={}\\n        for i,j in enumerate(names):\\n            d[j]=d.get(j,0)+1\\n            if d[j]>1:\\n                while names[i]+\"(\"+str(d[j]-1)+\")\" in d:\\n                    d[j]+=1\\n                names[i]=names[i]+\"(\"+str(d[j]-1)+\")\"\\n                d[names[i]]=1\\n        return names\\n```",
                "codeTag": "Java"
            },
            {
                "id": 881288,
                "title": "swift-solution-fast-than-100",
                "content": "620 ms, 22.5MB\\n```\\nclass Solution {\\n    func getFolderNames(_ names: [String]) -> [String] {\\n        var res: [String] = []\\n        var dict: [String: Int] = [:]\\n\\n        for s in names {\\n            if dict[s] == nil {\\n                dict[s] = 1\\n                res.append(s)\\n            } else {        \\n                for i in dict[s]!...res.count {\\n                    if dict[\"\\\\(s)(\\\\(i))\"] == nil {\\n                        dict[\"\\\\(s)(\\\\(i))\"] = 1\\n                        res.append(\"\\\\(s)(\\\\(i))\")\\n                        dict[s] = i\\n                        break\\n                    }\\n                }\\n            }\\n        }\\n        return res\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func getFolderNames(_ names: [String]) -> [String] {\\n        var res: [String] = []\\n        var dict: [String: Int] = [:]\\n\\n        for s in names {\\n            if dict[s] == nil {\\n                dict[s] = 1\\n                res.append(s)\\n            } else {        \\n                for i in dict[s]!...res.count {\\n                    if dict[\"\\\\(s)(\\\\(i))\"] == nil {\\n                        dict[\"\\\\(s)(\\\\(i))\"] = 1\\n                        res.append(\"\\\\(s)(\\\\(i))\")\\n                        dict[s] = i\\n                        break\\n                    }\\n                }\\n            }\\n        }\\n        return res\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 877394,
                "title": "python3-solution-faster-than-99",
                "content": "Basically, the idea is to keep track of  how many times a name has already appeared. If we find a name that has appeared k > 0 times, then we assing the name \"name(k)\" to that file, and check wether that name is actually available or not. If it\\'s not, we look for the closest k value that hasn\\'t such that the name \"name(k)\" hasn\\'t been seen before. Once we find it, that will be the definitive name, and therefore we record that \"name(k)\" has been seen once. Also, we record that the original name has been seen _k_ times (so that if we find again, we can try with the name \"name(k)\" with a good chance that it will be unique). \\n\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        result = []\\n        \\n        name_count = {}\\n\\n        for name in names:\\n            k = name_count.get(name,0)\\n            \\n            fs_name = name\\n            \\n            if k > 0:\\n                \\n                while fs_name in name_count:\\n                    fs_name = f\"{name}({k})\"\\n                    k += 1\\n    \\n                name_count[fs_name] = 1\\n                name_count[name] = k\\n            else:\\n                name_count[name] = 1\\n                \\n            result.append(fs_name)\\n            \\n        return result\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        result = []\\n        \\n        name_count = {}\\n\\n        for name in names:\\n            k = name_count.get(name,0)\\n            \\n            fs_name = name\\n            \\n            if k > 0:\\n                \\n                while fs_name in name_count:\\n                    fs_name = f\"{name}({k})\"\\n                    k += 1\\n    \\n                name_count[fs_name] = 1\\n                name_count[name] = k\\n            else:\\n                name_count[name] = 1\\n                \\n            result.append(fs_name)\\n            \\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 822667,
                "title": "java-99-10-lines-hashmap",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> mp = new HashMap();\\n        String[] ans = new String[names.length];\\n        for(int i=0;i<names.length;i++) {\\n            String base = names[i], key = base;\\n            int j=mp.getOrDefault(key,1);\\n            while(mp.containsKey(key))\\n                key = base+\"(\"+(j++)+\")\";\\n            mp.put(base,j);\\n            mp.put(key,1);\\n            ans[i] = key;\\n        }\\n     return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> mp = new HashMap();\\n        String[] ans = new String[names.length];\\n        for(int i=0;i<names.length;i++) {\\n            String base = names[i], key = base;\\n            int j=mp.getOrDefault(key,1);\\n            while(mp.containsKey(key))\\n                key = base+\"(\"+(j++)+\")\";\\n            mp.put(base,j);\\n            mp.put(key,1);\\n            ans[i] = key;\\n        }\\n     return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 744184,
                "title": "beginner-friendly-easy-to-understand-with-dry-running-o-n-75-time-100-mem",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        cache={}\\n        ans=[]\\n        for s in names:\\n            if s not in cache:\\n                #seen.add(s)\\n                cache[s]=1\\n                ans.append(s)\\n            else:\\n                i=cache[s]\\n                while s+\"(\"+str(i)+\")\" in cache:\\n                    i+=1\\n                string=s+\"(\"+str(i)+\")\"\\n                #.add(string)\\n                ans.append(string)\\n                cache[s]=i+1\\n                cache[string]=1\\n        return ans\\n                    \\n                \\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        cache={}\\n        ans=[]\\n        for s in names:\\n            if s not in cache:\\n                #seen.add(s)\\n                cache[s]=1\\n                ans.append(s)\\n            else:\\n                i=cache[s]\\n                while s+\"(\"+str(i)+\")\" in cache:\\n                    i+=1\\n                string=s+\"(\"+str(i)+\")\"\\n                #.add(string)\\n                ans.append(string)\\n                cache[s]=i+1\\n                cache[string]=1\\n        return ans\\n                    \\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 718108,
                "title": "java-solution-using-hashmap-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        int n = names.length;\\n        Map<String, Integer> map = new HashMap<>();\\n        String[] res = new String[n];\\n        for (int i = 0; i < n; i++) {\\n            String s = names[i];\\n            if (map.containsKey(s)) {\\n                int index = map.get(s);\\n                while (map.containsKey(s + \"(\" + index + \")\")) {\\n                    index++;\\n                }\\n                map.put(s + \"(\" + index + \")\", 1);\\n                map.put(s, index + 1);\\n                res[i] = s + \"(\" + index + \")\";\\n            } else {\\n                map.put(s, 1);\\n                res[i] = s;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        int n = names.length;\\n        Map<String, Integer> map = new HashMap<>();\\n        String[] res = new String[n];\\n        for (int i = 0; i < n; i++) {\\n            String s = names[i];\\n            if (map.containsKey(s)) {\\n                int index = map.get(s);\\n                while (map.containsKey(s + \"(\" + index + \")\")) {\\n                    index++;\\n                }\\n                map.put(s + \"(\" + index + \")\", 1);\\n                map.put(s, index + 1);\\n                res[i] = s + \"(\" + index + \")\";\\n            } else {\\n                map.put(s, 1);\\n                res[i] = s;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 704595,
                "title": "very-simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> map;\\n        vector<string> out;\\n   \\n        \\n        for(int i=0; i<names.size(); i++){\\n            if(map.count(names[i])==0){\\n                map[names[i]]=0;\\n                out.push_back(names[i]);\\n            } else{\\n                map[names[i]]++;\\n\\n                int k = map[names[i]];\\n               \\n                string name = names[i]+\"(\"+to_string(k)+\")\";\\n               \\n                while(map.count(name)!=0){\\n                    k++;\\n\\n                    name = names[i]+\"(\"+to_string(k)+\")\";\\n                }\\n                map[name]=0;\\n                out.push_back(name);\\n            }\\n        }\\n    \\n        return out;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> map;\\n        vector<string> out;\\n   \\n        \\n        for(int i=0; i<names.size(); i++){\\n            if(map.count(names[i])==0){\\n                map[names[i]]=0;\\n                out.push_back(names[i]);\\n            } else{\\n                map[names[i]]++;\\n\\n                int k = map[names[i]];\\n               \\n                string name = names[i]+\"(\"+to_string(k)+\")\";\\n               \\n                while(map.count(name)!=0){\\n                    k++;\\n\\n                    name = names[i]+\"(\"+to_string(k)+\")\";\\n                }\\n                map[name]=0;\\n                out.push_back(name);\\n            }\\n        }\\n    \\n        return out;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 702044,
                "title": "javascript-and-c-solutions",
                "content": "**Synopsis:**\\n\\nNaive solution which generates candidates.  While a candidate has been `seen`, increment the and append the `(k)` count, then push the first unseen candidate onto the answer and mark that candidate as `seen`.\\n\\n**Note:** This solution is AC in Javascript, but TLE in C++\\n\\n*Javascript*\\n```\\nlet getFolderNames = (A, seen = new Set(), ans = []) => {\\n    for (let s of A) {\\n        let cand = s,\\n            cnt = 0;\\n        while (seen.has(cand))\\n            cand = `${s}(${++cnt})`;\\n        ans.push(cand);\\n        seen.add(cand);\\n    }\\n    return ans;\\n};\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VS = vector<string>;\\n    using Set = unordered_set<string>;\\n    VS getFolderNames(VS& A, Set seen = {}, VS ans = {}) {\\n        for (auto& s: A) {\\n            auto cand{ s };\\n            auto cnt{ 0 };\\n            while (seen.find(cand) != seen.end())\\n                cand = s + \"(\" + to_string(++cnt) + \")\";\\n            ans.push_back(cand);\\n            seen.insert(cand);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nlet getFolderNames = (A, seen = new Set(), ans = []) => {\\n    for (let s of A) {\\n        let cand = s,\\n            cnt = 0;\\n        while (seen.has(cand))\\n            cand = `${s}(${++cnt})`;\\n        ans.push(cand);\\n        seen.add(cand);\\n    }\\n    return ans;\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    using VS = vector<string>;\\n    using Set = unordered_set<string>;\\n    VS getFolderNames(VS& A, Set seen = {}, VS ans = {}) {\\n        for (auto& s: A) {\\n            auto cand{ s };\\n            auto cnt{ 0 };\\n            while (seen.find(cand) != seen.end())\\n                cand = s + \"(\" + to_string(++cnt) + \")\";\\n            ans.push_back(cand);\\n            seen.insert(cand);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 700423,
                "title": "c-solution-with-explanation",
                "content": "1. Main idea is to keep track which folder name we are taking now and how many times we are taking till this index.\\n2. Therefore we will use C++ map for storing how many times we are taking this name till now.\\n\\n3. If we didn\\'t write a folder with the i-th name before, then we can push this name to the answer array (name vector -v in my code). Then increase its usage by 1 time.\\n\\n4. Else if we used this name before then, we will add the last usage value of this name in the last. Then increase the value of the name by 1 in our map. after adding the value, we get a new name. but also we have to check if this new name is also used or not. if it is already used before this index, we have to find a unique name through a loop. (while loop in my code).\\n\\n**Important :**\\n\\n5. Remember when we add a usage value of a name in the last of this name, we get a new name as well as a new string. so each time we must push this new name in the map with a new usage value also.  \\n\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        map<string,int>mp;\\n        vector<string>v;\\n        for(int i=0;i<names.size();i++)\\n        {\\n            if(mp.find(names[i])==mp.end())\\n            {\\n                v.push_back(names[i]);\\n                mp[names[i]]++;\\n            }\\n            else\\n                \\n            {\\n                string pp = names[i];\\n                pp+=\\'(\\';\\n                pp+=to_string(mp[names[i]]);\\n                pp+=\\')\\';\\n                mp[names[i]]++;\\n                while(mp.find(pp)!=mp.end())\\n                {\\n                    pp = names[i];\\n                    pp+=\\'(\\';\\n                    pp+=to_string(mp[names[i]]);\\n                    pp+=\\')\\';\\n                    mp[names[i]]++;\\n                }\\n                v.push_back(pp);\\n                mp[pp]++;\\n            }\\n        }\\n        \\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        map<string,int>mp;\\n        vector<string>v;\\n        for(int i=0;i<names.size();i++)\\n        {\\n            if(mp.find(names[i])==mp.end())\\n            {\\n                v.push_back(names[i]);\\n                mp[names[i]]++;\\n            }\\n            else\\n                \\n            {\\n                string pp = names[i];\\n                pp+=\\'(\\';\\n                pp+=to_string(mp[names[i]]);\\n                pp+=\\')\\';\\n                mp[names[i]]++;\\n                while(mp.find(pp)!=mp.end())\\n                {\\n                    pp = names[i];\\n                    pp+=\\'(\\';\\n                    pp+=to_string(mp[names[i]]);\\n                    pp+=\\')\\';\\n                    mp[names[i]]++;\\n                }\\n                v.push_back(pp);\\n                mp[pp]++;\\n            }\\n        }\\n        \\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 700043,
                "title": "python-accepted-solution-with-ordereddict-and-defaultdict",
                "content": "The idea is the same as in other solutions. I just use defaultdict and OrderedDict.\\nAs the LC judge just iterates through the result I can return the result as OrderedDict.\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        cnt, res = defaultdict(lambda: 1), OrderedDict()\\n        for name in names:\\n            if name not in res:\\n                res[name] = True\\n            else:\\n                while name + \\'({})\\'.format(cnt[name]) in res:\\n                    cnt[name] += 1\\n                res[name + \\'({})\\'.format(cnt[name])] = True\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        cnt, res = defaultdict(lambda: 1), OrderedDict()\\n        for name in names:\\n            if name not in res:\\n                res[name] = True\\n            else:\\n                while name + \\'({})\\'.format(cnt[name]) in res:\\n                    cnt[name] += 1\\n                res[name + \\'({})\\'.format(cnt[name])] = True\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699713,
                "title": "c-simple-solution-with-comments-beats-95-time-100-space",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> um;\\n        vector<string> result;\\n        \\n        for (auto name : names) {\\n            if (!um.count(name)) {\\n                // for a new name, next possible k value is 1\\n                um[name] = 1; \\n                result.push_back(name);\\n                continue;\\n            }\\n            \\n            // We reach here when current name is not unique\\n            \\n            string temp = name + \"(\";\\n            string candidate = \"\";\\n            \\n            // get next possible k value for current name\\n            int k = um[name]; \\n            \\n            while (true) {\\n                candidate = temp + to_string(k) + \")\";\\n                if (!um.count(candidate)) {\\n                    // we have found a valid candidate. Break out of the loop\\n                    break;\\n                }\\n                // current candidate name already exits. Increment k and try again in next iteraton\\n                k++;\\n            }\\n            \\n            // set the next possible k value for current name\\n            um[name] = k+1;\\n            \\n            // add the new candidate to hash map and set its k to 1\\n            um[candidate] = 1;\\n            \\n            result.push_back(candidate);\\n        }\\n        \\n        return result;\\n    }\\n};\\n```\\n**Concise:**\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> um;\\n        vector<string> result;\\n        \\n        for (auto name : names) {\\n            if (!um.count(name)) {\\n                um[name] = 1; \\n                result.push_back(name);\\n                continue;\\n            }\\n            \\n            string temp = name + \"(\";\\n            int k = um[name]; \\n            string candidate = temp + to_string(k) + \")\";          \\n            \\n            while (um.count(candidate))\\n                candidate = temp + to_string(++k) + \")\";\\n            \\n            um[name] = k+1;\\n            um[candidate] = 1;\\n            result.push_back(candidate);\\n        }\\n\\t\\t\\n        return result;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> um;\\n        vector<string> result;\\n        \\n        for (auto name : names) {\\n            if (!um.count(name)) {\\n                // for a new name, next possible k value is 1\\n                um[name] = 1; \\n                result.push_back(name);\\n                continue;\\n            }\\n            \\n            // We reach here when current name is not unique\\n            \\n            string temp = name + \"(\";\\n            string candidate = \"\";\\n            \\n            // get next possible k value for current name\\n            int k = um[name]; \\n            \\n            while (true) {\\n                candidate = temp + to_string(k) + \")\";\\n                if (!um.count(candidate)) {\\n                    // we have found a valid candidate. Break out of the loop\\n                    break;\\n                }\\n                // current candidate name already exits. Increment k and try again in next iteraton\\n                k++;\\n            }\\n            \\n            // set the next possible k value for current name\\n            um[name] = k+1;\\n            \\n            // add the new candidate to hash map and set its k to 1\\n            um[candidate] = 1;\\n            \\n            result.push_back(candidate);\\n        }\\n        \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699234,
                "title": "accepted-java-solution-hashmap",
                "content": "This question was pretty frustating because of the poor description, but pretty smart question in terms of working on time complexity.\\n\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\\n        for(int i = 0; i < names.length; i++) {\\n            if(map.containsKey(names[i])) {\\n                int temp = map.get(names[i]);\\n                if(temp == 0) temp += 1;\\n                while(map.containsKey(names[i] + \"(\"+ temp +\")\")) {\\n                    temp++;\\n                }\\n                map.put(names[i], temp);\\n                map.put(names[i] + \"(\" +temp +\")\", 0);\\n                names[i] = names[i] + \"(\"+ (temp) +\")\";\\n            } else {\\n                map.put(names[i], 0);\\n            }\\n        }\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\\n        for(int i = 0; i < names.length; i++) {\\n            if(map.containsKey(names[i])) {\\n                int temp = map.get(names[i]);\\n                if(temp == 0) temp += 1;\\n                while(map.containsKey(names[i] + \"(\"+ temp +\")\")) {\\n                    temp++;\\n                }\\n                map.put(names[i], temp);\\n                map.put(names[i] + \"(\" +temp +\")\", 0);\\n                names[i] = names[i] + \"(\"+ (temp) +\")\";\\n            } else {\\n                map.put(names[i], 0);\\n            }\\n        }\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 698292,
                "title": "one-map-javascript-solution-160-ms",
                "content": "```\\nvar getFolderNames = function(names) {\\n    const map = new Map();\\n    let count;\\n    let key;\\n    \\n    for (let i = 0; i < names.length; ++i) {\\n        count = map.get(names[i]);\\n        if (count === undefined) {\\n            map.set(names[i], 0);\\n        } else {\\n            while (true) {\\n                key = `${names[i]}(${++count})`;\\n                if (map.get(key) === undefined) {\\n                    map.set(names[i], count);\\n                    map.set(key, 0);\\n                    names[i] = key;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n    \\n    return names;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar getFolderNames = function(names) {\\n    const map = new Map();\\n    let count;\\n    let key;\\n    \\n    for (let i = 0; i < names.length; ++i) {\\n        count = map.get(names[i]);\\n        if (count === undefined) {\\n            map.set(names[i], 0);\\n        } else {\\n            while (true) {\\n                key = `${names[i]}(${++count})`;\\n                if (map.get(key) === undefined) {\\n                    map.set(names[i], count);\\n                    map.set(key, 0);\\n                    names[i] = key;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n    \\n    return names;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 698104,
                "title": "simple-java-hashmap-solution",
                "content": "class Solution {\\n    public String[] getFolderNames(String[] names) {\\n     String[] output = new String[names.length];\\n    List<String> list = new ArrayList<>();\\n        Map<String,Integer> map = new HashMap<>();        \\n        for(String s : names)\\n        {\\n            map.put(s,map.getOrDefault(s,-1)+1);   \\n            \\n            outer :{\\n            if(map.get(s)!=0)\\n            {\\n                StringBuilder sb = new StringBuilder(s);\\n                sb.append(\"(\");\\n                int count = map.get(s);\\n                sb.append(map.get(s));\\n                sb.append(\")\");\\n                String fileName = sb.toString();                \\n                while(map.containsKey(fileName)){\\n                    String bracket = \"(\"+count+\")\";\\n                    count=count+1;\\n                    int index = fileName.lastIndexOf(\"(\");\\n                    fileName = fileName.substring(0,index+1)+count+\")\";\\n                }\\n                map.put(fileName,map.getOrDefault(fileName,-1)+1);\\n                list.add(fileName);\\n            }\\n            else\\n                list.add(s);           \\n                   }\\n        }\\n        for(int i=0;i<list.size();i++)\\n                output[i]=list.get(i);\\n        return output;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String[] getFolderNames(String[] names) {\\n     String[] output = new String[names.length];\\n    List<String> list = new ArrayList<>();\\n        Map<String,Integer> map = new HashMap<>();        \\n        for(String s : names)\\n        {\\n            map.put(s,map.getOrDefault(s,-1)+1);   \\n            \\n            outer :{\\n            if(map.get(s)!=0)\\n            {\\n                StringBuilder sb = new StringBuilder(s);\\n                sb.append(\"(\");\\n                int count = map.get(s);\\n                sb.append(map.get(s));\\n                sb.append(\")\");\\n                String fileName = sb.toString();                \\n                while(map.containsKey(fileName)){\\n                    String bracket = \"(\"+count+\")\";\\n                    count=count+1;\\n                    int index = fileName.lastIndexOf(\"(\");\\n                    fileName = fileName.substring(0,index+1)+count+\")\";\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 697915,
                "title": "java-short-map-solution",
                "content": "Time Complexity O(N)\\n```\\n    public String[] getFolderNames(String[] names) {\\n        int n = names.length;\\n        Map<String, Integer> cnt = new HashMap();\\n        String[] res = new String[n];\\n        for (int i = 0; i < n; i++) {\\n            String s = names[i];\\n            if (!cnt.containsKey(s)) {\\n                cnt.put(s, 1);\\n                res[i] = s;\\n            } else {\\n                int c = cnt.get(s);\\n                String new_s = s + \"(\" + c + \")\";\\n                while (cnt.containsKey(new_s)) {\\n                    new_s = s + \"(\" + (++c) + \")\";\\n                }\\n                res[i] = new_s;\\n                cnt.put(new_s, 1);\\n                cnt.put(s, cnt.get(s) + 1);\\n            }\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "Time Complexity O(N)\\n```\\n    public String[] getFolderNames(String[] names) {\\n        int n = names.length;\\n        Map<String, Integer> cnt = new HashMap();\\n        String[] res = new String[n];\\n        for (int i = 0; i < n; i++) {\\n            String s = names[i];\\n            if (!cnt.containsKey(s)) {\\n                cnt.put(s, 1);\\n                res[i] = s;\\n            } else {\\n                int c = cnt.get(s);\\n                String new_s = s + \"(\" + c + \")\";\\n                while (cnt.containsKey(new_s)) {\\n                    new_s = s + \"(\" + (++c) + \")\";\\n                }\\n                res[i] = new_s;\\n                cnt.put(new_s, 1);\\n                cnt.put(s, cnt.get(s) + 1);\\n            }\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 697870,
                "title": "java-solution-100-in-time-and-space",
                "content": "```\\npublic String[] getFolderNames(String[] names) {\\n        \\n        int len = names.length;\\n        String res[] = new String[len];\\n        Map<String, Integer> hashmap = new HashMap<String, Integer>();\\n        \\n        for(int i=0; i<len; i++){\\n            \\n            String str = names[i];\\n            if(!hashmap.containsKey(str)){\\n                res[i] = str;\\n                hashmap.put(str, 1);\\n            }else{\\n                int number = hashmap.get(str);\\n                String tempString = str;\\n                while(hashmap.containsKey(tempString)){\\n                    tempString = str + \"(\" + String.valueOf(number) + \")\";\\n                    number++;\\n                }\\n                res[i] = str + \"(\" + String.valueOf(number-1) + \")\";\\n                hashmap.put(str, number);\\n                hashmap.put(res[i], 1);\\n            }\\n            \\n        }\\n        return res;\\n    }\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\npublic String[] getFolderNames(String[] names) {\\n        \\n        int len = names.length;\\n        String res[] = new String[len];\\n        Map<String, Integer> hashmap = new HashMap<String, Integer>();\\n        \\n        for(int i=0; i<len; i++){\\n            \\n            String str = names[i];\\n            if(!hashmap.containsKey(str)){\\n                res[i] = str;\\n                hashmap.put(str, 1);\\n            }else{\\n                int number = hashmap.get(str);\\n                String tempString = str;\\n                while(hashmap.containsKey(tempString)){\\n                    tempString = str + \"(\" + String.valueOf(number) + \")\";\\n                    number++;\\n                }\\n                res[i] = str + \"(\" + String.valueOf(number-1) + \")\";\\n                hashmap.put(str, number);\\n                hashmap.put(res[i], 1);\\n            }\\n            \\n        }\\n        return res;\\n    }\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 697847,
                "title": "cpp-solution",
                "content": "// Runtime: 1088 ms\\n// Memory Usage: 66.2 MB\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        //gta gta gta gta(1) \\n        //gta gta(1) gta(2) gta(1)(1)\\n        unordered_map<string,int> u;\\n        int i;\\n        vector<string> output;\\n        for(i = 0; i < names.size(); i++){\\n            string temp = names[i];\\n            if(u.find(temp) != u.end()){\\n                int count = u[temp];\\n                string suffix = \"(\" + to_string(count) + \")\";\\n                cout<<u[temp+suffix]<<endl;\\n                while(u[temp+suffix] != 0){\\n                    count++;\\n                    suffix = \"(\" + to_string(count) + \")\";\\n                }\\n                output.push_back(temp+suffix);\\n                u[temp+suffix] ++;//gta(1) -> 1\\n                u[temp] = count;//gta -> 2\\n            }else{\\n                output.push_back(temp);\\n                u[temp]++;//gta -> 1\\n            }\\n        }\\n        return output;\\n    }\\n};\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        //gta gta gta gta(1) \\n        //gta gta(1) gta(2) gta(1)(1)\\n        unordered_map<string,int> u;\\n        int i;\\n        vector<string> output;\\n        for(i = 0; i < names.size(); i++){\\n            string temp = names[i];\\n            if(u.find(temp) != u.end()){\\n                int count = u[temp];\\n                string suffix = \"(\" + to_string(count) + \")\";\\n                cout<<u[temp+suffix]<<endl;\\n                while(u[temp+suffix] != 0){\\n                    count++;\\n                    suffix = \"(\" + to_string(count) + \")\";\\n                }",
                "codeTag": "C++"
            },
            {
                "id": 697787,
                "title": "simple-python-dictionary-map",
                "content": "For every name, we increment in the map regardless of (1) (2) etc.\\n\\nThen after we finished our initial addition of (n) to the answer, we do a while loop to check if the answer is in map or not.\\n\\nFinally, don\\'t forget to add our answer to the map / dictionary itself\\n\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        di = {}\\n        for i, b in enumerate(names):\\n            di[b] = di.get(b,0)+1\\n            if(di[b] > 1):\\n                holder = names[i]+\"(\" + str(di[names[i]]-1) + \")\"\\n                cnt = di[names[i]]-1\\n                while holder in di:\\n                    holder = names[i]+\"(\" + str(cnt) + \")\"\\n                    cnt += 1\\n                names[i] = holder\\n                di[holder] = di.get(holder, 0) + 1\\n        return names\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        di = {}\\n        for i, b in enumerate(names):\\n            di[b] = di.get(b,0)+1\\n            if(di[b] > 1):\\n                holder = names[i]+\"(\" + str(di[names[i]]-1) + \")\"\\n                cnt = di[names[i]]-1\\n                while holder in di:\\n                    holder = names[i]+\"(\" + str(cnt) + \")\"\\n                    cnt += 1\\n                names[i] = holder\\n                di[holder] = di.get(holder, 0) + 1\\n        return names\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697765,
                "title": "python-simple-solution",
                "content": "Dictionary m used to keep track of what the number should be after the file. Without it, the solution is also correct, but times out. Set used is to keep track of what filenames are already taken. If a filename appears in used it is added to the dictionary m with the number 1 as the value. If its also already in the dictionary, the value is incremented.  Linear time. \\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        used=set()\\n        m={}\\n        ans=[]\\n        for name in names:\\n            if name not in used:\\n                used.add(name)\\n                ans.append(name)\\n            else:\\n                i=1\\n                if name in m:\\n                    i= m[name]\\n                while name+\"(\"+str(i)+\")\" in used:\\n                    m[name]=i+1\\n                    i+=1\\n                used.add(name+\"(\"+str(i)+\")\")\\n                ans.append(name+\"(\"+str(i)+\")\")\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        used=set()\\n        m={}\\n        ans=[]\\n        for name in names:\\n            if name not in used:\\n                used.add(name)\\n                ans.append(name)\\n            else:\\n                i=1\\n                if name in m:\\n                    i= m[name]\\n                while name+\"(\"+str(i)+\")\" in used:\\n                    m[name]=i+1\\n                    i+=1\\n                used.add(name+\"(\"+str(i)+\")\")\\n                ans.append(name+\"(\"+str(i)+\")\")\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697760,
                "title": "my-python-solution",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        used = collections.defaultdict(bool)\\n        times = collections.defaultdict(int)\\n        res = []\\n        for k,v in enumerate(names):\\n            if not used[v]:\\n                # not used \\n                res.append(v)\\n                used[v] = True\\n                times[v] += 1\\n            else:\\n                start = times[v]\\n                while used[v+\\'(\\'+str(start)+\\')\\']:\\n                    start += 1\\n                res.append(v+\\'(\\'+str(start)+\\')\\')\\n                used[v+\\'(\\'+str(start)+\\')\\'] = True\\n                times[v] = start+1\\n                times[v+\\'(\\'+str(start)+\\')\\'] += 1\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        used = collections.defaultdict(bool)\\n        times = collections.defaultdict(int)\\n        res = []\\n        for k,v in enumerate(names):\\n            if not used[v]:\\n                # not used \\n                res.append(v)\\n                used[v] = True\\n                times[v] += 1\\n            else:\\n                start = times[v]\\n                while used[v+\\'(\\'+str(start)+\\')\\']:\\n                    start += 1\\n                res.append(v+\\'(\\'+str(start)+\\')\\')\\n                used[v+\\'(\\'+str(start)+\\')\\'] = True\\n                times[v] = start+1\\n                times[v+\\'(\\'+str(start)+\\')\\'] += 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697759,
                "title": "why-did-my-solution-tle-while-others-passed-leetcode-admin-please-see",
                "content": "Others in the top 100 with very similar solution passed where as mine TLE\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        ans = []\\n        seen = set()\\n        for name in names:\\n            if name not in seen:\\n                seen.add(name)\\n                ans.append(name)\\n            elif name in seen:\\n                i = 1\\n                curr = name + \\'(\\' + str(i) + \\')\\'\\n                while curr in seen:\\n                    curr = name + \\'(\\'  + str(i) + \\')\\'\\n                    i += 1\\n                seen.add(curr)\\n                ans.append(curr)\\n        return ans\\n\\t\\t```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        ans = []\\n        seen = set()\\n        for name in names:\\n            if name not in seen:\\n                seen.add(name)\\n                ans.append(name)\\n            elif name in seen:\\n                i = 1\\n                curr = name + \\'(\\' + str(i) + \\')\\'\\n                while curr in seen:\\n                    curr = name + \\'(\\'  + str(i) + \\')\\'\\n                    i += 1\\n                seen.add(curr)\\n                ans.append(curr)\\n        return ans\\n\\t\\t```",
                "codeTag": "Java"
            },
            {
                "id": 697742,
                "title": "java-simple-code-using-linkedhashmap",
                "content": "```\\nclass Solution {\\n\\t\\n\\tpublic String[] getFolderNames(String[] names) {\\n\\t\\t\\n\\t\\tMap<String, Integer> map = new LinkedHashMap<String, Integer>();\\n\\t\\tfor(int i=0; i<names.length; i++) {\\n\\t\\t\\tString name = names[i];\\n\\t\\t\\tif(map.containsKey(name)) {\\n\\t\\t\\t\\tint value = map.get(name);\\n\\t\\t\\t\\tString newItem = name + \"(\" + (++value) + \")\";\\n\\t\\t\\t\\twhile(map.containsKey(newItem)) {\\n\\t\\t\\t\\t\\tnewItem = name + \"(\" + (++value) + \")\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmap.put(newItem, 0);\\n\\t\\t\\t\\tmap.replace(name, value);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmap.put(name, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tint i=0;\\n\\t\\tfor(Map.Entry<String, Integer> entry: map.entrySet()) {\\n\\t\\t\\tnames[i++] = entry.getKey();\\n\\t\\t}\\n\\t\\treturn names;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\t\\n\\tpublic String[] getFolderNames(String[] names) {\\n\\t\\t\\n\\t\\tMap<String, Integer> map = new LinkedHashMap<String, Integer>();\\n\\t\\tfor(int i=0; i<names.length; i++) {\\n\\t\\t\\tString name = names[i];\\n\\t\\t\\tif(map.containsKey(name)) {\\n\\t\\t\\t\\tint value = map.get(name);\\n\\t\\t\\t\\tString newItem = name + \"(\" + (++value) + \")\";\\n\\t\\t\\t\\twhile(map.containsKey(newItem)) {\\n\\t\\t\\t\\t\\tnewItem = name + \"(\" + (++value) + \")\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmap.put(newItem, 0);\\n\\t\\t\\t\\tmap.replace(name, value);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmap.put(name, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tint i=0;\\n\\t\\tfor(Map.Entry<String, Integer> entry: map.entrySet()) {\\n\\t\\t\\tnames[i++] = entry.getKey();\\n\\t\\t}\\n\\t\\treturn names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 697726,
                "title": "java-not-perfect-but-my-own-solution-with-hashmap-and-hashset",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        Set<String> set = new LinkedHashSet<>();\\n        StringBuilder sb = new StringBuilder();\\n                \\n        for (String name : names) {\\n            if (!set.contains(name)) {\\n                set.add(name);\\n                map.put(name, 1);\\n            } else {\\n                while(true) {\\n                    sb.setLength(0);\\n                    sb.append(name + \"(\" + map.get(name) + \")\");                    \\n                    if (set.contains(sb.toString())) {                        \\n                        map.put(name, map.get(name) + 1);\\n                    } else {\\n                        set.add(sb.toString());\\n                        map.put(sb.toString(), 1);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        String[] result = new String[set.size()];\\n        set.toArray(result);\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> map = new HashMap<>();\\n        Set<String> set = new LinkedHashSet<>();\\n        StringBuilder sb = new StringBuilder();\\n                \\n        for (String name : names) {\\n            if (!set.contains(name)) {\\n                set.add(name);\\n                map.put(name, 1);\\n            } else {\\n                while(true) {\\n                    sb.setLength(0);\\n                    sb.append(name + \"(\" + map.get(name) + \")\");                    \\n                    if (set.contains(sb.toString())) {                        \\n                        map.put(name, map.get(name) + 1);\\n                    } else {\\n                        set.add(sb.toString());\\n                        map.put(sb.toString(), 1);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        String[] result = new String[set.size()];\\n        set.toArray(result);\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069736,
                "title": "c-solution",
                "content": "The provided code defines a class `Solution` with a member function `getFolderNames` that generates folder names based on a given set of names, ensuring each folder name is unique. The updated code uses a different approach compared to the commented-out section.\\n\\n## Intuition\\n\\nThe code aims to generate unique folder names based on the input names. If a name is already used, it appends a number in parentheses to make it unique.\\n\\n## Approach\\n\\n1. Initialize an unordered map `seen` to keep track of the names and the numbers appended to make them unique.\\n2. Iterate through the input names:\\n   - If the name is not in the `seen` map, add it to the `seen` map and the answer vector.\\n   - If the name is already in the `seen` map, append a number in parentheses to make it unique. Keep incrementing the number until a unique name is generated.\\n3. Return the generated folder names.\\n\\n## Complexity\\n\\n- Time complexity: $$O(n \\\\cdot k)$$, where $$n$$ is the number of names and $$k$$ is the maximum number of times a name needs to be modified to make it unique.\\n- Space complexity: $$O(n)$$, where $$n$$ is the number of names.\\n\\n## Code\\n\\n```cpp\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        // Initialize an unordered map to keep track of seen names and the count of modifications made to each name\\n        unordered_map<string, int> seen;\\n        // Initialize a vector to store the generated folder names\\n        vector<string> answer;\\n\\n        // Iterate through each name in the input vector\\n        for (const string& name : names) {\\n            if (seen.find(name) == seen.end()) {\\n                // If the name is not already in the map, add it to the map and the answer vector\\n                seen[name] = 1;\\n                answer.push_back(name);\\n            } else {\\n                // If the name is already in the map, append a number to make it unique\\n                int k = seen[name];\\n                string temp = name + \"(\" + to_string(k) + \")\";\\n                \\n                // Increment the number until a unique name is generated\\n                while (seen.find(temp) != seen.end()) {\\n                    k++;\\n                    temp = name + \"(\" + to_string(k) + \")\";\\n                }\\n\\n                // Update the count for this name and add the unique name to the map and the answer vector\\n                seen[name] = k;\\n                seen[temp] = 1;\\n                answer.push_back(temp);\\n            }\\n        }\\n\\n        return answer;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        // Initialize an unordered map to keep track of seen names and the count of modifications made to each name\\n        unordered_map<string, int> seen;\\n        // Initialize a vector to store the generated folder names\\n        vector<string> answer;\\n\\n        // Iterate through each name in the input vector\\n        for (const string& name : names) {\\n            if (seen.find(name) == seen.end()) {\\n                // If the name is not already in the map, add it to the map and the answer vector\\n                seen[name] = 1;\\n                answer.push_back(name);\\n            } else {\\n                // If the name is already in the map, append a number to make it unique\\n                int k = seen[name];\\n                string temp = name + \"(\" + to_string(k) + \")\";\\n                \\n                // Increment the number until a unique name is generated\\n                while (seen.find(temp) != seen.end()) {\\n                    k++;\\n                    temp = name + \"(\" + to_string(k) + \")\";\\n                }\\n\\n                // Update the count for this name and add the unique name to the map and the answer vector\\n                seen[name] = k;\\n                seen[temp] = 1;\\n                answer.push_back(temp);\\n            }\\n        }\\n\\n        return answer;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023265,
                "title": "mapping-simple-c-code",
                "content": "# Intuition\\nThe intuition behind this code is to use an unordered map to keep track of how many times each folder name has been encountered. If a folder name is encountered more than once, append a suffix to make it unique. Keep incrementing the suffix until a unique folder name is found.\\n\\n# Approach\\nInitialize an unordered map m to keep track of folder names and their counts and an empty vector ans to store the resulting folder names.\\n\\nIterate through the input names vector.\\n\\nCheck if the current folder name (names[i]) is already in the m map. If it is, then there\\'s a conflict.\\n\\n  a. Initialize k with the count of the current folder name in the map (m[names[i]]).\\n\\n  b. Enter a loop to find a unique folder name: Create a new folder name str by appending the suffix \"(k)\" to the current folder name. Check if str is already in the map (m.find(str) != m.end()). If it\\'s not, it\\'s unique, so break out of the loop. Increment k and update str accordingly.\\n  c. After finding a unique folder name, increment the count for both the original folder name (names[i]) and the unique folder name (str) in the map.\\n\\n  d. Add the unique folder name to the ans vector.\\n\\nIf the current folder name is not already in the map, simply increment its count in the map and add it to the ans vector.\\n\\nReturn the ans vector, which contains the unique folder names.\\n\\n# Complexity\\nTime complexity: The code iterates through the input names vector once, and within the loop, it may perform additional iterations to find unique names. In the worst case, when all folder names are unique, the time complexity is O(n^2), where n is the number of folder names. However, in practice, the actual time complexity is likely to be lower as most folder names won\\'t require multiple iterations.\\n\\nSpace complexity: The code uses an unordered map to store folder names and counts, which can take up to O(n) space. The ans vector also takes O(n) space to store the resulting folder names. Therefore, the space complexity is O(n).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   vector<string> getFolderNames(vector<string>& names) {\\n    unordered_map<string,int>m;\\n    vector<string>ans;\\n    for(int i=0;i<names.size();i++){\\n      if(m.find(names[i])!=m.end())\\n       {\\n          int k = m[names[i]];\\n           string str;\\n          do{\\n           str = names[i]+\\'(\\';\\n          str += to_string(k);\\n              str += \\')\\';\\n            m[names[i]]++;\\n            k++;\\n          }\\n          while(m.find(str)!=m.end());\\n          m[str]++ ;\\n          ans.push_back(str);\\n       }\\n       else\\n       {\\n          m[names[i]]++;\\n          ans.push_back(names[i]);\\n       }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   vector<string> getFolderNames(vector<string>& names) {\\n    unordered_map<string,int>m;\\n    vector<string>ans;\\n    for(int i=0;i<names.size();i++){\\n      if(m.find(names[i])!=m.end())\\n       {\\n          int k = m[names[i]];\\n           string str;\\n          do{\\n           str = names[i]+\\'(\\';\\n          str += to_string(k);\\n              str += \\')\\';\\n            m[names[i]]++;\\n            k++;\\n          }\\n          while(m.find(str)!=m.end());\\n          m[str]++ ;\\n          ans.push_back(str);\\n       }\\n       else\\n       {\\n          m[names[i]]++;\\n          ans.push_back(names[i]);\\n       }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001442,
                "title": "c-runtime-beats-90-136ms-short-one",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> answers;\\n        unordered_map<string, int> existing;\\n\\n        for (const auto& name : names) {\\n            auto approvedName = name;\\n            int postfix = 0;\\n            if (existing.find(name) != existing.end()) {\\n                for (int k = existing[name] + 1; ; k++) {\\n                    approvedName = name + \"(\" + to_string(k) + \")\";\\n                    if (existing.find(approvedName) == existing.end()) {\\n                        postfix = k;\\n                        existing[approvedName] = 0;\\n                        break;\\n                    }\\n                }\\n            }\\n            existing[name] = postfix;\\n            answers.push_back(approvedName);\\n         }\\n         return answers;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> answers;\\n        unordered_map<string, int> existing;\\n\\n        for (const auto& name : names) {\\n            auto approvedName = name;\\n            int postfix = 0;\\n            if (existing.find(name) != existing.end()) {\\n                for (int k = existing[name] + 1; ; k++) {\\n                    approvedName = name + \"(\" + to_string(k) + \")\";\\n                    if (existing.find(approvedName) == existing.end()) {\\n                        postfix = k;\\n                        existing[approvedName] = 0;\\n                        break;\\n                    }\\n                }\\n            }\\n            existing[name] = postfix;\\n            answers.push_back(approvedName);\\n         }\\n         return answers;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3992409,
                "title": "c-hashmap",
                "content": "```C []\\nchar * * getFolderNames(\\n\\tconst char * const * const names,\\n\\tconst int namesLen,\\n\\tint * const pRetsLen\\n){\\n\\t*pRetsLen = namesLen;\\n\\tchar * * const rets = (char * *)malloc(sizeof (char *) * *pRetsLen);\\n\\n\\tHashMap * pHashMap = HashMap_new(15);\\n\\n\\tfor (int i = 0; i < namesLen; i += 1){\\n\\t\\tconst int curNameLen = strlen(names[i]);\\n\\n\\t\\tint value;\\n\\t\\tconst int getValueResult = HashMap_getValue(pHashMap, names[i], &value);\\n\\n\\t\\tif (0 == getValueResult){\\n\\t\\t\\tHashMap_put(pHashMap, names[i], 0);\\n\\n\\t\\t\\trets[i] = (char *)malloc( sizeof (char) * (curNameLen + 1) );\\n\\t\\t\\tmemcpy( rets[i], names[i], sizeof (char) * (curNameLen + 1) );\\n\\t\\t}else {\\n\\t\\t\\tchar nameBuf[40];\\n\\n\\t\\t\\tmemcpy(nameBuf, names[i], sizeof (char) * curNameLen);\\n\\t\\t\\tint nameBufLen = curNameLen;\\n\\n\\t\\t\\twhile (1){\\n\\t\\t\\t\\tvalue += 1;\\n\\t\\t\\t\\tconst int suffixLen = sprintf(nameBuf + curNameLen, \"(%d)\", value);\\n\\n\\t\\t\\t\\tint value2;\\n\\t\\t\\t\\tconst int getValueResult2 = HashMap_getValue(pHashMap, nameBuf, &value2);\\n\\n\\t\\t\\t\\tif (0 == getValueResult2){\\n\\t\\t\\t\\t\\tnameBufLen += suffixLen;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tHashMap_put(pHashMap, names[i], value);\\n\\n\\t\\t\\tHashMap_put(pHashMap, nameBuf, 0);\\n\\n\\t\\t\\trets[i] = (char *)malloc( sizeof (char) * (nameBufLen + 1) );\\n\\t\\t\\tmemcpy( rets[i], nameBuf, sizeof (char) * (nameBufLen + 1) );\\t\\t\\n\\t\\t}\\n\\t}\\n\\n\\tHashMap_delete(pHashMap);\\n\\tpHashMap = NULL;\\n\\n\\treturn rets;\\n}\\n```\\n\\n```C []\\n/**\\n * \\u4EE5\\u201CASCII\\u5B57\\u7B26\\u4E32\\u201D\\u4E3A\\u201CKey\\u201D\\u7684\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\uFF08HashMap\\uFF09\\u201D\\u7C7B\\u5E93\\n * \\n * \\u4F5C\\u8005\\uFF1A\\u5411\\u9633\\u53F6\\uFF08QQ\\uFF1A914286415\\uFF09\\n * \\u6700\\u540E\\u4FEE\\u8BA2\\u65E5\\u671F\\uFF1A2022.2.2\\n *\\n * \\u652F\\u6301\\u201C\\u589E\\uFF08\\u6539\\uFF09\\u201D\\u3001\\u201C\\u67E5\\u201D\\u3001\\u201C\\u5220\\u201D\\u548C\\u201C\\u904D\\u5386\\uFF08\\u6548\\u7387\\u4F4E\\uFF09\\u201D\\u56DB\\u79CD\\u57FA\\u672C\\u64CD\\u4F5C\\n */\\n\\n#include <stdlib.h>\\t//malloc()\\u3001free()\\n#include <stdint.h>\\t//uint32_t\\n\\n//value_t\\u662F\\u201CValue\\u201D\\u7684\\u6CDB\\u578B\\u66FF\\u4EE3\\ntypedef int value_t;\\n\\n//\\u3010\\u5185\\u90E8\\u7C7B\\u3011Entry\\uFF08HashMap\\u7684\\u8282\\u70B9\\uFF09\\u7684\\u6210\\u5458\\u5C5E\\u6027\\nstruct Entry;\\ntypedef struct Entry Entry;\\nstruct Entry{\\n\\tuint32_t hash;\\t//\\u4FDD\\u5B58\\u5B57\\u7B26\\u4E32\\u768432\\u4F4Dhash\\uFF0C\\u5BF9\\u6BD4\\u5B57\\u7B26\\u4E32\\u4E4B\\u524D\\u5148\\u6BD4\\u5BF9hash\\uFF0C\\u5982\\u679C\\u4E0D\\u540C\\u5219\\u76F4\\u63A5\\u8DF3\\u8FC7\\uFF0C\\u52A0\\u5FEB\\u6BD4\\u5BF9\\u901F\\u5EA6\\n\\tchar * pKey;\\n\\tvalue_t value;\\n\\tEntry * pNext;\\t//Entry\\u662F\\u5355\\u94FE\\u8868\\u7684\\u8282\\u70B9\\n};\\n\\n//\\u3010\\u5185\\u90E8\\u7C7B\\u3011Entry\\uFF08HashMap\\u7684\\u8282\\u70B9\\uFF09\\u7684\\u6210\\u5458\\u65B9\\u6CD5\\n//new\\u548Cdelete\\nstatic Entry * Entry_new(uint32_t hash, const char * pKey, value_t value, Entry * pNext);\\nstatic void Entry_delete(Entry * const pThis);\\n\\n//\\u5185\\u90E8\\u51FD\\u6570\\nstatic char * strCpy(const char * p);\\n\\nstatic Entry * Entry_new(uint32_t hash, const char * pKey, value_t value, Entry * pNext){\\n//try\\n\\t/*\\u68C0\\u6D4B\\u53C2\\u6570*/\\n\\t//pKey\\u4E0D\\u80FD\\u4E3A\\u7A7A\\n\\tif (NULL == pKey)\\n\\t\\tgoto CATCH_1;\\n\\n\\t//\\u521B\\u5EFA\\u5BF9\\u8C61\\n\\tEntry * pNewEntry = (Entry *)malloc(sizeof (Entry));\\n\\tif (NULL == pNewEntry)\\n\\t\\tgoto CATCH_1;\\n\\n\\t/*\\u521D\\u59CB\\u5316\\u6210\\u5458\\u5C5E\\u6027*/\\n\\t//(1)hash\\n\\tpNewEntry->hash = hash;\\n\\t//(2)pKey\\n\\tpNewEntry->pKey = strCpy(pKey);\\n\\tif (NULL == pNewEntry->pKey)\\n\\t\\tgoto CATCH_2;\\n\\t//(3)value\\n\\tpNewEntry->value = value;\\n\\t//(4)pNext\\n\\tpNewEntry->pNext = pNext;\\n\\n\\t//\\u521B\\u5EFA\\u6210\\u529F\\uFF0C\\u8FD4\\u56DE\\n\\treturn pNewEntry;\\n//catch\\nCATCH_2:\\n\\tfree(pNewEntry);\\n\\tpNewEntry = NULL;\\nCATCH_1:\\n\\treturn NULL;\\n}\\n\\nstatic void Entry_delete(Entry * const pThis){\\n\\tif (NULL == pThis)\\n\\t\\treturn;\\n\\n\\tfree(pThis->pKey);\\n\\tpThis->pKey = NULL;\\n\\tfree(pThis);\\n}\\n\\n/**\\n * \\u4F20\\u5165\\u4E00\\u4E2A\\u5B57\\u7B26\\u4E32\\uFF0C\\u5728\\u5806\\u533A\\u5206\\u914D\\u4E00\\u5757\\u7B49\\u957F\\u7684\\u7A7A\\u95F4\\uFF0C\\u7136\\u540E\\u590D\\u5236\\n * \\n * \\u6210\\u529F\\u5219\\u8FD4\\u56DE\\u5806\\u533A\\u5B57\\u7B26\\u4E32\\uFF0Cmalloc()\\u5931\\u8D25\\u5219\\u8FD4\\u56DENULL\\n * \\u56E0\\u4E3A\\u590D\\u5236\\u6210\\u529F\\u7684\\u5B57\\u7B26\\u4E32\\u5728\\u5806\\u533A\\uFF0C\\u6240\\u4EE5\\u8C03\\u7528\\u8005\\u4E00\\u5B9A\\u8981\\u8BB0\\u5F97free()\\n */\\nstatic char * strCpy(const char * p){\\n\\t//\\u53C2\\u6570\\u68C0\\u6D4B\\n\\tif (NULL == p)\\n\\t\\treturn NULL;\\n\\n\\t//\\u68C0\\u6D4B\\u957F\\u5EA6\\n\\tint len = 0;\\n\\twhile (p[len] != \\'\\\\0\\')\\n\\t\\tlen += 1;\\n\\t//\\u5206\\u914D\\u7A7A\\u95F4\\n\\tchar * pRet = (char *)malloc( sizeof (char *) * (len + 1) );\\n\\tif (NULL == pRet)\\n\\t\\treturn NULL;\\n\\t//\\u5B57\\u7B26\\u4E32\\u5C01\\u5C3E\\n\\tpRet[len] = \\'\\\\0\\';\\n\\t//\\u9010\\u5B57\\u7B26\\u590D\\u5236\\n\\tfor (int i = 0; i < len; i += 1)\\n\\t\\tpRet[i] = p[i];\\n\\t//\\u8FD4\\u56DE\\n\\treturn pRet;\\n}\\n\\n\\n/*\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u7684\\u6210\\u5458\\u5C5E\\u6027*/\\nstruct HashMap;\\ntypedef struct HashMap HashMap;\\nstruct HashMap{\\n\\tEntry ** ppEntry;\\n\\tint len;\\n};\\n\\n/*\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u7684\\u6210\\u5458\\u65B9\\u6CD5*/\\n//new\\u548Cdelete\\nHashMap * HashMap_new(int const pow);\\nvoid HashMap_delete(HashMap * const pThis);\\n//\\u63A5\\u53E3\\u51FD\\u6570\\nint HashMap_put(const HashMap * const pThis, const char * pKey, value_t value);\\nint HashMap_getValue(const HashMap * const pThis, const char * pKey, value_t * const pValue);\\nint HashMap_remove(const HashMap * const pThis, const char * pKey);\\nint HashMap_traverse(const HashMap * const pThis, void (* pfnTraverse)(const char * pKey, value_t value));\\n\\n//\\u5185\\u90E8\\u51FD\\u6570\\nstatic uint32_t strHash(const char * p);\\nstatic _Bool strCmp(const char * p1, const char * p2);\\n\\n/**\\n * \\u53C2\\u6570pow\\u4EE3\\u8868\\u54C8\\u5E0C\\u8868\\u4E2D\\u201C\\u6876\\u201D\\u7684\\u4E2A\\u6570\\u662F2\\u7684pow\\u6B21\\u65B9\\n * pow\\u7684\\u7406\\u8BBA\\u503C\\u57DF\\u4E3A[0, 30]\\n * \\u4E3A\\u6700\\u5C0F\\u503C0\\u65F6\\uFF0C\\u76F8\\u5F53\\u4E8E\\u5355\\u94FE\\u8868\\uFF0C\\u4E3A\\u6700\\u5927\\u503C30\\u65F6\\uFF0C\\u5C06\\u5360\\u75284G\\uFF0832\\u4F4D\\u6307\\u9488\\uFF09\\u62168G\\uFF0864\\u4F4D\\u6307\\u9488\\uFF09\\u7684\\u5185\\u5B58\\n *\\n * \\u51FA\\u4E8E\\u7F16\\u5199\\u4E0A\\u7684\\u65B9\\u4FBF\\uFF0C\\u201C\\u6876\\u201D\\u7684\\u4E2A\\u6570\\u5728\\u5BF9\\u8C61\\u6574\\u4E2A\\u751F\\u5B58\\u671F\\u95F4\\u4E0D\\u4F1A\\u53D8\\u5316\\n */\\nHashMap * HashMap_new(int const pow){\\n//try\\n\\t//\\u6821\\u9A8C\\u53C2\\u6570\\n\\tif (pow < 0 || pow > 30)\\n\\t\\tgoto CATCH_1;\\n\\n\\t//\\u521B\\u5EFA\\u5BF9\\u8C61\\n\\tHashMap * pNewHashMap = (HashMap *)malloc(sizeof (HashMap));\\n\\tif (NULL == pNewHashMap)\\n\\t\\tgoto CATCH_1;\\n\\n\\t/*\\u521D\\u59CB\\u5316\\u6210\\u5458\\u5C5E\\u6027*/\\n\\t//(1)len\\n\\tpNewHashMap->len = 1 << pow;\\n\\t//(2)ppEntry\\n\\tpNewHashMap->ppEntry = (Entry **)malloc(sizeof (Entry *) * pNewHashMap->len);\\n\\tif (NULL == pNewHashMap->ppEntry)\\n\\t\\tgoto CATCH_2;\\n\\t//ppEntry\\u6570\\u7EC4\\u5168\\u6E05\\u7A7A\\u4E3ANULL\\n\\tfor (int i = 0; i < pNewHashMap->len; i += 1)\\n\\t\\t(pNewHashMap->ppEntry)[i] = NULL;\\n\\n\\t//\\u521B\\u5EFA\\u6210\\u529F\\uFF0C\\u8FD4\\u56DE\\n\\treturn pNewHashMap;\\n//catch\\nCATCH_2:\\n\\tfree(pNewHashMap);\\n\\tpNewHashMap = NULL;\\nCATCH_1:\\n\\treturn NULL;\\n}\\n\\nvoid HashMap_delete(HashMap * const pThis){\\n\\tif (NULL == pThis)\\n\\t\\treturn;\\n\\n\\tfor (int i = 0; i < pThis->len; i += 1){\\n\\t\\tif (NULL == (pThis->ppEntry)[i])\\n\\t\\t\\tcontinue;\\n\\t\\tdo {\\n\\t\\t\\tEntry * pNextEntry = (pThis->ppEntry)[i]->pNext;\\n\\t\\t\\tEntry_delete((pThis->ppEntry)[i]);\\n\\t\\t\\t(pThis->ppEntry)[i] = pNextEntry;\\n\\t\\t}while ( (pThis->ppEntry)[i] != NULL );\\n\\t}\\n\\tfree(pThis->ppEntry);\\n\\tpThis->ppEntry = NULL;\\n\\tfree(pThis);\\n}\\n\\n/**\\n * \\u5C06\\u201C\\u952E\\u503C\\u5BF9\\u201D\\u5199\\u5165HashMap\\n * \\n * \\u5982\\u679C\\u4E0D\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u589E\\u52A0\\u8BE5\\u201C\\u952E\\u503C\\u5BF9\\u201D\\u5E76\\u8FD4\\u56DE1\\n * \\u5982\\u679C\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u5219\\u66F4\\u65B0Value\\u5E76\\u8FD4\\u56DE0\\n * \\u5982\\u679C\\u4F7F\\u7528Entry_new()\\u521B\\u5EFA\\u65B0\\u8282\\u70B9\\u5931\\u8D25\\uFF0C\\u5219\\u8FD4\\u56DE-1\\n */\\nint HashMap_put(const HashMap * const pThis, const char * pKey, value_t value){\\n\\tuint32_t hash = strHash(pKey);\\n\\tint index = hash & (pThis->len - 1);\\n\\tif (NULL == (pThis->ppEntry)[index]){\\n\\t\\t(pThis->ppEntry)[index] = Entry_new(hash, pKey, value, NULL);\\n\\t\\tif ( NULL == (pThis->ppEntry)[index] )\\n\\t\\t\\treturn -1;\\n\\t\\treturn 1;\\n\\t}else {\\n\\t\\tEntry * pCurEntry = (pThis->ppEntry)[index];\\n\\t\\tdo {\\n\\t\\t\\tif (hash == pCurEntry->hash)\\n\\t\\t\\t\\tif (strCmp(pKey, pCurEntry->pKey))\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\tpCurEntry = pCurEntry->pNext;\\n\\t\\t}while (pCurEntry != NULL);\\n\\t\\tif (pCurEntry != NULL){\\n\\t\\t\\tpCurEntry->value = value;\\n\\t\\t\\treturn 0;\\n\\t\\t}else {\\n\\t\\t\\tEntry * pNewEntry = Entry_new(hash, pKey, value, (pThis->ppEntry)[index]);\\n\\t\\t\\tif ( NULL == pNewEntry )\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t(pThis->ppEntry)[index] = pNewEntry;\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * \\u63D0\\u4F9B\\u4E00\\u4E2A\\u201CKey\\u201D\\uFF0C\\u5C1D\\u8BD5\\u83B7\\u53D6\\u5176\\u5728HashMap\\u4E2D\\u5BF9\\u5E94\\u7684\\u201CValue\\u201D\\n * \\n * \\u5982\\u679C\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u5219\\u5C06\\u201CValue\\u201D\\u5199\\u5230pValue\\u4E2D\\uFF0C\\u5E76\\u8FD4\\u56DE1\\n * \\u5982\\u679C\\u4E0D\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u5219\\u76F4\\u63A5\\u8FD4\\u56DE0\\n */\\nint HashMap_getValue(const HashMap * const pThis, const char * pKey, value_t * const pValue){\\n\\tuint32_t hash = strHash(pKey);\\n\\tint index = hash & (pThis->len - 1);\\n\\tif (NULL == (pThis->ppEntry)[index])\\n\\t\\treturn 0;\\n\\telse {\\n\\t\\tEntry * pCurEntry = (pThis->ppEntry)[index];\\n\\t\\tdo {\\n\\t\\t\\tif (hash == pCurEntry->hash)\\n\\t\\t\\t\\tif (strCmp(pKey, pCurEntry->pKey))\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\tpCurEntry = pCurEntry->pNext;\\n\\t\\t}while (pCurEntry != NULL);\\n\\t\\tif (pCurEntry != NULL){\\n\\t\\t\\t*pValue = pCurEntry->value;\\n\\t\\t\\treturn 1;\\n\\t\\t}else\\n\\t\\t\\treturn 0;\\n\\t}\\n}\\n\\n/**\\n * \\u5C1D\\u8BD5\\u5220\\u9664\\u6307\\u5B9A\\u7684\\u201CKey\\u201D\\u5728HashMap\\u4E2D\\u5BF9\\u5E94\\u7684\\u201C\\u952E\\u503C\\u5BF9\\u201D\\n * \\n * \\u5982\\u679C\\u8BE5Key\\u5B58\\u5728\\uFF0C\\u5219\\u5220\\u9664\\u8BE5\\u201C\\u952E\\u503C\\u5BF9\\u201D\\uFF0C\\u5E76\\u8FD4\\u56DE1\\n * \\u5982\\u679C\\u8BE5Key\\u4E0D\\u5B58\\u5728\\uFF0C\\u5219\\u76F4\\u63A5\\u8FD4\\u56DE0\\n */\\nint HashMap_remove(const HashMap * const pThis, const char * pKey){\\n\\tuint32_t hash = strHash(pKey);\\n\\tint index = hash & (pThis->len - 1);\\n\\tif (NULL == (pThis->ppEntry)[index])\\n\\t\\treturn 0;\\n\\telse {\\n\\t\\tif (hash == (pThis->ppEntry)[index]->hash)\\n\\t\\t\\tif ( strCmp( pKey, (pThis->ppEntry)[index]->pKey ) ){\\n\\t\\t\\t\\tEntry * pNextEntry = (pThis->ppEntry)[index]->pNext;\\n\\t\\t\\t\\tEntry_delete((pThis->ppEntry)[index]);\\n\\t\\t\\t\\t(pThis->ppEntry)[index] = pNextEntry;\\n\\t\\t\\t\\treturn 1;\\n\\t\\t\\t}\\n\\t\\tEntry * pPrevEntry = (pThis->ppEntry)[index];\\n\\t\\twhile (pPrevEntry->pNext != NULL) {\\n\\t\\t\\tif (hash == pPrevEntry->pNext->hash)\\n\\t\\t\\t\\tif ( strCmp(pKey, pPrevEntry->pNext->pKey) )\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\tpPrevEntry = pPrevEntry->pNext;\\n\\t\\t}\\n\\t\\tif (NULL == pPrevEntry->pNext)\\n\\t\\t\\treturn 0;\\n\\t\\telse {\\n\\t\\t\\tEntry * pNextNode = pPrevEntry->pNext->pNext;\\n\\t\\t\\tEntry_delete(pPrevEntry->pNext);\\n\\t\\t\\tpPrevEntry->pNext = pNextNode;\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * \\u5BF9\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u8FDB\\u884C\\u904D\\u5386\\n * \\n * pfnTraverse\\u4E3A\\u904D\\u5386\\u51FD\\u6570\\uFF08\\u56DE\\u8C03\\u51FD\\u6570\\uFF09\\u7684\\u6307\\u9488\\n * \\u5F53\\u672C\\u51FD\\u6570\\u627E\\u5230\\u4E00\\u4E2A\\u201C\\u952E\\u503C\\u5BF9\\u201D\\u7684\\u65F6\\u5019\\uFF0C\\u4F1A\\u4EE5Key\\u548CValue\\u4E3A\\u53C2\\u6570\\u8C03\\u7528\\u8BE5\\u51FD\\u6570\\uFF0C\\u7531\\u51FD\\u6570\\u8FDB\\u884C\\u5177\\u4F53\\u7684\\u904D\\u5386\\u64CD\\u4F5C\\n * \\u4E5F\\u53EF\\u4EE5\\u4E3ANULL\\uFF0C\\u6B64\\u65F6\\u4E0D\\u4F1A\\u8C03\\u7528\\u56DE\\u8C03\\u51FD\\u6570\\uFF0C\\u53EF\\u4EE5\\u7528\\u6765\\u83B7\\u53D6\\u5143\\u7D20\\u4E2A\\u6570\\n *\\n * \\u8FD4\\u56DE\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u4E2D\\u7684\\u5143\\u7D20\\u4E2A\\u6570\\n */\\nint HashMap_traverse( const HashMap * const pThis, void (* pfnTraverse)(const char * pKey, value_t value) ){\\n\\t//\\u8BB0\\u5F55\\u904D\\u5386\\u6210\\u529F\\u7684\\u5143\\u7D20\\u4E2A\\u6570\\n\\tint cnt = 0;\\n\\t//\\u5F00\\u59CB\\u904D\\u5386\\n\\tfor (int i = 0; i < pThis->len; i += 1){\\n\\t\\tif (NULL == (pThis->ppEntry)[i])\\n\\t\\t\\tcontinue;\\n\\t\\tEntry * pCurEntry = (pThis->ppEntry)[i];\\n\\t\\tdo {\\n\\t\\t\\tif (pfnTraverse != NULL)\\n\\t\\t\\t\\t(*pfnTraverse)(pCurEntry->pKey, pCurEntry->value);\\n\\t\\t\\tcnt += 1;\\n\\t\\t\\tpCurEntry = pCurEntry->pNext;\\n\\t\\t}while ( pCurEntry != NULL );\\n\\t}\\n\\t//\\u8FD4\\u56DE\\n\\treturn cnt;\\n}\\n\\n/**\\n * \\u5BF9\\u4E00\\u201CASCII\\u5B57\\u7B26\\u4E32\\u201D\\u6C4232\\u4F4D\\u7684hash\\n * \\n * \\u6CE8\\uFF1A\\u5982\\u679Cchar\\u8D85\\u8FC7\\u4E860x7F\\uFF0C\\u90A3\\u4E48\\u4F1A\\u5F53\\u6210uint8_t\\u6765\\u5BF9\\u5F85\\uFF0C\\u800C\\u4E0D\\u662F\\u8D1F\\u6570\\n */\\nstatic uint32_t strHash(const char * p){\\n\\tuint32_t hash = 0;\\n\\tfor (; *p != \\'\\\\0\\'; p += 1)\\n\\t\\thash = ( (hash << 5) - hash ) + (uint32_t)(uint8_t)*p;\\n\\treturn hash;\\n}\\n\\n/**\\n * \\u6BD4\\u8F83\\u4E24\\u5B57\\u7B26\\u4E32\\u662F\\u5426\\u4E00\\u81F4\\n * \\n * \\u5982\\u679C\\u4E00\\u81F4\\uFF0C\\u8FD4\\u56DE1\\uFF0C\\u4E0D\\u4E00\\u81F4\\u5219\\u8FD4\\u56DE0\\n */\\nstatic _Bool strCmp(const char * p1, const char * p2){\\n\\tif (NULL == p1 || NULL == p2)\\n\\t\\treturn 0;\\n\\n\\tfor (; 1; p1 += 1, p2 += 1){\\n\\t\\tif (*p1 != *p2)\\n\\t\\t\\treturn 0;\\n\\t\\tif (\\'\\\\0\\' == *p1)\\n\\t\\t\\treturn 1;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```C []\\nchar * * getFolderNames(\\n\\tconst char * const * const names,\\n\\tconst int namesLen,\\n\\tint * const pRetsLen\\n){\\n\\t*pRetsLen = namesLen;\\n\\tchar * * const rets = (char * *)malloc(sizeof (char *) * *pRetsLen);\\n\\n\\tHashMap * pHashMap = HashMap_new(15);\\n\\n\\tfor (int i = 0; i < namesLen; i += 1){\\n\\t\\tconst int curNameLen = strlen(names[i]);\\n\\n\\t\\tint value;\\n\\t\\tconst int getValueResult = HashMap_getValue(pHashMap, names[i], &value);\\n\\n\\t\\tif (0 == getValueResult){\\n\\t\\t\\tHashMap_put(pHashMap, names[i], 0);\\n\\n\\t\\t\\trets[i] = (char *)malloc( sizeof (char) * (curNameLen + 1) );\\n\\t\\t\\tmemcpy( rets[i], names[i], sizeof (char) * (curNameLen + 1) );\\n\\t\\t}else {\\n\\t\\t\\tchar nameBuf[40];\\n\\n\\t\\t\\tmemcpy(nameBuf, names[i], sizeof (char) * curNameLen);\\n\\t\\t\\tint nameBufLen = curNameLen;\\n\\n\\t\\t\\twhile (1){\\n\\t\\t\\t\\tvalue += 1;\\n\\t\\t\\t\\tconst int suffixLen = sprintf(nameBuf + curNameLen, \"(%d)\", value);\\n\\n\\t\\t\\t\\tint value2;\\n\\t\\t\\t\\tconst int getValueResult2 = HashMap_getValue(pHashMap, nameBuf, &value2);\\n\\n\\t\\t\\t\\tif (0 == getValueResult2){\\n\\t\\t\\t\\t\\tnameBufLen += suffixLen;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tHashMap_put(pHashMap, names[i], value);\\n\\n\\t\\t\\tHashMap_put(pHashMap, nameBuf, 0);\\n\\n\\t\\t\\trets[i] = (char *)malloc( sizeof (char) * (nameBufLen + 1) );\\n\\t\\t\\tmemcpy( rets[i], nameBuf, sizeof (char) * (nameBufLen + 1) );\\t\\t\\n\\t\\t}\\n\\t}\\n\\n\\tHashMap_delete(pHashMap);\\n\\tpHashMap = NULL;\\n\\n\\treturn rets;\\n}\\n```\n```C []\\n/**\\n * \\u4EE5\\u201CASCII\\u5B57\\u7B26\\u4E32\\u201D\\u4E3A\\u201CKey\\u201D\\u7684\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\uFF08HashMap\\uFF09\\u201D\\u7C7B\\u5E93\\n * \\n * \\u4F5C\\u8005\\uFF1A\\u5411\\u9633\\u53F6\\uFF08QQ\\uFF1A914286415\\uFF09\\n * \\u6700\\u540E\\u4FEE\\u8BA2\\u65E5\\u671F\\uFF1A2022.2.2\\n *\\n * \\u652F\\u6301\\u201C\\u589E\\uFF08\\u6539\\uFF09\\u201D\\u3001\\u201C\\u67E5\\u201D\\u3001\\u201C\\u5220\\u201D\\u548C\\u201C\\u904D\\u5386\\uFF08\\u6548\\u7387\\u4F4E\\uFF09\\u201D\\u56DB\\u79CD\\u57FA\\u672C\\u64CD\\u4F5C\\n */\\n\\n#include <stdlib.h>\\t//malloc()\\u3001free()\\n#include <stdint.h>\\t//uint32_t\\n\\n//value_t\\u662F\\u201CValue\\u201D\\u7684\\u6CDB\\u578B\\u66FF\\u4EE3\\ntypedef int value_t;\\n\\n//\\u3010\\u5185\\u90E8\\u7C7B\\u3011Entry\\uFF08HashMap\\u7684\\u8282\\u70B9\\uFF09\\u7684\\u6210\\u5458\\u5C5E\\u6027\\nstruct Entry;\\ntypedef struct Entry Entry;\\nstruct Entry{\\n\\tuint32_t hash;\\t//\\u4FDD\\u5B58\\u5B57\\u7B26\\u4E32\\u768432\\u4F4Dhash\\uFF0C\\u5BF9\\u6BD4\\u5B57\\u7B26\\u4E32\\u4E4B\\u524D\\u5148\\u6BD4\\u5BF9hash\\uFF0C\\u5982\\u679C\\u4E0D\\u540C\\u5219\\u76F4\\u63A5\\u8DF3\\u8FC7\\uFF0C\\u52A0\\u5FEB\\u6BD4\\u5BF9\\u901F\\u5EA6\\n\\tchar * pKey;\\n\\tvalue_t value;\\n\\tEntry * pNext;\\t//Entry\\u662F\\u5355\\u94FE\\u8868\\u7684\\u8282\\u70B9\\n};\\n\\n//\\u3010\\u5185\\u90E8\\u7C7B\\u3011Entry\\uFF08HashMap\\u7684\\u8282\\u70B9\\uFF09\\u7684\\u6210\\u5458\\u65B9\\u6CD5\\n//new\\u548Cdelete\\nstatic Entry * Entry_new(uint32_t hash, const char * pKey, value_t value, Entry * pNext);\\nstatic void Entry_delete(Entry * const pThis);\\n\\n//\\u5185\\u90E8\\u51FD\\u6570\\nstatic char * strCpy(const char * p);\\n\\nstatic Entry * Entry_new(uint32_t hash, const char * pKey, value_t value, Entry * pNext){\\n//try\\n\\t/*\\u68C0\\u6D4B\\u53C2\\u6570*/\\n\\t//pKey\\u4E0D\\u80FD\\u4E3A\\u7A7A\\n\\tif (NULL == pKey)\\n\\t\\tgoto CATCH_1;\\n\\n\\t//\\u521B\\u5EFA\\u5BF9\\u8C61\\n\\tEntry * pNewEntry = (Entry *)malloc(sizeof (Entry));\\n\\tif (NULL == pNewEntry)\\n\\t\\tgoto CATCH_1;\\n\\n\\t/*\\u521D\\u59CB\\u5316\\u6210\\u5458\\u5C5E\\u6027*/\\n\\t//(1)hash\\n\\tpNewEntry->hash = hash;\\n\\t//(2)pKey\\n\\tpNewEntry->pKey = strCpy(pKey);\\n\\tif (NULL == pNewEntry->pKey)\\n\\t\\tgoto CATCH_2;\\n\\t//(3)value\\n\\tpNewEntry->value = value;\\n\\t//(4)pNext\\n\\tpNewEntry->pNext = pNext;\\n\\n\\t//\\u521B\\u5EFA\\u6210\\u529F\\uFF0C\\u8FD4\\u56DE\\n\\treturn pNewEntry;\\n//catch\\nCATCH_2:\\n\\tfree(pNewEntry);\\n\\tpNewEntry = NULL;\\nCATCH_1:\\n\\treturn NULL;\\n}\\n\\nstatic void Entry_delete(Entry * const pThis){\\n\\tif (NULL == pThis)\\n\\t\\treturn;\\n\\n\\tfree(pThis->pKey);\\n\\tpThis->pKey = NULL;\\n\\tfree(pThis);\\n}\\n\\n/**\\n * \\u4F20\\u5165\\u4E00\\u4E2A\\u5B57\\u7B26\\u4E32\\uFF0C\\u5728\\u5806\\u533A\\u5206\\u914D\\u4E00\\u5757\\u7B49\\u957F\\u7684\\u7A7A\\u95F4\\uFF0C\\u7136\\u540E\\u590D\\u5236\\n * \\n * \\u6210\\u529F\\u5219\\u8FD4\\u56DE\\u5806\\u533A\\u5B57\\u7B26\\u4E32\\uFF0Cmalloc()\\u5931\\u8D25\\u5219\\u8FD4\\u56DENULL\\n * \\u56E0\\u4E3A\\u590D\\u5236\\u6210\\u529F\\u7684\\u5B57\\u7B26\\u4E32\\u5728\\u5806\\u533A\\uFF0C\\u6240\\u4EE5\\u8C03\\u7528\\u8005\\u4E00\\u5B9A\\u8981\\u8BB0\\u5F97free()\\n */\\nstatic char * strCpy(const char * p){\\n\\t//\\u53C2\\u6570\\u68C0\\u6D4B\\n\\tif (NULL == p)\\n\\t\\treturn NULL;\\n\\n\\t//\\u68C0\\u6D4B\\u957F\\u5EA6\\n\\tint len = 0;\\n\\twhile (p[len] != \\'\\\\0\\')\\n\\t\\tlen += 1;\\n\\t//\\u5206\\u914D\\u7A7A\\u95F4\\n\\tchar * pRet = (char *)malloc( sizeof (char *) * (len + 1) );\\n\\tif (NULL == pRet)\\n\\t\\treturn NULL;\\n\\t//\\u5B57\\u7B26\\u4E32\\u5C01\\u5C3E\\n\\tpRet[len] = \\'\\\\0\\';\\n\\t//\\u9010\\u5B57\\u7B26\\u590D\\u5236\\n\\tfor (int i = 0; i < len; i += 1)\\n\\t\\tpRet[i] = p[i];\\n\\t//\\u8FD4\\u56DE\\n\\treturn pRet;\\n}\\n\\n\\n/*\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u7684\\u6210\\u5458\\u5C5E\\u6027*/\\nstruct HashMap;\\ntypedef struct HashMap HashMap;\\nstruct HashMap{\\n\\tEntry ** ppEntry;\\n\\tint len;\\n};\\n\\n/*\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u7684\\u6210\\u5458\\u65B9\\u6CD5*/\\n//new\\u548Cdelete\\nHashMap * HashMap_new(int const pow);\\nvoid HashMap_delete(HashMap * const pThis);\\n//\\u63A5\\u53E3\\u51FD\\u6570\\nint HashMap_put(const HashMap * const pThis, const char * pKey, value_t value);\\nint HashMap_getValue(const HashMap * const pThis, const char * pKey, value_t * const pValue);\\nint HashMap_remove(const HashMap * const pThis, const char * pKey);\\nint HashMap_traverse(const HashMap * const pThis, void (* pfnTraverse)(const char * pKey, value_t value));\\n\\n//\\u5185\\u90E8\\u51FD\\u6570\\nstatic uint32_t strHash(const char * p);\\nstatic _Bool strCmp(const char * p1, const char * p2);\\n\\n/**\\n * \\u53C2\\u6570pow\\u4EE3\\u8868\\u54C8\\u5E0C\\u8868\\u4E2D\\u201C\\u6876\\u201D\\u7684\\u4E2A\\u6570\\u662F2\\u7684pow\\u6B21\\u65B9\\n * pow\\u7684\\u7406\\u8BBA\\u503C\\u57DF\\u4E3A[0, 30]\\n * \\u4E3A\\u6700\\u5C0F\\u503C0\\u65F6\\uFF0C\\u76F8\\u5F53\\u4E8E\\u5355\\u94FE\\u8868\\uFF0C\\u4E3A\\u6700\\u5927\\u503C30\\u65F6\\uFF0C\\u5C06\\u5360\\u75284G\\uFF0832\\u4F4D\\u6307\\u9488\\uFF09\\u62168G\\uFF0864\\u4F4D\\u6307\\u9488\\uFF09\\u7684\\u5185\\u5B58\\n *\\n * \\u51FA\\u4E8E\\u7F16\\u5199\\u4E0A\\u7684\\u65B9\\u4FBF\\uFF0C\\u201C\\u6876\\u201D\\u7684\\u4E2A\\u6570\\u5728\\u5BF9\\u8C61\\u6574\\u4E2A\\u751F\\u5B58\\u671F\\u95F4\\u4E0D\\u4F1A\\u53D8\\u5316\\n */\\nHashMap * HashMap_new(int const pow){\\n//try\\n\\t//\\u6821\\u9A8C\\u53C2\\u6570\\n\\tif (pow < 0 || pow > 30)\\n\\t\\tgoto CATCH_1;\\n\\n\\t//\\u521B\\u5EFA\\u5BF9\\u8C61\\n\\tHashMap * pNewHashMap = (HashMap *)malloc(sizeof (HashMap));\\n\\tif (NULL == pNewHashMap)\\n\\t\\tgoto CATCH_1;\\n\\n\\t/*\\u521D\\u59CB\\u5316\\u6210\\u5458\\u5C5E\\u6027*/\\n\\t//(1)len\\n\\tpNewHashMap->len = 1 << pow;\\n\\t//(2)ppEntry\\n\\tpNewHashMap->ppEntry = (Entry **)malloc(sizeof (Entry *) * pNewHashMap->len);\\n\\tif (NULL == pNewHashMap->ppEntry)\\n\\t\\tgoto CATCH_2;\\n\\t//ppEntry\\u6570\\u7EC4\\u5168\\u6E05\\u7A7A\\u4E3ANULL\\n\\tfor (int i = 0; i < pNewHashMap->len; i += 1)\\n\\t\\t(pNewHashMap->ppEntry)[i] = NULL;\\n\\n\\t//\\u521B\\u5EFA\\u6210\\u529F\\uFF0C\\u8FD4\\u56DE\\n\\treturn pNewHashMap;\\n//catch\\nCATCH_2:\\n\\tfree(pNewHashMap);\\n\\tpNewHashMap = NULL;\\nCATCH_1:\\n\\treturn NULL;\\n}\\n\\nvoid HashMap_delete(HashMap * const pThis){\\n\\tif (NULL == pThis)\\n\\t\\treturn;\\n\\n\\tfor (int i = 0; i < pThis->len; i += 1){\\n\\t\\tif (NULL == (pThis->ppEntry)[i])\\n\\t\\t\\tcontinue;\\n\\t\\tdo {\\n\\t\\t\\tEntry * pNextEntry = (pThis->ppEntry)[i]->pNext;\\n\\t\\t\\tEntry_delete((pThis->ppEntry)[i]);\\n\\t\\t\\t(pThis->ppEntry)[i] = pNextEntry;\\n\\t\\t}while ( (pThis->ppEntry)[i] != NULL );\\n\\t}\\n\\tfree(pThis->ppEntry);\\n\\tpThis->ppEntry = NULL;\\n\\tfree(pThis);\\n}\\n\\n/**\\n * \\u5C06\\u201C\\u952E\\u503C\\u5BF9\\u201D\\u5199\\u5165HashMap\\n * \\n * \\u5982\\u679C\\u4E0D\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u589E\\u52A0\\u8BE5\\u201C\\u952E\\u503C\\u5BF9\\u201D\\u5E76\\u8FD4\\u56DE1\\n * \\u5982\\u679C\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u5219\\u66F4\\u65B0Value\\u5E76\\u8FD4\\u56DE0\\n * \\u5982\\u679C\\u4F7F\\u7528Entry_new()\\u521B\\u5EFA\\u65B0\\u8282\\u70B9\\u5931\\u8D25\\uFF0C\\u5219\\u8FD4\\u56DE-1\\n */\\nint HashMap_put(const HashMap * const pThis, const char * pKey, value_t value){\\n\\tuint32_t hash = strHash(pKey);\\n\\tint index = hash & (pThis->len - 1);\\n\\tif (NULL == (pThis->ppEntry)[index]){\\n\\t\\t(pThis->ppEntry)[index] = Entry_new(hash, pKey, value, NULL);\\n\\t\\tif ( NULL == (pThis->ppEntry)[index] )\\n\\t\\t\\treturn -1;\\n\\t\\treturn 1;\\n\\t}else {\\n\\t\\tEntry * pCurEntry = (pThis->ppEntry)[index];\\n\\t\\tdo {\\n\\t\\t\\tif (hash == pCurEntry->hash)\\n\\t\\t\\t\\tif (strCmp(pKey, pCurEntry->pKey))\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\tpCurEntry = pCurEntry->pNext;\\n\\t\\t}while (pCurEntry != NULL);\\n\\t\\tif (pCurEntry != NULL){\\n\\t\\t\\tpCurEntry->value = value;\\n\\t\\t\\treturn 0;\\n\\t\\t}else {\\n\\t\\t\\tEntry * pNewEntry = Entry_new(hash, pKey, value, (pThis->ppEntry)[index]);\\n\\t\\t\\tif ( NULL == pNewEntry )\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t(pThis->ppEntry)[index] = pNewEntry;\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * \\u63D0\\u4F9B\\u4E00\\u4E2A\\u201CKey\\u201D\\uFF0C\\u5C1D\\u8BD5\\u83B7\\u53D6\\u5176\\u5728HashMap\\u4E2D\\u5BF9\\u5E94\\u7684\\u201CValue\\u201D\\n * \\n * \\u5982\\u679C\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u5219\\u5C06\\u201CValue\\u201D\\u5199\\u5230pValue\\u4E2D\\uFF0C\\u5E76\\u8FD4\\u56DE1\\n * \\u5982\\u679C\\u4E0D\\u5B58\\u5728\\u8BE5Key\\uFF0C\\u5219\\u76F4\\u63A5\\u8FD4\\u56DE0\\n */\\nint HashMap_getValue(const HashMap * const pThis, const char * pKey, value_t * const pValue){\\n\\tuint32_t hash = strHash(pKey);\\n\\tint index = hash & (pThis->len - 1);\\n\\tif (NULL == (pThis->ppEntry)[index])\\n\\t\\treturn 0;\\n\\telse {\\n\\t\\tEntry * pCurEntry = (pThis->ppEntry)[index];\\n\\t\\tdo {\\n\\t\\t\\tif (hash == pCurEntry->hash)\\n\\t\\t\\t\\tif (strCmp(pKey, pCurEntry->pKey))\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\tpCurEntry = pCurEntry->pNext;\\n\\t\\t}while (pCurEntry != NULL);\\n\\t\\tif (pCurEntry != NULL){\\n\\t\\t\\t*pValue = pCurEntry->value;\\n\\t\\t\\treturn 1;\\n\\t\\t}else\\n\\t\\t\\treturn 0;\\n\\t}\\n}\\n\\n/**\\n * \\u5C1D\\u8BD5\\u5220\\u9664\\u6307\\u5B9A\\u7684\\u201CKey\\u201D\\u5728HashMap\\u4E2D\\u5BF9\\u5E94\\u7684\\u201C\\u952E\\u503C\\u5BF9\\u201D\\n * \\n * \\u5982\\u679C\\u8BE5Key\\u5B58\\u5728\\uFF0C\\u5219\\u5220\\u9664\\u8BE5\\u201C\\u952E\\u503C\\u5BF9\\u201D\\uFF0C\\u5E76\\u8FD4\\u56DE1\\n * \\u5982\\u679C\\u8BE5Key\\u4E0D\\u5B58\\u5728\\uFF0C\\u5219\\u76F4\\u63A5\\u8FD4\\u56DE0\\n */\\nint HashMap_remove(const HashMap * const pThis, const char * pKey){\\n\\tuint32_t hash = strHash(pKey);\\n\\tint index = hash & (pThis->len - 1);\\n\\tif (NULL == (pThis->ppEntry)[index])\\n\\t\\treturn 0;\\n\\telse {\\n\\t\\tif (hash == (pThis->ppEntry)[index]->hash)\\n\\t\\t\\tif ( strCmp( pKey, (pThis->ppEntry)[index]->pKey ) ){\\n\\t\\t\\t\\tEntry * pNextEntry = (pThis->ppEntry)[index]->pNext;\\n\\t\\t\\t\\tEntry_delete((pThis->ppEntry)[index]);\\n\\t\\t\\t\\t(pThis->ppEntry)[index] = pNextEntry;\\n\\t\\t\\t\\treturn 1;\\n\\t\\t\\t}\\n\\t\\tEntry * pPrevEntry = (pThis->ppEntry)[index];\\n\\t\\twhile (pPrevEntry->pNext != NULL) {\\n\\t\\t\\tif (hash == pPrevEntry->pNext->hash)\\n\\t\\t\\t\\tif ( strCmp(pKey, pPrevEntry->pNext->pKey) )\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\tpPrevEntry = pPrevEntry->pNext;\\n\\t\\t}\\n\\t\\tif (NULL == pPrevEntry->pNext)\\n\\t\\t\\treturn 0;\\n\\t\\telse {\\n\\t\\t\\tEntry * pNextNode = pPrevEntry->pNext->pNext;\\n\\t\\t\\tEntry_delete(pPrevEntry->pNext);\\n\\t\\t\\tpPrevEntry->pNext = pNextNode;\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * \\u5BF9\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u8FDB\\u884C\\u904D\\u5386\\n * \\n * pfnTraverse\\u4E3A\\u904D\\u5386\\u51FD\\u6570\\uFF08\\u56DE\\u8C03\\u51FD\\u6570\\uFF09\\u7684\\u6307\\u9488\\n * \\u5F53\\u672C\\u51FD\\u6570\\u627E\\u5230\\u4E00\\u4E2A\\u201C\\u952E\\u503C\\u5BF9\\u201D\\u7684\\u65F6\\u5019\\uFF0C\\u4F1A\\u4EE5Key\\u548CValue\\u4E3A\\u53C2\\u6570\\u8C03\\u7528\\u8BE5\\u51FD\\u6570\\uFF0C\\u7531\\u51FD\\u6570\\u8FDB\\u884C\\u5177\\u4F53\\u7684\\u904D\\u5386\\u64CD\\u4F5C\\n * \\u4E5F\\u53EF\\u4EE5\\u4E3ANULL\\uFF0C\\u6B64\\u65F6\\u4E0D\\u4F1A\\u8C03\\u7528\\u56DE\\u8C03\\u51FD\\u6570\\uFF0C\\u53EF\\u4EE5\\u7528\\u6765\\u83B7\\u53D6\\u5143\\u7D20\\u4E2A\\u6570\\n *\\n * \\u8FD4\\u56DE\\u201C\\u54C8\\u5E0C\\u6620\\u5C04\\u201D\\u4E2D\\u7684\\u5143\\u7D20\\u4E2A\\u6570\\n */\\nint HashMap_traverse( const HashMap * const pThis, void (* pfnTraverse)(const char * pKey, value_t value) ){\\n\\t//\\u8BB0\\u5F55\\u904D\\u5386\\u6210\\u529F\\u7684\\u5143\\u7D20\\u4E2A\\u6570\\n\\tint cnt = 0;\\n\\t//\\u5F00\\u59CB\\u904D\\u5386\\n\\tfor (int i = 0; i < pThis->len; i += 1){\\n\\t\\tif (NULL == (pThis->ppEntry)[i])\\n\\t\\t\\tcontinue;\\n\\t\\tEntry * pCurEntry = (pThis->ppEntry)[i];\\n\\t\\tdo {\\n\\t\\t\\tif (pfnTraverse != NULL)\\n\\t\\t\\t\\t(*pfnTraverse)(pCurEntry->pKey, pCurEntry->value);\\n\\t\\t\\tcnt += 1;\\n\\t\\t\\tpCurEntry = pCurEntry->pNext;\\n\\t\\t}while ( pCurEntry != NULL );\\n\\t}\\n\\t//\\u8FD4\\u56DE\\n\\treturn cnt;\\n}\\n\\n/**\\n * \\u5BF9\\u4E00\\u201CASCII\\u5B57\\u7B26\\u4E32\\u201D\\u6C4232\\u4F4D\\u7684hash\\n * \\n * \\u6CE8\\uFF1A\\u5982\\u679Cchar\\u8D85\\u8FC7\\u4E860x7F\\uFF0C\\u90A3\\u4E48\\u4F1A\\u5F53\\u6210uint8_t\\u6765\\u5BF9\\u5F85\\uFF0C\\u800C\\u4E0D\\u662F\\u8D1F\\u6570\\n */\\nstatic uint32_t strHash(const char * p){\\n\\tuint32_t hash = 0;\\n\\tfor (; *p != \\'\\\\0\\'; p += 1)\\n\\t\\thash = ( (hash << 5) - hash ) + (uint32_t)(uint8_t)*p;\\n\\treturn hash;\\n}\\n\\n/**\\n * \\u6BD4\\u8F83\\u4E24\\u5B57\\u7B26\\u4E32\\u662F\\u5426\\u4E00\\u81F4\\n * \\n * \\u5982\\u679C\\u4E00\\u81F4\\uFF0C\\u8FD4\\u56DE1\\uFF0C\\u4E0D\\u4E00\\u81F4\\u5219\\u8FD4\\u56DE0\\n */\\nstatic _Bool strCmp(const char * p1, const char * p2){\\n\\tif (NULL == p1 || NULL == p2)\\n\\t\\treturn 0;\\n\\n\\tfor (; 1; p1 += 1, p2 += 1){\\n\\t\\tif (*p1 != *p2)\\n\\t\\t\\treturn 0;\\n\\t\\tif (\\'\\\\0\\' == *p1)\\n\\t\\t\\treturn 1;\\n\\t}\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3901136,
                "title": "python3-o-n-using-while-loop-to-get-the-next-key-name",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nusing while loop to get the next key name\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing while loop to get the next key name\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        cache = {}#store names\\n\\n        for idx, name in enumerate(names):\\n            modified = name\\n            if name not in cache:\\n                #while(name)\\n                cache[name] = 0\\n            else:\\n                k = cache[name]\\n                while modified in cache:\\n                    k += 1\\n                    modified = f\\'{name}({k})\\'\\n                cache[name] = k\\n                cache[modified] = 0\\n        return cache.keys()\\n        #last: pes:0, pes(2):0, pes(1):0, pes(3):0\\n\\n\\n\\n        #[\"pes\",\"pes(2)\", \"pes\", \"pes\"]\\n#expected[\"pes\",\"pes(2)\", \"pes(1)\",\"pes(3)\" ]\\n        #last: pes:3, pes(2):0, pes(1):0, pes(3):0\\n        #modified = pes(3)\\n        \\'\\'\\'\\n        cache = {}#store names\\n        res = []\\n\\n        for idx, i in enumea\\n        \\n\\n        \\n        for i in names:\\n            #not found right away, then\\n            if i not in cache:\\n                if \\'(\\' in i and \\')\\' in i:\\n                    for name in cache: #break this for loop\\n                        \\n                        if name in i:\\n                            leng = len(name)\\n                            if len(i) == leng + 3 and i[leng] == \"(\" and i[leng+2] == \")\":\\n                                #check if it is repeaded :\\n                                if i in cache[name]:\\n                                    break #do nothing\\n                                #check if i_k in within k:\\n                                    \\n                                    \\n                                    i_k = leng+1\\n                                    if i_k > k:\\n                                        cache[name][count] += 1\\n                                        k = cache[name][count]\\n                                        st = name + \"(\" + str(k) + \")\"\\n                                        res.append(st)\\n                                        cache[name][i] = 1\\n                                    \\n                                    \\n                                cache[name][count] += 1\\n                                k = cache[name][count]\\n                                st = name + \"(\" + str(k) + \")\"\\n                                res.append(st)\\n                                break\\n                res.append(i)\\n                cache[i] = {}\\n                cache[i][count] = 0\\n\\n            else:\\n                \\n                cache[i][count] += 1\\n                #res.append(i)\\n                k = cache[i][count]\\n                #cache\\n                st = i + \"(\" + str(k) + \")\"\\n                res.append(st)\\n                cache[i][st] = 1\\n\\n        return res \\n\\n\\n        [\"pes\",\"fifa\",\"gta\",\"pes(1)\", \"pes(2019)\"]\\n        \\'\\'\\'\\n    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        cache = {}#store names\\n\\n        for idx, name in enumerate(names):\\n            modified = name\\n            if name not in cache:\\n                #while(name)\\n                cache[name] = 0\\n            else:\\n                k = cache[name]\\n                while modified in cache:\\n                    k += 1\\n                    modified = f\\'{name}({k})\\'\\n                cache[name] = k\\n                cache[modified] = 0\\n        return cache.keys()\\n        #last: pes:0, pes(2):0, pes(1):0, pes(3):0\\n\\n\\n\\n        #[\"pes\",\"pes(2)\", \"pes\", \"pes\"]\\n#expected[\"pes\",\"pes(2)\", \"pes(1)\",\"pes(3)\" ]\\n        #last: pes:3, pes(2):0, pes(1):0, pes(3):0\\n        #modified = pes(3)\\n        \\'\\'\\'\\n        cache = {}#store names\\n        res = []\\n\\n        for idx, i in enumea\\n        \\n\\n        \\n        for i in names:\\n            #not found right away, then\\n            if i not in cache:\\n                if \\'(\\' in i and \\')\\' in i:\\n                    for name in cache: #break this for loop\\n                        \\n                        if name in i:\\n                            leng = len(name)\\n                            if len(i) == leng + 3 and i[leng] == \"(\" and i[leng+2] == \")\":\\n                                #check if it is repeaded :\\n                                if i in cache[name]:\\n                                    break #do nothing\\n                                #check if i_k in within k:\\n                                    \\n                                    \\n                                    i_k = leng+1\\n                                    if i_k > k:\\n                                        cache[name][count] += 1\\n                                        k = cache[name][count]\\n                                        st = name + \"(\" + str(k) + \")\"\\n                                        res.append(st)\\n                                        cache[name][i] = 1\\n                                    \\n                                    \\n                                cache[name][count] += 1\\n                                k = cache[name][count]\\n                                st = name + \"(\" + str(k) + \")\"\\n                                res.append(st)\\n                                break\\n                res.append(i)\\n                cache[i] = {}\\n                cache[i][count] = 0\\n\\n            else:\\n                \\n                cache[i][count] += 1\\n                #res.append(i)\\n                k = cache[i][count]\\n                #cache\\n                st = i + \"(\" + str(k) + \")\"\\n                res.append(st)\\n                cache[i][st] = 1\\n\\n        return res \\n\\n\\n        [\"pes\",\"fifa\",\"gta\",\"pes(1)\", \"pes(2019)\"]\\n        \\'\\'\\'\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855564,
                "title": "javascript-beats-100-both-runtime-and-memory",
                "content": "![image](https://assets.leetcode.com/users/images/7f6d1f07-c5e6-4117-8f4d-5f44954f847e_1691024890.0260081.png)\\n\\n```\\nconst getFolderNames = function (names) {\\n    const hash = new Map()\\n    for(let i = 0; i < names.length; i++) {\\n        let file = names[i]\\n        let count = hash.has(file) ? hash.get(file) : 0\\n        while(hash.has(file)) {\\n            file = `${names[i]}(${++count})`\\n        }\\n        hash.set(names[i], count)\\n        hash.set(file, 0)\\n        names[i] = file\\n    }\\n    return names\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst getFolderNames = function (names) {\\n    const hash = new Map()\\n    for(let i = 0; i < names.length; i++) {\\n        let file = names[i]\\n        let count = hash.has(file) ? hash.get(file) : 0\\n        while(hash.has(file)) {\\n            file = `${names[i]}(${++count})`\\n        }\\n        hash.set(names[i], count)\\n        hash.set(file, 0)\\n        names[i] = file\\n    }\\n    return names\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850316,
                "title": "explication-with-python-hash-dict",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$ average cases\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        #Inicialize hash and new names array\\n        frequency = {}\\n        uniqueNames = []\\n        \\n        #Foreach name in array names:\\n        for name in names:\\n            #If name is unique:\\n            if name not in frequency:\\n                uniqueNames.append(name)\\n                frequency[name] = 1\\n            #Name is not unique:\\n            else:\\n                namePlusNumber = name + \"(\" +str(frequency[name]) + \")\"\\n                frequency[name]+=1\\n                #If new name is not unique:\\n                while(namePlusNumber in frequency):\\n                    namePlusNumber = name + \"(\" +str(frequency[name]) + \")\"\\n                    frequency[name]+=1\\n                #Add new unique name to array and hash:\\n                uniqueNames.append(namePlusNumber)\\n                frequency[namePlusNumber] = 1\\n        \\n        return uniqueNames\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        #Inicialize hash and new names array\\n        frequency = {}\\n        uniqueNames = []\\n        \\n        #Foreach name in array names:\\n        for name in names:\\n            #If name is unique:\\n            if name not in frequency:\\n                uniqueNames.append(name)\\n                frequency[name] = 1\\n            #Name is not unique:\\n            else:\\n                namePlusNumber = name + \"(\" +str(frequency[name]) + \")\"\\n                frequency[name]+=1\\n                #If new name is not unique:\\n                while(namePlusNumber in frequency):\\n                    namePlusNumber = name + \"(\" +str(frequency[name]) + \")\"\\n                    frequency[name]+=1\\n                #Add new unique name to array and hash:\\n                uniqueNames.append(namePlusNumber)\\n                frequency[namePlusNumber] = 1\\n        \\n        return uniqueNames\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836982,
                "title": "easy-to-understand-javascript-solution-hash-table",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nvar getFolderNames = function(names) {\\n    const fileNameMap = new Map();\\n\\n    return names.reduce((result, name) => {\\n        if (fileNameMap.has(name)) {\\n            let count = fileNameMap.get(name);\\n\\n            while (fileNameMap.has(`${name}(${count})`)) count += 1;\\n            const uniqueName = `${name}(${count})`;\\n\\n            fileNameMap.set(name, count + 1);\\n            fileNameMap.set(uniqueName, 1);\\n            result.push(uniqueName);\\n        } else {\\n            fileNameMap.set(name, 1);\\n            result.push(name);\\n        }\\n        return result;\\n    }, []);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getFolderNames = function(names) {\\n    const fileNameMap = new Map();\\n\\n    return names.reduce((result, name) => {\\n        if (fileNameMap.has(name)) {\\n            let count = fileNameMap.get(name);\\n\\n            while (fileNameMap.has(`${name}(${count})`)) count += 1;\\n            const uniqueName = `${name}(${count})`;\\n\\n            fileNameMap.set(name, count + 1);\\n            fileNameMap.set(uniqueName, 1);\\n            result.push(uniqueName);\\n        } else {\\n            fileNameMap.set(name, 1);\\n            result.push(name);\\n        }\\n        return result;\\n    }, []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3818287,
                "title": "python-simple",
                "content": "# Intuition\\nBasically brute force. Store seen names in set, on already seen run dumb counter until you find first number that is not used.\\n\\n# Complexity\\n- Time complexity:\\nAverage $$O(NW)$$ - test cases support this \\nTeorethical Worst case $$O(N^2W)$$ - for every name (N) processsing within hash table costs in worst case length of the name (W). Also there is counter loop in worst case of length N, imagine use case where there are 10000 same names. \\n\\n- Space complexity:\\n$$O(NW)$$ - N number of names, W length of the name in characters\\n\\n# Code\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        seen = set()\\n        result = []\\n        for name in names:\\n            candidate = name\\n            if candidate in seen:\\n                count = 1\\n                while (candidate := f\\'{name}({count})\\') in seen: count += 1\\n            result.append(candidate)\\n            seen.add(candidate)\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        seen = set()\\n        result = []\\n        for name in names:\\n            candidate = name\\n            if candidate in seen:\\n                count = 1\\n                while (candidate := f\\'{name}({count})\\') in seen: count += 1\\n            result.append(candidate)\\n            seen.add(candidate)\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3615007,
                "title": "100-faster-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n         Map<String,Integer> dic = new HashMap<>();\\n         String[] arr = new String[names.length];\\n         for(int i = 0; i < names.length; i++) {\\n             arr[i] = build(dic, names[i]);\\n         }\\n         return arr;\\n    }\\n\\n    private String build( Map<String,Integer> dic , String name) {\\n        if(dic.containsKey(name)) {\\n            int x = dic.get(name);\\n            String s = name;\\n            while(dic.containsKey(s)) {\\n                x++;\\n                s = name + \"(\" + x + \")\";\\n            }\\n            dic.put(name, x);\\n            dic.put(s, 0);\\n            return s;\\n        } else {\\n            dic.put(name, 0);\\n            return name;\\n        }\\n    } \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n         Map<String,Integer> dic = new HashMap<>();\\n         String[] arr = new String[names.length];\\n         for(int i = 0; i < names.length; i++) {\\n             arr[i] = build(dic, names[i]);\\n         }\\n         return arr;\\n    }\\n\\n    private String build( Map<String,Integer> dic , String name) {\\n        if(dic.containsKey(name)) {\\n            int x = dic.get(name);\\n            String s = name;\\n            while(dic.containsKey(s)) {\\n                x++;\\n                s = name + \"(\" + x + \")\";\\n            }\\n            dic.put(name, x);\\n            dic.put(s, 0);\\n            return s;\\n        } else {\\n            dic.put(name, 0);\\n            return name;\\n        }\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3583387,
                "title": "easy-and-explained-hashmap-solution-in-java",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse HashMap for constant time compexity for searching already existed names.\\n\\n# Complexity\\n- Time complexity: O(n): Time Complexity for searching in HashMap = O(1) + Time Complexity for traversing given array names[ ] = O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n): Space required to store name\\'s record in HashMap.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        // we use ArrayList instead of array because of dynamic-array-length in ArrayList\\n        // we can also use array too  if u want to, just set the size of array a bit large for testcase during submissions\\n        ArrayList<String> rls = new ArrayList<>();\\n\\n        // Use Map: to store names and there number of occurences\\n        HashMap<String, Integer> record = new HashMap<>();      \\n\\n        for( String i: names){\\n            // if our Map named \\'record\\' doesnt contain the name \\'i\\', we add it to the record\\n            if(!record.containsKey(i)){\\n                rls.add(i);\\n                record.put(i, 1);\\n            }\\n            else{\\n                // if it contain name \\'i\\' in record, we first get its value=number of occurences\\n                int k = record.get(i);\\n                String temp = i+\"(\" + k +\")\";\\n\\n                // we again check if \\'record\\' contain \\'i+(k)\\' or not, if it does, we increment k\\n                while(record.containsKey(temp)){\\n                    k++;\\n                    temp=i+\"(\" + k +\")\";\\n                }\\n\\n                // add new name \\'temp\\' i.e. \\'i+(k)\\' with value=1 in record so that if a new name appears, that is same as our modified name, we can start from there\\n                record.put(temp,1);\\n                \\n                //update the old name number of occurences with \\'k\\'\\n                record.put(i,k);\\n                rls.add(temp);\\n            }\\n        }\\n\\n        // one liner: from ArrayList to array conversion->\\n        String ans[] = rls.toArray(new String[rls.size()]);\\n\\n        // proper easy understadable way for: from ArrayList to array conversion->\\n        /*\\n        String ans[] = new String[names.length];\\n        for (int i=0; i<rls.size();i++){\\n            ans[i]=rls.get(i);\\n        }\\n        */\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        // we use ArrayList instead of array because of dynamic-array-length in ArrayList\\n        // we can also use array too  if u want to, just set the size of array a bit large for testcase during submissions\\n        ArrayList<String> rls = new ArrayList<>();\\n\\n        // Use Map: to store names and there number of occurences\\n        HashMap<String, Integer> record = new HashMap<>();      \\n\\n        for( String i: names){\\n            // if our Map named \\'record\\' doesnt contain the name \\'i\\', we add it to the record\\n            if(!record.containsKey(i)){\\n                rls.add(i);\\n                record.put(i, 1);\\n            }\\n            else{\\n                // if it contain name \\'i\\' in record, we first get its value=number of occurences\\n                int k = record.get(i);\\n                String temp = i+\"(\" + k +\")\";\\n\\n                // we again check if \\'record\\' contain \\'i+(k)\\' or not, if it does, we increment k\\n                while(record.containsKey(temp)){\\n                    k++;\\n                    temp=i+\"(\" + k +\")\";\\n                }\\n\\n                // add new name \\'temp\\' i.e. \\'i+(k)\\' with value=1 in record so that if a new name appears, that is same as our modified name, we can start from there\\n                record.put(temp,1);\\n                \\n                //update the old name number of occurences with \\'k\\'\\n                record.put(i,k);\\n                rls.add(temp);\\n            }\\n        }\\n\\n        // one liner: from ArrayList to array conversion->\\n        String ans[] = rls.toArray(new String[rls.size()]);\\n\\n        // proper easy understadable way for: from ArrayList to array conversion->\\n        /*\\n        String ans[] = new String[names.length];\\n        for (int i=0; i<rls.size();i++){\\n            ans[i]=rls.get(i);\\n        }\\n        */\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3565797,
                "title": "o-n-simple-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Use a map of integers to track occurances of filenames\\n2. When a duplicate is found increment the counter until the name is unique\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(N)\\n\\n# Code\\n```\\nfunc getFolderNames(names []string) []string {\\n    res := []string{}\\n    m := map[string]int{}\\n\\n    // for each name keep a counter and\\n    // increment until we find a name that\\n    // is not used\\n    for _, name := range names {\\n        if m[name] > 0 {\\n            str := name\\n\\n            for m[str] > 0 {\\n                str = fmt.Sprintf(\"%s(%d)\", name, m[name])\\n                m[name]++\\n            }\\n\\n            res = append(res, str)\\n            m[str] = 1\\n        } else {\\n            res = append(res, name)\\n            m[name] = 1\\n        }\\n    }\\n\\n    return res\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc getFolderNames(names []string) []string {\\n    res := []string{}\\n    m := map[string]int{}\\n\\n    // for each name keep a counter and\\n    // increment until we find a name that\\n    // is not used\\n    for _, name := range names {\\n        if m[name] > 0 {\\n            str := name\\n\\n            for m[str] > 0 {\\n                str = fmt.Sprintf(\"%s(%d)\", name, m[name])\\n                m[name]++\\n            }\\n\\n            res = append(res, str)\\n            m[str] = 1\\n        } else {\\n            res = append(res, name)\\n            m[name] = 1\\n        }\\n    }\\n\\n    return res\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3462660,
                "title": "simple-and-straightforward-implementation",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> freq;\\n        vector<string> ans;\\n        for(auto& name: names) {\\n            if(freq.find(name) != freq.end()) {\\n                int x = 0;\\n                string temp = name + \"(\" + to_string(freq[name] + x) + \")\";\\n                while(freq.find(temp) != freq.end()) {\\n                    x++;\\n                    temp = name + \"(\" + to_string(freq[name] + x) + \")\";\\n                }\\n                ans.push_back(temp);\\n                freq[temp]++;\\n            } else {\\n                ans.push_back(name);\\n            }\\n            freq[name]++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> freq;\\n        vector<string> ans;\\n        for(auto& name: names) {\\n            if(freq.find(name) != freq.end()) {\\n                int x = 0;\\n                string temp = name + \"(\" + to_string(freq[name] + x) + \")\";\\n                while(freq.find(temp) != freq.end()) {\\n                    x++;\\n                    temp = name + \"(\" + to_string(freq[name] + x) + \")\";\\n                }\\n                ans.push_back(temp);\\n                freq[temp]++;\\n            } else {\\n                ans.push_back(name);\\n            }\\n            freq[name]++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3401542,
                "title": "clean-python-use-dict-beats-95",
                "content": "# Code\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        folders = dict()\\n        for i, name in enumerate(names):\\n            new_name = name\\n            if name not in folders:\\n                folders[name] = 0\\n            else:\\n                while new_name in folders:\\n                    new_name = f\"{name}({folders[name] + 1})\"\\n                    folders[name] += 1\\n\\n                names[i] = new_name\\n                folders[new_name] = 0\\n\\n        return names\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        folders = dict()\\n        for i, name in enumerate(names):\\n            new_name = name\\n            if name not in folders:\\n                folders[name] = 0\\n            else:\\n                while new_name in folders:\\n                    new_name = f\"{name}({folders[name] + 1})\"\\n                    folders[name] += 1\\n\\n                names[i] = new_name\\n                folders[new_name] = 0\\n\\n        return names\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3351167,
                "title": "easy-solution",
                "content": "\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        op = {}\\n        for i in range(len(names)):\\n            if names[i] in op:\\n                b=names[i]+\"(\"+str(op[names[i]])+\")\"\\n                op[names[i]]+=1\\n                while b in op:\\n                    b=names[i]+\"(\"+str(op[names[i]])+\")\"\\n                    op[names[i]]+=1\\n                names[i] = b\\n                op[b]=1\\n                \\n            else:\\n                op[names[i]]=1\\n        return names\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        op = {}\\n        for i in range(len(names)):\\n            if names[i] in op:\\n                b=names[i]+\"(\"+str(op[names[i]])+\")\"\\n                op[names[i]]+=1\\n                while b in op:\\n                    b=names[i]+\"(\"+str(op[names[i]])+\")\"\\n                    op[names[i]]+=1\\n                names[i] = b\\n                op[b]=1\\n                \\n            else:\\n                op[names[i]]=1\\n        return names\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3301936,
                "title": "487-ms",
                "content": "```ruby\\ndef get_folder_names a\\n    h = {}\\n    a.map! do | s |\\n        unless v = h[s]\\n            h[s] = 1\\n            s\\n        else\\n            v += 1 while h[x = \"#{s}(#{v})\"]\\n            h[x] = 1\\n            h[s] = v + 1\\n            x\\n        end\\n    end\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef get_folder_names a\\n    h = {}\\n    a.map! do | s |\\n        unless v = h[s]\\n            h[s] = 1\\n            s\\n        else\\n            v += 1 while h[x = \"#{s}(#{v})\"]\\n            h[x] = 1\\n            h[s] = v + 1\\n            x\\n        end\\n    end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3254917,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string>ret ;\\n        unordered_map<string, int>names2count ;\\n        \\n        for(auto& name : names){\\n            auto iter = names2count.find(name) ;\\n            if(iter == names2count.end())\\n                ret.push_back(name) ;\\n            else{\\n                string t  ;\\n                int cn = iter->second ;\\n                while(1){\\n                    t = name ;\\n                    t += \"(\" + to_string(cn) + \")\" ;\\n                    if(names2count.count(t) )\\n                        cn++ ;\\n                    else\\n                        break ;\\n                }\\n                ret.push_back(t) ;\\n                names2count[t] = 1 ;\\n            }\\n            names2count[name]++ ;\\n        }\\n        return ret ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string>ret ;\\n        unordered_map<string, int>names2count ;\\n        \\n        for(auto& name : names){\\n            auto iter = names2count.find(name) ;\\n            if(iter == names2count.end())\\n                ret.push_back(name) ;\\n            else{\\n                string t  ;\\n                int cn = iter->second ;\\n                while(1){\\n                    t = name ;\\n                    t += \"(\" + to_string(cn) + \")\" ;\\n                    if(names2count.count(t) )\\n                        cn++ ;\\n                    else\\n                        break ;\\n                }\\n                ret.push_back(t) ;\\n                names2count[t] = 1 ;\\n            }\\n            names2count[name]++ ;\\n        }\\n        return ret ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3250671,
                "title": "simple-c-solution-o-n-time-and-space-detailed-explanations",
                "content": "# Intuition\\n- Use a hashtable to store the mapping form base_name to its next suffix index\\n\\n# Approach\\n- Initializing containers\\n  - We need a vector ```result``` to store the modified names.\\n  - Also need an unordered_map ```map_``` to store the mapping from the base name to its next suffix index.\\n- Loop through all the names in the input vector ```names```.\\n  - For each name, initialize a string variable ```unique_name``` to store the modified name, which initially equals the current name.\\n  - Get the next available suffix for the current name from the ```map_``` by accessing ```map_[name]``` and store it in an integer variable ```j```.\\n  - If the suffix already exists for the current name, then we need to generate a unique name by appending the next suffix to the base name.\\n    - While the ```unique_name``` already exists in the ```map_```, generate a new unique name by appending the next suffix to the base name until a unique name is found.\\n    - Update the ```map_``` with the new suffix for the current name by setting ```map_[name] = j```.\\n  - Add the ```unique_name``` to the ```map_``` with the next suffix set to ```1``` by setting ```map_[unique_name] = 1```.\\n  - Add the ```unique_name``` to the ```result``` vector.\\n- After all the names have been processed, return the modified ```result``` vector.\\n- The English code comments are generated by chatGPT\\n\\n\\n# Complexity\\n- Time complexity: ```O(n)```\\n- Space complexity: ```O(n)```\\n\\n\\n# Code\\n```cpp\\n// Runtime 184 ms Beats 78.63% Memory 65.9 MB Beats 44.27%\\nstd::vector<std::string> getFolderNames(std::vector<std::string>& names) {\\n    // Hashtable method\\n    // Use a hashtable to store the mapping form base_name to its next suffix index\\n\\n    // Time complexity: O(n)\\n    // Space complexity: O(n)\\n\\n    std::vector<std::string> result; \\n    std::unordered_map<std::string, int> map_; // base_name -> next suffix\\n\\n    // Loop through all names in the input vector\\n    for (const std::string& name : names) { \\n        std::string unique_name = name;  // Initialize a string variable to store the modified name\\n        int j = map_[name];      // Get the next available suffix for the current name from the map\\n\\n        // If the suffix already exists for the current name\\n        if (j > 0) { \\n            while (map_.count(unique_name)) { // Keep looping until the unique name is found\\n                // Generate a new unique name by appending the next suffix to the base name\\n                unique_name = name + \"(\" + std::to_string(j++) + \")\"; \\n            }  \\n            map_[name] = j;     // Update the map with the new suffix for the current name     \\n        }\\n        map_[unique_name] = 1;  // Add the unique name to the map with the next suffix set to 1\\n        result.push_back(unique_name); // Add the unique name to the result vector\\n    }\\n    return result; // Return the modified vector of strings\\n}\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```result```\n```map_```\n```names```\n```unique_name```\n```map_```\n```map_[name]```\n```j```\n```unique_name```\n```map_```\n```map_```\n```map_[name] = j```\n```unique_name```\n```map_```\n```1```\n```map_[unique_name] = 1```\n```unique_name```\n```result```\n```result```\n```O(n)```\n```O(n)```\n```cpp\\n// Runtime 184 ms Beats 78.63% Memory 65.9 MB Beats 44.27%\\nstd::vector<std::string> getFolderNames(std::vector<std::string>& names) {\\n    // Hashtable method\\n    // Use a hashtable to store the mapping form base_name to its next suffix index\\n\\n    // Time complexity: O(n)\\n    // Space complexity: O(n)\\n\\n    std::vector<std::string> result; \\n    std::unordered_map<std::string, int> map_; // base_name -> next suffix\\n\\n    // Loop through all names in the input vector\\n    for (const std::string& name : names) { \\n        std::string unique_name = name;  // Initialize a string variable to store the modified name\\n        int j = map_[name];      // Get the next available suffix for the current name from the map\\n\\n        // If the suffix already exists for the current name\\n        if (j > 0) { \\n            while (map_.count(unique_name)) { // Keep looping until the unique name is found\\n                // Generate a new unique name by appending the next suffix to the base name\\n                unique_name = name + \"(\" + std::to_string(j++) + \")\"; \\n            }  \\n            map_[name] = j;     // Update the map with the new suffix for the current name     \\n        }\\n        map_[unique_name] = 1;  // Add the unique name to the map with the next suffix set to 1\\n        result.push_back(unique_name); // Add the unique name to the result vector\\n    }\\n    return result; // Return the modified vector of strings\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3249006,
                "title": "c-easy-and-simple-solution-using-hash-map",
                "content": "***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string>ans;\\n        unordered_map<string,int>mapping;\\n        for(int i=0;i<names.size();i++){\\n            if(mapping[names[i]]){\\n                int val=mapping[names[i]];\\n                if(val==1){\\n                string temp=names[i]+\"(\"+to_string(val)+\")\";\\n                val++;\\n                    while(mapping[temp]){\\n                         temp=names[i]+\"(\"+to_string(val++)+\")\";\\n                    }\\n                    \\n                mapping[temp]=1;\\n                ans.push_back(temp);\\n                mapping[names[i]]++;\\n                }else{\\n                    string temp=names[i]+\"(\"+to_string(val)+\")\";\\n                    val++;\\n                    while(mapping[temp]){\\n                         temp=names[i]+\"(\"+to_string(val++)+\")\";\\n                    }\\n                    \\n                mapping[temp]=1;\\n                ans.push_back(temp);\\n                mapping[names[i]]++;\\n                }\\n                \\n                \\n\\n            }else{\\n                mapping[names[i]]=1;\\n                ans.push_back(names[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string>ans;\\n        unordered_map<string,int>mapping;\\n        for(int i=0;i<names.size();i++){\\n            if(mapping[names[i]]){\\n                int val=mapping[names[i]];\\n                if(val==1){\\n                string temp=names[i]+\"(\"+to_string(val)+\")\";\\n                val++;\\n                    while(mapping[temp]){\\n                         temp=names[i]+\"(\"+to_string(val++)+\")\";\\n                    }\\n                    \\n                mapping[temp]=1;\\n                ans.push_back(temp);\\n                mapping[names[i]]++;\\n                }else{\\n                    string temp=names[i]+\"(\"+to_string(val)+\")\";\\n                    val++;\\n                    while(mapping[temp]){\\n                         temp=names[i]+\"(\"+to_string(val++)+\")\";\\n                    }\\n                    \\n                mapping[temp]=1;\\n                ans.push_back(temp);\\n                mapping[names[i]]++;\\n                }\\n                \\n                \\n\\n            }else{\\n                mapping[names[i]]=1;\\n                ans.push_back(names[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230359,
                "title": "python-pay-attention-to-the-description",
                "content": "this problem really sucks!\\nthe description is so confusing.\\nafter wrestling with a couple of error examples, I figured out what the problem really means.\\nshare the code below.\\n\\nif a str is first time in the hashmap, we assign val(version) 0 to it. and we should do for any strings, either the given array elements or our modified ones.\\n\\nfor str which showed up before, we just increase the version number till a new one.\\n\\n```\\ndef getFolderNames(self, names: List[str]) -> List[str]:\\n        res=[]\\n        m={}\\n        for a in names:\\n            if a not in m:\\n                m[a]=0\\n                res.append(a)\\n            else:\\n                version=m[a]\\n                while a+\"(\"+str(version+1)+\\')\\' in m:\\n                    version+=1\\n                m[a]=version+1\\n                name=a+\"(\"+str(version+1)+\\')\\'\\n                res.append(name)\\n                m[name]=0\\n\\n            #print(f\"a={a}, res={res}, m={m}\")        \\n        return res\\n",
                "solutionTags": [],
                "code": "this problem really sucks!\\nthe description is so confusing.\\nafter wrestling with a couple of error examples, I figured out what the problem really means.\\nshare the code below.\\n\\nif a str is first time in the hashmap, we assign val(version) 0 to it. and we should do for any strings, either the given array elements or our modified ones.\\n\\nfor str which showed up before, we just increase the version number till a new one.\\n\\n```\\ndef getFolderNames(self, names: List[str]) -> List[str]:\\n        res=[]\\n        m={}\\n        for a in names:\\n            if a not in m:\\n                m[a]=0\\n                res.append(a)\\n            else:\\n                version=m[a]\\n                while a+\"(\"+str(version+1)+\\')\\' in m:\\n                    version+=1\\n                m[a]=version+1\\n                name=a+\"(\"+str(version+1)+\\')\\'\\n                res.append(name)\\n                m[name]=0\\n\\n            #print(f\"a={a}, res={res}, m={m}\")        \\n        return res\\n",
                "codeTag": "Python3"
            },
            {
                "id": 3173553,
                "title": "swift-simple-iteration-tle-on-32-33",
                "content": "# Code\\n```\\nclass Solution {\\n    var map = [String: Int]()\\n    var result = [String]()\\n    func getFolderNames(_ names: [String]) -> [String] {\\n        var newNames = names\\n        \\n        for (idx, name) in names.enumerated() {\\n            var newName = name\\n            if let _ = map[name] {\\n                var counter = 1\\n                newName = name+\"(\\\\(counter))\"\\n                while let value = map[newName] {\\n                    counter += 1\\n                    newName = name+\"(\\\\(counter))\"\\n                }                \\n            }\\n            map[newName] = idx\\n            result.append(newName)\\n        }\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    var map = [String: Int]()\\n    var result = [String]()\\n    func getFolderNames(_ names: [String]) -> [String] {\\n        var newNames = names\\n        \\n        for (idx, name) in names.enumerated() {\\n            var newName = name\\n            if let _ = map[name] {\\n                var counter = 1\\n                newName = name+\"(\\\\(counter))\"\\n                while let value = map[newName] {\\n                    counter += 1\\n                    newName = name+\"(\\\\(counter))\"\\n                }                \\n            }\\n            map[newName] = idx\\n            result.append(newName)\\n        }\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3160622,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn get_folder_names(names: Vec<String>) -> Vec<String> {\\n        let mut m = std::collections::HashMap::<String, usize>::new();\\n        let mut ans = Vec::new();\\n        for name in names.iter() {\\n            if let Some(k) = m.get(name) {\\n                let mut k = *k;\\n                let mut str2 = String::new();\\n                loop {\\n                    str2 = format!(\"{name}({k})\");\\n                    *m.entry(name.clone()).or_insert(0) += 1;\\n                    k += 1;\\n                    if !m.contains_key(&str2) {\\n                        break;\\n                    }\\n                }\\n                *m.entry(str2.clone()).or_insert(0) += 1;\\n                ans.push(str2);\\n            } else {\\n                *m.entry(name.clone()).or_insert(0) += 1;\\n                ans.push(name.clone());\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn get_folder_names(names: Vec<String>) -> Vec<String> {\\n        let mut m = std::collections::HashMap::<String, usize>::new();\\n        let mut ans = Vec::new();\\n        for name in names.iter() {\\n            if let Some(k) = m.get(name) {\\n                let mut k = *k;\\n                let mut str2 = String::new();\\n                loop {\\n                    str2 = format!(\"{name}({k})\");\\n                    *m.entry(name.clone()).or_insert(0) += 1;\\n                    k += 1;\\n                    if !m.contains_key(&str2) {\\n                        break;\\n                    }\\n                }\\n                *m.entry(str2.clone()).or_insert(0) += 1;\\n                ans.push(str2);\\n            } else {\\n                *m.entry(name.clone()).or_insert(0) += 1;\\n                ans.push(name.clone());\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3120405,
                "title": "java-with-chinese-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        // LinkedHashMap\\u786E\\u4FDD\\u987A\\u5E8F\\u4FDD\\u6301\\u4E00\\u81F4\\n        var map = new LinkedHashMap<String, Integer>();\\n        //var result = new ArrayList<String>();\\n        Arrays.stream(names).forEach(name -> {\\n            if (map.containsKey(name)) {\\n                var currentIndex = map.get(name);\\n                var candidateName = name + \"(\" + currentIndex + \")\";\\n                // \\u4F7F\\u7528while\\u5FAA\\u73AF\\u67E5\\u627Emap\\u6709\\u6CA1\\u6709\\u5DF2\\u7ECF\\u91CD\\u547D\\u540D\\u7F16\\u53F7\\u7684\\u540D\\u5B57\\n                while (map.containsKey(candidateName)) {\\n                    candidateName = name + \"(\" + ++currentIndex + \")\";\\n                }\\n                map.put(candidateName, 1);\\n                // \\u56E0\\u4E3A\\u662F\\u987A\\u5E8F\\u67E5\\u627E\\uFF0C\\u4E4B\\u524D\\u7684\\u6570\\u5B57\\u80AF\\u5B9A\\u90FD\\u7528\\u8FC7\\uFF0C\\u6240\\u4EE5\\u8FD9\\u91CC\\u53EF\\u4EE5+1\\uFF0C\\u7F29\\u77ED\\u4E0B\\u6B21\\u67E5\\u627Ewhile\\u7684\\u65F6\\u95F4\\n                map.put(name, ++currentIndex);\\n            } else {\\n                map.put(name, 1);\\n            }\\n        });\\n        return map.keySet().toArray(new String[0]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        // LinkedHashMap\\u786E\\u4FDD\\u987A\\u5E8F\\u4FDD\\u6301\\u4E00\\u81F4\\n        var map = new LinkedHashMap<String, Integer>();\\n        //var result = new ArrayList<String>();\\n        Arrays.stream(names).forEach(name -> {\\n            if (map.containsKey(name)) {\\n                var currentIndex = map.get(name);\\n                var candidateName = name + \"(\" + currentIndex + \")\";\\n                // \\u4F7F\\u7528while\\u5FAA\\u73AF\\u67E5\\u627Emap\\u6709\\u6CA1\\u6709\\u5DF2\\u7ECF\\u91CD\\u547D\\u540D\\u7F16\\u53F7\\u7684\\u540D\\u5B57\\n                while (map.containsKey(candidateName)) {\\n                    candidateName = name + \"(\" + ++currentIndex + \")\";\\n                }\\n                map.put(candidateName, 1);\\n                // \\u56E0\\u4E3A\\u662F\\u987A\\u5E8F\\u67E5\\u627E\\uFF0C\\u4E4B\\u524D\\u7684\\u6570\\u5B57\\u80AF\\u5B9A\\u90FD\\u7528\\u8FC7\\uFF0C\\u6240\\u4EE5\\u8FD9\\u91CC\\u53EF\\u4EE5+1\\uFF0C\\u7F29\\u77ED\\u4E0B\\u6B21\\u67E5\\u627Ewhile\\u7684\\u65F6\\u95F4\\n                map.put(name, ++currentIndex);\\n            } else {\\n                map.put(name, 1);\\n            }\\n        });\\n        return map.keySet().toArray(new String[0]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3106756,
                "title": "python-solution-w-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve this problem, we want to find a way to determine which folders should get a number appended to it, and keep track of how many versions of the folder exist. To do this, we can create a dictionary that stores the number of versions of each folder name that we have seen. \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can go through each folder name and check if it is in the dictionary. If it is not in the dictionary, then we know that it is the first version of the folder, and we can add it to the answer without a number appended. If it is in the dictionary, then we can start adding numbers to it and incrementing the counter in the dictionary until we find a folder name with a number that is not in the dictionary, and add that to the answer. \\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        n = len(names)\\n        ans = [None]*n\\n        seen = {}\\n        for i in range(n):\\n            if names[i] not in seen:\\n                ans[i] = names[i]\\n                seen[names[i]] = 1\\n            else:\\n                k = seen[names[i]]\\n                while True:\\n                    name = names[i] + \\'(\\' + str(k) + \\')\\'\\n                    if name not in seen:\\n                        ans[i] = name\\n                        seen[name] = 1\\n                        break\\n                    k += 1\\n                seen[names[i]] = k\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        n = len(names)\\n        ans = [None]*n\\n        seen = {}\\n        for i in range(n):\\n            if names[i] not in seen:\\n                ans[i] = names[i]\\n                seen[names[i]] = 1\\n            else:\\n                k = seen[names[i]]\\n                while True:\\n                    name = names[i] + \\'(\\' + str(k) + \\')\\'\\n                    if name not in seen:\\n                        ans[i] = name\\n                        seen[name] = 1\\n                        break\\n                    k += 1\\n                seen[names[i]] = k\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3056856,
                "title": "c-using-dictionary-hash-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public string[] GetFolderNames(string[] names) \\n    {\\n        Dictionary<string, int> map = new Dictionary<string, int>();\\n        for(int i=0;i<names.Length;i++)\\n        {\\n            int val = -999;\\n            int count = 0;\\n            if(map.TryGetValue(names[i],out val))\\n            {\\n               count=val;\\n            }\\n            string prev_name = names[i];\\n            if(count >0)\\n            {\\n                while (map.ContainsKey(prev_name))\\n                {                \\n                    prev_name = names[i] + \"(\" + count + \")\";\\n                    count++;\\n                }\\n                map[names[i]] = count;\\n            }\\n            map.Add(prev_name, 1);\\n            names[i]=prev_name;\\n        }\\n        return names;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public string[] GetFolderNames(string[] names) \\n    {\\n        Dictionary<string, int> map = new Dictionary<string, int>();\\n        for(int i=0;i<names.Length;i++)\\n        {\\n            int val = -999;\\n            int count = 0;\\n            if(map.TryGetValue(names[i],out val))\\n            {\\n               count=val;\\n            }\\n            string prev_name = names[i];\\n            if(count >0)\\n            {\\n                while (map.ContainsKey(prev_name))\\n                {                \\n                    prev_name = names[i] + \"(\" + count + \")\";\\n                    count++;\\n                }\\n                map[names[i]] = count;\\n            }\\n            map.Add(prev_name, 1);\\n            names[i]=prev_name;\\n        }\\n        return names;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3050820,
                "title": "java-hashmap-easy",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n^2)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        String[] result = new String[names.length];\\n        Map<String, Integer> map = new HashMap<>();\\n        int i = 0;\\n        for(String name : names){\\n            String response = populateWithKValue(name, map);\\n            result[i] = response;\\n            i++;\\n        }\\n        return result;\\n    }\\n\\n    public String populateWithKValue(String name, Map<String, Integer> map){\\n        int k = map.getOrDefault(name, 0);\\n        String nameClone = name;\\n        while(map.containsKey(name)){\\n                k++;\\n                name = nameClone + \\'(\\'+k+\\')\\';\\n        }\\n        if(k != 0)\\n            map.put(nameClone, k);\\n        map.put(name, 0);\\n        return name;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        String[] result = new String[names.length];\\n        Map<String, Integer> map = new HashMap<>();\\n        int i = 0;\\n        for(String name : names){\\n            String response = populateWithKValue(name, map);\\n            result[i] = response;\\n            i++;\\n        }\\n        return result;\\n    }\\n\\n    public String populateWithKValue(String name, Map<String, Integer> map){\\n        int k = map.getOrDefault(name, 0);\\n        String nameClone = name;\\n        while(map.containsKey(name)){\\n                k++;\\n                name = nameClone + \\'(\\'+k+\\')\\';\\n        }\\n        if(k != 0)\\n            map.put(nameClone, k);\\n        map.put(name, 0);\\n        return name;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3001959,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\npair<string,int> find_number ( std::string names_input, unordered_map<string, int> map_names, string input,int i){\\n    if(map_names.count(input) != 0){\\n        // int j = i+1;\\n        string new_name = names_input + \"(\"+ to_string(i) + \")\";\\n        return find_number(names_input, map_names, new_name, ++i);\\n    }\\n    else{\\n        return make_pair(input,i);\\n    }\\n}\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int> map_names; \\n        unordered_map<string,int> names_count;\\n        vector<string> result_strings;\\n\\n        for(int i = 0; i< names.size();i++){\\n            if(map_names.count(names[i]) ==0 ){\\n                map_names[names[i]] = 1;\\n                result_strings.push_back(names.at(i));\\n            }\\n            else{\\n            //    int num_copy = map_names[names[i]] + 1;\\n            //    string new_name = names.at(i) + \"(\"+ to_string(num_copy) + \")\";\\n            //     map_names[new_name] = 0;\\n               //string new_name = names.at(i) + \"(\"+ to_string(map_names[names[i]]) + \")\";\\n                //result_strings.push_back(new_name);\\n                //map_names[names[i]]= map_names[names[i]] + 1;\\n\\n                // pair<string, int> output = find_number(names.at(i),map_names,names.at(i),map_names[names[i]]);\\n                // result_strings.push_back(output.first);\\n                // map_names[output.first] = 1;\\n                // map_names[names[i]] = output.second;\\n                // }\\n                bool flag = false;\\n                string new_name = names[i];\\n                int count = map_names[names[i]];\\n                while(flag == false){\\n                    new_name = new_name + \"(\"+ to_string(count) + \")\";\\n                    if(map_names.count(new_name) == 0){\\n                        flag = true;\\n                        result_strings.push_back(new_name);\\n                        map_names[new_name] = 1;\\n                        map_names[names[i]] = count++;\\n                    }\\n                    else{\\n                        count = count+1;\\n                        new_name = names[i];\\n                    }\\n                }\\n            }\\n            }\\n        return result_strings;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\npair<string,int> find_number ( std::string names_input, unordered_map<string, int> map_names, string input,int i){\\n    if(map_names.count(input) != 0){\\n        // int j = i+1;\\n        string new_name = names_input + \"(\"+ to_string(i) + \")\";\\n        return find_number(names_input, map_names, new_name, ++i);\\n    }\\n    else{\\n        return make_pair(input,i);\\n    }\\n}\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int> map_names; \\n        unordered_map<string,int> names_count;\\n        vector<string> result_strings;\\n\\n        for(int i = 0; i< names.size();i++){\\n            if(map_names.count(names[i]) ==0 ){\\n                map_names[names[i]] = 1;\\n                result_strings.push_back(names.at(i));\\n            }\\n            else{\\n            //    int num_copy = map_names[names[i]] + 1;\\n            //    string new_name = names.at(i) + \"(\"+ to_string(num_copy) + \")\";\\n            //     map_names[new_name] = 0;\\n               //string new_name = names.at(i) + \"(\"+ to_string(map_names[names[i]]) + \")\";\\n                //result_strings.push_back(new_name);\\n                //map_names[names[i]]= map_names[names[i]] + 1;\\n\\n                // pair<string, int> output = find_number(names.at(i),map_names,names.at(i),map_names[names[i]]);\\n                // result_strings.push_back(output.first);\\n                // map_names[output.first] = 1;\\n                // map_names[names[i]] = output.second;\\n                // }\\n                bool flag = false;\\n                string new_name = names[i];\\n                int count = map_names[names[i]];\\n                while(flag == false){\\n                    new_name = new_name + \"(\"+ to_string(count) + \")\";\\n                    if(map_names.count(new_name) == 0){\\n                        flag = true;\\n                        result_strings.push_back(new_name);\\n                        map_names[new_name] = 1;\\n                        map_names[names[i]] = count++;\\n                    }\\n                    else{\\n                        count = count+1;\\n                        new_name = names[i];\\n                    }\\n                }\\n            }\\n            }\\n        return result_strings;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2955604,
                "title": "c-faster-than-98",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        // if there are collisions we will increment till we don\\'t find a collision then store that value\\n        unordered_map<string, int> m;\\n        unordered_set<string> v;\\n        vector<string> ans;\\n        for (auto& s : names){\\n            if (v.find(s) == v.end()){\\n                v.insert(s);\\n                m[s] = 1;\\n                ans.push_back(s);\\n            }\\n            else{\\n                int nextNum = m[s];\\n                if (nextNum == 0) ++nextNum;\\n                string current = s + \"(\" + to_string(nextNum) + \")\";\\n                while (v.find(current) != v.end()){\\n                    ++nextNum;\\n                    current = s + \"(\" + to_string(nextNum) + \")\";\\n                }\\n                v.insert(current);\\n                ans.push_back(current);\\n                m[s] = nextNum + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        // if there are collisions we will increment till we don\\'t find a collision then store that value\\n        unordered_map<string, int> m;\\n        unordered_set<string> v;\\n        vector<string> ans;\\n        for (auto& s : names){\\n            if (v.find(s) == v.end()){\\n                v.insert(s);\\n                m[s] = 1;\\n                ans.push_back(s);\\n            }\\n            else{\\n                int nextNum = m[s];\\n                if (nextNum == 0) ++nextNum;\\n                string current = s + \"(\" + to_string(nextNum) + \")\";\\n                while (v.find(current) != v.end()){\\n                    ++nextNum;\\n                    current = s + \"(\" + to_string(nextNum) + \")\";\\n                }\\n                v.insert(current);\\n                ans.push_back(current);\\n                m[s] = nextNum + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2923231,
                "title": "java-using-hashmap-straight-forward",
                "content": "# Code\\n```\\nclass Solution {\\n\\n    public String[] getFolderNames(String[] names) {\\n        String[] res = new String[names.length];\\n        Map<String, Integer> seen_lastUsedNum = new HashMap<>();\\n        for (int i = 0; i < names.length; i++) {\\n            String name = names[i];\\n            if (seen_lastUsedNum.containsKey(name)) {\\n                int lastUsedNum = seen_lastUsedNum.get(name);\\n                int num = lastUsedNum + 1;\\n                String nameWithSuffix = name + \"(\" + num + \")\";\\n                while (seen_lastUsedNum.containsKey(nameWithSuffix)) {\\n                    num += 1;\\n                    nameWithSuffix = name + \"(\" + num + \")\";\\n                }\\n                seen_lastUsedNum.put(name, num);\\n                res[i] = nameWithSuffix;\\n                seen_lastUsedNum.put(nameWithSuffix, 0);\\n            } else {\\n                res[i] = name;\\n                seen_lastUsedNum.put(name, 0);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public String[] getFolderNames(String[] names) {\\n        String[] res = new String[names.length];\\n        Map<String, Integer> seen_lastUsedNum = new HashMap<>();\\n        for (int i = 0; i < names.length; i++) {\\n            String name = names[i];\\n            if (seen_lastUsedNum.containsKey(name)) {\\n                int lastUsedNum = seen_lastUsedNum.get(name);\\n                int num = lastUsedNum + 1;\\n                String nameWithSuffix = name + \"(\" + num + \")\";\\n                while (seen_lastUsedNum.containsKey(nameWithSuffix)) {\\n                    num += 1;\\n                    nameWithSuffix = name + \"(\" + num + \")\";\\n                }\\n                seen_lastUsedNum.put(name, num);\\n                res[i] = nameWithSuffix;\\n                seen_lastUsedNum.put(nameWithSuffix, 0);\\n            } else {\\n                res[i] = name;\\n                seen_lastUsedNum.put(name, 0);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2871119,
                "title": "hashmap-to-record-uniqueid-to-reduce-retry-count",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nRecord unique positive integer for each name. Since this problem is relatively simple , we dont need to parse name...\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> ans;\\n        \\n        unordered_map<string, int> m;\\n\\n        for (auto name: names) {\\n            if (!m.count(name)) {\\n                m[name] = 0;\\n                ans.push_back(name);\\n            } else {                \\n                int uniqueID = m[name] + 1;\\n                string anotherName = name + \"(\" + to_string(uniqueID) + \")\";\\n                \\n                // new name exists, try next ID\\n                while(m.count(anotherName)) {                \\n                    anotherName = name + \"(\" + to_string(++uniqueID) + \")\";\\n                }\\n\\n                // update uniqueID for exist name.\\n                m[name] = uniqueID;\\n\\n                // new name, we just record it.\\n                m[anotherName] = 0;\\n                ans.push_back(anotherName);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> ans;\\n        \\n        unordered_map<string, int> m;\\n\\n        for (auto name: names) {\\n            if (!m.count(name)) {\\n                m[name] = 0;\\n                ans.push_back(name);\\n            } else {                \\n                int uniqueID = m[name] + 1;\\n                string anotherName = name + \"(\" + to_string(uniqueID) + \")\";\\n                \\n                // new name exists, try next ID\\n                while(m.count(anotherName)) {                \\n                    anotherName = name + \"(\" + to_string(++uniqueID) + \")\";\\n                }\\n\\n                // update uniqueID for exist name.\\n                m[name] = uniqueID;\\n\\n                // new name, we just record it.\\n                m[anotherName] = 0;\\n                ans.push_back(anotherName);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2859972,
                "title": "easy-python-solution-easy-understanding-hashmap",
                "content": "```\\nfrom collections import defaultdict as maps\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        d = maps(int); n = len(names)\\n        for i in range(n):\\n            if (d[names[i]]):\\n                val = names[i] + \"(\" + str(d[names[i]]) + \")\"\\n                while val in d:\\n                    d[names[i]] += 1;\\n                    val = names[i] + \"(\" + str(d[names[i]]) + \")\"\\n                d[val] += 1; names[i] = val;\\n            else:\\n                d[names[i]] += 1;\\n        return names\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import defaultdict as maps\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        d = maps(int); n = len(names)\\n        for i in range(n):\\n            if (d[names[i]]):\\n                val = names[i] + \"(\" + str(d[names[i]]) + \")\"\\n                while val in d:\\n                    d[names[i]] += 1;\\n                    val = names[i] + \"(\" + str(d[names[i]]) + \")\"\\n                d[val] += 1; names[i] = val;\\n            else:\\n                d[names[i]] += 1;\\n        return names\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2850104,
                "title": "python-simple-hashmap-solution-easy-and-fast",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        hashMap = defaultdict(int)\\n        for idx, name in enumerate(names):\\n            if name in hashMap:\\n                latestEdition = hashMap[name]\\n                while name + \"(\" + str(latestEdition) + \")\" in hashMap:\\n                    latestEdition += 1\\n                names[idx] = name + \"(\" + str(latestEdition) + \")\"\\n                hashMap[name + \"(\" + str(latestEdition) + \")\"] = 1\\n                hashMap[name] = latestEdition\\n            else:\\n                hashMap[name] = 1\\n        return names\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        hashMap = defaultdict(int)\\n        for idx, name in enumerate(names):\\n            if name in hashMap:\\n                latestEdition = hashMap[name]\\n                while name + \"(\" + str(latestEdition) + \")\" in hashMap:\\n                    latestEdition += 1\\n                names[idx] = name + \"(\" + str(latestEdition) + \")\"\\n                hashMap[name + \"(\" + str(latestEdition) + \")\"] = 1\\n                hashMap[name] = latestEdition\\n            else:\\n                hashMap[name] = 1\\n        return names\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2653610,
                "title": "hashmap-implementation",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    \\n    vector<string> getFolderNames(vector<string>& names) \\n    {\\n        map<string,int> store;\\n        vector<string> ans;\\n        for(auto name : names)\\n        {\\n            if(store.find(name)==store.end())\\n            {\\n                ans.push_back(name);\\n                store[name]++;\\n            }\\n            else\\n            {\\n                string t = name + \"(\" + to_string(store[name]) + \")\";\\n                int inc = 1;\\n                while(store.find(t)!=store.end())\\n                {\\n                    t = name + \"(\" + to_string(store[name]+inc) + \")\";\\n                    inc++;\\n                }\\n                store[name]+=inc-1;\\n                ans.push_back(t);\\n                store[t]++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    \\n    vector<string> getFolderNames(vector<string>& names) \\n    {\\n        map<string,int> store;\\n        vector<string> ans;\\n        for(auto name : names)\\n        {\\n            if(store.find(name)==store.end())\\n            {\\n                ans.push_back(name);\\n                store[name]++;\\n            }\\n            else\\n            {\\n                string t = name + \"(\" + to_string(store[name]) + \")\";\\n                int inc = 1;\\n                while(store.find(t)!=store.end())\\n                {\\n                    t = name + \"(\" + to_string(store[name]+inc) + \")\";\\n                    inc++;\\n                }\\n                store[name]+=inc-1;\\n                ans.push_back(t);\\n                store[t]++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2619823,
                "title": "c-solution",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> strToK {};\\n        vector<string> ans {};\\n        \\n        for (string s: names) {\\n            // Case 1: string has not appeared before\\n            if (strToK.find(s) == strToK.end()) {\\n                ans.push_back(s);\\n                strToK[s] = 1;\\n            } \\n            // Case 2: string has appeared before\\n            else {\\n                string candidateString = s + \"(\" + to_string(strToK.at(s)) + \")\"; \\n                // In case there is a conflict with another string that has already appeared \\n                while (strToK.find(candidateString) != strToK.end()) {\\n                    ++strToK[s];\\n                    candidateString = s + \"(\" + to_string(strToK.at(s)) + \")\";\\n                }\\n                strToK[candidateString] = 1; // This string has not appeared before, thus we add it to the map\\n                ans.push_back(candidateString);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> strToK {};\\n        vector<string> ans {};\\n        \\n        for (string s: names) {\\n            // Case 1: string has not appeared before\\n            if (strToK.find(s) == strToK.end()) {\\n                ans.push_back(s);\\n                strToK[s] = 1;\\n            } \\n            // Case 2: string has appeared before\\n            else {\\n                string candidateString = s + \"(\" + to_string(strToK.at(s)) + \")\"; \\n                // In case there is a conflict with another string that has already appeared \\n                while (strToK.find(candidateString) != strToK.end()) {\\n                    ++strToK[s];\\n                    candidateString = s + \"(\" + to_string(strToK.at(s)) + \")\";\\n                }\\n                strToK[candidateString] = 1; // This string has not appeared before, thus we add it to the map\\n                ans.push_back(candidateString);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2574159,
                "title": "java-explained-in-deatil-with-help-of-new-example-hashmap-used-tc-sc",
                "content": "// Input  : [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\",\"onepiece(1)\"]\\n// Output : [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\",\"onepiece(1)(1)\"] -> if a name is present with a digit appended in front of it and the new name formed occurs again, then append the digit in front of it again (like openpiece(1) occurs twice, so for second time it becomes onepiece(1)(1))\\n\\n// TC : O(N)\\n// SC : O(N)\\n```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> nameCount = new HashMap<>(); // key -> name, value -> next available num if the \\'key\\' appears again\\n        String[] res = new String[names.length];\\n        \\n        for(int i = 0; i < names.length; i++) {\\n            if(nameCount.containsKey(names[i])) { // if there is the same name available, then we need to append\\n                int nextVal = nameCount.get(names[i]); // find which next avlbl int is there with this key -> name\\n                StringBuilder sb = new StringBuilder(names[i]); // make sb out of names[i]\\n                sb.append(\\'(\\')\\n                    .append(nextVal)\\n                    .append(\\')\\');\\n                \\n                while(nameCount.containsKey(sb.toString())) { // if th NEW string formed is also present, the we need to APPEND next val again and keep doing it until we finds a unique name\\n                    nextVal++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\')\\n                        .append(nextVal)\\n                        .append(\\')\\');\\n                }\\n                \\n                res[i] = sb.toString(); // add the newly formed name to res\\n                nameCount.put(sb.toString(), 1); // since we have formed a new name (which is unique) so add it to map with 1 (if same name appears again, we will use 1 to append in front of it)\\n                nameCount.put(names[i], nextVal + 1); // we need to add the original name with the next avalbl digit\\n            } else { // if the map does not have this name, just add to map and res[]\\n                res[i] = names[i];\\n                nameCount.put(names[i], 1); // value 1 will be used if the next time the same names appear\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> nameCount = new HashMap<>(); // key -> name, value -> next available num if the \\'key\\' appears again\\n        String[] res = new String[names.length];\\n        \\n        for(int i = 0; i < names.length; i++) {\\n            if(nameCount.containsKey(names[i])) { // if there is the same name available, then we need to append\\n                int nextVal = nameCount.get(names[i]); // find which next avlbl int is there with this key -> name\\n                StringBuilder sb = new StringBuilder(names[i]); // make sb out of names[i]\\n                sb.append(\\'(\\')\\n                    .append(nextVal)\\n                    .append(\\')\\');\\n                \\n                while(nameCount.containsKey(sb.toString())) { // if th NEW string formed is also present, the we need to APPEND next val again and keep doing it until we finds a unique name\\n                    nextVal++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\')\\n                        .append(nextVal)\\n                        .append(\\')\\');\\n                }\\n                \\n                res[i] = sb.toString(); // add the newly formed name to res\\n                nameCount.put(sb.toString(), 1); // since we have formed a new name (which is unique) so add it to map with 1 (if same name appears again, we will use 1 to append in front of it)\\n                nameCount.put(names[i], nextVal + 1); // we need to add the original name with the next avalbl digit\\n            } else { // if the map does not have this name, just add to map and res[]\\n                res[i] = names[i];\\n                nameCount.put(names[i], 1); // value 1 will be used if the next time the same names appear\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2550941,
                "title": "java-hashmap-and-stringbuilder",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> map = new HashMap();\\n        String[] ans = new String[names.length];\\n        for(int i=0;i<names.length;++i){\\n            if(map.containsKey(names[i])) {\\n                Integer val = map.get(names[i]);\\n                StringBuilder sb = new StringBuilder(names[i]);\\n                sb.append(\\'(\\');\\n                sb.append(val);\\n                sb.append(\\')\\');\\n                while (map.containsKey(sb.toString())) {\\n                    val++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\');\\n                    sb.append(val);\\n                    sb.append(\\')\\');\\n                }\\n                ans[i] = sb.toString();\\n                map.put(sb.toString(), 1);\\n                map.put(names[i], val + 1);\\n            }else{\\n                ans[i] = names[i];\\n                map.put(names[i], 1);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> map = new HashMap();\\n        String[] ans = new String[names.length];\\n        for(int i=0;i<names.length;++i){\\n            if(map.containsKey(names[i])) {\\n                Integer val = map.get(names[i]);\\n                StringBuilder sb = new StringBuilder(names[i]);\\n                sb.append(\\'(\\');\\n                sb.append(val);\\n                sb.append(\\')\\');\\n                while (map.containsKey(sb.toString())) {\\n                    val++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\\'(\\');\\n                    sb.append(val);\\n                    sb.append(\\')\\');\\n                }\\n                ans[i] = sb.toString();\\n                map.put(sb.toString(), 1);\\n                map.put(names[i], val + 1);\\n            }else{\\n                ans[i] = names[i];\\n                map.put(names[i], 1);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2526689,
                "title": "java-o-n-time-space",
                "content": "\\tpublic static String[] getFolderNames(String[] names) {\\n\\t\\t\\tHashMap<String, Integer> folderNameMap = new HashMap<>();\\n\\t\\t\\tArrayList<String> result = new ArrayList<>();\\n\\t\\t\\tfor(int idx=0; idx<names.length; idx++){\\n\\t\\t\\t\\tString key = names[idx];\\n\\t\\t\\t\\tfolderNameMap.put(key, folderNameMap.getOrDefault(key, 0)+1);\\n\\t\\t\\t\\tif(folderNameMap.get(key) > 1){\\n\\t\\t\\t\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\t\\t\\t\\tint count = folderNameMap.get(key)-1;\\n\\t\\t\\t\\t\\tsb.append(key + \"(\" + count + \")\");\\n\\n\\t\\t\\t\\t\\twhile(folderNameMap.containsKey(sb.toString())) {\\n\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\t\\tsb = new StringBuilder(key);\\n\\t\\t\\t\\t\\t\\tsb.append(\"(\" + (count) + \")\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tresult.add(sb.toString());\\n\\t\\t\\t\\t\\tfolderNameMap.put(result.get(idx),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfolderNameMap.getOrDefault(result.get(idx), 0) + 1);\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tresult.add(names[idx]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tString[] finalResult = new String[result.size()];\\n\\t\\t\\tfinalResult = result.toArray(finalResult);\\n\\t\\t\\treturn finalResult;\\n\\t\\t}",
                "solutionTags": [],
                "code": "\\tpublic static String[] getFolderNames(String[] names) {\\n\\t\\t\\tHashMap<String, Integer> folderNameMap = new HashMap<>();\\n\\t\\t\\tArrayList<String> result = new ArrayList<>();\\n\\t\\t\\tfor(int idx=0; idx<names.length; idx++){\\n\\t\\t\\t\\tString key = names[idx];\\n\\t\\t\\t\\tfolderNameMap.put(key, folderNameMap.getOrDefault(key, 0)+1);\\n\\t\\t\\t\\tif(folderNameMap.get(key) > 1){\\n\\t\\t\\t\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\t\\t\\t\\tint count = folderNameMap.get(key)-1;\\n\\t\\t\\t\\t\\tsb.append(key + \"(\" + count + \")\");\\n\\n\\t\\t\\t\\t\\twhile(folderNameMap.containsKey(sb.toString())) {\\n\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\t\\tsb = new StringBuilder(key);\\n\\t\\t\\t\\t\\t\\tsb.append(\"(\" + (count) + \")\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tresult.add(sb.toString());\\n\\t\\t\\t\\t\\tfolderNameMap.put(result.get(idx),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfolderNameMap.getOrDefault(result.get(idx), 0) + 1);\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tresult.add(names[idx]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tString[] finalResult = new String[result.size()];\\n\\t\\t\\tfinalResult = result.toArray(finalResult);\\n\\t\\t\\treturn finalResult;\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 2335482,
                "title": "intuitive-do-as-hints-say",
                "content": "```\\nclass Solution {\\n    \\n    unordered_map<string, int> next_index_;\\n    \\n    bool contain(const string& fn) {\\n        return next_index_.find(fn) != next_index_.end();\\n    }\\n    \\n    string get_name(string fn) {\\n        if (!contain(fn)) {\\n            next_index_.insert({fn, 1});\\n            return fn;\\n        }\\n        \\n        int idx = next_index_[fn];\\n        auto cur = fn;\\n        while (contain(cur)) {\\n            next_index_.insert({cur, 1});\\n            cur = fn + \"(\" + to_string(idx) + \")\";\\n            ++idx;\\n        }\\n        next_index_.insert({cur, 1});\\n        next_index_[fn] = idx;\\n        return cur;\\n    }\\n    \\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> res;\\n        for (auto& n : names) {\\n            res.push_back(get_name(n));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    \\n    unordered_map<string, int> next_index_;\\n    \\n    bool contain(const string& fn) {\\n        return next_index_.find(fn) != next_index_.end();\\n    }\\n    \\n    string get_name(string fn) {\\n        if (!contain(fn)) {\\n            next_index_.insert({fn, 1});\\n            return fn;\\n        }\\n        \\n        int idx = next_index_[fn];\\n        auto cur = fn;\\n        while (contain(cur)) {\\n            next_index_.insert({cur, 1});\\n            cur = fn + \"(\" + to_string(idx) + \")\";\\n            ++idx;\\n        }\\n        next_index_.insert({cur, 1});\\n        next_index_[fn] = idx;\\n        return cur;\\n    }\\n    \\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> res;\\n        for (auto& n : names) {\\n            res.push_back(get_name(n));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2252437,
                "title": "c-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int>m;\\n         vector<string>ans;\\n        for(auto n : names){\\n            if(m.count(n)){\\n                int i =m[n];\\n                string t = n;\\n                while(m.count(t)){\\n                    t = t + \"(\" + to_string(i) + \")\";\\n                    if(!m.count(t)){\\n                        ans.push_back(t);\\n                        m[t]++;\\n                        m[n]++;\\n                        break;\\n                    }\\n                    i++;\\n                    t = n;\\n                }\\n            }\\n            else {\\n                m[n]++;\\n                ans.push_back(n);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string,int>m;\\n         vector<string>ans;\\n        for(auto n : names){\\n            if(m.count(n)){\\n                int i =m[n];\\n                string t = n;\\n                while(m.count(t)){\\n                    t = t + \"(\" + to_string(i) + \")\";\\n                    if(!m.count(t)){\\n                        ans.push_back(t);\\n                        m[t]++;\\n                        m[n]++;\\n                        break;\\n                    }\\n                    i++;\\n                    t = n;\\n                }\\n            }\\n            else {\\n                m[n]++;\\n                ans.push_back(n);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2243469,
                "title": "javascript-solution-using-map-with-comments",
                "content": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    // save existed folder names\\n    let hashMap = new Map();\\n    for(let name of names) {\\n        let finalName = name;\\n        // next smallest suffix number\\n        // if this name is not present in the map, next smallest suffix will be 1\\n        let number = hashMap.get(name) || 1;\\n        if(hashMap.has(name)) {\\n            // append suffix to original name\\n            finalName += \\'(\\' + number +\\')\\';\\n            // find the smallest suffix that hasn\\'t been used before\\n            while(hashMap.has(finalName)) {\\n                number++;\\n                // try to use new suffix to update name\\n                finalName = name + \\'(\\' + number +\\')\\';\\n            }\\n            // update next smallest suffix number of new name\\n            hashMap.set(finalName, 1);\\n        }\\n        // update next smallest suffix number of original name\\n        hashMap.set(name, number);\\n    }\\n    return Array.from(hashMap.keys());\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    // save existed folder names\\n    let hashMap = new Map();\\n    for(let name of names) {\\n        let finalName = name;\\n        // next smallest suffix number\\n        // if this name is not present in the map, next smallest suffix will be 1\\n        let number = hashMap.get(name) || 1;\\n        if(hashMap.has(name)) {\\n            // append suffix to original name\\n            finalName += \\'(\\' + number +\\')\\';\\n            // find the smallest suffix that hasn\\'t been used before\\n            while(hashMap.has(finalName)) {\\n                number++;\\n                // try to use new suffix to update name\\n                finalName = name + \\'(\\' + number +\\')\\';\\n            }\\n            // update next smallest suffix number of new name\\n            hashMap.set(finalName, 1);\\n        }\\n        // update next smallest suffix number of original name\\n        hashMap.set(name, number);\\n    }\\n    return Array.from(hashMap.keys());\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2192048,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    Map<String, Integer> map = new HashMap<>();\\n    \\n    public String[] getFolderNames(String[] names) {\\n        String[] op = new String[names.length];\\n        int i = 0;\\n        \\n        for(String cur : names){\\n            if(map.containsKey(cur)) {\\n                cur = generateCopyName(cur);\\n                op[i++] = cur;\\n             //   System.out.println(map.toString());\\n                continue;\\n            }\\n            \\n            op[i++] = cur;\\n            map.put(cur, 0);\\n           // System.out.println(map.toString());\\n        }\\n        \\n        return op;\\n    }\\n    \\n    private String generateCopyName(String s) {\\n        int count = map.get(s) + 1;\\n        \\n        String postfix = \"(\" + count + \")\";\\n        StringBuilder sb = new StringBuilder(s);\\n        sb.append(postfix);\\n        \\n        boolean isChanged = false;\\n        while(map.containsKey(sb.toString())) {\\n            sb = new StringBuilder(s);\\n            sb.append(\"(\" + count + \")\");\\n            count++;\\n            isChanged = true;\\n        }\\n        String res = sb.toString();\\n        //System.out.println(res);\\n        \\n        \\n        if(isChanged)\\n            count = count -1;\\n        \\n        map.put(s, count);\\n        map.put(res, 0);\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    Map<String, Integer> map = new HashMap<>();\\n    \\n    public String[] getFolderNames(String[] names) {\\n        String[] op = new String[names.length];\\n        int i = 0;\\n        \\n        for(String cur : names){\\n            if(map.containsKey(cur)) {\\n                cur = generateCopyName(cur);\\n                op[i++] = cur;\\n             //   System.out.println(map.toString());\\n                continue;\\n            }\\n            \\n            op[i++] = cur;\\n            map.put(cur, 0);\\n           // System.out.println(map.toString());\\n        }\\n        \\n        return op;\\n    }\\n    \\n    private String generateCopyName(String s) {\\n        int count = map.get(s) + 1;\\n        \\n        String postfix = \"(\" + count + \")\";\\n        StringBuilder sb = new StringBuilder(s);\\n        sb.append(postfix);\\n        \\n        boolean isChanged = false;\\n        while(map.containsKey(sb.toString())) {\\n            sb = new StringBuilder(s);\\n            sb.append(\"(\" + count + \")\");\\n            count++;\\n            isChanged = true;\\n        }\\n        String res = sb.toString();\\n        //System.out.println(res);\\n        \\n        \\n        if(isChanged)\\n            count = count -1;\\n        \\n        map.put(s, count);\\n        map.put(res, 0);\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2183863,
                "title": "long-and-simple-c-code",
                "content": "# **If you like the implementation then Please help me by increasing my reputation. By clicking the up arrow on the left of my image.**\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> ans;\\n        unordered_map<string, int> um;\\n        for(string &name : names)\\n        {\\n            string s = name;\\n            if(um.count(name))\\n            {\\n                string f = s + \\'(\\' + to_string(um[name]) + \\')\\';\\n                while(um.count(f))\\n                {\\n                    um[name]++;\\n                    f = s + \\'(\\' + to_string(um[name]) + \\')\\';\\n                }\\n                um[f] = 1;\\n                um[name]++;\\n                ans.push_back(f);\\n            }\\n            else\\n            {\\n                int sz = s.size();\\n                if(s[sz-1] == \\')\\')\\n                {\\n                    //cout << s;\\n                    int i = sz-2;\\n                    string num = \"\";\\n                    while(i >= 1 && s[i] != \\'(\\' && isdigit(s[i]))\\n                    {\\n                        string tmp = \"\";\\n                        tmp += s[i];\\n                        num.insert(0,tmp);\\n                        //cout << num;\\n                        i--;\\n                    }\\n                    //cout << num;\\n                    if(s[i] == \\'(\\')\\n                    {\\n                        \\n                        string sub = s.substr(0,i);\\n                        //cout << sub;\\n                        if(um.count(sub))\\n                        {\\n                            i = stoi(num);\\n                            if(um[sub] == i)\\n                            {\\n                                um[sub]++;\\n                                um[s] = 1;\\n                                ans.push_back(s);\\n                            }\\n                            else\\n                            {\\n                                um[s] = 1;\\n                                ans.push_back(s);\\n                            }\\n                        }\\n                        else\\n                        {\\n                                um[s] = 1;\\n                                ans.push_back(s);  \\n                        }\\n                    }\\n                    else\\n                    {\\n                        um[s] = 1;\\n                        ans.push_back(s);\\n                    }\\n                }\\n                else\\n                {\\n                    um[s] = 1;\\n                    ans.push_back(s);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> ans;\\n        unordered_map<string, int> um;\\n        for(string &name : names)\\n        {\\n            string s = name;\\n            if(um.count(name))\\n            {\\n                string f = s + \\'(\\' + to_string(um[name]) + \\')\\';\\n                while(um.count(f))\\n                {\\n                    um[name]++;\\n                    f = s + \\'(\\' + to_string(um[name]) + \\')\\';\\n                }\\n                um[f] = 1;\\n                um[name]++;\\n                ans.push_back(f);\\n            }\\n            else\\n            {\\n                int sz = s.size();\\n                if(s[sz-1] == \\')\\')\\n                {\\n                    //cout << s;\\n                    int i = sz-2;\\n                    string num = \"\";\\n                    while(i >= 1 && s[i] != \\'(\\' && isdigit(s[i]))\\n                    {\\n                        string tmp = \"\";\\n                        tmp += s[i];\\n                        num.insert(0,tmp);\\n                        //cout << num;\\n                        i--;\\n                    }\\n                    //cout << num;\\n                    if(s[i] == \\'(\\')\\n                    {\\n                        \\n                        string sub = s.substr(0,i);\\n                        //cout << sub;\\n                        if(um.count(sub))\\n                        {\\n                            i = stoi(num);\\n                            if(um[sub] == i)\\n                            {\\n                                um[sub]++;\\n                                um[s] = 1;\\n                                ans.push_back(s);\\n                            }\\n                            else\\n                            {\\n                                um[s] = 1;\\n                                ans.push_back(s);\\n                            }\\n                        }\\n                        else\\n                        {\\n                                um[s] = 1;\\n                                ans.push_back(s);  \\n                        }\\n                    }\\n                    else\\n                    {\\n                        um[s] = 1;\\n                        ans.push_back(s);\\n                    }\\n                }\\n                else\\n                {\\n                    um[s] = 1;\\n                    ans.push_back(s);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2180530,
                "title": "unordered-map",
                "content": "```\\nic:\\n    vector<string> getFolderNames(vector<string>& n) {\\n        unordered_map<string,int>m;\\n        string g=\"\";\\n        for(int i = 0;i<n.size();i++){\\n            if(m.count(n[i])){\\n                g = n[i]+\\'(\\'+to_string(m[n[i]])+\\')\\';\\n                while(m.count(g)){\\n                    g = n[i]+\\'(\\'+to_string(++m[n[i]])+\\')\\';\\n                }\\n                m[n[i]]++;\\n                n[i]=g;\\n                m[g]=1;\\n            }\\n            else\\n                m[n[i]]=1;\\n        }\\n        return n;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nic:\\n    vector<string> getFolderNames(vector<string>& n) {\\n        unordered_map<string,int>m;\\n        string g=\"\";\\n        for(int i = 0;i<n.size();i++){\\n            if(m.count(n[i])){\\n                g = n[i]+\\'(\\'+to_string(m[n[i]])+\\')\\';\\n                while(m.count(g)){\\n                    g = n[i]+\\'(\\'+to_string(++m[n[i]])+\\')\\';\\n                }\\n                m[n[i]]++;\\n                n[i]=g;\\n                m[g]=1;\\n            }\\n            else\\n                m[n[i]]=1;\\n        }\\n        return n;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2156744,
                "title": "c-hashmap-do-comment-a-better-approach-if-any",
                "content": "```\\nclass Solution {\\npublic:    \\n    vector<string> getFolderNames(vector<string>& names) {\\n       unordered_map<string,int>mp;\\n       vector<string>ans;\\n        for(auto&n:names){\\n            string val=n;\\n            int i=mp[val];\\n            while(mp[val]>0){\\n                val=n+\"(\"+to_string(i++)+\")\";\\n                mp[n]=i;\\n            }\\n            ++mp[val];\\n            ans.push_back(val);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:    \\n    vector<string> getFolderNames(vector<string>& names) {\\n       unordered_map<string,int>mp;\\n       vector<string>ans;\\n        for(auto&n:names){\\n            string val=n;\\n            int i=mp[val];\\n            while(mp[val]>0){\\n                val=n+\"(\"+to_string(i++)+\")\";\\n                mp[n]=i;\\n            }\\n            ++mp[val];\\n            ans.push_back(val);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2137729,
                "title": "the-unexpected-right-test-pattern",
                "content": "\\n```text\\nYour input: [\"f(1)\",\"f(1)\",\"f(1)\",\"f(1)\"]\\nExpected: [\"f(1)\",\"f(1)(1)\",\"f(1)(2)\",\"f(1)(3)\"]\\n```\\n\\nHope this test pattern will shed some light for you.\\nI was expected that the answer should be: `[\"f(1)\",\"f(2)\",\"f(3)\",\"f(4)\"]`.\\nBut then it all makes sense, this is just a medium question after all.\\n\\n```cpp\\nmap<string, int> hit;\\nint n = names.size();\\nvector<string> ret(n);\\n\\nfor (int i = 0; i < n; ++i)\\n{\\n\\tint k = hit[names[i]];\\n\\tif (k)\\n\\t{\\n\\t\\tstring str = \"\";\\n\\t\\t\\n\\t\\tdo\\n\\t\\t{\\n\\t\\t\\tstr = names[i] + \"(\" + to_string(k ++) + \")\";\\n\\t\\t} while (hit[str]);\\n\\t\\t\\n\\t\\thit[names[i]] = k;\\n\\t\\t++ hit[str];\\n\\t\\tret[i] = str;\\n\\t}\\n\\telse\\n\\t{\\n\\t\\t++ hit[names[i]];\\n\\t\\tret[i] = names[i];\\n\\t}\\n}\\n\\nreturn ret;\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```text\\nYour input: [\"f(1)\",\"f(1)\",\"f(1)\",\"f(1)\"]\\nExpected: [\"f(1)\",\"f(1)(1)\",\"f(1)(2)\",\"f(1)(3)\"]\\n```\n```cpp\\nmap<string, int> hit;\\nint n = names.size();\\nvector<string> ret(n);\\n\\nfor (int i = 0; i < n; ++i)\\n{\\n\\tint k = hit[names[i]];\\n\\tif (k)\\n\\t{\\n\\t\\tstring str = \"\";\\n\\t\\t\\n\\t\\tdo\\n\\t\\t{\\n\\t\\t\\tstr = names[i] + \"(\" + to_string(k ++) + \")\";\\n\\t\\t} while (hit[str]);\\n\\t\\t\\n\\t\\thit[names[i]] = k;\\n\\t\\t++ hit[str];\\n\\t\\tret[i] = str;\\n\\t}\\n\\telse\\n\\t{\\n\\t\\t++ hit[names[i]];\\n\\t\\tret[i] = names[i];\\n\\t}\\n}\\n\\nreturn ret;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2127368,
                "title": "javascript-simple-hashmap-solution",
                "content": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    let map = {};\\n    \\n    let result = [];\\n    for(let i = 0; i < names.length; i++){\\n        if(map[names[i]]){\\n            let count = 1;\\n            let temp = `${names[i]}(${count})`;\\n            while(map[temp]){\\n                count += 1;\\n                temp = `${names[i]}(${count})`;\\n            }\\n            result.push(temp);\\n            map[temp] = true;\\n        } else {\\n            result.push(names[i]);\\n            map[names[i]] = true;\\n        }\\n    }\\n    \\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    let map = {};\\n    \\n    let result = [];\\n    for(let i = 0; i < names.length; i++){\\n        if(map[names[i]]){\\n            let count = 1;\\n            let temp = `${names[i]}(${count})`;\\n            while(map[temp]){\\n                count += 1;\\n                temp = `${names[i]}(${count})`;\\n            }\\n            result.push(temp);\\n            map[temp] = true;\\n        } else {\\n            result.push(names[i]);\\n            map[names[i]] = true;\\n        }\\n    }\\n    \\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2077214,
                "title": "java-using-hashmap",
                "content": "```\\nclass Solution {\\n\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> hs = new HashMap<>();\\n        String res[] = new String[names.length];\\n        for (int i = 0; i < names.length; i++) {\\n            StringBuilder sb = new StringBuilder(\"\");\\n            hs.put(names[i], hs.getOrDefault(names[i], 0) + 1);\\n            if (hs.get(names[i]) > 1) {\\n                int count = hs.get(names[i]) - 1;\\n                sb.append(names[i] + \"(\" + count + \")\");\\n\\n                while (hs.containsKey(sb.toString())) {\\n                    count++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\"(\" + (count) + \")\");\\n                }\\n\\n                res[i] = sb.toString();\\n                hs.put(res[i], hs.getOrDefault(res[i], 0) + 1);\\n            } else {\\n                res[i] = names[i];\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> hs = new HashMap<>();\\n        String res[] = new String[names.length];\\n        for (int i = 0; i < names.length; i++) {\\n            StringBuilder sb = new StringBuilder(\"\");\\n            hs.put(names[i], hs.getOrDefault(names[i], 0) + 1);\\n            if (hs.get(names[i]) > 1) {\\n                int count = hs.get(names[i]) - 1;\\n                sb.append(names[i] + \"(\" + count + \")\");\\n\\n                while (hs.containsKey(sb.toString())) {\\n                    count++;\\n                    sb = new StringBuilder(names[i]);\\n                    sb.append(\"(\" + (count) + \")\");\\n                }\\n\\n                res[i] = sb.toString();\\n                hs.put(res[i], hs.getOrDefault(res[i], 0) + 1);\\n            } else {\\n                res[i] = names[i];\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2044802,
                "title": "hashmap-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names){\\n \\n        map<string,int> m;\\n        for(int i=0;i<names.size();i++){\\n            if(!m[names[i]]){\\n                m[names[i]]++;\\n            }else{\\n                \\n                string temp=names[i]+\\'(\\'+to_string(m[names[i]])+\\')\\';\\n                // cout<<temp<<endl;\\n                while(m[temp]){\\n                    m[names[i]]++;\\n                    temp=names[i]+\\'(\\'+to_string(m[names[i]])+\\')\\';\\n                }\\n                names[i]=temp;\\n                m[names[i]]++;\\n            }\\n        } \\n     return names;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names){\\n \\n        map<string,int> m;\\n        for(int i=0;i<names.size();i++){\\n            if(!m[names[i]]){\\n                m[names[i]]++;\\n            }else{\\n                \\n                string temp=names[i]+\\'(\\'+to_string(m[names[i]])+\\')\\';\\n                // cout<<temp<<endl;\\n                while(m[temp]){\\n                    m[names[i]]++;\\n                    temp=names[i]+\\'(\\'+to_string(m[names[i]])+\\')\\';\\n                }\\n                names[i]=temp;\\n                m[names[i]]++;\\n            }\\n        } \\n     return names;  \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2026812,
                "title": "go-easiest-solution-hashmap",
                "content": "```go\\nfunc getFolderNames(names []string) []string {\\n    seen := make(map[string]int)\\n    resp := make([]string, len(names))\\n    \\n    for idx, fileName := range names {\\n        f := fileName\\n        _, ok := seen[f]\\n        if ok {\\n            for seen[f] != 0 {\\n                f = fmt.Sprintf(\"%s(%d)\", fileName, seen[fileName])\\n                seen[fileName]++\\n            }\\n        }\\n        resp[idx] = f\\n        seen[f]++\\n    }\\n    return resp\\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc getFolderNames(names []string) []string {\\n    seen := make(map[string]int)\\n    resp := make([]string, len(names))\\n    \\n    for idx, fileName := range names {\\n        f := fileName\\n        _, ok := seen[f]\\n        if ok {\\n            for seen[f] != 0 {\\n                f = fmt.Sprintf(\"%s(%d)\", fileName, seen[fileName])\\n                seen[fileName]++\\n            }\\n        }\\n        resp[idx] = f\\n        seen[f]++\\n    }\\n    return resp\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2020424,
                "title": "javascript-solution-beats-82-14",
                "content": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    const map = {};\\n    const res = [];\\n    \\n    for (const folderName of names) {\\n        if (folderName in map) {\\n            let k = map[folderName];\\n            let name = `${folderName}(${k})`;\\n            \\n            while(name in map) {\\n                k++;\\n                name = `${folderName}(${k})`;\\n            }\\n            \\n            map[name] = 1;\\n            map[folderName]++;\\n            res.push(name);\\n        } else {\\n            map[folderName] = 1;\\n            res.push(folderName);\\n        }\\n    }\\n    \\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} names\\n * @return {string[]}\\n */\\nvar getFolderNames = function(names) {\\n    const map = {};\\n    const res = [];\\n    \\n    for (const folderName of names) {\\n        if (folderName in map) {\\n            let k = map[folderName];\\n            let name = `${folderName}(${k})`;\\n            \\n            while(name in map) {\\n                k++;\\n                name = `${folderName}(${k})`;\\n            }\\n            \\n            map[name] = 1;\\n            map[folderName]++;\\n            res.push(name);\\n        } else {\\n            map[folderName] = 1;\\n            res.push(folderName);\\n        }\\n    }\\n    \\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2011664,
                "title": "python-hashmap-simple-solution-with-explanation",
                "content": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # Hashmap will store the name as key and the number of times that name has duplicated so fas as value.\\n        hashmap = {}\\n        \\n        for name in names:\\n            modified = name\\n            # Check whether the name has already been used\\n            if name in hashmap:\\n                # Get the number of times the {name} has been used\\n                k = hashmap[name]\\n                # Calculate the next available suffix.\\n                while modified in hashmap:\\n                    k += 1\\n                    modified = f\\'{name}({k})\\'\\n                # Update the number of times the original {name} is used. This will help to efficiently check for next available suffix if the {name} again comes in future.\\n                hashmap[name] = k\\n            # Store the modified {name} with 0 as it is not duplicated yet.\\n            hashmap[modified] = 0\\n            \\n        # Return the keys of hashmap as that would be the unique file names.\\n        return hashmap.keys()\\n```\\n\\n\\n### Note: \\n- \\t**Amortised** Time Complexity is O(n)\\n\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        # Hashmap will store the name as key and the number of times that name has duplicated so fas as value.\\n        hashmap = {}\\n        \\n        for name in names:\\n            modified = name\\n            # Check whether the name has already been used\\n            if name in hashmap:\\n                # Get the number of times the {name} has been used\\n                k = hashmap[name]\\n                # Calculate the next available suffix.\\n                while modified in hashmap:\\n                    k += 1\\n                    modified = f\\'{name}({k})\\'\\n                # Update the number of times the original {name} is used. This will help to efficiently check for next available suffix if the {name} again comes in future.\\n                hashmap[name] = k\\n            # Store the modified {name} with 0 as it is not duplicated yet.\\n            hashmap[modified] = 0\\n            \\n        # Return the keys of hashmap as that would be the unique file names.\\n        return hashmap.keys()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1998348,
                "title": "clean-kotlin-using-mutablemap-solution",
                "content": "```\\nclass Solution {\\n    private val keyCount: MutableMap<String, Int> = mutableMapOf()\\n    \\n    fun getFolderNames(names: Array<String>): Array<String> {\\n        val results: MutableList<String> = mutableListOf()\\n        \\n        for (index in 0 .. names.lastIndex) {\\n            val name = names[index]\\n            val result = if (keyCount[name] == null) {\\n                name\\n            } else {\\n                var counter = keyCount.getOrDefault(name, 0)\\n                while(keyCount[\"$name($counter)\"] != null) {\\n                    counter++\\n                }\\n                keyCount[name] = counter + 1\\n                \"$name($counter)\"\\n            }\\n            \\n            names[index] = result\\n            keyCount[result] = keyCount.getOrDefault(result, 0) + 1 \\n        }\\n        \\n        return names\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    private val keyCount: MutableMap<String, Int> = mutableMapOf()\\n    \\n    fun getFolderNames(names: Array<String>): Array<String> {\\n        val results: MutableList<String> = mutableListOf()\\n        \\n        for (index in 0 .. names.lastIndex) {\\n            val name = names[index]\\n            val result = if (keyCount[name] == null) {\\n                name\\n            } else {\\n                var counter = keyCount.getOrDefault(name, 0)\\n                while(keyCount[\"$name($counter)\"] != null) {\\n                    counter++\\n                }\\n                keyCount[name] = counter + 1\\n                \"$name($counter)\"\\n            }\\n            \\n            names[index] = result\\n            keyCount[result] = keyCount.getOrDefault(result, 0) + 1 \\n        }\\n        \\n        return names\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1954026,
                "title": "simple-java-solution",
                "content": "\\tclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> seen = new HashMap<>();\\n        String[] out = new String[names.length];\\n        int index = 0;\\n        for(String name : names){\\n            if(!seen.containsKey(name)){\\n                out[index++] = name;\\n                seen.put(name, 1);\\n            }else{\\n                int count = seen.get(name);\\n                String key = name + \"(\" + count + \")\";\\n                while(seen.containsKey(key)){\\n                    count++;\\n                    key = name + \"(\" + count + \")\";\\n                }\\n                out[index++] = key;\\n                seen.put(key, 1);\\n                seen.put(name, count + 1);\\n            }\\n        }\\n        return out;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String[] getFolderNames(String[] names) {\\n        Map<String, Integer> seen = new HashMap<>();\\n        String[] out = new String[names.length];\\n        int index = 0;\\n        for(String name : names){\\n            if(!seen.containsKey(name)){\\n                out[index++] = name;\\n                seen.put(name, 1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1924646,
                "title": "c-solution",
                "content": "```\\n    vector<string> getFolderNames(vector<string>& names) {\\n        // files keeps the number should be appended to the next file with the same name\\n        // if a new file after appending the number still has the same name of another file, then it means that\\n        // the number is outdated it needs to be updated, i.e. plus one\\n        // then let the new file append the new number and try again until no existing file with the same name as it\\n        unordered_map<string, int> files;\\n        vector<string> res;\\n        for (auto& s : names) {\\n            if (files.find(s) == files.end()) {\\n                files[s] = 1;\\n                res.push_back(s);\\n                continue;\\n            }\\n            string newStr = s + \\'(\\' + to_string(files[s]++) + \\')\\';\\n            while (files.find(newStr) != files.end()) {\\n                newStr = s + \\'(\\' + to_string(files[s]++) + \\')\\';\\n            }\\n            files[newStr] = 1;\\n            res.push_back(newStr);\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    vector<string> getFolderNames(vector<string>& names) {\\n        // files keeps the number should be appended to the next file with the same name\\n        // if a new file after appending the number still has the same name of another file, then it means that\\n        // the number is outdated it needs to be updated, i.e. plus one\\n        // then let the new file append the new number and try again until no existing file with the same name as it\\n        unordered_map<string, int> files;\\n        vector<string> res;\\n        for (auto& s : names) {\\n            if (files.find(s) == files.end()) {\\n                files[s] = 1;\\n                res.push_back(s);\\n                continue;\\n            }\\n            string newStr = s + \\'(\\' + to_string(files[s]++) + \\')\\';\\n            while (files.find(newStr) != files.end()) {\\n                newStr = s + \\'(\\' + to_string(files[s]++) + \\')\\';\\n            }\\n            files[newStr] = 1;\\n            res.push_back(newStr);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1896393,
                "title": "typescript-and-js-easy-way-with-map",
                "content": "```\\nvar getFolderNames = function(names) {\\n  const map = new Map();\\n    \\n  for (const name of names) {\\n    if (!map.has(name)) {\\n      map.set(name, 1);\\n    } else {\\n      let count = map.get(name);\\n      let newName = `${name}(${count})`;  \\n\\t  \\n      while (map.has(newName)) {\\n        count++;\\n        newName = `${name}(${count})`;\\n      }\\n      \\n\\t  \\n      map.set(name, count + 1);\\n      map.set(newName, 1);\\n    }\\n  }  \\n    \\n  return [...map.keys()];\\n};",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nvar getFolderNames = function(names) {\\n  const map = new Map();\\n    \\n  for (const name of names) {\\n    if (!map.has(name)) {\\n      map.set(name, 1);\\n    } else {\\n      let count = map.get(name);\\n      let newName = `${name}(${count})`;  \\n\\t  \\n      while (map.has(newName)) {\\n        count++;\\n        newName = `${name}(${count})`;\\n      }\\n      \\n\\t  \\n      map.set(name, count + 1);\\n      map.set(newName, 1);\\n    }\\n  }  \\n    \\n  return [...map.keys()];\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1767568,
                "title": "rust",
                "content": "```rust\\nimpl Solution {\\n    pub fn get_folder_names(names: Vec<String>) -> Vec<String> {\\n        use std::collections::HashMap;\\n        let mut m = HashMap::<String, usize>::new();\\n        let mut res = vec!();\\n        for n in &names {\\n            let mut tmp = n.clone();\\n            while m.contains_key(tmp.as_str()) {\\n                tmp = format!(\"{}({})\", n, m[n]);\\n                *m.entry(n.clone()).or_default() += 1;\\n            }\\n            *m.entry(n.clone()).or_default() += 1;\\n            res.push(tmp);\\n        }\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn get_folder_names(names: Vec<String>) -> Vec<String> {\\n        use std::collections::HashMap;\\n        let mut m = HashMap::<String, usize>::new();\\n        let mut res = vec!();\\n        for n in &names {\\n            let mut tmp = n.clone();\\n            while m.contains_key(tmp.as_str()) {\\n                tmp = format!(\"{}({})\", n, m[n]);\\n                *m.entry(n.clone()).or_default() += 1;\\n            }\\n            *m.entry(n.clone()).or_default() += 1;\\n            res.push(tmp);\\n        }\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766618,
                "title": "my-java-hashmap-solution",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        if (names == null || names.length == 0) {\\n            return names;\\n        }\\n        HashMap<String, Integer> map = new HashMap<>();\\n        String[] res = new String[names.length];\\n        for (int i = 0; i < names.length; i++) {\\n            if (map.containsKey(names[i])) {\\n                String curName = names[i];\\n                int idx = map.get(curName);\\n                while (true) {\\n                    StringBuilder sb = new StringBuilder(curName);\\n                    sb.append(\\'(\\').append(idx).append(\\')\\');\\n                    String newName = sb.toString();\\n                    if (!map.containsKey(newName)) {\\n                        res[i] = newName;\\n                        map.put(newName, 1);\\n                        map.put(names[i], idx + 1);\\n                        break;\\n                    }\\n                    idx++;\\n                }\\n            } else {\\n                map.put(names[i], 1);\\n                res[i] = names[i];\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        if (names == null || names.length == 0) {\\n            return names;\\n        }\\n        HashMap<String, Integer> map = new HashMap<>();\\n        String[] res = new String[names.length];\\n        for (int i = 0; i < names.length; i++) {\\n            if (map.containsKey(names[i])) {\\n                String curName = names[i];\\n                int idx = map.get(curName);\\n                while (true) {\\n                    StringBuilder sb = new StringBuilder(curName);\\n                    sb.append(\\'(\\').append(idx).append(\\')\\');\\n                    String newName = sb.toString();\\n                    if (!map.containsKey(newName)) {\\n                        res[i] = newName;\\n                        map.put(newName, 1);\\n                        map.put(names[i], idx + 1);\\n                        break;\\n                    }\\n                    idx++;\\n                }\\n            } else {\\n                map.put(names[i], 1);\\n                res[i] = names[i];\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1740405,
                "title": "javascript-solution",
                "content": "```\\nvar getFolderNames = function(names) {\\n  const namesCountMap = {};\\n  let solution = [];\\n  for (let i = 0; i < names.length; i++) {\\n      let currName = names[i];\\n\\n      if (!(currName in namesCountMap)) {\\n        solution.push(currName);\\n        namesCountMap[currName] = 0;\\n      } else {\\n        namesCountMap[currName] += 1;\\n        let currNameCount = namesCountMap[currName];\\n        let newName = `${currName}(${currNameCount})`;\\n        while (newName in namesCountMap) {\\n          newName = `${currName}(${++currNameCount})`;\\n        }\\n        solution.push(newName);\\n        namesCountMap[newName] = 0;\\n      }\\n  }\\n  return solution;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar getFolderNames = function(names) {\\n  const namesCountMap = {};\\n  let solution = [];\\n  for (let i = 0; i < names.length; i++) {\\n      let currName = names[i];\\n\\n      if (!(currName in namesCountMap)) {\\n        solution.push(currName);\\n        namesCountMap[currName] = 0;\\n      } else {\\n        namesCountMap[currName] += 1;\\n        let currNameCount = namesCountMap[currName];\\n        let newName = `${currName}(${currNameCount})`;\\n        while (newName in namesCountMap) {\\n          newName = `${currName}(${++currNameCount})`;\\n        }\\n        solution.push(newName);\\n        namesCountMap[newName] = 0;\\n      }\\n  }\\n  return solution;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1553992,
                "title": "java-hashmap-with-comments",
                "content": "```\\n    public String[] getFolderNames(String[] names) {\\n        if(names == null || names.length == 0) {\\n            return names;\\n        }\\n        String[] res = new String[names.length];\\n        Map<String, Integer> freq = new HashMap<>(); // key - name; value - name\\'s already assigned largest number\\n        for(int i = 0; i < names.length; i++) {\\n\\t\\t    // current name\\n            String str = names[i];\\n            int count = 0;\\n            if(!freq.containsKey(str)) {\\n                freq.put(str, count);\\n                res[i] = str;\\n            }else {\\n                String newStr = str;\\n                // keep building the current name with an adding number until we can\\'t find the new created name in the map\\n                while(freq.containsKey(newStr)) {\\n\\t\\t\\t\\t    // get the already assigned largest number of current name\\n                    count = freq.get(str);\\n\\t\\t\\t\\t\\t// add it by 1\\n                    count++;\\n\\t\\t\\t\\t\\t// create a new name with current name and the added number\\n                    newStr = str + \"(\" + count + \")\";\\n                    // update the current name\\'s assigned number\\n                    freq.put(str, count);\\n                }\\n\\t\\t\\t\\t// found a unique name, add it to the result\\n                res[i] = newStr;\\n                // put the new created unique name into the map\\n                freq.put(newStr, 0);\\n            }\\n        }\\n        return res;\\n    }\\n```\\n\\nTime complexity: O(n)\\nSpace complexity: O(n)",
                "solutionTags": [],
                "code": "```\\n    public String[] getFolderNames(String[] names) {\\n        if(names == null || names.length == 0) {\\n            return names;\\n        }\\n        String[] res = new String[names.length];\\n        Map<String, Integer> freq = new HashMap<>(); // key - name; value - name\\'s already assigned largest number\\n        for(int i = 0; i < names.length; i++) {\\n\\t\\t    // current name\\n            String str = names[i];\\n            int count = 0;\\n            if(!freq.containsKey(str)) {\\n                freq.put(str, count);\\n                res[i] = str;\\n            }else {\\n                String newStr = str;\\n                // keep building the current name with an adding number until we can\\'t find the new created name in the map\\n                while(freq.containsKey(newStr)) {\\n\\t\\t\\t\\t    // get the already assigned largest number of current name\\n                    count = freq.get(str);\\n\\t\\t\\t\\t\\t// add it by 1\\n                    count++;\\n\\t\\t\\t\\t\\t// create a new name with current name and the added number\\n                    newStr = str + \"(\" + count + \")\";\\n                    // update the current name\\'s assigned number\\n                    freq.put(str, count);\\n                }\\n\\t\\t\\t\\t// found a unique name, add it to the result\\n                res[i] = newStr;\\n                // put the new created unique name into the map\\n                freq.put(newStr, 0);\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1539744,
                "title": "go",
                "content": "```\\nfunc getFolderNames(names []string) []string {\\n    var res []string\\n    set := make(map[string]int)\\n    for _, v := range names {\\n        if set[v] == 0 {\\n            set[v] = 1\\n            res = append(res, v)\\n        } else {\\n            i := set[v]\\n            for {\\n                tmp := v + \"(\" + strconv.Itoa(i) + \")\"\\n                if set[tmp] != 0 {\\n                    i++\\n                } else {\\n                    set[v] = i + 1\\n                    set[tmp] = 1\\n                    res = append(res, tmp)\\n                    break\\n                }\\n            }\\n        }\\n    }\\n    return res\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc getFolderNames(names []string) []string {\\n    var res []string\\n    set := make(map[string]int)\\n    for _, v := range names {\\n        if set[v] == 0 {\\n            set[v] = 1\\n            res = append(res, v)\\n        } else {\\n            i := set[v]\\n            for {\\n                tmp := v + \"(\" + strconv.Itoa(i) + \")\"\\n                if set[tmp] != 0 {\\n                    i++\\n                } else {\\n                    set[v] = i + 1\\n                    set[tmp] = 1\\n                    res = append(res, tmp)\\n                    break\\n                }\\n            }\\n        }\\n    }\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1531780,
                "title": "1487-why-this-incorrect",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        String[] res = new String[names.length];\\n        int index = 0;\\n        HashMap<String,Integer> map = new HashMap<>();\\n        for(String i : names){\\n            map.put(i,map.getOrDefault(i,0)+1);\\n            res[index] = i;\\n            if(map.get(i) != 1){\\n                res[index] = i + \"(\" + String.valueOf(map.get(i) - 1) + \")\";\\n                int a = map.get(i);\\n                while(map.containsKey(res[index])){\\n                    res[index] = i + \"(\" + String.valueOf(a) + \")\";\\n                    a++;\\n                }\\n            }\\n            \\n            index++;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        String[] res = new String[names.length];\\n        int index = 0;\\n        HashMap<String,Integer> map = new HashMap<>();\\n        for(String i : names){\\n            map.put(i,map.getOrDefault(i,0)+1);\\n            res[index] = i;\\n            if(map.get(i) != 1){\\n                res[index] = i + \"(\" + String.valueOf(map.get(i) - 1) + \")\";\\n                int a = map.get(i);\\n                while(map.containsKey(res[index])){\\n                    res[index] = i + \"(\" + String.valueOf(a) + \")\";\\n                    a++;\\n                }\\n            }\\n            \\n            index++;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525593,
                "title": "c-dictionary-100-faster",
                "content": "```\\npublic class Solution {\\n    public string[] GetFolderNames(string[] names) \\n    {\\n        string[] result = new string[names.Length];\\n        \\n        if(names == null || names.Length == 0) return result;\\n        \\n        Dictionary<string,int> suffixMap = new Dictionary<string,int>();\\n                \\n        for(int i = 0 ;  i < names.Length ; i++)\\n        {   \\n           if(suffixMap.ContainsKey(names[i]))\\n           {\\n               int newIndex = ++suffixMap[names[i]];\\n               string temp = names[i] + \"(\" + newIndex + \")\";  \\n\\t\\t\\t    // Need to check if there is already an entry present with the generated string\\n               while(suffixMap.ContainsKey(temp))\\n               {\\n                   newIndex = newIndex + 1;\\n                   temp = names[i] + \"(\" + newIndex + \")\"; \\n               }\\n               suffixMap.Add(temp,0);\\n               suffixMap[names[i]] = newIndex;\\n           }\\n           else\\n           {\\n               suffixMap.Add(names[i],0);\\n           }\\n        }        \\n        return suffixMap.Keys.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string[] GetFolderNames(string[] names) \\n    {\\n        string[] result = new string[names.Length];\\n        \\n        if(names == null || names.Length == 0) return result;\\n        \\n        Dictionary<string,int> suffixMap = new Dictionary<string,int>();\\n                \\n        for(int i = 0 ;  i < names.Length ; i++)\\n        {   \\n           if(suffixMap.ContainsKey(names[i]))\\n           {\\n               int newIndex = ++suffixMap[names[i]];\\n               string temp = names[i] + \"(\" + newIndex + \")\";  \\n\\t\\t\\t    // Need to check if there is already an entry present with the generated string\\n               while(suffixMap.ContainsKey(temp))\\n               {\\n                   newIndex = newIndex + 1;\\n                   temp = names[i] + \"(\" + newIndex + \")\"; \\n               }\\n               suffixMap.Add(temp,0);\\n               suffixMap[names[i]] = newIndex;\\n           }\\n           else\\n           {\\n               suffixMap.Add(names[i],0);\\n           }\\n        }        \\n        return suffixMap.Keys.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1518015,
                "title": "c-map",
                "content": "To me it was a nice question despite so many dislikes. :D\\nExplanation : If a file name doesn\\'t appeared in past, then simply store in to the ans array and increment the minimum no.(k) by 1.\\nto do this we can maintain a map from file name to minimum k value.\\n\\nChallenge was to figure out minimum when a file name is already present in map.\\nwe can handle this by incrementing k and generating the file name.\\nIf filename is already there in map we will increment k and look for the next one.\\n\\n//Below is the code for same.\\n```\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> mp;\\n        vector<string> ans;\\n        for(string s:names)\\n        {\\n            if(mp.find(s) == mp.end())mp[s]++, ans.push_back(s);\\n            else\\n            {\\n                string tmp;\\n                while(1)\\n                {\\n                    tmp = s;\\n                    s += \"(\";\\n                    s += to_string(mp[tmp]);\\n                    s += \")\";\\n                    if(mp.find(s) == mp.end())break;\\n                    s = tmp;\\n                    mp[tmp]++;\\n                    s = tmp;\\n                }\\n                ans.push_back(s);\\n                mp[tmp]++; //original string\\n                mp[s]++; //new string\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        unordered_map<string, int> mp;\\n        vector<string> ans;\\n        for(string s:names)\\n        {\\n            if(mp.find(s) == mp.end())mp[s]++, ans.push_back(s);\\n            else\\n            {\\n                string tmp;\\n                while(1)\\n                {\\n                    tmp = s;\\n                    s += \"(\";\\n                    s += to_string(mp[tmp]);\\n                    s += \")\";\\n                    if(mp.find(s) == mp.end())break;\\n                    s = tmp;\\n                    mp[tmp]++;\\n                    s = tmp;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1462294,
                "title": "c-name-frequency-map",
                "content": "```\\n\\nclass Solution \\n{\\npublic:\\n    vector<string> getFolderNames(vector<string>& names)\\n    {\\n        unordered_map<string, int> name_str_frequency_map;\\n        \\n        vector<string> result_str;\\n        \\n        //\\n        //  NOTE:\\n        //\\n        //  Since we need to update the (name_str),\\n        //  we don\\'t want to use the (const) keyword.\\n        //\\n        \\n        for(string& name_str : names)\\n        {\\n            if(name_str_frequency_map.count(name_str))\\n            {\\n                ++name_str_frequency_map[name_str];\\n                \\n                const int cur_frequency = name_str_frequency_map[name_str];\\n\\n                string new_name_str = name_str + \"(\" + to_string(cur_frequency) + \")\";\\n                \\n                while(name_str_frequency_map.count(new_name_str))\\n                {\\n                    ++name_str_frequency_map[name_str];\\n                    \\n                    new_name_str = name_str + \"(\" + \\n                                   to_string(name_str_frequency_map[name_str]) + \")\";\\n                }\\n                \\n                //\\n                // Update the (name_str).\\n                //\\n                \\n                name_str = new_name_str;\\n            }\\n            \\n            //\\n            //  Initialize (the current name) on the map.\\n            //\\n            \\n            name_str_frequency_map[name_str] = 0;\\n            \\n            //\\n            //  Update the Result.\\n            //\\n            \\n            result_str.push_back(name_str);\\n        }\\n        \\n        return result_str;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution \\n{\\npublic:\\n    vector<string> getFolderNames(vector<string>& names)\\n    {\\n        unordered_map<string, int> name_str_frequency_map;\\n        \\n        vector<string> result_str;\\n        \\n        //\\n        //  NOTE:\\n        //\\n        //  Since we need to update the (name_str),\\n        //  we don\\'t want to use the (const) keyword.\\n        //\\n        \\n        for(string& name_str : names)\\n        {\\n            if(name_str_frequency_map.count(name_str))\\n            {\\n                ++name_str_frequency_map[name_str];\\n                \\n                const int cur_frequency = name_str_frequency_map[name_str];\\n\\n                string new_name_str = name_str + \"(\" + to_string(cur_frequency) + \")\";\\n                \\n                while(name_str_frequency_map.count(new_name_str))\\n                {\\n                    ++name_str_frequency_map[name_str];\\n                    \\n                    new_name_str = name_str + \"(\" + \\n                                   to_string(name_str_frequency_map[name_str]) + \")\";\\n                }\\n                \\n                //\\n                // Update the (name_str).\\n                //\\n                \\n                name_str = new_name_str;\\n            }\\n            \\n            //\\n            //  Initialize (the current name) on the map.\\n            //\\n            \\n            name_str_frequency_map[name_str] = 0;\\n            \\n            //\\n            //  Update the Result.\\n            //\\n            \\n            result_str.push_back(name_str);\\n        }\\n        \\n        return result_str;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1457872,
                "title": "python-solution-with-dictionary-easy-to-understand-with-explanation",
                "content": "Use a dictionary whose key is `file name ` and value is `next (possibly) available version`\\n\\nThe code below utilizes the helper function `append_version` which will improve the readability\\n\\n```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        def append_version(file_name, version):\\n            return f\"{file_name}({version})\"\\n        \\n        file_name_to_version = {} # key: file name, value: next (possibly) available version\\n    \\n        output = []\\n        for file_name in names:\\n            if file_name not in file_name_to_version:\\n                file_name_to_version[file_name] = 1\\n                output.append(file_name)\\n                continue\\n\\n            version = file_name_to_version[file_name]\\n            versioned_file_name = append_version(file_name, version)\\n            while versioned_file_name in file_name_to_version:\\n                version += 1\\n                versioned_file_name = append_version(file_name, version)\\n\\n            file_name_to_version[versioned_file_name] = 1\\n            file_name_to_version[file_name] = version\\n            output.append(versioned_file_name)\\n\\n        return output\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        def append_version(file_name, version):\\n            return f\"{file_name}({version})\"\\n        \\n        file_name_to_version = {} # key: file name, value: next (possibly) available version\\n    \\n        output = []\\n        for file_name in names:\\n            if file_name not in file_name_to_version:\\n                file_name_to_version[file_name] = 1\\n                output.append(file_name)\\n                continue\\n\\n            version = file_name_to_version[file_name]\\n            versioned_file_name = append_version(file_name, version)\\n            while versioned_file_name in file_name_to_version:\\n                version += 1\\n                versioned_file_name = append_version(file_name, version)\\n\\n            file_name_to_version[versioned_file_name] = 1\\n            file_name_to_version[file_name] = version\\n            output.append(versioned_file_name)\\n\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1447306,
                "title": "simple-python-o-n-amortized-dictionary-set-solution",
                "content": "```Python\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        ret, ret_set, name2nextSuffix = [], set(), {}\\n        for n in names:\\n            if n not in name2nextSuffix:\\n                ret.append(n)\\n                ret_set.add(n)\\n                name2nextSuffix[n] = 1\\n            else:\\n                suffix = name2nextSuffix[n]\\n                while n+\\'(\\'+str(suffix)+\\')\\' in ret_set:\\n                    suffix += 1\\n                    name2nextSuffix[n] += 1\\n                name2nextSuffix[n] += 1\\n                name2nextSuffix[n+\\'(\\'+str(suffix)+\\')\\'] = 1\\n                ret.append(n+\\'(\\'+str(suffix)+\\')\\')                \\n        return ret\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```Python\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        ret, ret_set, name2nextSuffix = [], set(), {}\\n        for n in names:\\n            if n not in name2nextSuffix:\\n                ret.append(n)\\n                ret_set.add(n)\\n                name2nextSuffix[n] = 1\\n            else:\\n                suffix = name2nextSuffix[n]\\n                while n+\\'(\\'+str(suffix)+\\')\\' in ret_set:\\n                    suffix += 1\\n                    name2nextSuffix[n] += 1\\n                name2nextSuffix[n] += 1\\n                name2nextSuffix[n+\\'(\\'+str(suffix)+\\')\\'] = 1\\n                ret.append(n+\\'(\\'+str(suffix)+\\')\\')                \\n        return ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1403707,
                "title": "python-easy-to-understand-solution-using-dict-for-next-suffix",
                "content": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        name2nextSuffix = defaultdict(int)\\n        ret = []\\n        for name in names:\\n            if name not in name2nextSuffix:\\n                name2nextSuffix[name] = 1\\n                ret.append(name)\\n            else:\\n                nextSuffix = name2nextSuffix[name]\\n                while name+\\'(\\'+str(nextSuffix)+\\')\\' in name2nextSuffix:\\n                    nextSuffix += 1\\n                new_name = name+\\'(\\'+str(nextSuffix)+\\')\\'\\n                name2nextSuffix[name] = nextSuffix+1\\n                name2nextSuffix[new_name] = 1\\n                ret.append(new_name)\\n        return ret\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def getFolderNames(self, names: List[str]) -> List[str]:\\n        name2nextSuffix = defaultdict(int)\\n        ret = []\\n        for name in names:\\n            if name not in name2nextSuffix:\\n                name2nextSuffix[name] = 1\\n                ret.append(name)\\n            else:\\n                nextSuffix = name2nextSuffix[name]\\n                while name+\\'(\\'+str(nextSuffix)+\\')\\' in name2nextSuffix:\\n                    nextSuffix += 1\\n                new_name = name+\\'(\\'+str(nextSuffix)+\\')\\'\\n                name2nextSuffix[name] = nextSuffix+1\\n                name2nextSuffix[new_name] = 1\\n                ret.append(new_name)\\n        return ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1398484,
                "title": "",
                "content": "\\u4E0D\\u505A\\u4E86\\u3002\\u3002\\u3002\\u3002\\u3002\\u3002\\u3002\\u3002\\u3002\\u3002\\u3002",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1397522,
                "title": "c-solution-using-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    string checkinsert(string s,unordered_map<string,int> &mp)\\n    {\\n        string res;\\n        int k;\\n        if(mp.find(s) != mp.end() && mp[s]>1)\\n        {\\n            k=mp[s]-1;\\n            res=s+\"(\"+to_string(k)+\")\";\\n            while(mp.find(res) != mp.end()){\\n                res=s+\"(\"+to_string(++k)+\")\";\\n            }\\n            \\n            \\n            mp[res]++;\\n            return res;\\n        }\\n        \\n        else\\n            return s;\\n    }\\n    \\n    vector<string> getFolderNames(vector<string>& names) \\n    {\\n        vector<string> ans(names.size(),\"\");\\n        unordered_map<string,int> mp;\\n        \\n        for(int i=0;i<names.size();i++)\\n        {\\n            mp[names[i]]++;\\n            ans[i]=checkinsert(names[i],mp);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    string checkinsert(string s,unordered_map<string,int> &mp)\\n    {\\n        string res;\\n        int k;\\n        if(mp.find(s) != mp.end() && mp[s]>1)\\n        {\\n            k=mp[s]-1;\\n            res=s+\"(\"+to_string(k)+\")\";\\n            while(mp.find(res) != mp.end()){\\n                res=s+\"(\"+to_string(++k)+\")\";\\n            }\\n            \\n            \\n            mp[res]++;\\n            return res;\\n        }\\n        \\n        else\\n            return s;\\n    }\\n    \\n    vector<string> getFolderNames(vector<string>& names) \\n    {\\n        vector<string> ans(names.size(),\"\");\\n        unordered_map<string,int> mp;\\n        \\n        for(int i=0;i<names.size();i++)\\n        {\\n            mp[names[i]]++;\\n            ans[i]=checkinsert(names[i],mp);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1375116,
                "title": "java-solution-hashmap-hashset-beats-84",
                "content": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> number = new HashMap();\\n        String[] res = new String[names.length];\\n        HashSet<String> used = new HashSet();\\n        \\n        for (int i = 0; i < names.length; i++){\\n            String n = names[i];\\n            \\n            if (number.containsKey(n)){\\n                int num = number.get(n);\\n                String temp = n + \"(\" + num + \")\";\\n                while (used.contains(temp)){\\n                    num++;\\n                    temp = n + \"(\" + num + \")\";\\n                }\\n                res[i] = temp;\\n                \\n                number.put(n, num + 1);\\n                used.add(temp);\\n            }\\n            else if (used.contains(n)){\\n                int num = 1;\\n                String temp = n + \"(\" + num + \")\";\\n                while (used.contains(temp)){\\n                    num++;\\n                    temp = n + \"(\" + num + \")\";\\n                }\\n                res[i] = temp;\\n                number.put(n, num + 1);\\n                used.add(temp);\\n            }\\n            else{\\n                number.put(n, 1);\\n                used.add(n);\\n                res[i] = n;\\n            }\\n            \\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String[] getFolderNames(String[] names) {\\n        HashMap<String, Integer> number = new HashMap();\\n        String[] res = new String[names.length];\\n        HashSet<String> used = new HashSet();\\n        \\n        for (int i = 0; i < names.length; i++){\\n            String n = names[i];\\n            \\n            if (number.containsKey(n)){\\n                int num = number.get(n);\\n                String temp = n + \"(\" + num + \")\";\\n                while (used.contains(temp)){\\n                    num++;\\n                    temp = n + \"(\" + num + \")\";\\n                }\\n                res[i] = temp;\\n                \\n                number.put(n, num + 1);\\n                used.add(temp);\\n            }\\n            else if (used.contains(n)){\\n                int num = 1;\\n                String temp = n + \"(\" + num + \")\";\\n                while (used.contains(temp)){\\n                    num++;\\n                    temp = n + \"(\" + num + \")\";\\n                }\\n                res[i] = temp;\\n                number.put(n, num + 1);\\n                used.add(temp);\\n            }\\n            else{\\n                number.put(n, 1);\\n                used.add(n);\\n                res[i] = n;\\n            }\\n            \\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564816,
                "content": [
                    {
                        "username": "Leodicap99",
                        "content": "The sample test cases were poor the description was poor. Leetcode should stop posting such questions"
                    },
                    {
                        "username": "luoyuf",
                        "content": "one of most terrible questions I have ever seen.\\n\\nI mean you can post low quality questions, it\\'s ok. But pls do not show us this kind of disaster questions, it\\'s wasting people\\'s time.\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Its like a 12 year old got their question added to LC somehow. This question is A) near gibberish, B) not hard once you understand what is being asked, and C) has childish test data. Delete this "
                    },
                    {
                        "username": "krishnakorade",
                        "content": "One Piece Is Real"
                    },
                    {
                        "username": "ryananderson0147",
                        "content": "This test case seems incorrect to me.\n\n`[\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\",\"kaido(2)\"]`\n\nThe expected result is \n\n`[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\",\"kaido(2)(1)\"]`\n\nFrom the requirements \n\n\"if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\" \n\nHowever \"kaido(2)\" is not a name that is previously used in the array, so it should not receive a new Suffix.  Instead the following should be the expected result.\n\n`[\"kaido\",\"kaido(1)\",\"kaido(3)\",\"kaido(1)(1)\",\"kaido(2)\"]`\n\nWhere \"kaido(2)\" simply remains as is at the end, and we set \"kaido(3)\" to the middle value. That is certainly how I would expect this to work on an operating system. "
                    },
                    {
                        "username": "cswartzell",
                        "content": "How did you get to \"kaido(3)\" before processing \"kaido(2)\"? Per the question, you are processing them in order. \n1) \"kaido\" -new, add as is      > \"kaido\"\n2) \"kaido(1)\" -new, add as is   > \"kaido(1)\"\n3) \"kaido\" - NOT new, try adding (1) to it- NOT new, try adding (2) to it.... New, add modified result     >\"kaido(2)\n4) \"kaido(1)\" - NOT new, try adding (1) to it.... New, add modified result    > \"kaido(1)(1)\"\n5) \"kaido(2)\" - NOT new, try adding (1) to it.... New, add modified result  > \"kaido(2)(1)\""
                    },
                    {
                        "username": "shireGangZZ",
                        "content": "C++ solution for \\n\\'\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> result;\\n        \\n        unordered_map<string, int> frequency_counter;\\n        \\n        for(auto x: names){\\n            if(frequency_counter.find(x)==frequency_counter.end()){\\n                result.push_back(x);\\n                frequency_counter[x]++;\\n            } else {\\n                \\n                \\n                string temp = x+ \"(\"+ to_string(frequency_counter[x]) + \")\";\\n                while(frequency_counter.find(temp)!=frequency_counter.end()){\\n                    temp = x+ \"(\"+ to_string(++frequency_counter[x]) + \")\";\\n                }\\n                result.push_back(temp);\\n                frequency_counter[temp]++;\\n                frequency_counter[x]++;\\n            }\\n            \\n        }\\n        \\n        \\n        return result;\\n    }\\n};\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1573950,
                "content": [
                    {
                        "username": "Leodicap99",
                        "content": "The sample test cases were poor the description was poor. Leetcode should stop posting such questions"
                    },
                    {
                        "username": "luoyuf",
                        "content": "one of most terrible questions I have ever seen.\\n\\nI mean you can post low quality questions, it\\'s ok. But pls do not show us this kind of disaster questions, it\\'s wasting people\\'s time.\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Its like a 12 year old got their question added to LC somehow. This question is A) near gibberish, B) not hard once you understand what is being asked, and C) has childish test data. Delete this "
                    },
                    {
                        "username": "krishnakorade",
                        "content": "One Piece Is Real"
                    },
                    {
                        "username": "ryananderson0147",
                        "content": "This test case seems incorrect to me.\n\n`[\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\",\"kaido(2)\"]`\n\nThe expected result is \n\n`[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\",\"kaido(2)(1)\"]`\n\nFrom the requirements \n\n\"if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\" \n\nHowever \"kaido(2)\" is not a name that is previously used in the array, so it should not receive a new Suffix.  Instead the following should be the expected result.\n\n`[\"kaido\",\"kaido(1)\",\"kaido(3)\",\"kaido(1)(1)\",\"kaido(2)\"]`\n\nWhere \"kaido(2)\" simply remains as is at the end, and we set \"kaido(3)\" to the middle value. That is certainly how I would expect this to work on an operating system. "
                    },
                    {
                        "username": "cswartzell",
                        "content": "How did you get to \"kaido(3)\" before processing \"kaido(2)\"? Per the question, you are processing them in order. \n1) \"kaido\" -new, add as is      > \"kaido\"\n2) \"kaido(1)\" -new, add as is   > \"kaido(1)\"\n3) \"kaido\" - NOT new, try adding (1) to it- NOT new, try adding (2) to it.... New, add modified result     >\"kaido(2)\n4) \"kaido(1)\" - NOT new, try adding (1) to it.... New, add modified result    > \"kaido(1)(1)\"\n5) \"kaido(2)\" - NOT new, try adding (1) to it.... New, add modified result  > \"kaido(2)(1)\""
                    },
                    {
                        "username": "shireGangZZ",
                        "content": "C++ solution for \\n\\'\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> result;\\n        \\n        unordered_map<string, int> frequency_counter;\\n        \\n        for(auto x: names){\\n            if(frequency_counter.find(x)==frequency_counter.end()){\\n                result.push_back(x);\\n                frequency_counter[x]++;\\n            } else {\\n                \\n                \\n                string temp = x+ \"(\"+ to_string(frequency_counter[x]) + \")\";\\n                while(frequency_counter.find(temp)!=frequency_counter.end()){\\n                    temp = x+ \"(\"+ to_string(++frequency_counter[x]) + \")\";\\n                }\\n                result.push_back(temp);\\n                frequency_counter[temp]++;\\n                frequency_counter[x]++;\\n            }\\n            \\n        }\\n        \\n        \\n        return result;\\n    }\\n};\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1854177,
                "content": [
                    {
                        "username": "Leodicap99",
                        "content": "The sample test cases were poor the description was poor. Leetcode should stop posting such questions"
                    },
                    {
                        "username": "luoyuf",
                        "content": "one of most terrible questions I have ever seen.\\n\\nI mean you can post low quality questions, it\\'s ok. But pls do not show us this kind of disaster questions, it\\'s wasting people\\'s time.\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Its like a 12 year old got their question added to LC somehow. This question is A) near gibberish, B) not hard once you understand what is being asked, and C) has childish test data. Delete this "
                    },
                    {
                        "username": "krishnakorade",
                        "content": "One Piece Is Real"
                    },
                    {
                        "username": "ryananderson0147",
                        "content": "This test case seems incorrect to me.\n\n`[\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\",\"kaido(2)\"]`\n\nThe expected result is \n\n`[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\",\"kaido(2)(1)\"]`\n\nFrom the requirements \n\n\"if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\" \n\nHowever \"kaido(2)\" is not a name that is previously used in the array, so it should not receive a new Suffix.  Instead the following should be the expected result.\n\n`[\"kaido\",\"kaido(1)\",\"kaido(3)\",\"kaido(1)(1)\",\"kaido(2)\"]`\n\nWhere \"kaido(2)\" simply remains as is at the end, and we set \"kaido(3)\" to the middle value. That is certainly how I would expect this to work on an operating system. "
                    },
                    {
                        "username": "cswartzell",
                        "content": "How did you get to \"kaido(3)\" before processing \"kaido(2)\"? Per the question, you are processing them in order. \n1) \"kaido\" -new, add as is      > \"kaido\"\n2) \"kaido(1)\" -new, add as is   > \"kaido(1)\"\n3) \"kaido\" - NOT new, try adding (1) to it- NOT new, try adding (2) to it.... New, add modified result     >\"kaido(2)\n4) \"kaido(1)\" - NOT new, try adding (1) to it.... New, add modified result    > \"kaido(1)(1)\"\n5) \"kaido(2)\" - NOT new, try adding (1) to it.... New, add modified result  > \"kaido(2)(1)\""
                    },
                    {
                        "username": "shireGangZZ",
                        "content": "C++ solution for \\n\\'\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> result;\\n        \\n        unordered_map<string, int> frequency_counter;\\n        \\n        for(auto x: names){\\n            if(frequency_counter.find(x)==frequency_counter.end()){\\n                result.push_back(x);\\n                frequency_counter[x]++;\\n            } else {\\n                \\n                \\n                string temp = x+ \"(\"+ to_string(frequency_counter[x]) + \")\";\\n                while(frequency_counter.find(temp)!=frequency_counter.end()){\\n                    temp = x+ \"(\"+ to_string(++frequency_counter[x]) + \")\";\\n                }\\n                result.push_back(temp);\\n                frequency_counter[temp]++;\\n                frequency_counter[x]++;\\n            }\\n            \\n        }\\n        \\n        \\n        return result;\\n    }\\n};\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1804663,
                "content": [
                    {
                        "username": "Leodicap99",
                        "content": "The sample test cases were poor the description was poor. Leetcode should stop posting such questions"
                    },
                    {
                        "username": "luoyuf",
                        "content": "one of most terrible questions I have ever seen.\\n\\nI mean you can post low quality questions, it\\'s ok. But pls do not show us this kind of disaster questions, it\\'s wasting people\\'s time.\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Its like a 12 year old got their question added to LC somehow. This question is A) near gibberish, B) not hard once you understand what is being asked, and C) has childish test data. Delete this "
                    },
                    {
                        "username": "krishnakorade",
                        "content": "One Piece Is Real"
                    },
                    {
                        "username": "ryananderson0147",
                        "content": "This test case seems incorrect to me.\n\n`[\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\",\"kaido(2)\"]`\n\nThe expected result is \n\n`[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\",\"kaido(2)(1)\"]`\n\nFrom the requirements \n\n\"if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\" \n\nHowever \"kaido(2)\" is not a name that is previously used in the array, so it should not receive a new Suffix.  Instead the following should be the expected result.\n\n`[\"kaido\",\"kaido(1)\",\"kaido(3)\",\"kaido(1)(1)\",\"kaido(2)\"]`\n\nWhere \"kaido(2)\" simply remains as is at the end, and we set \"kaido(3)\" to the middle value. That is certainly how I would expect this to work on an operating system. "
                    },
                    {
                        "username": "cswartzell",
                        "content": "How did you get to \"kaido(3)\" before processing \"kaido(2)\"? Per the question, you are processing them in order. \n1) \"kaido\" -new, add as is      > \"kaido\"\n2) \"kaido(1)\" -new, add as is   > \"kaido(1)\"\n3) \"kaido\" - NOT new, try adding (1) to it- NOT new, try adding (2) to it.... New, add modified result     >\"kaido(2)\n4) \"kaido(1)\" - NOT new, try adding (1) to it.... New, add modified result    > \"kaido(1)(1)\"\n5) \"kaido(2)\" - NOT new, try adding (1) to it.... New, add modified result  > \"kaido(2)(1)\""
                    },
                    {
                        "username": "shireGangZZ",
                        "content": "C++ solution for \\n\\'\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> result;\\n        \\n        unordered_map<string, int> frequency_counter;\\n        \\n        for(auto x: names){\\n            if(frequency_counter.find(x)==frequency_counter.end()){\\n                result.push_back(x);\\n                frequency_counter[x]++;\\n            } else {\\n                \\n                \\n                string temp = x+ \"(\"+ to_string(frequency_counter[x]) + \")\";\\n                while(frequency_counter.find(temp)!=frequency_counter.end()){\\n                    temp = x+ \"(\"+ to_string(++frequency_counter[x]) + \")\";\\n                }\\n                result.push_back(temp);\\n                frequency_counter[temp]++;\\n                frequency_counter[x]++;\\n            }\\n            \\n        }\\n        \\n        \\n        return result;\\n    }\\n};\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1734966,
                "content": [
                    {
                        "username": "Leodicap99",
                        "content": "The sample test cases were poor the description was poor. Leetcode should stop posting such questions"
                    },
                    {
                        "username": "luoyuf",
                        "content": "one of most terrible questions I have ever seen.\\n\\nI mean you can post low quality questions, it\\'s ok. But pls do not show us this kind of disaster questions, it\\'s wasting people\\'s time.\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Its like a 12 year old got their question added to LC somehow. This question is A) near gibberish, B) not hard once you understand what is being asked, and C) has childish test data. Delete this "
                    },
                    {
                        "username": "krishnakorade",
                        "content": "One Piece Is Real"
                    },
                    {
                        "username": "ryananderson0147",
                        "content": "This test case seems incorrect to me.\n\n`[\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\",\"kaido(2)\"]`\n\nThe expected result is \n\n`[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\",\"kaido(2)(1)\"]`\n\nFrom the requirements \n\n\"if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\" \n\nHowever \"kaido(2)\" is not a name that is previously used in the array, so it should not receive a new Suffix.  Instead the following should be the expected result.\n\n`[\"kaido\",\"kaido(1)\",\"kaido(3)\",\"kaido(1)(1)\",\"kaido(2)\"]`\n\nWhere \"kaido(2)\" simply remains as is at the end, and we set \"kaido(3)\" to the middle value. That is certainly how I would expect this to work on an operating system. "
                    },
                    {
                        "username": "cswartzell",
                        "content": "How did you get to \"kaido(3)\" before processing \"kaido(2)\"? Per the question, you are processing them in order. \n1) \"kaido\" -new, add as is      > \"kaido\"\n2) \"kaido(1)\" -new, add as is   > \"kaido(1)\"\n3) \"kaido\" - NOT new, try adding (1) to it- NOT new, try adding (2) to it.... New, add modified result     >\"kaido(2)\n4) \"kaido(1)\" - NOT new, try adding (1) to it.... New, add modified result    > \"kaido(1)(1)\"\n5) \"kaido(2)\" - NOT new, try adding (1) to it.... New, add modified result  > \"kaido(2)(1)\""
                    },
                    {
                        "username": "shireGangZZ",
                        "content": "C++ solution for \\n\\'\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> result;\\n        \\n        unordered_map<string, int> frequency_counter;\\n        \\n        for(auto x: names){\\n            if(frequency_counter.find(x)==frequency_counter.end()){\\n                result.push_back(x);\\n                frequency_counter[x]++;\\n            } else {\\n                \\n                \\n                string temp = x+ \"(\"+ to_string(frequency_counter[x]) + \")\";\\n                while(frequency_counter.find(temp)!=frequency_counter.end()){\\n                    temp = x+ \"(\"+ to_string(++frequency_counter[x]) + \")\";\\n                }\\n                result.push_back(temp);\\n                frequency_counter[temp]++;\\n                frequency_counter[x]++;\\n            }\\n            \\n        }\\n        \\n        \\n        return result;\\n    }\\n};\\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1671565,
                "content": [
                    {
                        "username": "Leodicap99",
                        "content": "The sample test cases were poor the description was poor. Leetcode should stop posting such questions"
                    },
                    {
                        "username": "luoyuf",
                        "content": "one of most terrible questions I have ever seen.\\n\\nI mean you can post low quality questions, it\\'s ok. But pls do not show us this kind of disaster questions, it\\'s wasting people\\'s time.\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Its like a 12 year old got their question added to LC somehow. This question is A) near gibberish, B) not hard once you understand what is being asked, and C) has childish test data. Delete this "
                    },
                    {
                        "username": "krishnakorade",
                        "content": "One Piece Is Real"
                    },
                    {
                        "username": "ryananderson0147",
                        "content": "This test case seems incorrect to me.\n\n`[\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\",\"kaido(2)\"]`\n\nThe expected result is \n\n`[\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\",\"kaido(2)(1)\"]`\n\nFrom the requirements \n\n\"if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\" \n\nHowever \"kaido(2)\" is not a name that is previously used in the array, so it should not receive a new Suffix.  Instead the following should be the expected result.\n\n`[\"kaido\",\"kaido(1)\",\"kaido(3)\",\"kaido(1)(1)\",\"kaido(2)\"]`\n\nWhere \"kaido(2)\" simply remains as is at the end, and we set \"kaido(3)\" to the middle value. That is certainly how I would expect this to work on an operating system. "
                    },
                    {
                        "username": "cswartzell",
                        "content": "How did you get to \"kaido(3)\" before processing \"kaido(2)\"? Per the question, you are processing them in order. \n1) \"kaido\" -new, add as is      > \"kaido\"\n2) \"kaido(1)\" -new, add as is   > \"kaido(1)\"\n3) \"kaido\" - NOT new, try adding (1) to it- NOT new, try adding (2) to it.... New, add modified result     >\"kaido(2)\n4) \"kaido(1)\" - NOT new, try adding (1) to it.... New, add modified result    > \"kaido(1)(1)\"\n5) \"kaido(2)\" - NOT new, try adding (1) to it.... New, add modified result  > \"kaido(2)(1)\""
                    },
                    {
                        "username": "shireGangZZ",
                        "content": "C++ solution for \\n\\'\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<string> getFolderNames(vector<string>& names) {\\n        vector<string> result;\\n        \\n        unordered_map<string, int> frequency_counter;\\n        \\n        for(auto x: names){\\n            if(frequency_counter.find(x)==frequency_counter.end()){\\n                result.push_back(x);\\n                frequency_counter[x]++;\\n            } else {\\n                \\n                \\n                string temp = x+ \"(\"+ to_string(frequency_counter[x]) + \")\";\\n                while(frequency_counter.find(temp)!=frequency_counter.end()){\\n                    temp = x+ \"(\"+ to_string(++frequency_counter[x]) + \")\";\\n                }\\n                result.push_back(temp);\\n                frequency_counter[temp]++;\\n                frequency_counter[x]++;\\n            }\\n            \\n        }\\n        \\n        \\n        return result;\\n    }\\n};\\n\\'\\'\\'"
                    }
                ]
            }
        ]
    }
]