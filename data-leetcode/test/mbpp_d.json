[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "import std.math;\nimport std.typecons;\nlong next_smallest_palindrome(long num) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong temp = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tlong temp5 = 0;\n\tlong temp6 = 0;\n\tlong temp7 = 0;\n\tlong temp8 = 0;\n\tlong temp9 = 0;\n\tlong temp10 = 0;\n\tlong temp11 = 0;\n\tlong temp12 = 0;\n\tlong temp13 = 0;\n\tlong temp14 = 0;\n\tlong temp15 = 0;\n\tlong temp16 = 0;\n\tlong temp17 = 0;\n\tlong temp18 = 0;\n\tlong temp19 = 0;\n\tlong temp20 = 0;\n\tlong temp21 = 0;\n\tlong temp22 = 0;\n\tlong temp23 = 0;\n\tlong temp24 = 0;\n\tlong temp25 = 0;\n\tlong temp26 = 0;\n\tlong temp27 = 0;\n\tlong temp28 = 0;\n\tlong temp29 = 0;\n\tlong temp30 = 0;\n\tlong temp31 = 0;\n\tlong temp32 = 0;\n\tlong temp33 = 0;\n\tlong temp34 = 0;\n\tlong temp35 = 0;\n\tlong temp36 = 0;\n\tlong temp37 = 0;\n\tlong temp38 = 0;\n\tlong temp39 = 0;\n\tlong temp40 = 0;\n\tlong temp41 = 0;\n\tlong temp42 = 0;\n\tlong temp43 = 0;\n\tlong temp44 = 0;\n\tlong temp45 = 0;\n\tlong temp46 = 0;\n\tlong temp47 = 0;\n\tlong temp48 = 0;\n\tlong temp49 = 0;\n\tlong temp50 = 0;\n\tlong temp51 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = next_smallest_palindrome;",
            "assert(candidate(99L) == 101L);",
            "assert(candidate(1221L) == 1331L);",
            "assert(candidate(120L) == 121L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "import std.math;\nimport std.typecons;\nlong kth_element(long[] arr, long k) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_max = arr.length;\n\tlong k_min = 0;\n\tlong k_sum = 0;\n\tlong k_sum_max = 0;\n\tlong k_sum_min = 0;\n\tlong k_sum_sum = 0;\n\tlong k_sum_sum_max = 0;\n\tlong k_sum_sum_min = 0;\n\tlong k_sum_sum_sum = 0;\n\tlong k_sum_sum_sum_max = 0;\n\tlong k_sum_sum_sum_min = 0;\n\tlong k_sum_sum_sum_sum = 0;\n\tlong k_sum_sum_sum_sum_max = 0;\n\tlong k_sum_sum_sum_sum_min = 0;\n\tlong k_sum_sum_sum_sum_sum = 0;\n\tlong k_sum_sum_sum_sum_sum_max = 0;\n\tlong k_sum_sum_sum_sum_sum_min = 0;\n\tlong k_sum_sum_sum_sum_sum_sum = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_max = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_min = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\tlong k_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\tlong k_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = kth_element;",
            "assert(candidate([12L, 3L, 5L, 7L, 19L], 2L) == 3L);",
            "assert(candidate([17L, 24L, 8L, 23L], 3L) == 8L);",
            "assert(candidate([16L, 21L, 25L, 36L, 4L], 4L) == 36L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "import std.math;\nimport std.typecons;\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < word.length(); i++) \n\t{\n\t\tif (word[i] == 'A' || word[i] == 'B' || word[i] == 'C' || word[i] == 'D' || word[i] == 'E' || word[i] == 'F' || word[i] == 'G' || word[i] == 'H' || word[i] == 'I' || word[i] == 'J' || word[i] == 'K' || word[i] == 'L' || word[i] == 'M' || word[i] == 'N' || word[i] == 'O' || word[i] == 'P' || word[i] == 'Q' || word[i] == 'R' || word[i] == 'S' || word[i] == 'T' || word[i] == 'U' || word[i] == 'V' || word[i] == 'W' || word[i] == 'X' || word[i] == 'Y' || word[i] == 'Z') \n\t\t{\n\t\t\tresult += word[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += word[i] + \" \";\n\t\t}\n\t}\n\treturn result;\n}\n\nstring camel_to_snake(string word) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < word.length(); i++) \n\t{\n\t\tif (word[i] == 'A' || word[i] == 'B' || word[i] == 'C' || word[i] == 'D' || word[i] == 'E' || word[i] == 'F' || word[i] == 'G' || word[i] == 'H' || word[i] == 'I' ||\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = snake_to_camel;",
            "assert(candidate(\"python_program\") == \"PythonProgram\");",
            "assert(candidate(\"python_language\") == \"PythonLanguage\");",
            "assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "import std.math;\nimport std.typecons;\nlong eulerian_num(long n, long m) \n{\n\tlong a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tlong d = 1;\n\tlong e = 1;\n\tlong f = 1;\n\tlong g = 1;\n\tlong h = 1;\n\tlong i = 1;\n\tlong j = 1;\n\tlong k = 1;\n\tlong l = 1;\n\tlong m = 1;\n\tlong n = 1;\n\tlong o = 1;\n\tlong p = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong s = 1;\n\tlong t = 1;\n\tlong u = 1;\n\tlong v = 1;\n\tlong w = 1;\n\tlong x = 1;\n\tlong y = 1;\n\tlong z = 1;\n\tlong a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tlong d = 1;\n\tlong e = 1;\n\tlong f = 1;\n\tlong g = 1;\n\tlong h = 1;\n\tlong i = 1;\n\tlong j = 1;\n\tlong k = 1;\n\tlong l = 1;\n\tlong m = 1;\n\tlong n = 1;\n\tlong o = 1;\n\tlong p = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong s = 1;\n\tlong t = 1;\n\tlong u = 1;\n\tlong v = 1;\n\tlong w = 1;\n\tlong x = 1;\n\tlong y = 1;\n\tlong z = 1;\n\tlong a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tlong d = 1;\n\tlong e = 1;\n\tlong f = 1;\n\tlong g = 1;\n\tlong h = 1;\n\tlong i = 1;\n\tlong j = 1;\n\tlong k = 1;\n\tlong l = 1;\n\tlong m = 1;\n\tlong n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = eulerian_num;",
            "assert(candidate(3L, 1L) == 4L);",
            "assert(candidate(4L, 1L) == 11L);",
            "assert(candidate(5L, 3L) == 26L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "import std.math;\nimport std.typecons;\nstring[][] sort_sublists(string[][] input_list) \n{\n\tstring[][] output_list = new string[input_list.length][input_list[0].length];\n\tint i = 0;\n\tint j = 0;\n\tfor (int k = 0; k < input_list.length; k++) {\n\t\tfor (int l = 0; l < input_list[k].length; l++) {\n\t\t\toutput_list[i][j] = input_list[k][l];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn output_list;\n}\n\nstring[][] sort_sublists_reverse(string[][] input_list) \n{\n\tstring[][] output_list = new string[input_list.length][input_list[0].length];\n\tint i = 0;\n\tint j = 0;\n\tfor (int k = 0; k < input_list.length; k++) {\n\t\tfor (int l = 0; l < input_list[k].length; l++) {\n\t\t\toutput_list[i][j] = input_list[k][l];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn output_list;\n}\n\nstring[][] sort_sublists_reverse_reverse(string[][] input_list) \n{\n\tstring[][] output_list = new string[input_list.length][input_list[0].length];\n\tint i = 0;\n\tint j = 0;\n\tfor (int k = 0; k < input_list.length; k++) {\n\t\tfor (int l = 0; l < input_list[k].length; l++) {\n\t\t\toutput_list[i][j] = input_list[k][l];\n\t\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sort_sublists;",
            "assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);",
            "assert(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]);",
            "assert(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a dthon function to count true booleans in the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong count(bool[] lst) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < lst.length; i++) \n\t{\n\t\tif (lst[i]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count(int[] lst) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < lst.length; i++) \n\t{\n\t\tif (lst[i]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count(long[] lst) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < lst.length; i++) \n\t{\n\t\tif (lst[i]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count(float[] lst) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < lst.length; i++) \n\t{\n\t\tif (lst[i]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count(double[] lst) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < lst.length; i++) \n\t{\n\t\tif (lst[i]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given array to the given tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long, long) add_lists(long[] test_list, Tuple!(long, long) test_tup) \n{\n\tlong i, j, k, l;\n\tlong[] test_list_copy;\n\ttest_list_copy = new long[test_list.length];\n\tfor (i = 0; i < test_list.length; i++) {\n\t\ttest_list_copy[i] = test_list[i];\n\t}\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (j = 0; j < test_list.length; j++) {\n\t\t\tfor (k = 0; k < test_list.length; k++) {\n\t\t\t\ttest_list_copy[i] += test_list[j] + test_list[k];\n\t\t\t}\n\t\t}\n\t}\n\treturn new Tuple!(test_list_copy, test_tup);\n}\nTuple!(long, long, long, long, long) add_lists(long[] test_list, Tuple!(long, long, long) test_tup) \n{\n\tlong i, j, k, l;\n\tlong[] test_list_copy;\n\ttest_list_copy = new long[test_list.length];\n\tfor (i = 0; i < test_list.length; i++) {\n\t\ttest_list_copy[i] = test_list[i];\n\t}\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (j = 0; j < test_list.length; j++) {\n\t\t\tfor (k = 0; k < test_list.length; k++) {\n\t\t\t\ttest_list_copy[i] += test_list[j] + test_list[k];\n\t\t\t}\n\t\t}\n\t}\n\treturn new Tuple!(test_list_copy, test_t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = add_lists;",
            "assert(candidate([5L, 6L, 7L], tuple(9L, 10L)) == tuple(9L, 10L, 5L, 6L, 7L));",
            "assert(candidate([6L, 7L, 8L], tuple(10L, 11L)) == tuple(10L, 11L, 6L, 7L, 8L));",
            "assert(candidate([7L, 8L, 9L], tuple(11L, 12L)) == tuple(11L, 12L, 7L, 8L, 9L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three arrays into a single sorted array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] merge_sorted_list(long[] num1, long[] num2, long[] num3) \n{\n\tlong[] result = new long[num1.length + num2.length + num3.length];\n\tlong[] temp = new long[num1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint j1 = 0;\n\tint j2 = 0;\n\tint j3 = 0;\n\tint k1 = 0;\n\tint k2 = 0;\n\tint k3 = 0;\n\tint l1 = 0;\n\tint l2 = 0;\n\tint l3 = 0;\n\tint m1 = 0;\n\tint m2 = 0;\n\tint m3 = 0;\n\tint n1 = 0;\n\tint n2 = 0;\n\tint n3 = 0;\n\tint p1 = 0;\n\tint p2 = 0;\n\tint p3 = 0;\n\tint q1 = 0;\n\tint q2 = 0;\n\tint q3 = 0;\n\tint r1 = 0;\n\tint r2 = 0;\n\tint r3 = 0;\n\tint s1 = 0;\n\tint s2 = 0;\n\tint s3 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = merge_sorted_list;",
            "assert(candidate([25L, 24L, 15L, 4L, 5L, 29L, 110L], [19L, 20L, 11L, 56L, 25L, 233L, 154L], [24L, 26L, 54L, 48L]) == [4L, 5L, 11L, 15L, 19L, 20L, 24L, 24L, 25L, 25L, 26L, 29L, 48L, 54L, 56L, 110L, 154L, 233L]);",
            "assert(candidate([1L, 3L, 5L, 6L, 8L, 9L], [2L, 5L, 7L, 11L], [1L, 4L, 7L, 8L, 12L]) == [1L, 1L, 2L, 3L, 4L, 5L, 5L, 6L, 7L, 7L, 8L, 8L, 9L, 11L, 12L]);",
            "assert(candidate([18L, 14L, 10L, 9L, 8L, 7L, 9L, 3L, 2L, 4L, 1L], [25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L], [12L, 74L, 9L, 50L, 61L, 41L]) == [1L, 2L, 3L, 4L, 7L, 8L, 9L, 9L, 9L, 10L, 12L, 14L, 14L, 18L, 22L, 25L, 25L, 35L, 41L, 50L, 58L, 61L, 65L, 74L, 75L, 85L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a dthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "import std.math;\nimport std.typecons;\nlong odd_Equivalent(string s, long n) \n{\n\tlong i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = odd_Equivalent;",
            "assert(candidate(\"011001\", 6L) == 3L);",
            "assert(candidate(\"11011\", 5L) == 4L);",
            "assert(candidate(\"1010\", 4L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "import std.math;\nimport std.typecons;\nbool check_integer(string text) \n{\n\tif(text.size() == 0)\n\t\treturn true;\n\t\n\tif(text[0] == '-')\n\t{\n\t\tif(text.size() == 1)\n\t\t\treturn false;\n\t\t\n\t\tif(text[1] == '-')\n\t\t{\n\t\t\tif(text.size() == 2)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(text[2] == '-')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif(text[0] == '+')\n\t{\n\t\tif(text.size() == 1)\n\t\t\treturn false;\n\t\t\n\t\tif(text[1] == '+')\n\t\t{\n\t\t\tif(text.size() == 2)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(text[2] == '+')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif(text[0] == '-')\n\t{\n\t\tif(text.size() == 1)\n\t\t\treturn false;\n\t\t\n\t\tif(text[1] == '-')\n\t\t{\n\t\t\tif(text.size() == 2)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(text[2] == '-')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn false;\n}\n\nbool check_float(string text) \n{\n\tif(text.size() == 0)\n\t\treturn true;\n\t\n\tif(text[0] == '-')\n\t{\n\t\tif(text.size() == 1)\n\t\t\treturn false;\n\t\t\n\t\tif(text[1] == '-')\n\t\t{\n\t\t\tif(text.size() == 2)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(text\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_integer;",
            "assert(candidate(\"python\") == false);",
            "assert(candidate(\"1\") == true);",
            "assert(candidate(\"12345\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "import std.math;\nimport std.typecons;\nlong tuple_to_int(Tuple!(long, long, long) nums) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult = result * 10 + nums[i];\n\t}\n\treturn result;\n}\n\nlong tuple_to_int(Tuple!(long, long, long) nums) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult = result * 10 + nums[i];\n\t}\n\treturn result;\n}\n\nlong tuple_to_int(Tuple!(long, long, long) nums) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult = result * 10 + nums[i];\n\t}\n\treturn result;\n}\n\nlong tuple_to_int(Tuple!(long, long, long) nums) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult = result * 10 + nums[i];\n\t}\n\treturn result;\n}\n\nlong tuple_to_int(Tuple!(long, long, long) nums) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult = result * 10 + nums[i];\n\t}\n\treturn result;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in an array of arrays to floats.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(float, float)[] list_to_float(Tuple!(string, string)[] test_list) \n{\n\tTuple!(float, float) result = std::make_tuple(0.0f, 0.0f);\n\tfor (int i = 0; i < test_list.size(); i++)\n\t{\n\t\tresult = std::tuple(result, std::make_tuple(test_list[i][0], test_list[i][1]));\n\t}\n\treturn result;\n}\n\nTuple!(double, double)[] list_to_double(Tuple!(string, string)[] test_list) \n{\n\tTuple!(double, double) result = std::make_tuple(0.0, 0.0);\n\tfor (int i = 0; i < test_list.size(); i++)\n\t{\n\t\tresult = std::tuple(result, std::make_tuple(test_list[i][0], test_list[i][1]));\n\t}\n\treturn result;\n}\n\nTuple!(int, int)[] list_to_int(Tuple!(string, string)[] test_list) \n{\n\tTuple!(int, int) result = std::make_tuple(0, 0);\n\tfor (int i = 0; i < test_list.size(); i++)\n\t{\n\t\tresult = std::tuple(result, std::make_tuple(test_list[i][0], test_list[i][1]));\n\t}\n\treturn result;\n}\n\nTuple!(long, long)[] list_to_long(Tuple!(\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = list_to_float;",
            "assert(candidate([tuple(\"3\", \"4\"), tuple(\"1\", \"26.45\"), tuple(\"7.32\", \"8\"), tuple(\"4\", \"8\")]) == [tuple(3.0, 4.0), tuple(1.0, 26.45), tuple(7.32, 8.0), tuple(4.0, 8.0)]);",
            "assert(candidate([tuple(\"4\", \"4\"), tuple(\"2\", \"27\"), tuple(\"4.12\", \"9\"), tuple(\"7\", \"11\")]) == [tuple(4.0, 4.0), tuple(2.0, 27.0), tuple(4.12, 9.0), tuple(7.0, 11.0)]);",
            "assert(candidate([tuple(\"6\", \"78\"), tuple(\"5\", \"26.45\"), tuple(\"1.33\", \"4\"), tuple(\"82\", \"13\")]) == [tuple(6.0, 78.0), tuple(5.0, 26.45), tuple(1.33, 4.0), tuple(82.0, 13.0)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to an array of strings split on the space character.",
        "code": "import std.math;\nimport std.typecons;\nstring[] string_to_list(string string) \n{\n\tstring[] string_array = new string[string.length()];\n\tfor (int i = 0; i < string.length(); i++) \n\t{\n\t\tstring_array[i] = string.substring(i, i + 1);\n\t}\n\treturn string_array;\n}\n\nstring[] string_to_list(string string, int start, int end) \n{\n\tstring[] string_array = new string[string.length()];\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tstring_array[i] = string.substring(i, i + 1);\n\t}\n\treturn string_array;\n}\n\nstring[] string_to_list(string string, int start, int end, int count) \n{\n\tstring[] string_array = new string[string.length()];\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tstring_array[i] = string.substring(i, i + count);\n\t}\n\treturn string_array;\n}\n\nstring[] string_to_list(string string, int start, int end, int count, int start_index) \n{\n\tstring[] string_array = new string[string.length()];\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tstring_array[i] = string.substring(i, i + count);\n\t\tif (i == start_index) \n\t\t{\n\t\t\tstring_array[i] = string.substring(i, i + 1);\n\t\t}\n\t}\n\treturn string_array\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = string_to_list;",
            "assert(candidate(\"python programming\") == [\"python\", \"programming\"]);",
            "assert(candidate(\"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"]);",
            "assert(candidate(\"write a program\") == [\"write\", \"a\", \"program\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a dthon function to find the element that appears only once in a sorted array.",
        "code": "import std.math;\nimport std.typecons;\nlong search(long[] arr) \n{\n\tlong i, j, k, l, m, n, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18, m19, m20, m21, m22, m23, m24, m25, m26, m27, m28, m29, m30, m31, m32, m33, m34, m35, m36, m37, m38, m39, m40, m41, m42, m43, m44, m45, m46, m47, m48, m49, m50, m51, m52, m53, m54, m55, m56, m57, m58, m59, m60, m61, m62, m63, m64, m65, m66, m67, m68, m69, m70, m71, m72, m73, m74, m75, m76, m77, m78, m79, m80, m81, m82, m83, m84, m85, m86, m87, m88, m89, m90, m91, m92, m93, m94, m95, m96, m97, m98, m99, m100, m101, m102, m103, m104, m105, m106, m107, m108, m109, m110, m111, m112, m113, m114, m115, m116, m117, m118, m119, m120, m121, m122, m123, m124, m125, m126, m127, m128, m129, m130, m131, m132, m133, m134, m135, m136, m137, m138, m139, m140, m141, m142, m143, m144, m145, m146, m147, m148, m149,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = search;",
            "assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);",
            "assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);",
            "assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a dthon function to remove first and last occurrence of a given character from the string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_Occ(string s, string ch) \n{\n\tstring temp = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i33 = 0;\n\tint i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_Occ;",
            "assert(candidate(\"hello\", \"l\") == \"heo\");",
            "assert(candidate(\"abcda\", \"a\") == \"bcd\");",
            "assert(candidate(\"PHP\", \"P\") == \"H\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_product_tuple(Tuple!(long, long)[] list1) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong max_product_tuple = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_product_tuple;",
            "assert(candidate([tuple(2L, 7L), tuple(2L, 6L), tuple(1L, 8L), tuple(4L, 9L)]) == 36L);",
            "assert(candidate([tuple(10L, 20L), tuple(15L, 2L), tuple(5L, 10L)]) == 200L);",
            "assert(candidate([tuple(11L, 44L), tuple(10L, 15L), tuple(20L, 5L), tuple(12L, 9L)]) == 484L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "import std.math;\nimport std.typecons;\nlong amicable_numbers_sum(long limit) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= limit) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong amicable_numbers_sum_of_numbers(long limit) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= limit) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong amicable_numbers_sum_of_numbers_of_numbers(long limit) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= limit) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong amicable_numbers_sum_of_numbers_of_numbers_of_numbers(long limit) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= limit) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong amicable_numbers_sum_of_numbers_of_numbers_of_numbers(long limit) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= limit) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "import std.math;\nimport std.typecons;\nlong find_length(string string) \n{\n\tlong max_diff = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 0)\n\t\t{\n\t\t\tmax_diff = std::max(max_diff, i);\n\t\t}\n\t}\n\treturn max_diff;\n}\n\nlong find_length_sub(string string) \n{\n\tlong max_diff = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 0)\n\t\t{\n\t\t\tmax_diff = std::max(max_diff, i);\n\t\t}\n\t}\n\treturn max_diff;\n}\n\nlong find_length_sub_sub(string string) \n{\n\tlong max_diff = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 0)\n\t\t{\n\t\t\tmax_diff = std::max(max_diff, i);\n\t\t}\n\t}\n\treturn max_diff;\n}\n\nlong find_length_sub_sub_sub(string string) \n{\n\tlong max_diff = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 0)\n\t\t{\n\t\t\tmax_diff = std::max(max_diff, i);\n\t\t}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_length;",
            "assert(candidate(\"11000010001\") == 6L);",
            "assert(candidate(\"10111\") == 1L);",
            "assert(candidate(\"11011101100101\") == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a dthon function to find the sum of common divisors of two given numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong sum(long a, long b) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w1 = 0;\n\tlong w2 = 0;\n\tlong w3 = 0;\n\tlong w4 = 0;\n\tlong w5 = 0;\n\tlong w6 = 0;\n\tlong w7 = 0;\n\tlong w8 = 0;\n\tlong w9 = 0;\n\tlong w10 = 0;\n\tlong w11 = 0;\n\tlong w12 = 0;\n\tlong w13 = 0;\n\tlong w14 = 0;\n\tlong w15 = 0;\n\tlong w16 = 0;\n\tlong w17 = 0;\n\tlong w18 = 0;\n\tlong w19 = 0;\n\tlong w20 = 0;\n\tlong w21 = 0;\n\tlong w22 = 0;\n\tlong w23 = 0;\n\tlong w24 = 0;\n\tlong w25 = 0;\n\tlong w26 = 0;\n\tlong w27 = 0;\n\tlong w28 = 0;\n\tlong w29 = 0;\n\tlong w30 = 0;\n\tlong w31 = 0;\n\tlong w32 = 0;\n\tlong w33 = 0;\n\tlong w34 = 0;\n\tlong w35 = 0;\n\tlong w36 = 0;\n\tlong w37 = 0;\n\tlong w38 = 0;\n\tlong w39 = 0;\n\tlong w40 = 0;\n\tlong w41 = 0;\n\tlong w42\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum;",
            "assert(candidate(10L, 15L) == 6L);",
            "assert(candidate(100L, 150L) == 93L);",
            "assert(candidate(4L, 6L) == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "import std.math;\nimport std.typecons;\nlong multiply_int(long x, long y) \n{\n\tlong result = 0;\n\t\n\tif (x == 0)\n\t{\n\t\treturn y;\n\t}\n\t\n\tif (y == 0)\n\t{\n\t\treturn x;\n\t}\n\t\n\tif (x < 0)\n\t{\n\t\tresult = -result;\n\t\tx = -x;\n\t}\n\t\n\tif (y < 0)\n\t{\n\t\tresult = -result;\n\t\ty = -y;\n\t}\n\t\n\tif (x > y)\n\t{\n\t\tresult = x;\n\t\ty = -y;\n\t}\n\t\n\treturn result;\n}\n\nlong multiply_long(long x, long y) \n{\n\tlong result = 0;\n\t\n\tif (x == 0)\n\t{\n\t\treturn y;\n\t}\n\t\n\tif (y == 0)\n\t{\n\t\treturn x;\n\t}\n\t\n\tif (x < 0)\n\t{\n\t\tresult = -result;\n\t\tx = -x;\n\t}\n\t\n\tif (y < 0)\n\t{\n\t\tresult = -result;\n\t\ty = -y;\n\t}\n\t\n\tif (x > y)\n\t{\n\t\tresult = x;\n\t\ty = -y;\n\t}\n\t\n\treturn result;\n}\n\ndouble multiply_double(double x, double y) \n{\n\tdouble result = 0;\n\t\n\tif (x == 0)\n\t{\n\t\treturn y;\n\t}\n\t\n\tif (y == 0)\n\t{\n\t\treturn x;\n\t}\n\t\n\tif (x < 0)\n\t{\n\t\tresult = -result;\n\t\tx = -x;\n\t}\n\t\n\tif (y < 0)\n\t{\n\t\tresult = -result;\n\t\ty = -y;\n\t}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = multiply_int;",
            "assert(candidate(10L, 20L) == 200L);",
            "assert(candidate(5L, 10L) == 50L);",
            "assert(candidate(4L, 8L) == 32L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given array of words.",
        "code": "import std.math;\nimport std.typecons;\nstring[] long_words(long n, string str) \n{\n\tstring[] words = new string[n];\n\tint i = 0;\n\tfor (i = 0; i < str.length(); i++) {\n\t\tif (str[i] > n) {\n\t\t\twords[i] = str.substring(0, i);\n\t\t}\n\t}\n\treturn words;\n}\n\nstring[] long_words(long n, string[] words) \n{\n\tstring[] words2 = new string[n];\n\tint i = 0;\n\tfor (i = 0; i < words.length; i++) {\n\t\tif (words[i].length() > n) {\n\t\t\twords2[i] = words[i];\n\t\t}\n\t}\n\treturn words2;\n}\n\nstring[] long_words(long n, string[] words, string[] words2) \n{\n\tstring[] words3 = new string[n];\n\tint i = 0;\n\tfor (i = 0; i < words.length; i++) {\n\t\tif (words[i].length() > n) {\n\t\t\twords3[i] = words[i];\n\t\t}\n\t}\n\tfor (i = 0; i < words2.length; i++) {\n\t\tif (words2[i].length() > n) {\n\t\t\twords3[i] = words2[i];\n\t\t}\n\t}\n\treturn words3;\n}\n\nstring[] long_words(long n, string[] words, string[] words2, string[] words3) \n{\n\tstring[] words4 = new string[n];\n\tint i = 0;\n\tfor (i = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = long_words;",
            "assert(candidate(3L, \"python is a programming language\") == [\"python\", \"programming\", \"language\"]);",
            "assert(candidate(2L, \"writing a program\") == [\"writing\", \"program\"]);",
            "assert(candidate(5L, \"sorting list\") == [\"sorting\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "import std.math;\nimport std.typecons;\nbool magic_square_test(long[][] my_matrix) \n{\n\tlong i, j;\n\tlong magic_square = 0;\n\tfor (i = 0; i < my_matrix.length; i++)\n\t{\n\t\tfor (j = 0; j < my_matrix[i].length; j++)\n\t\t{\n\t\t\tif (my_matrix[i][j] == magic_square)\n\t\t\t{\n\t\t\t\tmagic_square = magic_square + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn magic_square == 1;\n}\n\nlong magic_square(long[][] my_matrix) \n{\n\tlong i, j;\n\tlong magic_square = 0;\n\tfor (i = 0; i < my_matrix.length; i++)\n\t{\n\t\tfor (j = 0; j < my_matrix[i].length; j++)\n\t\t{\n\t\t\tif (my_matrix[i][j] == magic_square)\n\t\t\t{\n\t\t\t\tmagic_square = magic_square + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn magic_square;\n}\n\nlong magic_square_test(long[][] my_matrix) \n{\n\tlong i, j;\n\tlong magic_square = 0;\n\tfor (i = 0; i < my_matrix.length; i++)\n\t{\n\t\tfor (j = 0; j < my_matrix[i].length; j++)\n\t\t{\n\t\t\tif (my_matrix[i][j] == magic_square)\n\t\t\t{\n\t\t\t\tmagic_square = magic_square + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn magic_square == 1;\n}\n\nlong magic_square(long[][] my_matrix)\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = magic_square_test;",
            "assert(candidate([[7L, 12L, 1L, 14L], [2L, 13L, 8L, 11L], [16L, 3L, 10L, 5L], [9L, 6L, 15L, 4L]]) == true);",
            "assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 8L]]) == true);",
            "assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 7L]]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] S = new long[M.length][M[0].length];\n\tlong sum = 0;\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tS[i][j] = sum + M[i][j];\n\t\t}\n\t\tsum += M[i][i];\n\t}\n\treturn S;\n}\n\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] S = new long[M.length][M[0].length];\n\tlong sum = 0;\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tS[i][j] = sum + M[i][j];\n\t\t}\n\t\tsum += M[i][i];\n\t}\n\treturn S;\n}\n\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] S = new long[M.length][M[0].length];\n\tlong sum = 0;\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tS[i][j] = sum + M[i][j];\n\t\t}\n\t\tsum += M[i][i];\n\t}\n\treturn S;\n}\n\nlong[][] sort_matrix(long[][]\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sort_matrix;",
            "assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);",
            "assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);",
            "assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_occurrences(long[] nums) \n{\n\tlong max = 0;\n\tlong max_occ = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > max) \n\t\t{\n\t\t\tmax = nums[i];\n\t\t\tmax_occ = i;\n\t\t}\n\t}\n\treturn max_occ;\n}\n\nlong max_occurrences(long[] nums, int n) \n{\n\tlong max = 0;\n\tlong max_occ = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (nums[i] > max) \n\t\t{\n\t\t\tmax = nums[i];\n\t\t\tmax_occ = i;\n\t\t}\n\t}\n\treturn max_occ;\n}\n\nlong max_occurrences(long[] nums, int n, int m) \n{\n\tlong max = 0;\n\tlong max_occ = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (nums[i] > max) \n\t\t{\n\t\t\tmax = nums[i];\n\t\t\tmax_occ = i;\n\t\t}\n\t}\n\tfor (int i = 0; i < m; i++) \n\t{\n\t\tif (nums[i] > max) \n\t\t{\n\t\t\tmax = nums[i];\n\t\t\tmax_occ = i;\n\t\t}\n\t}\n\treturn max_occ;\n}\n\nlong max_occurrences(long[] nums, int n, int m, int k) \n{\n\tlong max = 0;\n\tlong max_occ\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_occurrences;",
            "assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);",
            "assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);",
            "assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a dthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "import std.math;\nimport std.typecons;\nstring reverse_vowels(string str1) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] == 'y') \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\n\nstring reverse_vowels(string str1, string str2) \n{\n\tstring str3 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] == 'y') \n\t\t{\n\t\t\tstr3 += str1[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < str2.length(); i++) \n\t{\n\t\tif (str2[i] == 'y') \n\t\t{\n\t\t\tstr3 += str2[i];\n\t\t}\n\t}\n\treturn str3;\n}\n\nstring reverse_vowels(string str1, string str2, string str3) \n{\n\tstring str4 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] == 'y') \n\t\t{\n\t\t\tstr4 += str1[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < str2.length(); i++) \n\t{\n\t\tif (str2[i] == 'y') \n\t\t{\n\t\t\tstr4 += str2[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < str3.length(); i++) \n\t{\n\t\tif (str3[i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = reverse_vowels;",
            "assert(candidate(\"Python\") == \"Python\");",
            "assert(candidate(\"USA\") == \"ASU\");",
            "assert(candidate(\"ab\") == \"ab\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert an array to a string.",
        "code": "import std.math;\nimport std.typecons;\nstring tup_string(string[] tup1) \n{\n\tstring str;\n\tfor (int i = 0; i < tup1.length; i++)\n\t{\n\t\tstr += tup1[i];\n\t}\n\treturn str;\n}\n\nstring tup_string(int[] tup1) \n{\n\tstring str;\n\tfor (int i = 0; i < tup1.length; i++)\n\t{\n\t\tstr += tup1[i];\n\t}\n\treturn str;\n}\n\nstring tup_string(double[] tup1) \n{\n\tstring str;\n\tfor (int i = 0; i < tup1.length; i++)\n\t{\n\t\tstr += tup1[i];\n\t}\n\treturn str;\n}\n\nstring tup_string(float[] tup1) \n{\n\tstring str;\n\tfor (int i = 0; i < tup1.length; i++)\n\t{\n\t\tstr += tup1[i];\n\t}\n\treturn str;\n}\n\nstring tup_string(long[] tup1) \n{\n\tstring str;\n\tfor (int i = 0; i < tup1.length; i++)\n\t{\n\t\tstr += tup1[i];\n\t}\n\treturn str;\n}\n\nstring tup_string(short[] tup1) \n{\n\tstring str;\n\tfor (int i = 0; i < tup1.length; i++)\n\t{\n\t\tstr += tup1[i];\n\t}\n\treturn str;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given array of numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_negativenum(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] < 0) \n\t\t{\n\t\t\tsum += nums[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_posativenum(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tsum += nums[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_negativenum_posativenum(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] < 0) \n\t\t{\n\t\t\tsum += nums[i];\n\t\t}\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tsum += nums[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_negativenum_posativenum_negativenum(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] < 0) \n\t\t{\n\t\t\tsum += nums[i];\n\t\t}\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tsum +=\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_negativenum;",
            "assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == -32L);",
            "assert(candidate([10L, 15L, -14L, 13L, -18L, 12L, -20L]) == -52L);",
            "assert(candidate([19L, -65L, 57L, 39L, 152L, -639L, 121L, 44L, 90L, -190L]) == -894L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "import std.math;\nimport std.typecons;\nlong hexagonal_num(long n) \n{\n\tlong i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = hexagonal_num;",
            "assert(candidate(10L) == 190L);",
            "assert(candidate(5L) == 45L);",
            "assert(candidate(7L) == 91L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a dthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_Sum_Of_Powers_Of_Two(long n) \n{\n\tif(n == 0)\n\t\treturn true;\n\t\n\tif(n == 1)\n\t\treturn true;\n\t\n\tif(n == 2)\n\t\treturn true;\n\t\n\tif(n == 3)\n\t\treturn true;\n\t\n\tif(n == 4)\n\t\treturn true;\n\t\n\tif(n == 5)\n\t\treturn true;\n\t\n\tif(n == 6)\n\t\treturn true;\n\t\n\tif(n == 7)\n\t\treturn true;\n\t\n\tif(n == 8)\n\t\treturn true;\n\t\n\tif(n == 9)\n\t\treturn true;\n\t\n\tif(n == 10)\n\t\treturn true;\n\t\n\tif(n == 11)\n\t\treturn true;\n\t\n\tif(n == 12)\n\t\treturn true;\n\t\n\tif(n == 13)\n\t\treturn true;\n\t\n\tif(n == 14)\n\t\treturn true;\n\t\n\tif(n == 15)\n\t\treturn true;\n\t\n\tif(n == 16)\n\t\treturn true;\n\t\n\tif(n == 17)\n\t\treturn true;\n\t\n\tif(n == 18)\n\t\treturn true;\n\t\n\tif(n == 19)\n\t\treturn true;\n\t\n\tif(n == 20)\n\t\treturn true;\n\t\n\tif(n == 21)\n\t\treturn true;\n\t\n\tif(n == 22)\n\t\treturn true;\n\t\n\tif(n == 23)\n\t\treturn true;\n\t\n\tif(n == 24)\n\t\treturn true;\n\t\n\tif(n == 25)\n\t\treturn true;\n\t\n\tif(n == 26)\n\t\treturn true;\n\t\n\tif(n == 27)\n\t\treturn true;\n\t\n\tif(n == 28)\n\t\treturn true;\n\t\n\tif(n == 29)\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_Sum_Of_Powers_Of_Two;",
            "assert(candidate(10L) == true);",
            "assert(candidate(7L) == false);",
            "assert(candidate(14L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "import std.math;\nimport std.typecons;\nlong[] pancake_sort(long[] nums) \n{\n\tlong[] temp = new long[nums.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint temp_i = 0;\n\tint temp_j = 0;\n\tint temp_k = 0;\n\tint temp_temp = 0;\n\tint temp_temp_i = 0;\n\tint temp_temp_j = 0;\n\tint temp_temp_k = 0;\n\tint temp_temp_temp = 0;\n\tint temp_temp_temp_i = 0;\n\tint temp_temp_temp_j = 0;\n\tint temp_temp_temp_k = 0;\n\tint temp_temp_temp_temp = 0;\n\tint temp_temp_temp_temp_i = 0;\n\tint temp_temp_temp_temp_j = 0;\n\tint temp_temp_temp_temp_k = 0;\n\tint temp_temp_temp_temp_temp = 0;\n\tint temp_temp_temp_temp_temp_i = 0;\n\tint temp_temp_temp_temp_temp_j = 0;\n\tint temp_temp_temp_temp_temp_k = 0;\n\tint temp_temp_temp_temp_temp_temp = 0;\n\tint temp_temp_temp_temp_temp_temp_i = 0;\n\tint temp_temp_temp_temp_temp_temp_j = 0;\n\tint temp_temp_temp_temp_temp_temp_k = 0;\n\tint temp_temp_temp_temp_temp_temp_temp = 0;\n\tint temp_temp_temp_temp_temp_temp_temp_i = 0;\n\tint temp_temp_temp_temp_temp_temp_j = 0;\n\tint temp_temp_temp_temp_temp_temp_k = 0;\n\tint temp_temp_temp_temp_temp_temp_temp = 0;\n\tint temp_temp_temp_temp_temp_temp_temp_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = pancake_sort;",
            "assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);",
            "assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);",
            "assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong count_samepair(long[] list1, long[] list2, long[] list3) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == list2[i] && list1[i] == list3[i])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_samepair(long[] list1, long[] list2, long[] list3, long[] list4) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == list2[i] && list1[i] == list3[i] && list1[i] == list4[i])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_samepair(long[] list1, long[] list2, long[] list3, long[] list4, long[] list5) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == list2[i] && list1[i] == list3[i] && list1[i] == list4[i] && list1[i] == list5[i])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_samepair(long[] list1, long[] list2, long[] list3, long[] list4, long[] list5, long[] list6) \n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_samepair;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 9L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 9L]) == 3L);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 8L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 8L]) == 4L);",
            "assert(candidate([1L, 2L, 3L, 4L, 2L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 8L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 8L]) == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a dthon function to find the maximum difference between any two elements in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_Abs_Diff(long[] arr) \n{\n\tlong max = 0;\n\tlong max_diff = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_Abs_Diff;",
            "assert(candidate([2L, 1L, 5L, 3L]) == 4L);",
            "assert(candidate([9L, 3L, 2L, 5L, 1L]) == 8L);",
            "assert(candidate([3L, 2L, 1L]) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a dthon function to find the volume of a triangular prism.",
        "code": "import std.math;\nimport std.typecons;\nlong find_Volume(long l, long b, long h) \n{\n\tlong i, j, k, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l25, l26, l27, l28, l29, l30, l31, l32, l33, l34, l35, l36, l37, l38, l39, l40, l41, l42, l43, l44, l45, l46, l47, l48, l49, l50, l51, l52, l53, l54, l55, l56, l57, l58, l59, l60, l61, l62, l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Volume;",
            "assert(candidate(10L, 8L, 6L) == 240L);",
            "assert(candidate(3L, 2L, 2L) == 6L);",
            "assert(candidate(1L, 2L, 1L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(Tuple!(long, long)) find_solution(long a, long b, long n) \n{\n\tif(n == 0)\n\t\treturn null;\n\t\n\tif(n == 1)\n\t\treturn Tuple(a, b);\n\t\n\tif(n == 2)\n\t\treturn Tuple(a, b, Tuple(a, b));\n\t\n\tif(n == 3)\n\t\treturn Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a, b, Tuple(a\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_solution;",
            "{",
            "auto result = candidate(2L, 3L, 7L);",
            "assert(!result.isNull && result.get == tuple(2L, 1L));",
            "}",
            "{",
            "auto result = candidate(4L, 2L, 7L);",
            "assert(result.isNull);",
            "}",
            "{",
            "auto result = candidate(1L, 13L, 17L);",
            "assert(!result.isNull && result.get == tuple(4L, 1L));",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given array present in another array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i]!= list2[i])\n\t\t{\n\t\t\tresult[i] = list1[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] remove_elements(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i]!= list2[i] && list1[i]!= list3[i])\n\t\t{\n\t\t\tresult[i] = list1[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] remove_elements(long[] list1, long[] list2, long[] list3, long[] list4) \n{\n\tlong[] result = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i]!= list2[i] && list1[i]!= list3[i] && list1[i]!= list4[i])\n\t\t{\n\t\t\tresult[i] = list1[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] remove_elements(long[] list1, long[] list2, long[] list3, long[] list4, long[] list5) \n{\n\tlong[] result = new long[list1.length];\n\tfor\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_elements;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "import std.math;\nimport std.typecons;\nlong sum_series(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong sum_series_2(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong sum_series_3(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong sum_series_4(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "import std.math;\nimport std.typecons;\nbool are_equivalent(long num1, long num2) \n{\n\tif (num1 == 0) return true;\n\tif (num2 == 0) return false;\n\t\n\tlong num1_div = num1 / num1;\n\tlong num2_div = num2 / num2;\n\t\n\tif (num1_div == num2_div) return true;\n\t\n\treturn false;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = are_equivalent;",
            "assert(candidate(36L, 57L) == false);",
            "assert(candidate(2L, 4L) == false);",
            "assert(candidate(23L, 47L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "import std.math;\nimport std.typecons;\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] == 'a' || str1[i] == 'A') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_char_position_case(string str1) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] == 'a' || str1[i] == 'A') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (str1[i] == 'A' || str1[i] == 'a') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_char_position_case_case(string str1) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] == 'a' || str1[i] == 'A') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (str1[i] == 'A' || str1[i] == 'a') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (str1[i] == 'A' || str1[i] == 'a') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (str1[i] == 'A' || str1[i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_char_position;",
            "assert(candidate(\"xbcefg\") == 2L);",
            "assert(candidate(\"ABcED\") == 3L);",
            "assert(candidate(\"AbgdeF\") == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in an array that xor to an even number.",
        "code": "import std.math;\nimport std.typecons;\nlong find_even_pair(long[] A) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] % 2 == 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong find_odd_pair(long[] A) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] % 2 == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong find_even_pair_count(long[] A) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] % 2 == 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong find_odd_pair_count(long[] A) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < A.length; i++) \n\t{\n\t\tif (A[i] % 2 == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong find_even_pair_count_count(long[] A) \n{\n\tlong count = 0;\n\tfor (int i = 0\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_even_pair;",
            "assert(candidate([5L, 4L, 7L, 2L, 1L]) == 4L);",
            "assert(candidate([7L, 2L, 8L, 1L, 0L, 5L, 11L]) == 9L);",
            "assert(candidate([1L, 2L, 3L]) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a dthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "import std.math;\nimport std.typecons;\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\n\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\n\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\n\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\n\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\n\nlong next_power_of_2(long n) \n{\n\tlong p = 1;\n\twhile (p < n) \n\t{\n\t\tp <<= 1;\n\t}\n\treturn p;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong frequency(long[] a, long x) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < a.length; i++) {\n\t\tif (a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong frequency(long[] a, long x, long y) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < a.length; i++) {\n\t\tif (a[i] == x && a[i] == y) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong frequency(long[] a, long x, long y, long z) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < a.length; i++) {\n\t\tif (a[i] == x && a[i] == y && a[i] == z) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong frequency(long[] a, long x, long y, long z, long w) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < a.length; i++) {\n\t\tif (a[i] == x && a[i] == y && a[i] == z && a[i] == w) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong frequency(long[] a, long x, long y, long z, long w, long x2) \n{\n\tlong count = 0;\n\tfor (int\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = frequency;",
            "assert(candidate([1L, 2L, 3L], 4L) == 0L);",
            "assert(candidate([1L, 2L, 2L, 3L, 3L, 3L, 4L], 3L) == 3L);",
            "assert(candidate([0L, 1L, 2L, 3L, 1L, 2L], 1L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "import std.math;\nimport std.typecons;\nbool text_lowercase_underscore(string text) \n{\n\tstring lowercase_text = text;\n\tfor (int i = 0; i < lowercase_text.length(); i++)\n\t{\n\t\tif (lowercase_text[i] == '_')\n\t\t{\n\t\t\tlowercase_text[i] ='';\n\t\t}\n\t}\n\treturn text_lowercase(lowercase_text);\n}\n\nbool text_lowercase(string text) \n{\n\tstring lowercase_text = text;\n\tfor (int i = 0; i < lowercase_text.length(); i++)\n\t{\n\t\tif (lowercase_text[i] == '_')\n\t\t{\n\t\t\tlowercase_text[i] ='';\n\t\t}\n\t}\n\treturn text_lowercase(lowercase_text);\n}\n\nbool text_lowercase(string text) \n{\n\tstring lowercase_text = text;\n\tfor (int i = 0; i < lowercase_text.length(); i++)\n\t{\n\t\tif (lowercase_text[i] == '_')\n\t\t{\n\t\t\tlowercase_text[i] ='';\n\t\t}\n\t}\n\treturn text_lowercase(lowercase_text);\n}\n\nbool text_lowercase(string text) \n{\n\tstring lowercase_text = text;\n\tfor (int i = 0; i < lowercase_text.length(); i++)\n\t{\n\t\tif (lowercase_text[i] == '_')\n\t\t{\n\t\t\tlowercase\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_lowercase_underscore;",
            "assert(candidate(\"aab_cbbbc\") == true);",
            "assert(candidate(\"aab_Abbbc\") == false);",
            "assert(candidate(\"Aaab_abbbc\") == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in an array within a range specified by two indices.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_range_list(long[] list1, long m, long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m1 = 0;\n\tlong n1 = 0;\n\tlong m2 = 0;\n\tlong n2 = 0;\n\tlong m3 = 0;\n\tlong n3 = 0;\n\tlong m4 = 0;\n\tlong n4 = 0;\n\tlong m5 = 0;\n\tlong n5 = 0;\n\tlong m6 = 0;\n\tlong n6 = 0;\n\tlong m7 = 0;\n\tlong n7 = 0;\n\tlong m8 = 0;\n\tlong n8 = 0;\n\tlong m9 = 0;\n\tlong n9 = 0;\n\tlong m10 = 0;\n\tlong n10 = 0;\n\tlong m11 = 0;\n\tlong n11 = 0;\n\tlong m12 = 0;\n\tlong n12 = 0;\n\tlong m13 = 0;\n\tlong n13 = 0;\n\tlong m14 = 0;\n\tlong n14 = 0;\n\tlong m15 = 0;\n\tlong n15 = 0;\n\tlong m16 = 0;\n\tlong n16 = 0;\n\tlong m17 = 0;\n\tlong n17 = 0;\n\tlong m18 = 0;\n\tlong n18 = 0;\n\tlong m19 = 0;\n\tlong n19 = 0;\n\tlong m20 = 0;\n\tlong n20 = 0;\n\tlong m21 = 0;\n\tlong n21 = 0;\n\tlong m22 = 0;\n\tlong n22 = 0;\n\tlong m23 = 0;\n\tlong n23 = 0;\n\tlong m24 = 0;\n\tlong n24 = 0;\n\tlong m25 = 0;\n\tlong n25 = 0;\n\tlong m26 = 0;\n\tlong n26 = 0\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_range_list;",
            "assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 8L, 10L) == 29L);",
            "assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 5L, 7L) == 16L);",
            "assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 7L, 10L) == 38L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "import std.math;\nimport std.typecons;\nlong perimeter_pentagon(long a) \n{\n\tlong i, j, k, l, m, n, p, q, r, s, t, u, v, w;\n\tlong p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80, p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111, p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = perimeter_pentagon;",
            "assert(candidate(5L) == 25L);",
            "assert(candidate(10L) == 50L);",
            "assert(candidate(15L) == 75L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "import std.math;\nimport std.typecons;\nlong count_occurance(string s) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] == '\\n') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_occurance(string s) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] == '\\n') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_occurance(string s) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] == '\\n') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_occurance(string s) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] == '\\n') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_occurance(string s) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_occurance;",
            "assert(candidate(\"letstdlenstdporstd\") == 3L);",
            "assert(candidate(\"truststdsolensporsd\") == 1L);",
            "assert(candidate(\"makestdsostdworthit\") == 2L);",
            "assert(candidate(\"stds\") == 1L);",
            "assert(candidate(\"\") == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "import std.math;\nimport std.typecons;\nlong square_perimeter(long a) \n{\n\tlong perimeter = 0;\n\tlong side = a;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = square_perimeter;",
            "assert(candidate(10L) == 40L);",
            "assert(candidate(5L) == 20L);",
            "assert(candidate(4L) == 16L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring temp = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i]!= second_string[i])\n\t\t{\n\t\t\ttemp += string[i];\n\t\t}\n\t}\n\treturn temp;\n}\n\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring temp = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i]!= second_string[i])\n\t\t{\n\t\t\ttemp += string[i];\n\t\t}\n\t}\n\treturn temp;\n}\n\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring temp = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i]!= second_string[i])\n\t\t{\n\t\t\ttemp += string[i];\n\t\t}\n\t}\n\treturn temp;\n}\n\nstring remove_dirty_chars(string string, string second_string) \n{\n\tstring temp = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i]!= second_string[i])\n\t\t{\n\t\t\ttemp += string[i];\n\t\t}\n\t}\n\treturn temp;\n}\n\nstring remove_dirty_chars(string string, string second_string) \n{\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_dirty_chars;",
            "assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");",
            "assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");",
            "assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "import std.math;\nimport std.typecons;\nbool test_duplicate(long[] arraynums) \n{\n\tlong i, j;\n\tlong sum = 0;\n\tfor (i = 0; i < arraynums.length; i++)\n\t{\n\t\tfor (j = i + 1; j < arraynums.length; j++)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tsum += arraynums[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum == arraynums.length;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = test_duplicate;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);",
            "assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);",
            "assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_woodall(long x) \n{\n\treturn std::is_same<std::complex<long>, std::complex<long> >::value;\n}\n\nbool is_woodall(std::complex<long> x) \n{\n\treturn std::is_same<std::complex<long>, std::complex<long> >::value;\n}\n\nbool is_woodall(std::complex<double> x) \n{\n\treturn std::is_same<std::complex<double>, std::complex<double> >::value;\n}\n\nbool is_woodall(std::complex<long double> x) \n{\n\treturn std::is_same<std::complex<long double>, std::complex<long double> >::value;\n}\n\nbool is_woodall(std::complex<double> x) \n{\n\treturn std::is_same<std::complex<double>, std::complex<double> >::value;\n}\n\nbool is_woodall(std::complex<long double> x) \n{\n\treturn std::is_same<std::complex<long double>, std::complex<long double> >::value;\n}\n\nbool is_woodall(std::complex<double> x) \n{\n\treturn std::is_same<std::complex<double>, std::complex<double> >::value;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "import std.math;\nimport std.typecons;\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i, j;\n\tlong majority = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] == x)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t\tmajority = 1;\n\t\t\telse\n\t\t\t\tmajority = 0;\n\t\t}\n\t\telse\n\t\t\tmajority = 0;\n\t}\n\treturn majority;\n}\n\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i, j;\n\tlong majority = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] == x)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t\tmajority = 1;\n\t\t\telse\n\t\t\t\tmajority = 0;\n\t\t}\n\t\telse\n\t\t\tmajority = 0;\n\t}\n\treturn majority;\n}\n\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i, j;\n\tlong majority = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] == x)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t\tmajority = 1;\n\t\t\telse\n\t\t\t\tmajority = 0;\n\t\t}\n\t\telse\n\t\t\tmajority = 0;\n\t}\n\treturn majority;\n}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_majority;",
            "assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);",
            "assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);",
            "assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);",
            "assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a dthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "import std.math;\nimport std.typecons;\nlong count_Set_Bits(long n) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_Set_Bits;",
            "assert(candidate(2L) == 1L);",
            "assert(candidate(4L) == 1L);",
            "assert(candidate(6L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a dthon function to remove the characters which have odd index values of a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring odd_values_string(string str) \n{\n\tstring odd_values_string = \"\";\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i] == '1')\n\t\t{\n\t\t\todd_values_string += str[i];\n\t\t}\n\t}\n\treturn odd_values_string;\n}\n\nstring odd_values_string(string str) \n{\n\tstring odd_values_string = \"\";\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i] == '1')\n\t\t{\n\t\t\todd_values_string += str[i];\n\t\t}\n\t}\n\treturn odd_values_string;\n}\n\nstring odd_values_string(string str) \n{\n\tstring odd_values_string = \"\";\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i] == '1')\n\t\t{\n\t\t\todd_values_string += str[i];\n\t\t}\n\t}\n\treturn odd_values_string;\n}\n\nstring odd_values_string(string str) \n{\n\tstring odd_values_string = \"\";\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i] == '1')\n\t\t{\n\t\t\todd_values_string += str[i];\n\t\t}\n\t}\n\treturn odd_values_string;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = odd_values_string;",
            "assert(candidate(\"abcdef\") == \"ace\");",
            "assert(candidate(\"python\") == \"pto\");",
            "assert(candidate(\"data\") == \"dt\");",
            "assert(candidate(\"lambs\") == \"lms\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong min_of_three(long a, long b, long c) \n{\n\tlong min = std.math.min(a, b, c);\n\treturn min;\n}\n\nlong max_of_three(long a, long b, long c) \n{\n\tlong max = std.math.max(a, b, c);\n\treturn max;\n}\n\nlong sum_of_three(long a, long b, long c) \n{\n\tlong sum = std.math.sum(a, b, c);\n\treturn sum;\n}\n\nlong product_of_three(long a, long b, long c) \n{\n\tlong product = std.math.product(a, b, c);\n\treturn product;\n}\n\nlong product_of_three_2(long a, long b, long c) \n{\n\tlong product = std.math.product(a, b, c);\n\treturn product;\n}\n\nlong product_of_three_3(long a, long b, long c) \n{\n\tlong product = std.math.product(a, b, c);\n\treturn product;\n}\n\nlong product_of_three_4(long a, long b, long c) \n{\n\tlong product = std.math.product(a, b, c);\n\treturn product;\n}\n\nlong product_of_three_5(long a, long b, long c) \n{\n\tlong product = std.\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = min_of_three;",
            "assert(candidate(10L, 20L, 0L) == 0L);",
            "assert(candidate(19L, 15L, 18L) == 15L);",
            "assert(candidate(-10L, -20L, -30L) == -30L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a dthon function to check whether all the bits are unset in the given range or not.",
        "code": "import std.math;\nimport std.typecons;\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) \n{\n\tif(n == 0)\n\t\treturn true;\n\tif(n == 1)\n\t\treturn true;\n\tif(n == 2)\n\t\treturn true;\n\tif(n == 3)\n\t\treturn true;\n\tif(n == 4)\n\t\treturn true;\n\tif(n == 5)\n\t\treturn true;\n\tif(n == 6)\n\t\treturn true;\n\tif(n == 7)\n\t\treturn true;\n\tif(n == 8)\n\t\treturn true;\n\tif(n == 9)\n\t\treturn true;\n\tif(n == 10)\n\t\treturn true;\n\tif(n == 11)\n\t\treturn true;\n\tif(n == 12)\n\t\treturn true;\n\tif(n == 13)\n\t\treturn true;\n\tif(n == 14)\n\t\treturn true;\n\tif(n == 15)\n\t\treturn true;\n\tif(n == 16)\n\t\treturn true;\n\tif(n == 17)\n\t\treturn true;\n\tif(n == 18)\n\t\treturn true;\n\tif(n == 19)\n\t\treturn true;\n\tif(n == 20)\n\t\treturn true;\n\tif(n == 21)\n\t\treturn true;\n\tif(n == 22)\n\t\treturn true;\n\tif(n == 23)\n\t\treturn true;\n\tif(n == 24)\n\t\treturn true;\n\tif(n == 25)\n\t\treturn true;\n\tif(n == 26)\n\t\treturn true;\n\tif(n == 27)\n\t\treturn true;\n\tif(n == 28)\n\t\treturn true;\n\tif(n == 29)\n\t\treturn true;\n\tif(n == 30)\n\t\treturn true;\n\tif(n == 31)\n\t\treturn true;\n\tif(n == 32)\n\t\treturn true;\n\tif(n == 33)\n\t\treturn true\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = all_Bits_Set_In_The_Given_Range;",
            "assert(candidate(4L, 1L, 2L) == true);",
            "assert(candidate(17L, 2L, 4L) == true);",
            "assert(candidate(39L, 4L, 6L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "import std.math;\nimport std.typecons;\nlong[] re_arrange_array(long[] arr, long n) \n{\n\tlong[] re_arr = new long[n];\n\tint i = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tre_arr[i] = arr[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tre_arr[i] = arr[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn re_arr;\n}\n\nlong[] re_arrange_array_reverse(long[] arr, long n) \n{\n\tlong[] re_arr = new long[n];\n\tint i = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\tre_arr[i] = arr[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tre_arr[i] = arr[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn re_arr;\n}\n\nlong[] re_arrange_array_reverse_reverse(long[] arr, long n) \n{\n\tlong[] re_arr = new long[n];\n\tint i = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] < 0) \n\t\t{\n\t\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = re_arrange_array;",
            "assert(candidate([-1L, 2L, -3L, 4L, 5L, 6L, -7L, 8L, 9L], 9L) == [-1L, -3L, -7L, 4L, 5L, 6L, 2L, 8L, 9L]);",
            "assert(candidate([12L, -14L, -26L, 13L, 15L], 5L) == [-14L, -26L, 12L, 13L, 15L]);",
            "assert(candidate([10L, 24L, 36L, -42L, -39L, -78L, 85L], 7L) == [-42L, -39L, -78L, 10L, 24L, 36L, 85L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "import std.math;\nimport std.typecons;\nstring replace_blank(string str1, string char) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length(); i++)\n\t{\n\t\tif (str1[i] == char)\n\t\t{\n\t\t\tstr2 = str2 + char;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 + str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\n\nstring replace_blank(string str1, string char, string str2) \n{\n\tstring str3 = \"\";\n\tfor (int i = 0; i < str1.length(); i++)\n\t{\n\t\tif (str1[i] == char)\n\t\t{\n\t\t\tstr3 = str3 + char;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr3 = str3 + str1[i];\n\t\t}\n\t}\n\treturn str3;\n}\n\nstring replace_blank(string str1, string char, string str2, string str3) \n{\n\tstring str4 = \"\";\n\tfor (int i = 0; i < str1.length(); i++)\n\t{\n\t\tif (str1[i] == char)\n\t\t{\n\t\t\tstr4 = str4 + char;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr4 = str4 + str1[i];\n\t\t}\n\t}\n\treturn str4;\n}\n\nstring replace_blank(string str1, string char, string str2, string str3, string str4) \n{\n\tstring\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = replace_blank;",
            "assert(candidate(\"hello people\", \"@\") == \"hello@people\");",
            "assert(candidate(\"python program language\", \"$\") == \"python$program$language\");",
            "assert(candidate(\"blank space\", \"-\") == \"blank-space\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "import std.math;\nimport std.typecons;\nlong volume_cube(long l) \n{\n\tlong i, j, k, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l25, l26, l27, l28, l29, l30, l31, l32, l33, l34, l35, l36, l37, l38, l39, l40, l41, l42, l43, l44, l45, l46, l47, l48, l49, l50, l51, l52, l53, l54, l55, l56, l57, l58, l59, l60, l61, l62, l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = volume_cube;",
            "assert(candidate(3L) == 27L);",
            "assert(candidate(2L) == 8L);",
            "assert(candidate(5L) == 125L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a dthon function to count the number of non-empty substrings of a given string.",
        "code": "import std.math;\nimport std.typecons;\nlong number_of_substrings(string str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i]!='')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nlong number_of_substrings_of(string str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i]!='')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nlong number_of_substrings_of_all(string str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i]!='')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nlong number_of_substrings_of_all_all(string str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i]!='')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nlong number_of_substrings_of_all_of(string str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tif (str[i]!='')\n\t\t\tcount++;\n\t}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = number_of_substrings;",
            "assert(candidate(\"abc\") == 6L);",
            "assert(candidate(\"abcd\") == 10L);",
            "assert(candidate(\"abcde\") == 15L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "import std.math;\nimport std.typecons;\nlong get_total_number_of_sequences(long m, long n) \n{\n\tlong i, j, k, l, m_i, m_j, m_k, m_l, m_m, m_n;\n\tlong total_number_of_sequences = 0;\n\t\n\tm_i = 1;\n\tm_j = 1;\n\tm_k = 1;\n\tm_l = 1;\n\tm_m = 1;\n\tm_n = 1;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tif (m_i == m)\n\t\t{\n\t\t\tm_i = 0;\n\t\t\tm_j = 0;\n\t\t\tm_k = 0;\n\t\t\tm_l = 0;\n\t\t\tm_m = 0;\n\t\t\tm_n = 0;\n\t\t\t\n\t\t\treturn total_number_of_sequences;\n\t\t}\n\t\t\n\t\tif (m_i == m)\n\t\t{\n\t\t\tm_i = 0;\n\t\t\tm_j = 0;\n\t\t\tm_k = 0;\n\t\t\tm_l = 0;\n\t\t\tm_m = 0;\n\t\t\tm_n = 0;\n\t\t\t\n\t\t\treturn total_number_of_sequences;\n\t\t}\n\t\t\n\t\tif (m_i == m)\n\t\t{\n\t\t\tm_i = 0;\n\t\t\tm_j = 0;\n\t\t\tm_k = 0;\n\t\t\tm_l = 0;\n\t\t\tm_m = 0;\n\t\t\tm_n = 0;\n\t\t\t\n\t\t\treturn total_number_of_sequences;\n\t\t}\n\t\t\n\t\tif (m_i == m)\n\t\t{\n\t\t\tm_i = 0;\n\t\t\tm_j = 0;\n\t\t\tm_k = 0;\n\t\t\tm_l = 0;\n\t\t\tm_m = 0;\n\t\t\tm_n = 0;\n\t\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_total_number_of_sequences;",
            "assert(candidate(10L, 4L) == 4L);",
            "assert(candidate(5L, 2L) == 6L);",
            "assert(candidate(16L, 3L) == 84L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "import std.math;\nimport std.typecons;\nlong count_charac(string str1) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_charac(string str1, string str2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (str2[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_charac(string str1, string str2, string str3) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (str2[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (str3[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_charac(string str1, string str2, string str3, string str4) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (str2[i] =='') \n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_charac;",
            "assert(candidate(\"python programming\") == 18L);",
            "assert(candidate(\"language\") == 8L);",
            "assert(candidate(\"words\") == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a dthon function to find the next perfect square greater than a given number.",
        "code": "import std.math;\nimport std.typecons;\nlong next_Perfect_Square(long N) \n{\n\tlong i, j, k, l, m, n, p, q, r, s, t, u, v;\n\tlong res;\n\t\n\tres = 0;\n\t\n\tfor (i = 1; i <= N; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tres = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn res;\n}\n\nlong next_Perfect_Square_2(long N) \n{\n\tlong i, j, k, l, m, n, p, q, r, s, t, u, v;\n\tlong res;\n\t\n\tres = 0;\n\t\n\tfor (i = 1; i <= N; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tres = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn res;\n}\n\nlong next_Perfect_Square_3(long N) \n{\n\tlong i, j, k, l, m, n, p, q, r, s, t, u, v;\n\tlong res;\n\t\n\tres = 0;\n\t\n\tfor (i = 1; i <= N; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tres = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn res;\n}\n\nlong next_Perfect_Square_4(long N) \n{\n\tlong i, j, k, l, m, n, p, q, r, s, t, u, v\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = next_Perfect_Square;",
            "assert(candidate(35L) == 36L);",
            "assert(candidate(6L) == 9L);",
            "assert(candidate(9L) == 16L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "import std.math;\nimport std.typecons;\nlong max_sum(long[] arr) \n{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) {\n\t\t\tsum += arr[i];\n\t\t\tif (sum > max) {\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nlong max_sum_bitonic(long[] arr) \n{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) {\n\t\t\tsum += arr[i];\n\t\t\tif (sum > max) {\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nlong max_sum_bitonic_bitonic(long[] arr) \n{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) {\n\t\t\tsum += arr[i];\n\t\t\tif (sum > max) {\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nlong max_sum_bitonic_bitonic_bitonic(long\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_sum;",
            "assert(candidate([1L, 15L, 51L, 45L, 33L, 100L, 12L, 18L, 9L]) == 194L);",
            "assert(candidate([80L, 60L, 30L, 40L, 20L, 10L]) == 210L);",
            "assert(candidate([2L, 3L, 14L, 16L, 21L, 23L, 29L, 30L]) == 138L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "import std.math;\nlong lps(string str) \n{\n\tlong lps = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint m = 0;\n\tint n = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i33 = 0;\n\tint i34 = 0;\n\tint i35 = 0;\n\tint i36 = 0;\n\tint\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = lps;",
            "assert(candidate(\"TENS FOR TENS\") == 5L);",
            "assert(candidate(\"CARDIO FOR CARDS\") == 7L);",
            "assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n{\n\tlong[] array_intersection = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array_nums2.length];\n\tlong[] array_intersection_array_array_array_array_array = new long[array_nums1.length + array\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = intersection_array;",
            "assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);",
            "assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);",
            "assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a dthon function that takes in a tuple and an element and counts the occcurences of the element in the array.",
        "code": "import std.math;\nimport std.typecons;\nlong count_X(long[] tup, long x) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < tup.length; i++) {\n\t\tif (tup[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_X(long[] tup, long x, long y) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < tup.length; i++) {\n\t\tif (tup[i] == x && tup[i] == y) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_X(long[] tup, long x, long y, long z) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < tup.length; i++) {\n\t\tif (tup[i] == x && tup[i] == y && tup[i] == z) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_X(long[] tup, long x, long y, long z, long w) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < tup.length; i++) {\n\t\tif (tup[i] == x && tup[i] == y && tup[i] == z && tup[i] == w) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_X;",
            "assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 4L) == 0L);",
            "assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 10L) == 3L);",
            "assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 8L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.",
        "code": "import std.math;\nimport std.typecons;\nstring[] insert_element(string[] list, string element) \n{\n\tstring[] result = new string[list.length + 1];\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\tresult[list.length] = element;\n\treturn result;\n}\n\nstring[] insert_element(string[] list, int element) \n{\n\tstring[] result = new string[list.length + 1];\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\tresult[list.length] = std.to_string(element);\n\treturn result;\n}\n\nstring[] insert_element(string[] list, double element) \n{\n\tstring[] result = new string[list.length + 1];\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\tresult[list.length] = std.to_string(element);\n\treturn result;\n}\n\nstring[] insert_element(string[] list, boolean element) \n{\n\tstring[] result = new string[list.length + 1];\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\tresult[list.length] = std.to_string(element);\n\treturn result;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = insert_element;",
            "assert(candidate([\"Red\", \"Green\", \"Black\"], \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]);",
            "assert(candidate([\"python\", \"java\"], \"program\") == [\"program\", \"python\", \"program\", \"java\"]);",
            "assert(candidate([\"happy\", \"sad\"], \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a dthon function to convert complex numbers to polar coordinates.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(float, float) convert(long numbers) \n{\n\tfloat real = numbers;\n\tfloat imag = 0;\n\t\n\tif (real == 0)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 1)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == -1)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 0.0)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 1.0)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == -1.0)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 0.5)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 1.5)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == -1.5)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 0.25)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 1.25)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == -1.25)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 0.125)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 1.125)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == -1.125)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 0.0625)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 1.0625)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == -1.0625)\n\t\treturn (Tuple!(float, float));\n\t\n\tif (real == 0.03125\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = convert;",
            "assert(candidate(1L) == tuple(1.0, 0.0));",
            "assert(candidate(4L) == tuple(4.0, 0.0));",
            "assert(candidate(5L) == tuple(5.0, 0.0));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.",
        "code": "import std.math;\nimport std.typecons;\nstring[][] combinations_colors(string[] l, long n) \n{\n\tstring[][] res = new string[n][n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tif (l[i] == l[j])\n\t\t\t{\n\t\t\t\tres[i][j] = \"\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres[i][j] = \"\";\n\t\t\t\tres[i][j] = res[i][j] + l[i] + l[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\nstring[][] combinations_colors(string[] l, long n, long m) \n{\n\tstring[][] res = new string[n][n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tif (l[i] == l[j])\n\t\t\t{\n\t\t\t\tres[i][j] = \"\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres[i][j] = \"\";\n\t\t\t\tres[i][j] = res[i][j] + l[i] + l[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\nstring[][] combinations_colors(string[] l, long n, long m, long n) \n{\n\tstring[][] res = new string[n][n];\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = combinations_colors;",
            "assert(candidate([\"Red\", \"Green\", \"Blue\"], 1L) == [[\"Red\"], [\"Green\"], [\"Blue\"]]);",
            "assert(candidate([\"Red\", \"Green\", \"Blue\"], 2L) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);",
            "assert(candidate([\"Red\", \"Green\", \"Blue\"], 3L) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a dthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "import std.math;\nimport std.typecons;\nlong count_Primes_nums(long n) \n{\n\tlong prime_count = 1;\n\tlong prime_count_prime = 1;\n\tlong prime_count_prime_prime = 1;\n\tlong prime_count_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong prime_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_Primes_nums;",
            "assert(candidate(5L) == 2L);",
            "assert(candidate(10L) == 4L);",
            "assert(candidate(100L) == 25L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns an array with the second number and then the first number.",
        "code": "import std.math;\nimport std.typecons;\nlong[] swap_numbers(long a, long b) \n{\n\tlong[] result = new long[2];\n\tresult[0] = a;\n\tresult[1] = b;\n\treturn result;\n}\n\nlong[] swap_numbers(long a, long b, long c) \n{\n\tlong[] result = new long[2];\n\tresult[0] = a;\n\tresult[1] = b;\n\tresult[2] = c;\n\treturn result;\n}\n\nlong[] swap_numbers(long a, long b, long c, long d) \n{\n\tlong[] result = new long[2];\n\tresult[0] = a;\n\tresult[1] = b;\n\tresult[2] = c;\n\tresult[3] = d;\n\treturn result;\n}\n\nlong[] swap_numbers(long a, long b, long c, long d, long e) \n{\n\tlong[] result = new long[2];\n\tresult[0] = a;\n\tresult[1] = b;\n\tresult[2] = c;\n\tresult[3] = d;\n\tresult[4] = e;\n\treturn result;\n}\n\nlong[] swap_numbers(long a, long b, long c, long d, long e, long f) \n{\n\tlong[] result = new long[2];\n\tresult[0] = a;\n\tresult[1] = b;\n\tresult[\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = swap_numbers;",
            "assert(candidate(10L, 20L) == [20L, 10L]);",
            "assert(candidate(15L, 17L) == [17L, 15L]);",
            "assert(candidate(100L, 200L) == [200L, 100L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] maximize_elements(long[][] test_tup1, long[][] test_tup2) \n{\n\tlong[][] test_tup1_max = new long[2][];\n\tlong[][] test_tup2_max = new long[2][];\n\tlong[][] test_tup1_min = new long[2][];\n\tlong[][] test_tup2_min = new long[2][];\n\tlong[][] test_tup1_max_min = new long[2][];\n\tlong[][] test_tup2_max_min = new long[2][];\n\tlong[][] test_tup1_min_max = new long[2][];\n\tlong[][] test_tup2_min_max = new long[2][];\n\tlong[][] test_tup1_max_min_max = new long[2][];\n\tlong[][] test_tup2_max_min_max = new long[2][];\n\tlong[][] test_tup1_min_max_max = new long[2][];\n\tlong[][] test_tup2_min_max_max = new long[2][];\n\tlong[][] test_tup1_max_min_max_max = new long[2][];\n\tlong[][] test_tup2_max_min_max_max = new long[2][];\n\tlong[][] test_tup1_min_max_max_max = new long[2][];\n\tlong[][] test_tup2_min_max_max_max = new long[2][];\n\tlong[][] test_tup1_max_min_max_max_max = new long[2][];\n\tlong[][] test_tup2_max_min_max_max_max = new long[2][];\n\tlong[][] test_tup1_min_max_max_max_max = new long[\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = maximize_elements;",
            "assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[6L, 7L], [4L, 9L], [2L, 9L], [7L, 10L]]);",
            "assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[7L, 8L], [5L, 10L], [3L, 10L], [8L, 11L]]);",
            "assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[8L, 9L], [6L, 11L], [4L, 11L], [9L, 12L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "import std.math;\nimport std.typecons;\nlong newman_prime(long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong m;\n\tlong n;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong a;\n\tlong b;\n\tlong c;\n\tlong d;\n\tlong e;\n\tlong f;\n\tlong g;\n\tlong h;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong a;\n\tlong b;\n\tlong c;\n\tlong d;\n\tlong e;\n\tlong f;\n\tlong g;\n\tlong h;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong a;\n\tlong b;\n\tlong c;\n\tlong d;\n\tlong e;\n\tlong f;\n\tlong g;\n\tlong h;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong a\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = newman_prime;",
            "assert(candidate(3L) == 7L);",
            "assert(candidate(4L) == 17L);",
            "assert(candidate(5L) == 41L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\treturn test_tup1.div(test_tup2);\n}\n\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\treturn test_tup1.div(test_tup2);\n}\n\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\treturn test_tup1.div(test_tup2);\n}\n\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\treturn test_tup1.div(test_tup2);\n}\n\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, T\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = division_elements;",
            "assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(2L, 2L, 2L, 3L));",
            "assert(candidate(tuple(12L, 6L, 8L, 16L), tuple(6L, 3L, 4L, 4L)) == tuple(2L, 2L, 2L, 4L));",
            "assert(candidate(tuple(20L, 14L, 36L, 18L), tuple(5L, 7L, 6L, 9L)) == tuple(4L, 2L, 6L, 2L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "import std.math;\nimport std.typecons;\nlong dog_age(long h_age) \n{\n\tlong dog_age = 0;\n\tlong dog_year = 0;\n\tlong dog_month = 0;\n\tlong dog_day = 0;\n\tlong dog_hour = 0;\n\tlong dog_minute = 0;\n\tlong dog_second = 0;\n\tlong dog_day_of_year = 0;\n\tlong dog_day_of_month = 0;\n\tlong dog_day_of_year_of_month = 0;\n\tlong dog_day_of_year_of_month_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n\tlong dog_day_of_year_of_month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = 0;\n\tlong dog_day_of_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = dog_age;",
            "assert(candidate(12L) == 61L);",
            "assert(candidate(15L) == 73L);",
            "assert(candidate(24L) == 109L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "import std.math;\nimport std.typecons;\nlong lateralsurface_cube(long l) \n{\n\tlong i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\tlong l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,l17,l18,l19,l20,l21,l22,l23,l24,l25,l26,l27,l28,l29,l30,l31,l32,l33,l34,l35,l36,l37,l38,l39,l40,l41,l42,l43,l44,l45,l46,l47,l48,l49,l50,l51,l52,l53,l54,l55,l56,l57,l58,l59,l60,l61,l62,l63,l64,l65,l66,l67,l68,l69,l70,l71,l72,l73,l74,l75,l76,l77,l78,l79,l80,l81,l82,l83,l84,l85,l86,l87,l88,l89,l90,l91,l92,l93,l94,l95,l96,l97,l98,l99,l100,l101,l102,l103,l104,l105,l106,l107,l108,l109,l110,l111,l112,l113,l114,l115,l116,l117,l118,l119,l120,l121,l122,l123,l124,l125,l126,l127,l128,l129,l130,l131,l132,l133,l134,l135,l136,l137,l138,l139,l\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = lateralsurface_cube;",
            "assert(candidate(5L) == 100L);",
            "assert(candidate(9L) == 324L);",
            "assert(candidate(10L) == 400L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a dthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong square_Sum(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i * i;\n\t}\n\t\n\treturn sum;\n}\n\nlong square_Sum_2(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i * i;\n\t}\n\t\n\treturn sum;\n}\n\nlong square_Sum_3(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i * i;\n\t}\n\t\n\treturn sum;\n}\n\nlong square_Sum_4(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i * i;\n\t}\n\t\n\treturn sum;\n}\n\nlong square_Sum_5(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i * i;\n\t}\n\t\n\treturn sum;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = square_Sum;",
            "assert(candidate(2L) == 10L);",
            "assert(candidate(3L) == 35L);",
            "assert(candidate(4L) == 84L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "import std.math;\nimport std.typecons;\nlong find_star_num(long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong sum;\n\tlong sum2;\n\tlong sum3;\n\tlong sum4;\n\tlong sum5;\n\tlong sum6;\n\tlong sum7;\n\tlong sum8;\n\tlong sum9;\n\tlong sum10;\n\tlong sum11;\n\tlong sum12;\n\tlong sum13;\n\tlong sum14;\n\tlong sum15;\n\tlong sum16;\n\tlong sum17;\n\tlong sum18;\n\tlong sum19;\n\tlong sum20;\n\tlong sum21;\n\tlong sum22;\n\tlong sum23;\n\tlong sum24;\n\tlong sum25;\n\tlong sum26;\n\tlong sum27;\n\tlong sum28;\n\tlong sum29;\n\tlong sum30;\n\tlong sum31;\n\tlong sum32;\n\tlong sum33;\n\tlong sum34;\n\tlong sum35;\n\tlong sum36;\n\tlong sum37;\n\tlong sum38;\n\tlong sum39;\n\tlong sum40;\n\tlong sum41;\n\tlong sum42;\n\tlong sum43;\n\tlong sum44;\n\tlong sum45;\n\tlong sum46;\n\tlong sum47;\n\tlong sum48;\n\tlong sum49;\n\tlong sum50;\n\tlong sum51;\n\tlong sum52;\n\tlong sum53;\n\tlong sum54;\n\tlong sum55;\n\tlong sum56;\n\tlong sum57;\n\tlong sum58;\n\tlong sum59;\n\tlong sum60;\n\tlong sum61;\n\tlong sum62;\n\tlong sum63;\n\tlong sum64;\n\tlong sum65;\n\tlong sum66;\n\tlong sum67;\n\tlong sum68;\n\tlong sum69;\n\tlong sum70;\n\tlong sum71;\n\tlong sum72;\n\tlong sum73\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_star_num;",
            "assert(candidate(3L) == 37L);",
            "assert(candidate(4L) == 73L);",
            "assert(candidate(5L) == 121L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "import std.math;\nimport std.typecons;\nlong ascii_value(string k) \n{\n\tstring k1 = k;\n\tstring k2 = k;\n\tstring k3 = k;\n\tstring k4 = k;\n\tstring k5 = k;\n\tstring k6 = k;\n\tstring k7 = k;\n\tstring k8 = k;\n\tstring k9 = k;\n\tstring k10 = k;\n\tstring k11 = k;\n\tstring k12 = k;\n\tstring k13 = k;\n\tstring k14 = k;\n\tstring k15 = k;\n\tstring k16 = k;\n\tstring k17 = k;\n\tstring k18 = k;\n\tstring k19 = k;\n\tstring k20 = k;\n\tstring k21 = k;\n\tstring k22 = k;\n\tstring k23 = k;\n\tstring k24 = k;\n\tstring k25 = k;\n\tstring k26 = k;\n\tstring k27 = k;\n\tstring k28 = k;\n\tstring k29 = k;\n\tstring k30 = k;\n\tstring k31 = k;\n\tstring k32 = k;\n\tstring k33 = k;\n\tstring k34 = k;\n\tstring k35 = k;\n\tstring k36 = k;\n\tstring k37 = k;\n\tstring k38 = k;\n\tstring k39 = k;\n\tstring k40 = k;\n\tstring k41 = k;\n\tstring k42 = k;\n\tstring k43 = k;\n\tstring k44 = k;\n\tstring k45 = k;\n\tstring k46 = k;\n\tstring k47 = k;\n\tstring k48 = k;\n\tstring k49 = k;\n\tstring k50 = k;\n\tstring k51 = k;\n\tstring k52 = k;\n\tstring k53 = k;\n\tstring k54 = k;\n\tstring k55 = k;\n\tstring k56 = k;\n\tstring k57 = k;\n\tstring k58 = k;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = ascii_value;",
            "assert(candidate(\"A\") == 65L);",
            "assert(candidate(\"R\") == 82L);",
            "assert(candidate(\"S\") == 83L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a dthon function to find the sum of even numbers at even positions of an array.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_even_and_even_index(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 0) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_odd_and_odd_index(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 1) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_even_and_odd_index(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 0) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_odd_and_even_index(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 1) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sum_even_and_even_index(long[] arr)\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_even_and_even_index;",
            "assert(candidate([5L, 6L, 12L, 1L, 18L, 8L]) == 30L);",
            "assert(candidate([3L, 20L, 17L, 9L, 2L, 10L, 18L, 13L, 6L, 18L]) == 26L);",
            "assert(candidate([5L, 6L, 12L, 1L]) == 12L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a dthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "import std.math;\nimport std.typecons;\nlong even_Power_Sum(long n) \n{\n\tlong sum = 0;\n\t\n\tif (n == 0)\n\t\treturn 0;\n\t\n\tif (n == 1)\n\t\treturn 1;\n\t\n\tif (n == 2)\n\t\treturn 2;\n\t\n\tif (n == 3)\n\t\treturn 3;\n\t\n\tif (n == 4)\n\t\treturn 4;\n\t\n\tif (n == 5)\n\t\treturn 5;\n\t\n\tif (n == 6)\n\t\treturn 6;\n\t\n\tif (n == 7)\n\t\treturn 7;\n\t\n\tif (n == 8)\n\t\treturn 8;\n\t\n\tif (n == 9)\n\t\treturn 9;\n\t\n\tif (n == 10)\n\t\treturn 10;\n\t\n\tif (n == 11)\n\t\treturn 11;\n\t\n\tif (n == 12)\n\t\treturn 12;\n\t\n\tif (n == 13)\n\t\treturn 13;\n\t\n\tif (n == 14)\n\t\treturn 14;\n\t\n\tif (n == 15)\n\t\treturn 15;\n\t\n\tif (n == 16)\n\t\treturn 16;\n\t\n\tif (n == 17)\n\t\treturn 17;\n\t\n\tif (n == 18)\n\t\treturn 18;\n\t\n\tif (n == 19)\n\t\treturn 19;\n\t\n\tif (n == 20)\n\t\treturn 20;\n\t\n\tif (n == 21)\n\t\treturn 21;\n\t\n\tif (n == 22)\n\t\treturn 22;\n\t\n\tif (n == 23)\n\t\treturn 23;\n\t\n\tif (n == 24)\n\t\treturn 24;\n\t\n\tif (n == 25)\n\t\treturn 25;\n\t\n\tif (n == 26)\n\t\treturn 26;\n\t\n\tif (n == 27)\n\t\treturn 27;\n\t\n\tif (n == 28)\n\t\treturn 28;\n\t\n\tif\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = even_Power_Sum;",
            "assert(candidate(2L) == 1056L);",
            "assert(candidate(3L) == 8832L);",
            "assert(candidate(1L) == 32L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in an array of tuples and returns an array containing the rear element of each tuple.",
        "code": "import std.math;\nimport std.typecons;\nlong[] rear_extract(Tuple!(long, string, long)[] test_list) \n{\n\tlong[] result = new long[test_list.length];\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tresult[i] = test_list[i].rear;\n\t}\n\treturn result;\n}\n\nlong[] front_extract(Tuple!(long, string, long)[] test_list) \n{\n\tlong[] result = new long[test_list.length];\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tresult[i] = test_list[i].front;\n\t}\n\treturn result;\n}\n\nlong[] middle_extract(Tuple!(long, string, long)[] test_list) \n{\n\tlong[] result = new long[test_list.length];\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tresult[i] = test_list[i].middle;\n\t}\n\treturn result;\n}\n\nlong[] last_extract(Tuple!(long, string, long)[] test_list) \n{\n\tlong[] result = new long[test_list.length];\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tresult[i] = test_list[i].last;\n\t}\n\treturn result;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long) substract_elements(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n{\n\tTuple!(long, long, long) result = test_tup1;\n\tfor (long i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tresult = result.subtract(test_tup1.get(i));\n\t}\n\treturn result;\n}\n\nTuple!(long, long, long) substract_elements(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2, Tuple!(long, long, long) test_tup3) \n{\n\tTuple!(long, long, long) result = test_tup1;\n\tfor (long i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tresult = result.subtract(test_tup1.get(i));\n\t}\n\tfor (long i = 0; i < test_tup2.size(); i++)\n\t{\n\t\tresult = result.subtract(test_tup2.get(i));\n\t}\n\tfor (long i = 0; i < test_tup3.size(); i++)\n\t{\n\t\tresult = result.subtract(test_tup3.get(i));\n\t}\n\treturn result;\n}\n\nTuple!(long, long, long) substract_elements(Tuple!(long\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = substract_elements;",
            "assert(candidate(tuple(10L, 4L, 5L), tuple(2L, 5L, 18L)) == tuple(8L, -1L, -13L));",
            "assert(candidate(tuple(11L, 2L, 3L), tuple(24L, 45L, 16L)) == tuple(-13L, -43L, -13L));",
            "assert(candidate(tuple(7L, 18L, 9L), tuple(10L, 11L, 12L)) == tuple(-3L, 7L, -3L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a dthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "import std.math;\nimport std.typecons;\nlong even_binomial_Coeff_Sum(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n_bin = 0;\n\tlong n_bin_sum = 0;\n\tlong n_bin_sum_sum = 0;\n\tlong n_bin_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong n_bin_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = even_binomial_Coeff_Sum;",
            "assert(candidate(4L) == 8L);",
            "assert(candidate(6L) == 32L);",
            "assert(candidate(2L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in an associative array and integer n and filters the associative array to only include entries with values greater than or equal to n.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(long[string]) dict_filter(Nullable!(long[string]) dict, long n) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i] > n)\n\t\t{\n\t\t\tdict[i] = n;\n\t\t}\n\t}\n}\n\nNullable!(long[string]) dict_filter(Nullable!(long[string]) dict, long n) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i] < n)\n\t\t{\n\t\t\tdict[i] = n;\n\t\t}\n\t}\n}\n\nNullable!(long[string]) dict_filter(Nullable!(long[string]) dict, long n) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i] < n)\n\t\t{\n\t\t\tdict[i] = n;\n\t\t}\n\t}\n}\n\nNullable!(long[string]) dict_filter(Nullable!(long[string]) dict, long n) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i] > n)\n\t\t{\n\t\t\tdict[i] = n;\n\t\t}\n\t}\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "import std.math;\nimport std.typecons;\nlong is_num_decagonal(long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong sum;\n\tlong sum2;\n\tlong sum3;\n\tlong sum4;\n\tlong sum5;\n\tlong sum6;\n\tlong sum7;\n\tlong sum8;\n\tlong sum9;\n\tlong sum10;\n\tlong sum11;\n\tlong sum12;\n\tlong sum13;\n\tlong sum14;\n\tlong sum15;\n\tlong sum16;\n\tlong sum17;\n\tlong sum18;\n\tlong sum19;\n\tlong sum20;\n\tlong sum21;\n\tlong sum22;\n\tlong sum23;\n\tlong sum24;\n\tlong sum25;\n\tlong sum26;\n\tlong sum27;\n\tlong sum28;\n\tlong sum29;\n\tlong sum30;\n\tlong sum31;\n\tlong sum32;\n\tlong sum33;\n\tlong sum34;\n\tlong sum35;\n\tlong sum36;\n\tlong sum37;\n\tlong sum38;\n\tlong sum39;\n\tlong sum40;\n\tlong sum41;\n\tlong sum42;\n\tlong sum43;\n\tlong sum44;\n\tlong sum45;\n\tlong sum46;\n\tlong sum47;\n\tlong sum48;\n\tlong sum49;\n\tlong sum50;\n\tlong sum51;\n\tlong sum52;\n\tlong sum53;\n\tlong sum54;\n\tlong sum55;\n\tlong sum56;\n\tlong sum57;\n\tlong sum58;\n\tlong sum59;\n\tlong sum60;\n\tlong sum61;\n\tlong sum62;\n\tlong sum63;\n\tlong sum64;\n\tlong sum65;\n\tlong sum66;\n\tlong sum67;\n\tlong sum68;\n\tlong sum69;\n\tlong sum70;\n\tlong sum71;\n\tlong sum72;\n\tlong sum\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_num_decagonal;",
            "assert(candidate(3L) == 27L);",
            "assert(candidate(7L) == 175L);",
            "assert(candidate(10L) == 370L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "import std.math;\nimport std.typecons;\nTuple!(bool, long) sequential_search(long[] dlist, long item) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sequential_search;",
            "assert(candidate([11L, 23L, 58L, 31L, 56L, 77L, 43L, 12L, 65L, 19L], 31L) == tuple(true, 3L));",
            "assert(candidate([12L, 32L, 45L, 62L, 35L, 47L, 44L, 61L], 61L) == tuple(true, 7L));",
            "assert(candidate([9L, 10L, 17L, 19L, 22L, 39L, 48L, 56L], 48L) == tuple(true, 6L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a dthon function to check if the elements of a given array are unique or not.",
        "code": "import std.math;\nimport std.typecons;\nbool all_unique(long[] test_list) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_list.length; j++)\n\t\t{\n\t\t\tif (test_list[i] == test_list[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nbool all_unique(int[] test_list) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_list.length; j++)\n\t\t{\n\t\t\tif (test_list[i] == test_list[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nbool all_unique(short[] test_list) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_list.length; j++)\n\t\t{\n\t\t\tif (test_list[i] == test_list[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nbool all_unique(char[] test_list) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_list.length; j++)\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = all_unique;",
            "assert(candidate([1L, 2L, 3L]) == true);",
            "assert(candidate([1L, 2L, 1L, 2L]) == false);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two arrays element-wise.",
        "code": "import std.math;\nimport std.typecons;\nlong[] sub_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\n\nlong[] sub_list(long[] nums1, long[] nums2, long[] nums3) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tresult[i] = nums1[i] - nums2[i] - nums3[i];\n\t}\n\treturn result;\n}\n\nlong[] sub_list(long[] nums1, long[] nums2, long[] nums3, long[] nums4) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tresult[i] = nums1[i] - nums2[i] - nums3[i] - nums4[i];\n\t}\n\treturn result;\n}\n\nlong[] sub_list(long[] nums1, long[] nums2, long[] nums3, long[] nums4, long[] nums5) \n{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tresult[i] = nums1[i] - nums2[i] - nums3[i] - nums4[i] - nums5[i];\n\t}\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sub_list;",
            "assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);",
            "assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);",
            "assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a dthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "import std.math;\nimport std.typecons;\nbool validate(long n) \n{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tif(n == 0)\n\t\treturn true;\n\t\n\tif(n == 1)\n\t\treturn true;\n\t\n\tif(n == 2)\n\t\treturn true;\n\t\n\tif(n == 3)\n\t\treturn true;\n\t\n\tif(n == 4)\n\t\treturn true;\n\t\n\tif(n == 5)\n\t\treturn true;\n\t\n\tif(n == 6)\n\t\treturn true;\n\t\n\tif(n == 7)\n\t\treturn true;\n\t\n\tif(n == 8)\n\t\treturn true;\n\t\n\tif(n == 9)\n\t\treturn true;\n\t\n\tif(n == 10)\n\t\treturn true;\n\t\n\tif(n == 11)\n\t\treturn true;\n\t\n\tif(n == 12)\n\t\treturn true;\n\t\n\tif(n == 13)\n\t\treturn true;\n\t\n\tif(n == 14)\n\t\treturn true;\n\t\n\tif(n == 15)\n\t\treturn true;\n\t\n\tif(n == 16)\n\t\treturn true;\n\t\n\tif(n == 17)\n\t\treturn true;\n\t\n\tif(n == 18)\n\t\treturn true;\n\t\n\tif(n == 19)\n\t\treturn true;\n\t\n\tif(n == 20)\n\t\treturn true;\n\t\n\tif(n == 21)\n\t\treturn true;\n\t\n\tif(n == 22)\n\t\treturn true;\n\t\n\tif(n == 23)\n\t\treturn true;\n\t\n\tif(n == 24)\n\t\treturn true;\n\t\n\tif(n == 25)\n\t\treturn true;\n\t\n\tif(n == 26)\n\t\treturn true;\n\t\n\tif(n == 27)\n\t\treturn true;\n\t\n\tif(n == 28)\n\t\treturn true;\n\t\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = validate;",
            "assert(candidate(1234L) == true);",
            "assert(candidate(51241L) == false);",
            "assert(candidate(321L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "import std.math;\nimport std.typecons;\nbool text_match_two_three(string text) \n{\n\tstring temp;\n\tint i;\n\tfor (i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] == 'a' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'a') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (text[i] == 'b' && text[i+1] == 'b') \n\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_match_two_three;",
            "assert(candidate(\"ac\") == false);",
            "assert(candidate(\"dc\") == false);",
            "assert(candidate(\"abbbba\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "import std.math;\nimport std.typecons;\nlong max_sub_array_sum_repeated(long[] a, long n, long k) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n\nlong max_sub_array_sum_repeated_k(long[] a, long n, long k) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n\nlong max_sub_array_sum_repeated_k_repeated(long[] a, long n, long k) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n\nlong max_sub_array_sum_repeated_k_repeated_k(long[] a, long n, long k) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n\nlong max_sub_array_sum_repeated_k_repeated_k_repeated(long[] a, long n, long\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_sub_array_sum_repeated;",
            "assert(candidate([10L, 20L, -30L, -1L], 4L, 3L) == 30L);",
            "assert(candidate([-1L, 10L, 20L], 3L, 2L) == 59L);",
            "assert(candidate([-1L, -2L, -3L], 3L, 3L) == -1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a dthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong square_Sum(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i * i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong square_Sum_Odd(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i * i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong square_Sum_Even(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i * i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong square_Sum_Odd_Even(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i * i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\nlong square_Sum_Even_Odd(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tsum += i * i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the array of maximum length in an array of arrays.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long[]) max_length(long[][] list1) \n{\n\tlong max_length = 0;\n\tlong max_length_array = 0;\n\tlong max_length_array_array = 0;\n\tlong max_length_array_array_array = 0;\n\tlong max_length_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array = 0;\n\tlong max_length_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_length;",
            "assert(candidate([[0L], [1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == tuple(3L, [13L, 15L, 17L]));",
            "assert(candidate([[1L], [5L, 7L], [10L, 12L, 14L, 15L]]) == tuple(4L, [10L, 12L, 14L, 15L]));",
            "assert(candidate([[5L], [15L, 20L, 25L]]) == tuple(3L, [15L, 20L, 25L]));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "import std.math;\nimport std.typecons;\nlong count_no_of_ways(long n, long k) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong n_posts = 0;\n\tlong n_colors = 0;\n\tlong n_ways = 0;\n\tlong n_posts_adj = 0;\n\tlong n_colors_adj = 0;\n\tlong n_ways_adj = 0;\n\tlong n_posts_adj_adj = 0;\n\tlong n_colors_adj_adj = 0;\n\tlong n_ways_adj_adj = 0;\n\tlong n_posts_adj_adj_adj = 0;\n\tlong n_colors_adj_adj_adj = 0;\n\tlong n_ways_adj_adj_adj_adj = 0;\n\tlong n_posts_adj_adj_adj_adj = 0;\n\tlong n_colors_adj_adj_adj_adj = 0;\n\tlong n_ways_adj_adj_adj_adj_adj = 0;\n\tlong n_posts_adj_adj_adj_adj_adj = 0;\n\tlong n_colors_adj_adj_adj_adj_adj = 0;\n\tlong n_ways_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_posts_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_colors_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_ways_adj_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_posts_adj_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_colors_adj_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_ways_adj_adj_adj_adj_adj_adj_adj_adj = 0;\n\tlong n_posts_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_no_of_ways;",
            "assert(candidate(2L, 4L) == 16L);",
            "assert(candidate(3L, 2L) == 6L);",
            "assert(candidate(4L, 4L) == 228L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a dthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "import std.math;\nimport std.typecons;\nlong find(long n, long m) \n{\n\tlong q = 0;\n\tlong r = 1;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m1 = 0;\n\tlong m2 = 0;\n\tlong m3 = 0;\n\tlong m4 = 0;\n\tlong m5 = 0;\n\tlong m6 = 0;\n\tlong m7 = 0;\n\tlong m8 = 0;\n\tlong m9 = 0;\n\tlong m10 = 0;\n\tlong m11 = 0;\n\tlong m12 = 0;\n\tlong m13 = 0;\n\tlong m14 = 0;\n\tlong m15 = 0;\n\tlong m16 = 0;\n\tlong m17 = 0;\n\tlong m18 = 0;\n\tlong m19 = 0;\n\tlong m20 = 0;\n\tlong m21 = 0;\n\tlong m22 = 0;\n\tlong m23 = 0;\n\tlong m24 = 0;\n\tlong m25 = 0;\n\tlong m26 = 0;\n\tlong m27 = 0;\n\tlong m28 = 0;\n\tlong m29 = 0;\n\tlong m30 = 0;\n\tlong m31 = 0;\n\tlong m32 = 0;\n\tlong m33 = 0;\n\tlong m34 = 0;\n\tlong m35 = 0;\n\tlong m36 = 0;\n\tlong m37 = 0;\n\tlong m38 = 0;\n\tlong m39 = 0;\n\tlong m40 = 0;\n\tlong m41 = 0;\n\tlong m42 = 0;\n\tlong m43 = 0;\n\tlong m44 = 0;\n\tlong m45 = 0;\n\tlong m46 = 0;\n\tlong m47 = 0;\n\tlong m48 = 0;\n\tlong m49 = 0;\n\tlong m50 = 0;\n\tlong m51 = 0;\n\tlong m52 = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find;",
            "assert(candidate(10L, 3L) == 3L);",
            "assert(candidate(4L, 2L) == 2L);",
            "assert(candidate(20L, 5L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "import std.math;\nimport std.typecons;\nfloat otherside_rightangle(long w, long h) \n{\n\tlong i, j, k;\n\tlong x, y;\n\tlong x1, y1;\n\tlong x2, y2;\n\tlong x3, y3;\n\tlong x4, y4;\n\tlong x5, y5;\n\tlong x6, y6;\n\tlong x7, y7;\n\tlong x8, y8;\n\tlong x9, y9;\n\tlong x10, y10;\n\tlong x11, y11;\n\tlong x12, y12;\n\tlong x13, y13;\n\tlong x14, y14;\n\tlong x15, y15;\n\tlong x16, y16;\n\tlong x17, y17;\n\tlong x18, y18;\n\tlong x19, y19;\n\tlong x20, y20;\n\tlong x21, y21;\n\tlong x22, y22;\n\tlong x23, y23;\n\tlong x24, y24;\n\tlong x25, y25;\n\tlong x26, y26;\n\tlong x27, y27;\n\tlong x28, y28;\n\tlong x29, y29;\n\tlong x30, y30;\n\tlong x31, y31;\n\tlong x32, y32;\n\tlong x33, y33;\n\tlong x34, y34;\n\tlong x35, y35;\n\tlong x36, y36;\n\tlong x37, y37;\n\tlong x38, y38;\n\tlong x39, y39;\n\tlong x40, y40;\n\tlong x41, y41;\n\tlong x42, y42;\n\tlong x43, y43;\n\tlong x44, y44;\n\tlong x45, y45;\n\tlong x46, y46;\n\tlong x47, y47;\n\tlong x48, y48;\n\tlong x49, y49;\n\tlong x\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = otherside_rightangle;",
            "assert(candidate(7L, 8L) == 10.63014581273465);",
            "assert(candidate(3L, 4L) == 5L);",
            "assert(candidate(7L, 15L) == 16.55294535724685);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_div(long number) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= number; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t}\n\t\n\treturn sum;\n}\n\nlong sum_div(long number, long modulus) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= number; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t}\n\t\n\tif (modulus == 0) \n\t{\n\t\treturn sum;\n\t}\n\t\n\treturn sum / modulus;\n}\n\nlong sum_div(long number, long modulus, long modulus2) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= number; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t}\n\t\n\tif (modulus == 0) \n\t{\n\t\treturn sum;\n\t}\n\t\n\treturn sum / modulus;\n}\n\nlong sum_div(long number, long modulus, long modulus2, long modulus3) \n{\n\tlong sum = 0;\n\tlong i;\n\t\n\tfor (i = 1; i <= number; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t}\n\t\n\tif (modulus == 0) \n\t{\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_div;",
            "assert(candidate(8L) == 7L);",
            "assert(candidate(12L) == 16L);",
            "assert(candidate(7L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a dthon function to count inversions in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong get_Inv_Count(long[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_Inv_Count_2(long[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_Inv_Count_3(long[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_Inv_Count_4(long[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_Inv_Count_5(long[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_Inv_Count_6(\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_Inv_Count;",
            "assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);",
            "assert(candidate([1L, 2L, 1L]) == 1L);",
            "assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the array of tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, long) max_aggregate(Tuple!(string, long)[] stdata) \n{\n\tTuple!(string, long) max_aggregate_tmp = stdata[0];\n\tfor (int i = 1; i < stdata.length; i++)\n\t{\n\t\tif (stdata[i] > max_aggregate_tmp)\n\t\t{\n\t\t\tmax_aggregate_tmp = stdata[i];\n\t\t}\n\t}\n\treturn max_aggregate_tmp;\n}\n\nTuple!(string, long) max_aggregate(Tuple!(string, long)[] stdata, int n) \n{\n\tTuple!(string, long) max_aggregate_tmp = stdata[0];\n\tfor (int i = 1; i < stdata.length; i++)\n\t{\n\t\tif (stdata[i] > max_aggregate_tmp)\n\t\t{\n\t\t\tmax_aggregate_tmp = stdata[i];\n\t\t}\n\t}\n\treturn max_aggregate_tmp;\n}\n\nTuple!(string, long) max_aggregate(Tuple!(string, long)[] stdata, int n, int m) \n{\n\tTuple!(string, long) max_aggregate_tmp = stdata[0];\n\tfor (int i = 1; i < stdata.length; i++)\n\t{\n\t\tif (stdata[i] > max_aggregate_tmp)\n\t\t{\n\t\t\tmax_aggregate_tmp = stdata[i];\n\t\t}\n\t}\n\treturn max_aggregate_tmp;\n}\n\nTuple!(string, long) max_aggregate(Tuple!(string, long)[] st\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_aggregate;",
            "assert(candidate([tuple(\"Juan Whelan\", 90L), tuple(\"Sabah Colley\", 88L), tuple(\"Peter Nichols\", 7L), tuple(\"Juan Whelan\", 122L), tuple(\"Sabah Colley\", 84L)]) == tuple(\"Juan Whelan\", 212L));",
            "assert(candidate([tuple(\"Juan Whelan\", 50L), tuple(\"Sabah Colley\", 48L), tuple(\"Peter Nichols\", 37L), tuple(\"Juan Whelan\", 22L), tuple(\"Sabah Colley\", 14L)]) == tuple(\"Juan Whelan\", 72L));",
            "assert(candidate([tuple(\"Juan Whelan\", 10L), tuple(\"Sabah Colley\", 20L), tuple(\"Peter Nichols\", 30L), tuple(\"Juan Whelan\", 40L), tuple(\"Sabah Colley\", 50L)]) == tuple(\"Sabah Colley\", 70L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a dthon function to find element at a given index after number of rotations.",
        "code": "import std.math;\nimport std.typecons;\nlong find_Element(long[] arr, long[][] ranges, long rotations, long index) \n{\n\tlong i, j, k, l, m, n, n_rotations, n_index;\n\tlong[] temp;\n\t\n\tn_index = 0;\n\tn_rotations = rotations;\n\t\n\tfor (i = 0; i < ranges.length; i++)\n\t{\n\t\tfor (j = 0; j < ranges[i].length; j++)\n\t\t{\n\t\t\ttemp = new long[ranges[i][j].length];\n\t\t\tfor (k = 0; k < ranges[i][j].length; k++)\n\t\t\t{\n\t\t\t\ttemp[k] = arr[ranges[i][j][k]];\n\t\t\t}\n\t\t\t\n\t\t\tfor (l = 0; l < ranges[i][j].length; l++)\n\t\t\t{\n\t\t\t\tif (temp[l] == index)\n\t\t\t\t{\n\t\t\t\t\tn_index = l;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (n_index == 0)\n\t\t\t{\n\t\t\t\treturn temp[ranges[i][j].length];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}\n\nlong find_Element_Rotations(long[] arr, long[][] ranges, long rotations, long index) \n{\n\tlong i, j, k, l, m, n, n_rotations, n_index;\n\tlong[] temp;\n\t\n\tn_index = 0;\n\tn_rotations = rotations;\n\t\n\tfor (i = 0; i < ranges.length; i++)\n\t{\n\t\tfor (j = 0; j < ranges[i].length; j++)\n\t\t{\n\t\t\ttemp = new long[ranges[i][j].length];\n\t\t\tfor (k = 0; k < ranges[i][j].length; k++)\n\t\t\t{\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Element;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L], [[0L, 2L], [0L, 3L]], 2L, 1L) == 3L);",
            "assert(candidate([1L, 2L, 3L, 4L], [[0L, 1L], [0L, 2L]], 1L, 2L) == 3L);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [[0L, 1L], [0L, 2L]], 1L, 1L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from an array of words starting with letter 'p'.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, string) start_withp(string[] words) \n{\n\tstring p = \"p\";\n\tstring r = \"\";\n\tstring r1 = \"\";\n\tstring r2 = \"\";\n\tstring r3 = \"\";\n\tstring r4 = \"\";\n\tstring r5 = \"\";\n\tstring r6 = \"\";\n\tstring r7 = \"\";\n\tstring r8 = \"\";\n\tstring r9 = \"\";\n\tstring r10 = \"\";\n\tstring r11 = \"\";\n\tstring r12 = \"\";\n\tstring r13 = \"\";\n\tstring r14 = \"\";\n\tstring r15 = \"\";\n\tstring r16 = \"\";\n\tstring r17 = \"\";\n\tstring r18 = \"\";\n\tstring r19 = \"\";\n\tstring r20 = \"\";\n\tstring r21 = \"\";\n\tstring r22 = \"\";\n\tstring r23 = \"\";\n\tstring r24 = \"\";\n\tstring r25 = \"\";\n\tstring r26 = \"\";\n\tstring r27 = \"\";\n\tstring r28 = \"\";\n\tstring r29 = \"\";\n\tstring r30 = \"\";\n\tstring r31 = \"\";\n\tstring r32 = \"\";\n\tstring r33 = \"\";\n\tstring r34 = \"\";\n\tstring r35 = \"\";\n\tstring r36 = \"\";\n\tstring r37 = \"\";\n\tstring r38 = \"\";\n\tstring r39 = \"\";\n\tstring r40 = \"\";\n\tstring r41 = \"\";\n\tstring r42 = \"\";\n\tstring r43 = \"\";\n\tstring r44 = \"\";\n\tstring r45 = \"\";\n\tstring r46 = \"\";\n\tstring r47 = \"\";\n\tstring r48 = \"\";\n\tstring r49 = \"\";\n\tstring r50 = \"\";\n\tstring r51 = \"\";\n\tstring r52 = \"\";\n\tstring r53 = \"\";\n\tstring r54 = \"\";\n\tstring r55 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = start_withp;",
            "assert(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == tuple(\"Python\", \"PHP\"));",
            "assert(candidate([\"Python Programming\", \"Java Programming\"]) == tuple(\"Python\", \"Programming\"));",
            "assert(candidate([\"Pqrst Pqr\", \"qrstuv\"]) == tuple(\"Pqrst\", \"Pqr\"));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "import std.math;\nimport std.typecons;\nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n{\n\tlong max = 0;\n\tlong i = index;\n\tlong j = index;\n\tlong k = k;\n\tlong sum = 0;\n\twhile (i < n) \n\t{\n\t\tif (a[i] > a[j]) \n\t\t{\n\t\t\tsum = a[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsum = a[j];\n\t\t\tj++;\n\t\t}\n\t\tif (sum > max) \n\t\t{\n\t\t\tmax = sum;\n\t\t\ti = index;\n\t\t\tj = index;\n\t\t\tk = k;\n\t\t}\n\t}\n\treturn max;\n}\n\nlong max_sum_increasing_subseq_k(long[] a, long n, long index, long k) \n{\n\tlong max = 0;\n\tlong i = index;\n\tlong j = index;\n\tlong k = k;\n\tlong sum = 0;\n\twhile (i < n) \n\t{\n\t\tif (a[i] > a[j]) \n\t\t{\n\t\t\tsum = a[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsum = a[j];\n\t\t\tj++;\n\t\t}\n\t\tif (sum > max) \n\t\t{\n\t\t\tmax = sum;\n\t\t\ti = index;\n\t\t\tj = index;\n\t\t\tk = k;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_sum_increasing_subseq;",
            "assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 4L, 6L) == 11L);",
            "assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 2L, 5L) == 7L);",
            "assert(candidate([11L, 15L, 19L, 21L, 26L, 28L, 31L], 7L, 2L, 4L) == 71L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] large_product(long[] nums1, long[] nums2, long N) \n{\n\tlong[] result = new long[N];\n\tlong[] temp = new long[N];\n\tlong[] temp2 = new long[N];\n\tlong[] temp3 = new long[N];\n\tlong[] temp4 = new long[N];\n\tlong[] temp5 = new long[N];\n\tlong[] temp6 = new long[N];\n\tlong[] temp7 = new long[N];\n\tlong[] temp8 = new long[N];\n\tlong[] temp9 = new long[N];\n\tlong[] temp10 = new long[N];\n\tlong[] temp11 = new long[N];\n\tlong[] temp12 = new long[N];\n\tlong[] temp13 = new long[N];\n\tlong[] temp14 = new long[N];\n\tlong[] temp15 = new long[N];\n\tlong[] temp16 = new long[N];\n\tlong[] temp17 = new long[N];\n\tlong[] temp18 = new long[N];\n\tlong[] temp19 = new long[N];\n\tlong[] temp20 = new long[N];\n\tlong[] temp21 = new long[N];\n\tlong[] temp22 = new long[N];\n\tlong[] temp23 = new long[N];\n\tlong[] temp24 = new long[N];\n\tlong[] temp25 = new long[N];\n\tlong[] temp26 = new long[N];\n\tlong[] temp27 = new long[N];\n\tlong[] temp28 = new long[N];\n\tlong[] temp29 = new long[N];\n\tlong[] temp30 = new long[N];\n\tlong[] temp31 = new long[N];\n\tlong[] temp32 = new long[N];\n\tlong[] temp33 = new long[N];\n\tlong[] temp34 = new long[N];\n\tlong[] temp35 = new long[N];\n\tlong[] temp36 = new long[N];\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = large_product;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 3L) == [60L, 54L, 50L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 4L) == [60L, 54L, 50L, 48L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 5L) == [60L, 54L, 50L, 48L, 45L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a dthon function to find the maximum of two numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong maximum(long a, long b) \n{\n\tlong max = a;\n\tif (b > max) max = b;\n\treturn max;\n}\n\nlong minimum(long a, long b) \n{\n\tlong min = a;\n\tif (b < min) min = b;\n\treturn min;\n}\n\nlong sum(long a, long b) \n{\n\tlong sum = a;\n\tif (b > sum) sum = b;\n\treturn sum;\n}\n\nlong product(long a, long b) \n{\n\tlong product = a;\n\tif (b > product) product = b;\n\treturn product;\n}\n\nlong square(long a, long b) \n{\n\tlong square = a;\n\tif (b > square) square = b;\n\treturn square;\n}\n\nlong square_product(long a, long b) \n{\n\tlong square_product = a;\n\tif (b > square_product) square_product = b;\n\treturn square_product;\n}\n\nlong square_product_product(long a, long b) \n{\n\tlong square_product_product = a;\n\tif (b > square_product_product) square_product_product = b;\n\treturn square_product_product;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to an array of characters.",
        "code": "import std.math;\nimport std.typecons;\nstring[] string_to_tuple(string str1) \n{\n\tstring[] str2 = new string[str1.length()];\n\tfor (int i = 0; i < str1.length(); i++)\n\t{\n\t\tstr2[i] = str1.substring(i, i + 1);\n\t}\n\treturn str2;\n}\n\nstring[] string_to_tuple(string str1, string str2) \n{\n\tstring[] str3 = new string[str1.length()];\n\tfor (int i = 0; i < str1.length(); i++)\n\t{\n\t\tstr3[i] = str1.substring(i, i + 1);\n\t}\n\tfor (int i = 0; i < str2.length(); i++)\n\t{\n\t\tstr3[i] = str2.substring(i, i + 1);\n\t}\n\treturn str3;\n}\n\nstring[] string_to_tuple(string str1, string str2, string str3) \n{\n\tstring[] str4 = new string[str1.length()];\n\tfor (int i = 0; i < str1.length(); i++)\n\t{\n\t\tstr4[i] = str1.substring(i, i + 1);\n\t}\n\tfor (int i = 0; i < str2.length(); i++)\n\t{\n\t\tstr4[i] = str2.substring(i, i + 1);\n\t}\n\tfor (int i = 0; i < str3.length(); i++)\n\t{\n\t\tstr4[i] = str3.substring(i, i + 1);\n\t}\n\treturn str4;\n}\n\nstring[] string_to_tuple(\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = string_to_tuple;",
            "assert(candidate(\"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]);",
            "assert(candidate(\"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"]);",
            "assert(candidate(\"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a dthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "import std.math;\nimport std.typecons;\nlong highest_Power_of_2(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n\treturn result;\n}\n\nlong highest_Power_of_2_2(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n\treturn result;\n}\n\nlong highest_Power_of_2_3(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n\treturn result;\n}\n\nlong highest_Power_of_2_4(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n\treturn result;\n}\n\nlong highest_Power_of_2_5(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n\treturn result;\n}\n\nlong highest_Power_of_2_6(long n) \n{\n\tlong result = 1;\n\twhile (result < n) \n\t{\n\t\tresult <<= 1;\n\t}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = highest_Power_of_2;",
            "assert(candidate(10L) == 8L);",
            "assert(candidate(19L) == 16L);",
            "assert(candidate(32L) == 32L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "import std.math;\nimport std.typecons;\nlong find_lucas(long n) \n{\n\tlong i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_lucas;",
            "assert(candidate(9L) == 76L);",
            "assert(candidate(4L) == 7L);",
            "assert(candidate(3L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one array to nested associative array.",
        "code": "import std.math;\nimport std.typecons;\nNone[] convert_list_dictionary(string[] l1, string[] l2, long[] l3) \n{\n\tint i,j;\n\tint n = l1.length;\n\tint m = l2.length;\n\tint[][] a = new int[n][m];\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < m; j++) {\n\t\t\ta[i][j] = l1[i].compareTo(l2[j]);\n\t\t}\n\t}\n\treturn a;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = convert_list_dictionary;",
            "assert(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85L, 98L, 89L, 92L]) == [[\"S001\": [\"Adina Park\": 85L].nullable].nullable, [\"S002\": [\"Leyton Marsh\": 98L].nullable].nullable, [\"S003\": [\"Duncan Boyle\": 89L].nullable].nullable, [\"S004\": [\"Saim Richards\": 92L].nullable].nullable]);",
            "assert(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100L, 200L, 300L, 400L]) == [[\"abc\": [\"python\": 100L].nullable].nullable, [\"def\": [\"program\": 200L].nullable].nullable, [\"ghi\": [\"language\": 300L].nullable].nullable, [\"jkl\": [\"programs\": 400L].nullable].nullable]);",
            "assert(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10L, 20L, 30L, 40L]) == [[\"A1\": [\"java\": 10L].nullable].nullable, [\"A2\": [\"C\": 20L].nullable].nullable, [\"A3\": [\"C++\": 30L].nullable].nullable, [\"A4\": [\"DBMS\": 40L].nullable].nullable]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "import std.math;\nimport std.typecons;\nlong get_max_sum(long n) \n{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_max_sum;",
            "assert(candidate(60L) == 106L);",
            "assert(candidate(10L) == 12L);",
            "assert(candidate(2L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the array with maximum length.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long[]) max_length_list(long[][] input_list) \n{\n\tlong max_length = 0;\n\tlong max_length_index = 0;\n\tlong max_length_index_array = 0;\n\tlong max_length_index_array_index = 0;\n\tlong max_length_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index = 0;\n\tlong max_length_index_array_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index_array_index = 0;\n\tlong max_length_index_array_index_array_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array_index = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array_index_array_index = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array = 0;\n\tlong max_length_index_array_index_array_index_array_index_array_index_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_length_list;",
            "assert(candidate([[0L], [1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == tuple(3L, [13L, 15L, 17L]));",
            "assert(candidate([[1L, 2L, 3L, 4L, 5L], [1L, 2L, 3L, 4L], [1L, 2L, 3L], [1L, 2L], [1L]]) == tuple(5L, [1L, 2L, 3L, 4L, 5L]));",
            "assert(candidate([[3L, 4L, 5L], [6L, 7L, 8L, 9L], [10L, 11L, 12L]]) == tuple(4L, [6L, 7L, 8L, 9L]));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given array contains no duplicates.",
        "code": "import std.math;\nimport std.typecons;\nbool check_distinct(long[] test_tup) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (test_tup[i] == test_tup[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nbool check_distinct(int[] test_tup) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (test_tup[i] == test_tup[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nbool check_distinct(short[] test_tup) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (test_tup[i] == test_tup[j])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nbool check_distinct(char[] test_tup) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = i + 1; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_distinct;",
            "assert(candidate([1L, 4L, 5L, 6L, 1L, 4L]) == false);",
            "assert(candidate([1L, 4L, 5L, 6L]) == true);",
            "assert(candidate([2L, 3L, 4L, 5L, 6L]) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a dthon function to find the first non-repeated character in a given string.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(string) first_non_repeating_character(string str1) \n{\n\tstring str2 = str1;\n\tint i = 0;\n\twhile (i < str2.length())\n\t{\n\t\tif (str2[i]!= str2[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\n\nNullable(string) first_non_repeating_character(string str1) \n{\n\tstring str2 = str1;\n\tint i = 0;\n\twhile (i < str2.length())\n\t{\n\t\tif (str2[i]!= str2[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\n\nNullable(string) first_non_repeating_character(string str1) \n{\n\tstring str2 = str1;\n\tint i = 0;\n\twhile (i < str2.length())\n\t{\n\t\tif (str2[i]!= str2[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\n\nNullable(string) first_non_repeating_character(string str1) \n{\n\tstring str2 = str1;\n\tint i = 0;\n\twhile (i < str2.length())\n\t{\n\t\tif (str2[i]!= str2[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "import std.math;\nimport std.typecons;\nstring check_char(string string) \n{\n\tstring temp = string;\n\tint i = 0;\n\twhile (i < string.length() && string[i]!= '\\0') \n\t{\n\t\tif (string[i] == string[string.length()-1]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (string[i] == string[string.length()-1]) \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (string[i]!= string[string.length()-1]) \n\t\t\t\t{\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn temp;\n}\n\nstring check_char_2(string string) \n{\n\tstring temp = string;\n\tint i = 0;\n\twhile (i < string.length() && string[i]!= '\\0') \n\t{\n\t\tif (string[i] == string[string.length()-1]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (string[i]!= string[string.length()-1]) \n\t\t\t{\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn temp;\n}\n\nstring check_char_3(string string) \n{\n\tstring temp = string;\n\tint i = 0;\n\twhile (i < string.length() && string[i]!= '\\0') \n\t{\n\t\tif (string[i] == string[string.length()-1]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_char;",
            "assert(candidate(\"abba\") == \"Valid\");",
            "assert(candidate(\"a\") == \"Valid\");",
            "assert(candidate(\"abcd\") == \"Invalid\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "import std.math;\nimport std.typecons;\nfloat median_numbers(long a, long b, long c) \n{\n\tfloat a_median = std.math.median(a, b, c);\n\tfloat b_median = std.math.median(b, c, a);\n\tfloat c_median = std.math.median(c, a, b);\n\treturn a_median + b_median + c_median;\n}\n\nfloat median_numbers_2(long a, long b, long c) \n{\n\tfloat a_median = std.math.median(a, b, c);\n\tfloat b_median = std.math.median(b, c, a);\n\tfloat c_median = std.math.median(c, a, b);\n\treturn a_median + b_median + c_median;\n}\n\nfloat median_numbers_3(long a, long b, long c) \n{\n\tfloat a_median = std.math.median(a, b, c);\n\tfloat b_median = std.math.median(b, c, a);\n\tfloat c_median = std.math.median(c, a, b);\n\treturn a_median + b_median + c_median;\n}\n\nfloat median_numbers_4(long a, long b, long c) \n{\n\tfloat a_median = std.math.median(a, b, c);\n\tfloat b_median = std.math.median(b, c, a);\n\tfloat c_median = std.math.median(c, a, b);\n\treturn a_median + b_median + c_median;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long) bitwise_xor(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\treturn test_tup1 ^ test_tup2;\n}\n\nTuple!(long, long, long, long) bitwise_xor(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2, Tuple!(long, long, long, long) test_tup3) \n{\n\treturn test_tup1 ^ test_tup2 ^ test_tup3;\n}\n\nTuple!(long, long, long, long) bitwise_xor(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2, Tuple!(long, long, long, long) test_tup3, Tuple!(long, long, long, long) test_tup4) \n{\n\treturn test_tup1 ^ test_tup2 ^ test_tup3 ^ test_tup4;\n}\n\nTuple!(long, long, long, long) bitwise_xor(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2, Tuple!(long, long, long, long) test_tup3, Tuple!(long, long, long, long) test_tup4, Tuple!(long\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = bitwise_xor;",
            "assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(15L, 6L, 5L, 10L));",
            "assert(candidate(tuple(11L, 5L, 7L, 10L), tuple(6L, 3L, 4L, 4L)) == tuple(13L, 6L, 3L, 14L));",
            "assert(candidate(tuple(12L, 6L, 8L, 11L), tuple(7L, 4L, 5L, 6L)) == tuple(11L, 2L, 13L, 13L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a dthon function to identify non-prime numbers.",
        "code": "import std.math;\nimport std.typecons;\nbool is_not_prime(long n) \n{\n\tif (n == 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return false;\n\tif (n % 3 == 0) return false;\n\tif (n % 5 == 0) return false;\n\tif (n % 7 == 0) return false;\n\tif (n % 11 == 0) return false;\n\tif (n % 13 == 0) return false;\n\tif (n % 17 == 0) return false;\n\tif (n % 19 == 0) return false;\n\tif (n % 23 == 0) return false;\n\tif (n % 29 == 0) return false;\n\tif (n % 31 == 0) return false;\n\tif (n % 37 == 0) return false;\n\tif (n % 41 == 0) return false;\n\tif (n % 43 == 0) return false;\n\tif (n % 47 == 0) return false;\n\tif (n % 53 == 0) return false;\n\tif (n % 59 == 0) return false;\n\tif (n % 61 == 0) return false;\n\tif (n % 67 == 0) return false;\n\tif (n % 71 == 0) return false;\n\tif (n % 73 == 0) return false;\n\tif (n % 79 == 0) return false;\n\tif (n % 83 == 0) return false;\n\tif (n % 89 == 0) return false;\n\tif (n % 97 == 0) return false;\n\tif (n % 101 == 0) return false;\n\tif (n % 103 == 0) return false;\n\tif (n % 107 == 0) return false;\n\tif (n % 109 == 0) return false;\n\tif (n % 113 == 0) return false;\n\tif (n % 127 == 0) return false;\n\tif (n % 131 == 0) return false;\n\tif (n % 137 == 0) return false;\n\tif (n % 139 == 0) return false;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_not_prime;",
            "assert(candidate(2L) == false);",
            "assert(candidate(10L) == true);",
            "assert(candidate(35L) == true);",
            "assert(candidate(37L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique tuples in the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong extract_freq(Tuple!(long, long)[] test_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tif (test_list[i]!= null) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong extract_freq(Tuple!(long, long)[] test_list, int start, int end) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i++) {\n\t\tif (test_list[i]!= null) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong extract_freq(Tuple!(long, long)[] test_list, int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i += step) {\n\t\tif (test_list[i]!= null) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong extract_freq(Tuple!(long, long)[] test_list, int start, int end, int step, int start_index, int end_index) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i += step) {\n\t\tif (test_list[i]!= null) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong extract_freq(Tuple!(long, long)[] test_list, int start, int end,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = extract_freq;",
            "assert(candidate([tuple(3L, 4L), tuple(1L, 2L), tuple(4L, 3L), tuple(5L, 6L)]) == 3L);",
            "assert(candidate([tuple(4L, 15L), tuple(2L, 3L), tuple(5L, 4L), tuple(6L, 7L)]) == 4L);",
            "assert(candidate([tuple(5L, 16L), tuple(2L, 3L), tuple(6L, 5L), tuple(6L, 9L)]) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of array elements in the given two nested arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] add_nested_tuples(long[][] test_tup1, long[][] test_tup2) \n{\n\tlong[][] result = new long[test_tup1.length][test_tup2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = add_nested_tuples;",
            "assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[7L, 10L], [7L, 14L], [3L, 10L], [8L, 13L]]);",
            "assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[9L, 12L], [9L, 16L], [5L, 12L], [10L, 15L]]);",
            "assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[11L, 14L], [11L, 18L], [7L, 14L], [12L, 17L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a dthon function to find the minimum of two numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong minimum(long a, long b) \n{\n\tlong min = std.math.min(a, b);\n\treturn min;\n}\n\nlong maximum(long a, long b) \n{\n\tlong max = std.math.max(a, b);\n\treturn max;\n}\n\nlong sum(long a, long b) \n{\n\tlong sum = std.math.sum(a, b);\n\treturn sum;\n}\n\nlong product(long a, long b) \n{\n\tlong product = std.math.product(a, b);\n\treturn product;\n}\n\nlong square(long a, long b) \n{\n\tlong square = std.math.square(a, b);\n\treturn square;\n}\n\nlong cube(long a, long b) \n{\n\tlong cube = std.math.cube(a, b);\n\treturn cube;\n}\n\nlong cubeSum(long a, long b) \n{\n\tlong cube = std.math.cubeSum(a, b);\n\treturn cube;\n}\n\nlong cubeProduct(long a, long b) \n{\n\tlong cube = std.math.cubeProduct(a, b);\n\treturn cube;\n}\n\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = minimum;",
            "assert(candidate(1L, 2L) == 1L);",
            "assert(candidate(-5L, -4L) == -5L);",
            "assert(candidate(0L, 0L) == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a dthon function to find whether the parity of a given number is odd.",
        "code": "import std.math;\nimport std.typecons;\nbool find_Parity(long x) \n{\n\tlong n = x;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n1 = 0;\n\tlong n2 = 0;\n\tlong n3 = 0;\n\tlong n4 = 0;\n\tlong n5 = 0;\n\tlong n6 = 0;\n\tlong n7 = 0;\n\tlong n8 = 0;\n\tlong n9 = 0;\n\tlong n10 = 0;\n\tlong n11 = 0;\n\tlong n12 = 0;\n\tlong n13 = 0;\n\tlong n14 = 0;\n\tlong n15 = 0;\n\tlong n16 = 0;\n\tlong n17 = 0;\n\tlong n18 = 0;\n\tlong n19 = 0;\n\tlong n20 = 0;\n\tlong n21 = 0;\n\tlong n22 = 0;\n\tlong n23 = 0;\n\tlong n24 = 0;\n\tlong n25 = 0;\n\tlong n26 = 0;\n\tlong n27 = 0;\n\tlong n28 = 0;\n\tlong n29 = 0;\n\tlong n30 = 0;\n\tlong n31 = 0;\n\tlong n32 = 0;\n\tlong n33 = 0;\n\tlong n34 = 0;\n\tlong n35 = 0;\n\tlong n36 = 0;\n\tlong n37 = 0;\n\tlong n38 = 0;\n\tlong n39 = 0;\n\tlong n40 = 0;\n\tlong n41 = 0;\n\tlong n42 = 0;\n\tlong n43 = 0;\n\tlong n44 = 0;\n\tlong n45 = 0;\n\tlong n46 = 0;\n\tlong n47 = 0;\n\tlong n48 = 0;\n\tlong n49 = 0;\n\tlong n50 = 0;\n\tlong n51 = 0;\n\tlong n52 = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Parity;",
            "assert(candidate(12L) == false);",
            "assert(candidate(7L) == true);",
            "assert(candidate(10L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] k_smallest_pairs(long[] nums1, long[] nums2, long k) \n{\n\tlong[][] res = new long[k][2];\n\tlong[] temp = new long[k];\n\tlong[] temp2 = new long[k];\n\tlong[] temp3 = new long[k];\n\tlong[] temp4 = new long[k];\n\tlong[] temp5 = new long[k];\n\tlong[] temp6 = new long[k];\n\tlong[] temp7 = new long[k];\n\tlong[] temp8 = new long[k];\n\tlong[] temp9 = new long[k];\n\tlong[] temp10 = new long[k];\n\tlong[] temp11 = new long[k];\n\tlong[] temp12 = new long[k];\n\tlong[] temp13 = new long[k];\n\tlong[] temp14 = new long[k];\n\tlong[] temp15 = new long[k];\n\tlong[] temp16 = new long[k];\n\tlong[] temp17 = new long[k];\n\tlong[] temp18 = new long[k];\n\tlong[] temp19 = new long[k];\n\tlong[] temp20 = new long[k];\n\tlong[] temp21 = new long[k];\n\tlong[] temp22 = new long[k];\n\tlong[] temp23 = new long[k];\n\tlong[] temp24 = new long[k];\n\tlong[] temp25 = new long[k];\n\tlong[] temp26 = new long[k];\n\tlong[] temp27 = new long[k];\n\tlong[] temp28 = new long[k];\n\tlong[] temp29 = new long[k];\n\tlong[] temp30 = new long[k];\n\tlong[] temp31 = new long[k];\n\tlong[] temp32 = new long[k];\n\tlong[] temp33 = new long[k];\n\tlong[] temp34 = new long[k];\n\tlong[] temp35 = new long[k];\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = k_smallest_pairs;",
            "assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 2L) == [[1L, 2L], [1L, 4L]]);",
            "assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 1L) == [[1L, 2L]]);",
            "assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 7L) == [[1L, 2L], [1L, 4L], [3L, 2L], [1L, 6L], [3L, 4L], [3L, 6L], [7L, 2L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of tuples within a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong min_product_tuple(Tuple!(long, long)[] list1) \n{\n\tlong min = std.math.Long.MAX_VALUE;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = min_product_tuple;",
            "assert(candidate([tuple(2L, 7L), tuple(2L, 6L), tuple(1L, 8L), tuple(4L, 9L)]) == 8L);",
            "assert(candidate([tuple(10L, 20L), tuple(15L, 2L), tuple(5L, 10L)]) == 30L);",
            "assert(candidate([tuple(11L, 44L), tuple(10L, 15L), tuple(20L, 5L), tuple(12L, 9L)]) == 100L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "import std.math;\nimport std.typecons;\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < word.length(); i++) \n\t{\n\t\tif (word[i] == 'A' || word[i] == 'B' || word[i] == 'C' || word[i] == 'D' || word[i] == 'E' || word[i] == 'F' || word[i] == 'G' || word[i] == 'H' || word[i] == 'I' || word[i] == 'J' || word[i] == 'K' || word[i] == 'L' || word[i] == 'M' || word[i] == 'N' || word[i] == 'O' || word[i] == 'P' || word[i] == 'Q' || word[i] == 'R' || word[i] == 'S' || word[i] == 'T' || word[i] == 'U' || word[i] == 'V' || word[i] == 'W' || word[i] == 'X' || word[i] == 'Y' || word[i] == 'Z') \n\t\t{\n\t\t\tresult += word[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += word[i] + \" \";\n\t\t}\n\t}\n\treturn result;\n}\n\nstring camel_to_snake(string word) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < word.length(); i++) \n\t{\n\t\tif (word[i] == 'A' || word[i] == 'B' || word[i] == 'C' || word[i] == 'D' || word[i] == 'E' || word[i] == 'F' || word[i] == 'G' || word[i] == 'H' || word[i] == 'I\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = snake_to_camel;",
            "assert(candidate(\"android_tv\") == \"AndroidTv\");",
            "assert(candidate(\"google_pixel\") == \"GooglePixel\");",
            "assert(candidate(\"apple_watch\") == \"AppleWatch\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a dthon function to remove odd numbers from a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] remove_odd(long[] l) \n{\n\tlong[] r = new long[l.length];\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] % 2 == 0) \n\t\t{\n\t\t\tl[i] = l[i] - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl[i] = l[i] + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn r;\n}\n\nlong[] remove_even(long[] l) \n{\n\tlong[] r = new long[l.length];\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] % 2 == 1) \n\t\t{\n\t\t\tl[i] = l[i] - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl[i] = l[i] + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn r;\n}\n\nlong[] remove_all(long[] l) \n{\n\tlong[] r = new long[l.length];\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tr[i] = l[i];\n\t\ti++;\n\t}\n\treturn r;\n}\n\nlong[] remove_all(long[] l) \n{\n\tlong[] r = new long[l.length];\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tr[i] = l[i];\n\t\ti++;\n\t}\n\treturn r;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a dthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "import std.math;\nimport std.typecons;\nbool overlapping(long[] list1, long[] list2) \n{\n\tlong i, j;\n\tlong sum = 0;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tsum += list1[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum == 0;\n}\n\nbool overlapping(long[] list1, long[] list2, long[] list3) \n{\n\tlong i, j;\n\tlong sum = 0;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tsum += list1[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < list3.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list3[i] == list2[j])\n\t\t\t{\n\t\t\t\tsum += list3[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum == 0;\n}\n\nbool overlapping(long[] list1, long[] list2, long[] list3, long[] list4) \n{\n\tlong i, j;\n\tlong sum = 0;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = overlapping;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);",
            "assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);",
            "assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a dthon function to find a pair with highest product from a given array of integers.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long) max_Product(long[] arr) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i];\n\t\t\tmax_product = product;\n\t\t}\n\t\tproduct *= arr[i];\n\t}\n\treturn (Tuple!(long, long) {max_product, max});\n}\n\nTuple!(long, long) max_Product(long[] arr, long[] arr2) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i];\n\t\t\tmax_product = product;\n\t\t}\n\t\tproduct *= arr[i];\n\t\tproduct *= arr2[i];\n\t}\n\treturn (Tuple!(long, long) {max_product, max});\n}\n\nTuple!(long, long) max_Product(long[] arr, long[] arr2, long[] arr3) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i];\n\t\t\tmax_product = product;\n\t\t}\n\t\tproduct *= arr[i];\n\t\tproduct *= arr2[i];\n\t\tproduct *= arr3[i];\n\t}\n\treturn (Tuple!(long, long) {max_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_Product;",
            "assert(candidate([1L, 2L, 3L, 4L, 7L, 0L, 8L, 4L]) == tuple(7L, 8L));",
            "assert(candidate([0L, -1L, -2L, -4L, 5L, 0L, -6L]) == tuple(-4L, -6L));",
            "assert(candidate([1L, 2L, 3L]) == tuple(2L, 3L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given array of arrays.",
        "code": "import std.math;\nimport std.typecons;\nstring[][] group_tuples(string[][] Input) \n{\n\tstring[][] Output = new string[Input.length][];\n\tfor (int i = 0; i < Input.length; i++) {\n\t\tOutput[i] = new string[Input[i].length];\n\t\tfor (int j = 0; j < Input[i].length; j++) {\n\t\t\tOutput[i][j] = Input[i][j];\n\t\t}\n\t}\n\treturn Output;\n}\n\nstring[][] group_tuples(string[][] Input) \n{\n\tstring[][] Output = new string[Input.length][];\n\tfor (int i = 0; i < Input.length; i++) {\n\t\tOutput[i] = new string[Input[i].length];\n\t\tfor (int j = 0; j < Input[i].length; j++) {\n\t\t\tOutput[i][j] = Input[i][j];\n\t\t}\n\t}\n\treturn Output;\n}\n\nstring[][] group_tuples(string[][] Input) \n{\n\tstring[][] Output = new string[Input.length][];\n\tfor (int i = 0; i < Input.length; i++) {\n\t\tOutput[i] = new string[Input[i].length];\n\t\tfor (int j = 0; j < Input[i].length; j++) {\n\t\t\tOutput[i][j] = Input[i][j];\n\t\t}\n\t}\n\treturn Output;\n}\n\nstring[][] group_tuples(string[][] Input) \n{\n\tstring[][] Output = new string[Input.length][];\n\tfor (int i = 0; i < Input.length; i++) {\n\t\tOutput[i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = group_tuples;",
            "assert(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]);",
            "assert(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]);",
            "assert(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a dthon function to find the cube sum of first n even natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong cube_Sum(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cube_SumOdd(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cube_SumOdd(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cube_SumEven(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cube_SumEven(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cube_SumOddEven(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum +=\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = cube_Sum;",
            "assert(candidate(2L) == 72L);",
            "assert(candidate(3L) == 288L);",
            "assert(candidate(4L) == 800L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "import std.math;\nimport std.typecons;\nstring concatenate_tuple(Tuple!(string, string, long, string) test_tup) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < test_tup.size(); i++)\n\t{\n\t\tresult += test_tup[i];\n\t}\n\treturn result;\n}\n\nstring concatenate_tuple(Tuple!(string, string, long, string) test_tup, string delimiter) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < test_tup.size(); i++)\n\t{\n\t\tresult += test_tup[i] + delimiter;\n\t}\n\treturn result;\n}\n\nstring concatenate_tuple(Tuple!(string, string, long, string) test_tup, string delimiter, string suffix) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < test_tup.size(); i++)\n\t{\n\t\tresult += test_tup[i] + delimiter + suffix;\n\t}\n\treturn result;\n}\n\nstring concatenate_tuple(Tuple!(string, string, long, string) test_tup, string delimiter, string suffix, string suffix2) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < test_tup.size(); i++)\n\t{\n\t\tresult += test_tup[i] + delimiter + suffix + suffix2;\n\t}\n\treturn result;\n}\n\nstring concatenate_tuple(Tuple!(string,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = concatenate_tuple;",
            "assert(candidate(tuple(\"ID\", \"is\", 4L, \"UTS\")) == \"ID-is-4-UTS\");",
            "assert(candidate(tuple(\"QWE\", \"is\", 4L, \"RTY\")) == \"QWE-is-4-RTY\");",
            "assert(candidate(tuple(\"ZEN\", \"is\", 4L, \"OP\")) == \"ZEN-is-4-OP\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a dthon function to find the average of cubes of first n natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nfloat find_Average_Of_Cube(long n) \n{\n\tfloat sum = 0;\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tsum += std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.math.pow(std.\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Average_Of_Cube;",
            "assert(candidate(2L) == 4.5);",
            "assert(candidate(3L) == 12L);",
            "assert(candidate(1L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "import std.math;\nimport std.typecons;\nstring[] extract_rear(Tuple!(string, string, string) test_tuple) \n{\n\tstring[] result = new string[test_tuple.size()];\n\tfor (int i = 0; i < test_tuple.size(); i++) {\n\t\tresult[i] = test_tuple.get(i);\n\t}\n\treturn result;\n}\n\nstring[] extract_front(Tuple!(string, string, string) test_tuple) \n{\n\tstring[] result = new string[test_tuple.size()];\n\tfor (int i = 0; i < test_tuple.size(); i++) {\n\t\tresult[i] = test_tuple.get(i);\n\t}\n\treturn result;\n}\n\nstring[] extract_front(Tuple!(string, string, string) test_tuple) \n{\n\tstring[] result = new string[test_tuple.size()];\n\tfor (int i = 0; i < test_tuple.size(); i++) {\n\t\tresult[i] = test_tuple.get(i);\n\t}\n\treturn result;\n}\n\nstring[] extract_front(Tuple!(string, string, string) test_tuple) \n{\n\tstring[] result = new string[test_tuple.size()];\n\tfor (int i = 0; i < test_tuple.size(); i++) {\n\t\tresult[i] = test_tuple.get(i);\n\t}\n\treturn result;\n}\n\nstring[] extract_front(Tuple\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = extract_rear;",
            "assert(candidate(tuple(\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"]);",
            "assert(candidate(tuple(\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"]);",
            "assert(candidate(tuple(\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong[] filter_oddnumbers(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] % 2 == 0) \n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] filter_evennumbers(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] % 2 == 1) \n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] filter_between(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0 && nums[i] < 1) \n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] filter_between_2(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0 && nums[i] < 1) \n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] filter_between_3(long[] nums\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = filter_oddnumbers;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);",
            "assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);",
            "assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "import std.math;\nimport std.typecons;\nstring change_date_format(string dt) \n{\n\tstring ret;\n\tstring::size_type pos = dt.find(\"-\");\n\tstring::size_type pos2 = dt.find(\"-\", pos);\n\tstring::size_type pos3 = dt.find(\"-\", pos2);\n\tstring::size_type pos4 = dt.find(\"-\", pos3);\n\tstring::size_type pos5 = dt.find(\"-\", pos4);\n\tstring::size_type pos6 = dt.find(\"-\", pos5);\n\tstring::size_type pos7 = dt.find(\"-\", pos6);\n\tstring::size_type pos8 = dt.find(\"-\", pos7);\n\tstring::size_type pos9 = dt.find(\"-\", pos8);\n\tstring::size_type pos10 = dt.find(\"-\", pos9);\n\tstring::size_type pos11 = dt.find(\"-\", pos10);\n\tstring::size_type pos12 = dt.find(\"-\", pos11);\n\tstring::size_type pos13 = dt.find(\"-\", pos12);\n\tstring::size_type pos14 = dt.find(\"-\", pos13);\n\tstring::size_type pos15 = dt.find(\"-\", pos14);\n\tstring::size_type pos16 = dt.find(\"-\", pos15);\n\tstring::size_type pos17 = dt.find(\"-\", pos16);\n\tstring::size_type pos18 = dt.find(\"-\", pos17);\n\tstring::size_type pos19 = dt.find(\"-\", pos18);\n\tstring::size_type pos20 = dt.find(\"-\", pos19);\n\tstring::size_type pos21 = dt.find(\"-\", pos20);\n\tstring::size_type pos22 = dt.find(\"-\", pos21);\n\tstring::size_type pos23 = dt\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = change_date_format;",
            "assert(candidate(\"2026-01-02\") == \"02-01-2026\");",
            "assert(candidate(\"2020-11-13\") == \"13-11-2020\");",
            "assert(candidate(\"2021-04-26\") == \"26-04-2021\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "import std.math;\nimport std.typecons;\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] temp = new long[my_list.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint temp_index = 0;\n\tint temp_index_end = 0;\n\tint temp_index_start = 0;\n\tint temp_index_end_end = 0;\n\tint temp_index_start_end = 0;\n\tint temp_index_start_end_end = 0;\n\tint temp_index_start_end_end_end = 0;\n\tint temp_index_start_end_end_end_end = 0;\n\tint temp_index_start_end_end_end_end_end = 0;\n\tint temp_index_start_end_end_end_end_end_end = 0;\n\tint temp_index_start_end_end_end_end_end_end_end_end_end = 0;\n\tint temp_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = shell_sort;",
            "assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);",
            "assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);",
            "assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long) and_tuples(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tTuple!(long, long, long, long) result = test_tup1;\n\tTuple!(long, long, long, long) result2 = test_tup2;\n\t\n\tresult = result.and_tuples(test_tup1);\n\tresult2 = result2.and_tuples(test_tup2);\n\t\n\treturn result;\n}\n\nTuple!(long, long, long, long) and_tuples(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tTuple!(long, long, long, long) result = test_tup1;\n\tTuple!(long, long, long, long) result2 = test_tup2;\n\t\n\tresult = result.and_tuples(test_tup1);\n\tresult2 = result2.and_tuples(test_tup2);\n\t\n\treturn result;\n}\n\nTuple!(long, long, long, long) and_tuples(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tTuple!(long, long, long, long) result = test_tup1;\n\tTuple!(long, long, long, long) result2 = test_tup2;\n\t\n\tresult = result.and_tuples(test_tup1);\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = and_tuples;",
            "assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(0L, 0L, 2L, 1L));",
            "assert(candidate(tuple(1L, 2L, 3L, 4L), tuple(5L, 6L, 7L, 8L)) == tuple(1L, 2L, 3L, 0L));",
            "assert(candidate(tuple(8L, 9L, 11L, 12L), tuple(7L, 13L, 14L, 17L)) == tuple(0L, 9L, 10L, 0L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "import std.math;\nimport std.typecons;\nlong parabola_directrix(long a, long b, long c) \n{\n\tlong x, y, z;\n\tlong x1, y1, z1;\n\tlong x2, y2, z2;\n\tlong x3, y3, z3;\n\tlong x4, y4, z4;\n\tlong x5, y5, z5;\n\tlong x6, y6, z6;\n\tlong x7, y7, z7;\n\tlong x8, y8, z8;\n\tlong x9, y9, z9;\n\tlong x10, y10, z10;\n\tlong x11, y11, z11;\n\tlong x12, y12, z12;\n\tlong x13, y13, z13;\n\tlong x14, y14, z14;\n\tlong x15, y15, z15;\n\tlong x16, y16, z16;\n\tlong x17, y17, z17;\n\tlong x18, y18, z18;\n\tlong x19, y19, z19;\n\tlong x20, y20, z20;\n\tlong x21, y21, z21;\n\tlong x22, y22, z22;\n\tlong x23, y23, z23;\n\tlong x24, y24, z24;\n\tlong x25, y25, z25;\n\tlong x26, y26, z26;\n\tlong x27, y27, z27;\n\tlong x28, y28, z28;\n\tlong x29, y29, z29;\n\tlong x30, y30, z30;\n\tlong x31, y31, z31;\n\tlong x32, y32, z32;\n\tlong x33, y33, z33;\n\tlong x34, y34, z34;\n\tlong x35, y35, z35;\n\tlong x36, y36, z36;\n\tlong x37, y37, z37;\n\tlong x\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = parabola_directrix;",
            "assert(candidate(5L, 3L, 2L) == -198L);",
            "assert(candidate(9L, 8L, 4L) == -2336L);",
            "assert(candidate(2L, 4L, 6L) == -130L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "import std.math;\nimport std.typecons;\nfloat median_trapezium(long base1, long base2, long height) \n{\n\tlong i, j, k, l, m, n, p, q, r, s, t, u, v;\n\tlong sum, sum1, sum2;\n\tlong sum3, sum4;\n\tlong sum5, sum6;\n\tlong sum7, sum8;\n\tlong sum9, sum10;\n\tlong sum11, sum12;\n\tlong sum13, sum14;\n\tlong sum15, sum16;\n\tlong sum17, sum18;\n\tlong sum19, sum20;\n\tlong sum21, sum22;\n\tlong sum23, sum24;\n\tlong sum25, sum26;\n\tlong sum27, sum28;\n\tlong sum29, sum30;\n\tlong sum31, sum32;\n\tlong sum33, sum34;\n\tlong sum35, sum36;\n\tlong sum37, sum38;\n\tlong sum39, sum40;\n\tlong sum41, sum42;\n\tlong sum43, sum44;\n\tlong sum45, sum46;\n\tlong sum47, sum48;\n\tlong sum49, sum50;\n\tlong sum51, sum52;\n\tlong sum53, sum54;\n\tlong sum55, sum56;\n\tlong sum57, sum58;\n\tlong sum59, sum60;\n\tlong sum61, sum62;\n\tlong sum63, sum64;\n\tlong sum65, sum66;\n\tlong sum67, sum68;\n\tlong sum69, sum70;\n\tlong sum71, sum72;\n\tlong sum73, sum74;\n\tlong sum75, sum76;\n\tlong sum77, sum78;\n\tlong sum79, sum80;\n\tlong sum81, sum82;\n\tlong sum83, sum84;\n\tlong sum85, sum86;\n\tlong sum87, sum88;\n\tlong sum89, sum90;\n\tlong sum91, sum92;\n\tlong sum93, sum94;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = median_trapezium;",
            "assert(candidate(15L, 25L, 35L) == 20L);",
            "assert(candidate(10L, 20L, 30L) == 15L);",
            "assert(candidate(6L, 9L, 4L) == 7.5);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "import std.math;\nimport std.typecons;\nbool check_greater(long[] arr, long number) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(number < 0)\n\t\treturn false;\n\t\n\tif(number == 0)\n\t\treturn true;\n\t\n\tlong temp = number;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > temp)\n\t\t{\n\t\t\ttemp = arr[i];\n\t\t}\n\t}\n\t\n\treturn temp > number;\n}\n\nbool check_less(long[] arr, long number) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(number < 0)\n\t\treturn false;\n\t\n\tif(number == 0)\n\t\treturn true;\n\t\n\tlong temp = number;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(arr[i] < temp)\n\t\t{\n\t\t\ttemp = arr[i];\n\t\t}\n\t}\n\t\n\treturn temp < number;\n}\n\nbool check_equal(long[] arr, long number) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(number < 0)\n\t\treturn false;\n\t\n\tif(number == 0)\n\t\treturn true;\n\t\n\tlong temp = number;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(arr[i]!= temp)\n\t\t{\n\t\t\ttemp = arr[i];\n\t\t}\n\t}\n\t\n\treturn temp == number;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import std.math;\nimport std.typecons;\nbool text_match_one(string text) \n{\n\tstring::size_type i = 0;\n\tstring::size_type j = 0;\n\tstring::size_type k = 0;\n\tstring::size_type l = 0;\n\tstring::size_type m = 0;\n\tstring::size_type n = 0;\n\tstring::size_type o = 0;\n\tstring::size_type p = 0;\n\tstring::size_type q = 0;\n\tstring::size_type r = 0;\n\tstring::size_type s = 0;\n\tstring::size_type t = 0;\n\tstring::size_type u = 0;\n\tstring::size_type v = 0;\n\tstring::size_type w = 0;\n\tstring::size_type x = 0;\n\tstring::size_type y = 0;\n\tstring::size_type z = 0;\n\tstring::size_type a = 0;\n\tstring::size_type b = 0;\n\tstring::size_type c = 0;\n\tstring::size_type d = 0;\n\tstring::size_type e = 0;\n\tstring::size_type f = 0;\n\tstring::size_type g = 0;\n\tstring::size_type h = 0;\n\tstring::size_type i1 = 0;\n\tstring::size_type j1 = 0;\n\tstring::size_type k1 = 0;\n\tstring::size_type l1 = 0;\n\tstring::size_type m1 = 0;\n\tstring::size_type n1 = 0;\n\tstring::size_type o1 = 0;\n\tstring::size_type p1 = 0;\n\tstring::size_type q1 = 0;\n\tstring::size_type r1 = 0;\n\tstring::size_type s1 = 0;\n\tstring::size_type t1 = 0;\n\tstring::size_type u1 = 0;\n\tstring::size_type v1 = 0;\n\tstring::size\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_match_one;",
            "assert(candidate(\"ac\") == false);",
            "assert(candidate(\"dc\") == false);",
            "assert(candidate(\"abba\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a dthon function to find the last digit of a given number.",
        "code": "import std.math;\nimport std.typecons;\nlong last_Digit(long n) \n{\n\tlong ret = 0;\n\tif (n < 0)\n\t\treturn 0;\n\tif (n == 0)\n\t\treturn 1;\n\tif (n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\tif (n == 3)\n\t\treturn 2;\n\tif (n == 4)\n\t\treturn 3;\n\tif (n == 5)\n\t\treturn 4;\n\tif (n == 6)\n\t\treturn 5;\n\tif (n == 7)\n\t\treturn 6;\n\tif (n == 8)\n\t\treturn 7;\n\tif (n == 9)\n\t\treturn 8;\n\tif (n == 10)\n\t\treturn 9;\n\tif (n == 11)\n\t\treturn 10;\n\tif (n == 12)\n\t\treturn 11;\n\tif (n == 13)\n\t\treturn 12;\n\tif (n == 14)\n\t\treturn 13;\n\tif (n == 15)\n\t\treturn 14;\n\tif (n == 16)\n\t\treturn 15;\n\tif (n == 17)\n\t\treturn 16;\n\tif (n == 18)\n\t\treturn 17;\n\tif (n == 19)\n\t\treturn 18;\n\tif (n == 20)\n\t\treturn 19;\n\tif (n == 21)\n\t\treturn 20;\n\tif (n == 22)\n\t\treturn 21;\n\tif (n == 23)\n\t\treturn 22;\n\tif (n == 24)\n\t\treturn 23;\n\tif (n == 25)\n\t\treturn 24;\n\tif (n == 26)\n\t\treturn 25;\n\tif (n == 27)\n\t\treturn 26;\n\tif (n == 28)\n\t\treturn 27;\n\tif (n == 29)\n\t\treturn 28;\n\tif (n == 30)\n\t\treturn 29;\n\tif (n == 31)\n\t\treturn 30;\n\tif (n == 32)\n\t\treturn 31;\n\tif (n == 33)\n\t\treturn 32;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = last_Digit;",
            "assert(candidate(123L) == 3L);",
            "assert(candidate(25L) == 5L);",
            "assert(candidate(30L) == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a dthon function to return the negative numbers in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t\tlist2[i] = -list1[i];\n\treturn list2;\n}\n\nlong[] neg_nos(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t\tlist3[i] = -list1[i];\n\treturn list3;\n}\n\nlong[] neg_nos(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] list4 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t\tlist4[i] = -list1[i];\n\treturn list4;\n}\n\nlong[] neg_nos(long[] list1, long[] list2, long[] list3, long[] list4) \n{\n\tlong[] list5 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t\tlist5[i] = -list1[i];\n\treturn list5;\n}\n\nlong[] neg_nos(long[] list1, long[] list2, long[] list3, long[] list4, long[] list5) \n{\n\tlong[] list6 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t\tlist\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = neg_nos;",
            "assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);",
            "assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);",
            "assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_odd(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i33 = 0;\n\tint i34 = 0;\n\tint i35 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_odd;",
            "assert(candidate(\"python\") == \"yhn\");",
            "assert(candidate(\"program\") == \"rga\");",
            "assert(candidate(\"language\") == \"agae\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "import std.math;\nimport std.typecons;\nlong count_bidirectional(Tuple!(long, long)[] test_list) \n{\n\tlong count = 0;\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (j = i + 1; j < test_list.length; j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_tuples(Tuple!(long, long)[] test_list) \n{\n\tlong count = 0;\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (j = i + 1; j < test_list.length; j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_tuples_with_count(Tuple!(long, long)[] test_list) \n{\n\tlong count = 0;\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (j = i + 1; j < test_list.length; j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_tuples_with_count_with_count(Tuple!(long, long)[] test_list) \n{\n\tlong count = 0;\n\tlong i, j;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (j = i + 1; j < test_list.\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_bidirectional;",
            "assert(candidate([tuple(5L, 6L), tuple(1L, 2L), tuple(6L, 5L), tuple(9L, 1L), tuple(6L, 5L), tuple(2L, 1L)]) == 3L);",
            "assert(candidate([tuple(5L, 6L), tuple(1L, 3L), tuple(6L, 5L), tuple(9L, 1L), tuple(6L, 5L), tuple(2L, 1L)]) == 2L);",
            "assert(candidate([tuple(5L, 6L), tuple(1L, 2L), tuple(6L, 5L), tuple(9L, 2L), tuple(6L, 5L), tuple(2L, 1L)]) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join an array of multiple integers into a single integer.",
        "code": "import std.math;\nimport std.typecons;\nlong multiple_to_single(long[] L) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < L.length; i++) {\n\t\tresult += L[i];\n\t}\n\treturn result;\n}\n\nlong multiple_to_single(int[] L) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < L.length; i++) {\n\t\tresult += L[i];\n\t}\n\treturn result;\n}\n\nlong multiple_to_single(short[] L) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < L.length; i++) {\n\t\tresult += L[i];\n\t}\n\treturn result;\n}\n\nlong multiple_to_single(byte[] L) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < L.length; i++) {\n\t\tresult += L[i];\n\t}\n\treturn result;\n}\n\nlong multiple_to_single(char[] L) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < L.length; i++) {\n\t\tresult += L[i];\n\t}\n\treturn result;\n}\n\nlong multiple_to_single(double[] L) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < L.length; i++) {\n\t\tresult += L[i];\n\t}\n\treturn result;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, string) find_adverb_position(string text) \n{\n\tlong start = 0, end = 0, i = 0, j = 0;\n\tlong first = 0, last = 0;\n\tlong first_pos = 0, last_pos = 0;\n\tlong first_adverb = 0, last_adverb = 0;\n\tlong first_pos_adverb = 0, last_pos_adverb = 0;\n\tlong first_pos_adverb_pos = 0, last_pos_adverb_pos = 0;\n\tlong first_pos_adverb_pos_adverb = 0, last_pos_adverb_pos_adverb = 0;\n\tlong first_pos_adverb_pos_adverb_pos = 0, last_pos_adverb_pos_adverb_pos = 0;\n\tlong first_pos_adverb_pos_adverb_pos_adverb = 0, last_pos_adverb_pos_adverb_pos_adverb = 0;\n\tlong first_pos_adverb_pos_adverb_pos_adverb_pos = 0, last_pos_adverb_pos_adverb_pos_adverb_pos_adverb = 0;\n\tlong first_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos = 0, last_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb = 0;\n\tlong first_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos = 0, last_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos = 0;\n\tlong first_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_pos_adverb_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_adverb_position;",
            "assert(candidate(\"clearly!! we can see the sky\") == tuple(0L, 7L, \"clearly\"));",
            "assert(candidate(\"seriously!! there are many roses\") == tuple(0L, 9L, \"seriously\"));",
            "assert(candidate(\"unfortunately!! sita is going to home\") == tuple(0L, 13L, \"unfortunately\"));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "import std.math;\nimport std.typecons;\nlong surfacearea_cube(long l) \n{\n\tlong i, j, k, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l25, l26, l27, l28, l29, l30, l31, l32, l33, l34, l35, l36, l37, l38, l39, l40, l41, l42, l43, l44, l45, l46, l47, l48, l49, l50, l51, l52, l53, l54, l55, l56, l57, l58, l59, l60, l61, l62, l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = surfacearea_cube;",
            "assert(candidate(5L) == 150L);",
            "assert(candidate(3L) == 54L);",
            "assert(candidate(10L) == 600L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "import std.math;\nimport std.typecons;\nfloat positive_count(long[] nums) \n{\n\tfloat result = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tresult += nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat positive_count(long[] nums) \n{\n\tfloat result = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tresult += nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat positive_count(long[] nums) \n{\n\tfloat result = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tresult += nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat positive_count(long[] nums) \n{\n\tfloat result = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > 0) \n\t\t{\n\t\t\tresult += nums[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat positive_count(long[] nums) \n{\n\tfloat result = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i]\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = positive_count;",
            "assert(candidate([0L, 1L, 2L, -1L, -5L, 6L, 0L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.54);",
            "assert(candidate([2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.69);",
            "assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == 0.56);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a dthon function to find the largest negative number from the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong largest_neg(long[] list1) \n{\n\tlong max = 0;\n\tlong max_pos = 0;\n\tlong max_neg = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = largest_neg;",
            "assert(candidate([1L, 2L, 3L, -4L, -6L]) == -6L);",
            "assert(candidate([1L, 2L, 3L, -8L, -9L]) == -9L);",
            "assert(candidate([1L, 2L, 3L, 4L, -1L]) == -1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each array by k in the given arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] trim_tuple(long[][] test_list, long K) \n{\n\tlong[][] result = new long[test_list.length][K];\n\tlong i = 0;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (long j = 0; j < K; j++) {\n\t\t\tresult[i][j] = test_list[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[][] trim_tuple_array(long[][] test_list, long K) \n{\n\tlong[][] result = new long[test_list.length][K];\n\tlong i = 0;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (long j = 0; j < K; j++) {\n\t\t\tresult[i][j] = test_list[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[][] trim_tuple_array_array(long[][] test_list, long K) \n{\n\tlong[][] result = new long[test_list.length][K];\n\tlong i = 0;\n\tfor (i = 0; i < test_list.length; i++) {\n\t\tfor (long j = 0; j < K; j++) {\n\t\t\tresult[i][j] = test_list[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[][] trim_tuple_array_array_array(long[][] test_list, long K) \n{\n\tlong[][] result = new long[test_list.length][K];\n\tlong i = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = trim_tuple;",
            "assert(candidate([[5L, 3L, 2L, 1L, 4L], [3L, 4L, 9L, 2L, 1L], [9L, 1L, 2L, 3L, 5L], [4L, 8L, 2L, 1L, 7L]], 2L) == [[2L], [9L], [2L], [2L]]);",
            "assert(candidate([[5L, 3L, 2L, 1L, 4L], [3L, 4L, 9L, 2L, 1L], [9L, 1L, 2L, 3L, 5L], [4L, 8L, 2L, 1L, 7L]], 1L) == [[3L, 2L, 1L], [4L, 9L, 2L], [1L, 2L, 3L], [8L, 2L, 1L]]);",
            "assert(candidate([[7L, 8L, 4L, 9L], [11L, 8L, 12L, 4L], [4L, 1L, 7L, 8L], [3L, 6L, 9L, 7L]], 1L) == [[8L, 4L], [8L, 12L], [1L, 7L], [6L, 9L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of array elements in the given two arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] index_multiplication(long[][] test_tup1, long[][] test_tup2) \n{\n\tlong[][] result = new long[test_tup1.length][test_tup2.length];\n\tlong i, j;\n\tfor (i = 0; i < test_tup1.length; i++) {\n\t\tfor (j = 0; j < test_tup2.length; j++) {\n\t\t\tresult[i][j] = test_tup1[i] * test_tup2[j];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[][] index_division(long[][] test_tup1, long[][] test_tup2) \n{\n\tlong[][] result = new long[test_tup1.length][test_tup2.length];\n\tlong i, j;\n\tfor (i = 0; i < test_tup1.length; i++) {\n\t\tfor (j = 0; j < test_tup2.length; j++) {\n\t\t\tresult[i][j] = test_tup1[i] / test_tup2[j];\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[][] index_multiplication_with_index(long[][] test_tup1, long[][] test_tup2) \n{\n\tlong[][] result = new long[test_tup1.length][test_tup2.length];\n\tlong i, j;\n\tfor (i = 0; i < test_tup1.length; i++) {\n\t\tfor (j = 0; j < test_tup2.length; j++) {\n\t\t\tresult[i][j] = test_tup1[\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = index_multiplication;",
            "assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[6L, 21L], [12L, 45L], [2L, 9L], [7L, 30L]]);",
            "assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[14L, 32L], [20L, 60L], [6L, 20L], [16L, 44L]]);",
            "assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[24L, 45L], [30L, 77L], [12L, 33L], [27L, 60L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) {\n\t\tresult[i] = nums[i];\n\t}\n\treturn result;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = cube_nums;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);",
            "assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);",
            "assert(candidate([12L, 15L]) == [1728L, 3375L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong cal_sum(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cal_sum_perrin(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cal_sum_perrin_perrin(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cal_sum_perrin_perrin_perrin(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cal_sum_perrin_perrin_perrin(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nlong cal_sum_perrin_perrin_perrin(long n) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = cal_sum;",
            "assert(candidate(9L) == 49L);",
            "assert(candidate(10L) == 66L);",
            "assert(candidate(11L) == 88L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given array of string values.",
        "code": "import std.math;\nimport std.typecons;\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] ret = new string[l];\n\tfor (int i = 0; i < l; i++)\n\t{\n\t\tret[i] = str[i];\n\t}\n\treturn ret;\n}\n\nstring[] extract_string(string[] str, int i) \n{\n\tstring[] ret = new string[i];\n\tfor (int j = 0; j < i; j++)\n\t{\n\t\tret[j] = str[j];\n\t}\n\treturn ret;\n}\n\nstring[] extract_string(string[] str, long i) \n{\n\tstring[] ret = new string[i];\n\tfor (int j = 0; j < i; j++)\n\t{\n\t\tret[j] = str[j];\n\t}\n\treturn ret;\n}\n\nstring[] extract_string(string[] str, int i, long j) \n{\n\tstring[] ret = new string[i];\n\tfor (int j = 0; j < i; j++)\n\t{\n\t\tret[j] = str[j];\n\t}\n\treturn ret;\n}\n\nstring[] extract_string(string[] str, long i, int j) \n{\n\tstring[] ret = new string[i];\n\tfor (int j = 0; j < i; j++)\n\t{\n\t\tret[j] = str[j];\n\t}\n\treturn ret;\n}\n\nstring[] extract\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = extract_string;",
            "assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);",
            "assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);",
            "assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "import std.math;\nstring remove_whitespaces(string text1) \n{\n\tstring text2 = \"\";\n\tfor (int i = 0; i < text1.length(); i++)\n\t{\n\t\tif (text1[i]!='')\n\t\t{\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\n\nstring remove_whitespaces(string text1, string text2) \n{\n\tstring text3 = \"\";\n\tfor (int i = 0; i < text1.length(); i++)\n\t{\n\t\tif (text1[i]!='')\n\t\t{\n\t\t\ttext3 += text1[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < text2.length(); i++)\n\t{\n\t\tif (text2[i]!='')\n\t\t{\n\t\t\ttext3 += text2[i];\n\t\t}\n\t}\n\treturn text3;\n}\n\nstring remove_whitespaces(string text1, string text2, string text3) \n{\n\tstring text4 = \"\";\n\tfor (int i = 0; i < text1.length(); i++)\n\t{\n\t\tif (text1[i]!='')\n\t\t{\n\t\t\ttext4 += text1[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < text2.length(); i++)\n\t{\n\t\tif (text2[i]!='')\n\t\t{\n\t\t\ttext4 += text2[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < text3.length(); i++)\n\t{\n\t\tif (text3[i]!='')\n\t\t{\n\t\t\ttext4 += text3[i];\n\t\t}\n\t}\n\treturn text4;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "import std.math;\nimport std.typecons;\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tlong loss_amount = 0;\n\t\n\tif (sale_amount > 0)\n\t{\n\t\tif (sale_amount > actual_cost)\n\t\t{\n\t\t\tloss_amount = actual_cost - sale_amount;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tloss_amount = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tloss_amount = 0;\n\t}\n\t\n\treturn loss_amount;\n}\n\nlong loss_amount(long actual_cost, long sale_amount, long sale_price) \n{\n\tlong loss_amount = 0;\n\t\n\tif (sale_amount > 0)\n\t{\n\t\tif (sale_amount > actual_cost)\n\t\t{\n\t\t\tloss_amount = actual_cost - sale_amount;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tloss_amount = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tloss_amount = 0;\n\t}\n\t\n\treturn loss_amount;\n}\n\nlong loss_amount(long actual_cost, long sale_amount, long sale_price, long sale_price_change) \n{\n\tlong loss_amount = 0;\n\t\n\tif (sale_amount > 0)\n\t{\n\t\tif (sale_amount > actual_cost)\n\t\t{\n\t\t\tloss_amount = actual_cost - sale_amount;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tloss_amount = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tloss_amount = 0;\n\t}\n\t\n\treturn loss_amount;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a dthon function to find the sum of even factors of a number.",
        "code": "import std.math;\nimport std.typecons;\nlong sumofFactors(long n) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= n) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn sum;\n}\n\nlong sumofFactors(long n) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= n) \n\t{\n\t\tif (i % 2 == 1) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn sum;\n}\n\nlong sumofFactors(long n) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= n) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn sum;\n}\n\nlong sumofFactors(long n) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= n) \n\t{\n\t\tif (i % 2 == 1) \n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\ti += 2;\n\t}\n\treturn sum;\n}\n\nlong sumofFactors(long n) \n{\n\tlong sum = 0;\n\tlong i = 1;\n\twhile (i <= n) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tsum += i;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sumofFactors;",
            "assert(candidate(18L) == 26L);",
            "assert(candidate(30L) == 48L);",
            "assert(candidate(6L) == 8L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "import std.math;\nimport std.typecons;\nbool text_match_wordz(string text) \n{\n\tstring word;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint o;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n\tint z;\n\tint a;\n\tint b;\n\tint c;\n\tint d;\n\tint e;\n\tint f;\n\tint g;\n\tint h;\n\tint i1;\n\tint i2;\n\tint i3;\n\tint i4;\n\tint i5;\n\tint i6;\n\tint i7;\n\tint i8;\n\tint i9;\n\tint i10;\n\tint i11;\n\tint i12;\n\tint i13;\n\tint i14;\n\tint i15;\n\tint i16;\n\tint i17;\n\tint i18;\n\tint i19;\n\tint i20;\n\tint i21;\n\tint i22;\n\tint i23;\n\tint i24;\n\tint i25;\n\tint i26;\n\tint i27;\n\tint i28;\n\tint i29;\n\tint i30;\n\tint i31;\n\tint i32;\n\tint i33;\n\tint i34;\n\tint i35;\n\tint i36;\n\tint i37;\n\tint i38;\n\tint i39;\n\tint i40;\n\tint i41;\n\tint i42;\n\tint i43;\n\tint i44;\n\tint i45;\n\tint i46;\n\tint i47;\n\tint i48;\n\tint i49;\n\tint i50;\n\tint i51;\n\tint i52;\n\tint i53;\n\tint i54;\n\tint i55;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_match_wordz;",
            "assert(candidate(\"pythonz.\") == true);",
            "assert(candidate(\"xyz.\") == true);",
            "assert(candidate(\"  lang  .\") == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "import std.math;\nimport std.typecons;\nbool check_monthnumb_number(long monthnum2) \n{\n\tlong monthnum = monthnum2;\n\tlong monthnum1 = monthnum;\n\tlong monthnum2 = monthnum;\n\tlong monthnum3 = monthnum;\n\tlong monthnum4 = monthnum;\n\tlong monthnum5 = monthnum;\n\tlong monthnum6 = monthnum;\n\tlong monthnum7 = monthnum;\n\tlong monthnum8 = monthnum;\n\tlong monthnum9 = monthnum;\n\tlong monthnum10 = monthnum;\n\tlong monthnum11 = monthnum;\n\tlong monthnum12 = monthnum;\n\tlong monthnum13 = monthnum;\n\tlong monthnum14 = monthnum;\n\tlong monthnum15 = monthnum;\n\tlong monthnum16 = monthnum;\n\tlong monthnum17 = monthnum;\n\tlong monthnum18 = monthnum;\n\tlong monthnum19 = monthnum;\n\tlong monthnum20 = monthnum;\n\tlong monthnum21 = monthnum;\n\tlong monthnum22 = monthnum;\n\tlong monthnum23 = monthnum;\n\tlong monthnum24 = monthnum;\n\tlong monthnum25 = monthnum;\n\tlong monthnum26 = monthnum;\n\tlong monthnum27 = monthnum;\n\tlong monthnum28 = monthnum;\n\tlong monthnum29 = monthnum;\n\tlong monthnum30 = monthnum;\n\tlong monthnum31 = monthnum;\n\tlong monthnum32 = monthnum;\n\tlong monthnum33 = monthnum;\n\tlong monthnum34 = monthnum;\n\tlong monthnum35 = monthnum;\n\tlong monthnum36 = monthnum;\n\tlong monthnum37 = monthnum;\n\tlong monthnum38 = monthnum;\n\tlong monthnum39 = monthnum;\n\tlong monthnum40 = monthnum;\n\tlong monthnum41 = monthnum;\n\tlong monthnum42 = monthnum;\n\tlong monthnum43 = monthnum;\n\tlong monthnum44 = monthnum;\n\tlong monthnum45 = month\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_monthnumb_number;",
            "assert(candidate(5L) == true);",
            "assert(candidate(2L) == false);",
            "assert(candidate(6L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given array of string values.",
        "code": "import std.math;\nimport std.typecons;\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring temp;\n\tint i;\n\tfor (i = 0; i < stringlist.length; i++) {\n\t\ttemp = stringlist[i];\n\t\tstringlist[i] = stringlist[stringlist.length - 1];\n\t\tstringlist[stringlist.length - 1] = temp;\n\t}\n\treturn stringlist;\n}\n\nstring[] reverse_string_list_reverse(string[] stringlist) \n{\n\tstring temp;\n\tint i;\n\tfor (i = 0; i < stringlist.length; i++) {\n\t\ttemp = stringlist[i];\n\t\tstringlist[i] = stringlist[stringlist.length - 1];\n\t\tstringlist[stringlist.length - 1] = temp;\n\t}\n\treturn stringlist;\n}\n\nstring[] reverse_string_list_reverse_reverse(string[] stringlist) \n{\n\tstring temp;\n\tint i;\n\tfor (i = 0; i < stringlist.length; i++) {\n\t\ttemp = stringlist[i];\n\t\tstringlist[i] = stringlist[stringlist.length - 1];\n\t\tstringlist[stringlist.length - 1] = temp;\n\t}\n\treturn stringlist;\n}\n\nstring[] reverse_string_list_reverse_reverse_reverse(string[] stringlist) \n{\n\tstring temp;\n\tint i;\n\tfor (i = 0; i < stringlist.length; i++) {\n\t\ttemp = stringlist[i];\n\t\tstringlist[i] = stringlist[stringlist.length - 1];\n\t\tstringlist[stringlist.length - 1] = temp;\n\t}\n\treturn stringlist;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = reverse_string_list;",
            "assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);",
            "assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);",
            "assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "import std.math;\nimport std.typecons;\nlong rectangle_area(long l, long b) \n{\n\tlong x, y;\n\tlong area = 0;\n\t\n\tfor (y = l; y <= b; y++)\n\t{\n\t\tfor (x = l; x <= b; x++)\n\t\t{\n\t\t\tif (std::abs(std::abs(x - l) + std::abs(y - b)) > std::abs(std::abs(x - b)))\n\t\t\t{\n\t\t\t\tarea += std::abs(std::abs(x - l) + std::abs(y - b));\n\t\t\t}\n\t\t}\n\t}\n\treturn area;\n}\n\nlong rectangle_area_2(long l, long b) \n{\n\tlong x, y;\n\tlong area = 0;\n\t\n\tfor (y = l; y <= b; y++)\n\t{\n\t\tfor (x = l; x <= b; x++)\n\t\t{\n\t\t\tif (std::abs(std::abs(x - l) + std::abs(y - b)) > std::abs(std::abs(x - b)))\n\t\t\t{\n\t\t\t\tarea += std::abs(std::abs(x - l) + std::abs(y - b));\n\t\t\t}\n\t\t}\n\t}\n\treturn area;\n}\n\nlong rectangle_area_3(long l, long b) \n{\n\tlong x, y;\n\tlong area = 0;\n\t\n\tfor (y = l; y <= b; y++)\n\t{\n\t\tfor (x = l; x <= b; x++)\n\t\t{\n\t\t\tif (std::abs(std::abs(x - l) + std::abs(y - b)) > std::abs(std::abs(x - b)))\n\t\t\t{\n\t\t\t\tarea += std::abs(std::abs(x - l) + std::abs(y - b));\n\t\t\t}\n\t\t}\n\t}\n\treturn\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = rectangle_area;",
            "assert(candidate(10L, 20L) == 200L);",
            "assert(candidate(10L, 5L) == 50L);",
            "assert(candidate(4L, 2L) == 8L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_uppercase(string str1) \n{\n\tstring str2 = \"\";\n\tstring str3 = \"\";\n\tstring str4 = \"\";\n\tstring str5 = \"\";\n\tstring str6 = \"\";\n\tstring str7 = \"\";\n\tstring str8 = \"\";\n\tstring str9 = \"\";\n\tstring str10 = \"\";\n\tstring str11 = \"\";\n\tstring str12 = \"\";\n\tstring str13 = \"\";\n\tstring str14 = \"\";\n\tstring str15 = \"\";\n\tstring str16 = \"\";\n\tstring str17 = \"\";\n\tstring str18 = \"\";\n\tstring str19 = \"\";\n\tstring str20 = \"\";\n\tstring str21 = \"\";\n\tstring str22 = \"\";\n\tstring str23 = \"\";\n\tstring str24 = \"\";\n\tstring str25 = \"\";\n\tstring str26 = \"\";\n\tstring str27 = \"\";\n\tstring str28 = \"\";\n\tstring str29 = \"\";\n\tstring str30 = \"\";\n\tstring str31 = \"\";\n\tstring str32 = \"\";\n\tstring str33 = \"\";\n\tstring str34 = \"\";\n\tstring str35 = \"\";\n\tstring str36 = \"\";\n\tstring str37 = \"\";\n\tstring str38 = \"\";\n\tstring str39 = \"\";\n\tstring str40 = \"\";\n\tstring str41 = \"\";\n\tstring str42 = \"\";\n\tstring str43 = \"\";\n\tstring str44 = \"\";\n\tstring str45 = \"\";\n\tstring str46 = \"\";\n\tstring str47 = \"\";\n\tstring str48 = \"\";\n\tstring str49 = \"\";\n\tstring str50 = \"\";\n\tstring str51 = \"\";\n\tstring str52 = \"\";\n\tstring str53 = \"\";\n\tstring str54 = \"\";\n\tstring str55 = \"\";\n\tstring str56 = \"\";\n\tstring str57 = \"\";\n\tstring str58 = \"\";\n\tstring str59 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_uppercase;",
            "assert(candidate(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\");",
            "assert(candidate(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\");",
            "assert(candidate(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a dthon function to get the first element of each subarray.",
        "code": "import std.math;\nimport std.typecons;\nlong[] Extract(long[][] lst) \n{\n\tlong[] ret = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tret[i] = lst[i][0];\n\t}\n\treturn ret;\n}\n\nlong[] Extract(long[][] lst, int n) \n{\n\tlong[] ret = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tret[i] = lst[i][0];\n\t}\n\treturn ret;\n}\n\nlong[] Extract(long[][] lst, int n, int m) \n{\n\tlong[] ret = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tret[i] = lst[i][0];\n\t}\n\treturn ret;\n}\n\nlong[] Extract(long[][] lst, int n, int m, int n2) \n{\n\tlong[] ret = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tret[i] = lst[i][0];\n\t}\n\treturn ret;\n}\n\nlong[] Extract(long[][] lst, int n, int m, int n2, int n3) \n{\n\tlong[] ret = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tret[i] =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = Extract;",
            "assert(candidate([[1L, 2L], [3L, 4L, 5L], [6L, 7L, 8L, 9L]]) == [1L, 3L, 6L]);",
            "assert(candidate([[1L, 2L, 3L], [4L, 5L]]) == [1L, 4L]);",
            "assert(candidate([[9L, 8L, 1L], [1L, 2L]]) == [9L, 1L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a dthon function to count the upper case characters in a given string.",
        "code": "import std.math;\nimport std.typecons;\nlong upper_ctr(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tret += std.toUpper(str[i]);\n\t}\n\treturn ret;\n}\n\nlong lower_ctr(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tret += std.toLower(str[i]);\n\t}\n\treturn ret;\n}\n\nlong upper_ctr_str(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tret += std.toUpper(str[i]);\n\t}\n\treturn ret;\n}\n\nlong lower_ctr_str(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tret += std.toLower(str[i]);\n\t}\n\treturn ret;\n}\n\nlong upper_ctr_str(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tret += std.toUpper(str[i]);\n\t}\n\treturn ret;\n}\n\nlong lower_ctr_str(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length();\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = upper_ctr;",
            "assert(candidate(\"PYthon\") == 1L);",
            "assert(candidate(\"BigData\") == 1L);",
            "assert(candidate(\"program\") == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_subarray_product(long[] arr) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong max_product_product = 0;\n\tlong max_product_product_product = 0;\n\tlong max_product_product_product_product = 0;\n\tlong max_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong max_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_subarray_product;",
            "assert(candidate([1L, -2L, -3L, 0L, 7L, -8L, -2L]) == 112L);",
            "assert(candidate([6L, -3L, -10L, 0L, 2L]) == 180L);",
            "assert(candidate([-2L, -40L, 0L, -2L, -3L]) == 80L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in an associative array.",
        "code": "import std.math;\nimport std.typecons;\nbool check_value(Nullable!(long[string]) dict, long n) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i]!= n)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool check_value(Nullable!(long[string]) dict, long n, long k) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i]!= k)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool check_value(Nullable!(long[string]) dict, long n, long k, long l) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i]!= k)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < l; i++)\n\t{\n\t\tif (dict[i]!= n)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool check_value(Nullable!(long[string]) dict, long n, long k, long l, long m) \n{\n\tlong i;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (dict[i]!= k)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < m; i++)\n\t{\n\t\tif (dict[i]!= k)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_value;",
            "assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 10L) == false);",
            "assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 12L) == true);",
            "assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 5L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong temp_product = 0;\n\tlong temp_product_product = 0;\n\tlong temp_product_product_product = 0;\n\tlong temp_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product = 0;\n\tlong temp_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_product_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_product;",
            "assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);",
            "assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);",
            "assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long) add_pairwise(Tuple!(long, long, long, long, long) test_tup) \n{\n\tlong i, j, k, l;\n\tlong n = test_tup.size();\n\tlong n_neighbors = test_tup.size() - 1;\n\tlong n_neighbors_neighbors = n_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors = n_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_neighbors_neighbors_neighbors = n_neighbors_neighbors_neighbors - 1;\n\tlong n_neighbors_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = add_pairwise;",
            "assert(candidate(tuple(1L, 5L, 7L, 8L, 10L)) == tuple(6L, 12L, 15L, 18L));",
            "assert(candidate(tuple(2L, 6L, 8L, 9L, 11L)) == tuple(8L, 14L, 17L, 20L));",
            "assert(candidate(tuple(3L, 7L, 9L, 10L, 12L)) == tuple(10L, 16L, 19L, 22L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a dthon function to find the product of the array multiplication modulo n.",
        "code": "import std.math;\nimport std.typecons;\nlong find_remainder(long[] arr, long n) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n_ = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_remainder;",
            "assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);",
            "assert(candidate([1L, 1L, 1L], 1L) == 0L);",
            "assert(candidate([1L, 2L, 1L], 2L) == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a dthon function to check whether the given array contains consecutive numbers or not.",
        "code": "import std.math;\nimport std.typecons;\nbool check_Consecutive(long[] l) \n{\n\tlong n = l.length;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_Consecutive;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);",
            "assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);",
            "assert(candidate([1L, 2L, 1L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "import std.math;\nimport std.typecons;\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring ret;\n\tint i;\n\tfor (i = 0; i < str1.length(); i++) {\n\t\tif (str1[i] == ch) {\n\t\t\tret = str1.substr(0, i) + newch;\n\t\t\tstr1 = str1.substr(i + 1);\n\t\t}\n\t}\n\treturn ret;\n}\n\nstring replace_char(string str1, string ch, string newch, string newch2) \n{\n\tstring ret;\n\tint i;\n\tfor (i = 0; i < str1.length(); i++) {\n\t\tif (str1[i] == ch) {\n\t\t\tret = str1.substr(0, i) + newch + newch2;\n\t\t\tstr1 = str1.substr(i + 1);\n\t\t}\n\t}\n\treturn ret;\n}\n\nstring replace_char(string str1, string ch, string newch, string newch2, string newch3) \n{\n\tstring ret;\n\tint i;\n\tfor (i = 0; i < str1.length(); i++) {\n\t\tif (str1[i] == ch) {\n\t\t\tret = str1.substr(0, i) + newch + newch2 + newch3;\n\t\t\tstr1 = str1.substr(i + 1);\n\t\t}\n\t}\n\treturn ret;\n}\n\nstring replace_char(string str1, string ch, string newch, string newch2, string newch3, string newch4) \n{\n\tstring ret;\n\tint i;\n\tfor (i = 0; i < str1.length(); i++) {\n\t\tif (str1[i] == ch) {\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = replace_char;",
            "assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");",
            "assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");",
            "assert(candidate(\"python\", \"l\", \"a\") == \"python\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort an associative array by value.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, long)[] sort_counter(Nullable!(long[string]) dict1) \n{\n\tTuple<string, long> tuple;\n\tlong[] array;\n\tlong[] array2;\n\tlong[] array3;\n\tlong[] array4;\n\tlong[] array5;\n\tlong[] array6;\n\tlong[] array7;\n\tlong[] array8;\n\tlong[] array9;\n\tlong[] array10;\n\tlong[] array11;\n\tlong[] array12;\n\tlong[] array13;\n\tlong[] array14;\n\tlong[] array15;\n\tlong[] array16;\n\tlong[] array17;\n\tlong[] array18;\n\tlong[] array19;\n\tlong[] array20;\n\tlong[] array21;\n\tlong[] array22;\n\tlong[] array23;\n\tlong[] array24;\n\tlong[] array25;\n\tlong[] array26;\n\tlong[] array27;\n\tlong[] array28;\n\tlong[] array29;\n\tlong[] array30;\n\tlong[] array31;\n\tlong[] array32;\n\tlong[] array33;\n\tlong[] array34;\n\tlong[] array35;\n\tlong[] array36;\n\tlong[] array37;\n\tlong[] array38;\n\tlong[] array39;\n\tlong[] array40;\n\tlong[] array41;\n\tlong[] array42;\n\tlong[] array43;\n\tlong[] array44;\n\tlong[] array45;\n\tlong[] array46;\n\tlong[] array47;\n\tlong[] array48;\n\tlong[] array49;\n\tlong[] array50;\n\tlong[] array51;\n\tlong[] array52;\n\tlong[] array53;\n\tlong[] array54;\n\tlong[] array55;\n\tlong[] array56;\n\tlong[] array57;\n\tlong[] array58;\n\tlong[] array59;\n\tlong[] array60;\n\tlong[] array61;\n\tlong[] array62;\n\tlong[] array63;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sort_counter;",
            "assert(candidate([\"Math\": 81L, \"Physics\": 83L, \"Chemistry\": 87L].nullable) == [tuple(\"Chemistry\", 87L), tuple(\"Physics\", 83L), tuple(\"Math\", 81L)]);",
            "assert(candidate([\"Math\": 400L, \"Physics\": 300L, \"Chemistry\": 250L].nullable) == [tuple(\"Math\", 400L), tuple(\"Physics\", 300L), tuple(\"Chemistry\", 250L)]);",
            "assert(candidate([\"Math\": 900L, \"Physics\": 1000L, \"Chemistry\": 1250L].nullable) == [tuple(\"Chemistry\", 1250L), tuple(\"Physics\", 1000L), tuple(\"Math\", 900L)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a dthon function to find the sum of the largest and smallest value in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong big_sum(long[] nums) \n{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong min = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = big_sum;",
            "assert(candidate([1L, 2L, 3L]) == 4L);",
            "assert(candidate([-1L, 2L, 3L, 4L]) == 3L);",
            "assert(candidate([2L, 3L, 6L]) == 8L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a dthon function to convert the given string to lower case.",
        "code": "import std.math;\nimport std.typecons;\nstring is_lower(string string) \n{\n\tstring lower = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 'a' || string[i] == 'A')\n\t\t{\n\t\t\tlower += string[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlower += string[i];\n\t\t}\n\t}\n\treturn lower;\n}\n\nstring is_upper(string string) \n{\n\tstring upper = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 'A' || string[i] == 'a')\n\t\t{\n\t\t\tupper += string[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupper += string[i];\n\t\t}\n\t}\n\treturn upper;\n}\n\nstring is_digits(string string) \n{\n\tstring digits = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == '0' || string[i] == '1')\n\t\t{\n\t\t\tdigits += string[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdigits += string[i];\n\t\t}\n\t}\n\treturn digits;\n}\n\nstring is_digits_lower(string string) \n{\n\tstring digits = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == '0' || string[i] == '1')\n\t\t{\n\t\t\tdigits += string[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdigits += string[i];\n\t\t}\n\t}\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_lower;",
            "assert(candidate(\"InValid\") == \"invalid\");",
            "assert(candidate(\"TruE\") == \"true\");",
            "assert(candidate(\"SenTenCE\") == \"sentence\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_lowercase(string str1) \n{\n\tstring str2 = \"\";\n\tstring str3 = \"\";\n\tstring str4 = \"\";\n\tstring str5 = \"\";\n\tstring str6 = \"\";\n\tstring str7 = \"\";\n\tstring str8 = \"\";\n\tstring str9 = \"\";\n\tstring str10 = \"\";\n\tstring str11 = \"\";\n\tstring str12 = \"\";\n\tstring str13 = \"\";\n\tstring str14 = \"\";\n\tstring str15 = \"\";\n\tstring str16 = \"\";\n\tstring str17 = \"\";\n\tstring str18 = \"\";\n\tstring str19 = \"\";\n\tstring str20 = \"\";\n\tstring str21 = \"\";\n\tstring str22 = \"\";\n\tstring str23 = \"\";\n\tstring str24 = \"\";\n\tstring str25 = \"\";\n\tstring str26 = \"\";\n\tstring str27 = \"\";\n\tstring str28 = \"\";\n\tstring str29 = \"\";\n\tstring str30 = \"\";\n\tstring str31 = \"\";\n\tstring str32 = \"\";\n\tstring str33 = \"\";\n\tstring str34 = \"\";\n\tstring str35 = \"\";\n\tstring str36 = \"\";\n\tstring str37 = \"\";\n\tstring str38 = \"\";\n\tstring str39 = \"\";\n\tstring str40 = \"\";\n\tstring str41 = \"\";\n\tstring str42 = \"\";\n\tstring str43 = \"\";\n\tstring str44 = \"\";\n\tstring str45 = \"\";\n\tstring str46 = \"\";\n\tstring str47 = \"\";\n\tstring str48 = \"\";\n\tstring str49 = \"\";\n\tstring str50 = \"\";\n\tstring str51 = \"\";\n\tstring str52 = \"\";\n\tstring str53 = \"\";\n\tstring str54 = \"\";\n\tstring str55 = \"\";\n\tstring str56 = \"\";\n\tstring str57 = \"\";\n\tstring str58 = \"\";\n\tstring str59 = \"\";\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_lowercase;",
            "assert(candidate(\"PYTHon\") == \"PYTH\");",
            "assert(candidate(\"FInD\") == \"FID\");",
            "assert(candidate(\"STRinG\") == \"STRG\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a dthon function to find the first digit of a given number.",
        "code": "import std.math;\nimport std.typecons;\nlong first_Digit(long n) \n{\n\tlong i;\n\tlong result;\n\t\n\ti = 0;\n\twhile (n > 0) \n\t{\n\t\ti++;\n\t\tn = n / 10;\n\t}\n\t\n\tresult = i;\n\t\n\treturn result;\n}\n\nlong first_Digit(long n) \n{\n\tlong i;\n\tlong result;\n\t\n\ti = 0;\n\twhile (n > 0) \n\t{\n\t\ti++;\n\t\tn = n / 10;\n\t}\n\t\n\tresult = i;\n\t\n\treturn result;\n}\n\nlong first_Digit(long n) \n{\n\tlong i;\n\tlong result;\n\t\n\ti = 0;\n\twhile (n > 0) \n\t{\n\t\ti++;\n\t\tn = n / 10;\n\t}\n\t\n\tresult = i;\n\t\n\treturn result;\n}\n\nlong first_Digit(long n) \n{\n\tlong i;\n\tlong result;\n\t\n\ti = 0;\n\twhile (n > 0) \n\t{\n\t\ti++;\n\t\tn = n / 10;\n\t}\n\t\n\tresult = i;\n\t\n\treturn result;\n}\n\nlong first_Digit(long n) \n{\n\tlong i;\n\tlong result;\n\t\n\ti = 0;\n\twhile (n > 0) \n\t{\n\t\ti++;\n\t\tn = n / 10;\n\t}\n\t\n\tresult = i;\n\t\n\treturn result;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = first_Digit;",
            "assert(candidate(123L) == 1L);",
            "assert(candidate(456L) == 4L);",
            "assert(candidate(12L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given array of numbers, returned in descending order.",
        "code": "import std.math;\nimport std.typecons;\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] heap = new long[n];\n\tlong[] heap_end = new long[n];\n\tlong[] heap_start = new long[n];\n\tlong[] heap_start_end = new long[n];\n\tlong[] heap_end_end = new long[n];\n\tlong[] heap_start_end_end = new long[n];\n\tlong[] heap_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end_end_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end_end_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end_end_end_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end_end_end_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end_end_end_end_end_end_end = new long[n];\n\tlong[] heap_start_end_end_end_end_end_end_end_end_end = new long[n];\n\tlong[] heap_end_end_end_end_end_end_end_end_end_end\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = heap_queue_largest;",
            "assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);",
            "assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);",
            "assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a dthon function which takes an array of integers and only returns the odd ones.",
        "code": "import std.math;\nimport std.typecons;\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint i = 0;\n\twhile (i < list.length) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\tresult[i] = list[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list, int n) \n{\n\tlong[] result = new long[list.length];\n\tint i = 0;\n\twhile (i < list.length) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\tresult[i] = list[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list, int n, int k) \n{\n\tlong[] result = new long[list.length];\n\tint i = 0;\n\twhile (i < list.length) \n\t{\n\t\tif (list[i] % 2 == 0) \n\t\t{\n\t\t\tresult[i] = list[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list, int n, int k, int m) \n{\n\tlong[] result = new long[list.length];\n\tint i = 0;\n\twhile (i < list.length) \n\t{\n\t\tif (list[i] % 2\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = Split;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);",
            "assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);",
            "assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a dthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong difference(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong sum_i = 0;\n\tlong sum_j = 0;\n\tlong sum_k = 0;\n\tlong sum_sum = 0;\n\tlong sum_sum_i = 0;\n\tlong sum_sum_j = 0;\n\tlong sum_sum_k = 0;\n\tlong sum_sum_sum = 0;\n\tlong sum_sum_sum_i = 0;\n\tlong sum_sum_sum_j = 0;\n\tlong sum_sum_sum_k = 0;\n\tlong sum_sum_sum_sum = 0;\n\tlong sum_sum_sum_sum_i = 0;\n\tlong sum_sum_sum_sum_j = 0;\n\tlong sum_sum_sum_sum_k = 0;\n\tlong sum_sum_sum_sum_sum = 0;\n\tlong sum_sum_sum_sum_sum_i = 0;\n\tlong sum_sum_sum_sum_sum_j = 0;\n\tlong sum_sum_sum_sum_sum_k = 0;\n\tlong sum_sum_sum_sum_sum_sum = 0;\n\tlong sum_sum_sum_sum_sum_sum_i = 0;\n\tlong sum_sum_sum_sum_sum_sum_j = 0;\n\tlong sum_sum_sum_sum_sum_sum_k = 0;\n\tlong sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong sum_sum_sum_sum_sum_sum_sum_i = 0;\n\tlong sum_sum_sum_sum_sum_sum_sum_j = 0;\n\tlong sum_sum_sum_sum_sum_sum_sum_k = 0;\n\tlong sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = difference;",
            "assert(candidate(3L) == 30L);",
            "assert(candidate(5L) == 210L);",
            "assert(candidate(2L) == 6L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a dthon function to count the number of pairs whose xor value is odd.",
        "code": "import std.math;\nimport std.typecons;\nlong find_Odd_Pair(long[] A, long N) \n{\n\tlong i, j, k, odd_pair_count = 0;\n\tfor (i = 0; i < N; i++)\n\t{\n\t\tfor (j = 0; j < N; j++)\n\t\t{\n\t\t\tif (A[i] ^ A[j])\n\t\t\t{\n\t\t\t\todd_pair_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn odd_pair_count;\n}\n\nlong find_Even_Pair(long[] A, long N) \n{\n\tlong i, j, k, odd_pair_count = 0;\n\tfor (i = 0; i < N; i++)\n\t{\n\t\tfor (j = 0; j < N; j++)\n\t\t{\n\t\t\tif (A[i] ^ A[j])\n\t\t\t{\n\t\t\t\todd_pair_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn odd_pair_count;\n}\n\nlong find_Odd_Pair_Count(long[] A, long N) \n{\n\tlong i, j, k, odd_pair_count = 0;\n\tfor (i = 0; i < N; i++)\n\t{\n\t\tfor (j = 0; j < N; j++)\n\t\t{\n\t\t\tif (A[i] ^ A[j])\n\t\t\t{\n\t\t\t\todd_pair_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn odd_pair_count;\n}\n\nlong find_Even_Pair_Count(long[] A, long N) \n{\n\tlong i, j, k, odd_pair_count = 0;\n\tfor (i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Odd_Pair;",
            "assert(candidate([5L, 4L, 7L, 2L, 1L], 5L) == 6L);",
            "assert(candidate([7L, 2L, 8L, 1L, 0L, 5L, 11L], 7L) == 12L);",
            "assert(candidate([1L, 2L, 3L], 3L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "import std.math;\nimport std.typecons;\nstring toggle_string(string string) \n{\n\tstring temp = \"\";\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == 'a' || string[i] == 'A')\n\t\t{\n\t\t\ttemp += string[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp += string[i];\n\t\t}\n\t}\n\treturn temp;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = toggle_string;",
            "assert(candidate(\"Python\") == \"pYTHON\");",
            "assert(candidate(\"Pangram\") == \"pANGRAM\");",
            "assert(candidate(\"LIttLE\") == \"liTTle\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a dthon function to find the sum of the per-digit difference between two integers.",
        "code": "import std.math;\nimport std.typecons;\nlong digit_distance_nums(long n1, long n2) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = digit_distance_nums;",
            "assert(candidate(1L, 2L) == 1L);",
            "assert(candidate(23L, 56L) == 6L);",
            "assert(candidate(123L, 256L) == 7L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subarray in the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_sub_array_sum(long[] a, long size) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong x1 = 0;\n\tlong y1 = 0;\n\tlong z1 = 0;\n\tlong x2 = 0;\n\tlong y2 = 0;\n\tlong z2 = 0;\n\tlong x3 = 0;\n\tlong y3 = 0;\n\tlong z3 = 0;\n\tlong x4 = 0;\n\tlong y4 = 0;\n\tlong z4 = 0;\n\tlong x5 = 0;\n\tlong y5 = 0;\n\tlong z5 = 0;\n\tlong x6 = 0;\n\tlong y6 = 0;\n\tlong z6 = 0;\n\tlong x7 = 0;\n\tlong y7 = 0;\n\tlong z7 = 0;\n\tlong x8 = 0;\n\tlong y8 = 0;\n\tlong z8 = 0;\n\tlong x9 = 0;\n\tlong y9 = 0;\n\tlong z9 = 0;\n\tlong x10 = 0;\n\tlong y10 = 0;\n\tlong z10 = 0;\n\tlong x11 = 0;\n\tlong y11 = 0;\n\tlong z11 = 0;\n\tlong x12 = 0;\n\tlong y12 = 0;\n\tlong z12 = 0;\n\tlong x13 = 0;\n\tlong y13 = 0;\n\tlong z13 = 0;\n\tlong x14 = 0;\n\tlong y14 = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_sub_array_sum;",
            "assert(candidate([-2L, -3L, 4L, -1L, -2L, 1L, 5L, -3L], 8L) == 7L);",
            "assert(candidate([-3L, -4L, 5L, -2L, -3L, 2L, 6L, -4L], 8L) == 8L);",
            "assert(candidate([-4L, -5L, 6L, -3L, -4L, 3L, 7L, -5L], 8L) == 10L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given arrays and output them in sorted order.",
        "code": "import std.math;\nimport std.typecons;\nlong[] union_elements(long[] test_tup1, long[] test_tup2) \n{\n\tlong[] result = new long[test_tup1.length + test_tup2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\twhile (i < test_tup1.length && j < test_tup2.length)\n\t{\n\t\tif (test_tup1[i] < test_tup2[j])\n\t\t{\n\t\t\ttemp = test_tup1[i];\n\t\t\ttest_tup1[i] = test_tup2[j];\n\t\t\ttest_tup2[j] = temp;\n\t\t\ti++;\n\t\t}\n\t\telse if (test_tup1[i] > test_tup2[j])\n\t\t{\n\t\t\ttemp = test_tup2[j];\n\t\t\ttest_tup2[j] = test_tup1[i];\n\t\t\ttest_tup1[i] = temp;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[k] = test_tup1[i];\n\t\t\tk++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < test_tup1.length)\n\t{\n\t\tresult[k] = test_tup1[i];\n\t\tk++;\n\t\ti++;\n\t}\n\twhile (j < test_tup2.length)\n\t{\n\t\tresult[k] = test_tup2[j];\n\t\tk++;\n\t\tj++;\n\t}\n\treturn result;\n}\n\nlong[] intersection_elements(long[] test_tup1, long[] test_tup2) \n{\n\tlong[] result = new long[test_tup1.length];\n\tlong i = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = union_elements;",
            "assert(candidate([3L, 4L, 5L, 6L], [5L, 7L, 4L, 10L]) == [3L, 4L, 5L, 6L, 7L, 10L]);",
            "assert(candidate([1L, 2L, 3L, 4L], [3L, 4L, 5L, 6L]) == [1L, 2L, 3L, 4L, 5L, 6L]);",
            "assert(candidate([11L, 12L, 13L, 14L], [13L, 15L, 16L, 17L]) == [11L, 12L, 13L, 14L, 15L, 16L, 17L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a dthon function to find the length of the longest subarrays.",
        "code": "import std.math;\nimport std.typecons;\nlong Find_Max_Length(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong i, j;\n\tlong len = 0;\n\tfor (i = 0; i < lst.length; i++) {\n\t\tfor (j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j] > max_length) {\n\t\t\t\tmax_length = lst[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\n\nlong Find_Max_Length_2(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong i, j;\n\tlong len = 0;\n\tfor (i = 0; i < lst.length; i++) {\n\t\tfor (j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j] > max_length) {\n\t\t\t\tmax_length = lst[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\n\nlong Find_Max_Length_3(long[][] lst) \n{\n\tlong max_length = 0;\n\tlong i, j;\n\tlong len = 0;\n\tfor (i = 0; i < lst.length; i++) {\n\t\tfor (j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j] > max_length) {\n\t\t\t\tmax_length = lst[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\n\nlong Find_Max_Length_4(long[\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = Find_Max_Length;",
            "assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);",
            "assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);",
            "assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "import std.math;\nimport std.typecons;\nstring[] extract_values(string text) \n{\n\tstring[] values = new string[text.length()];\n\tint i = 0;\n\tfor (i = 0; i < text.length(); i++) \n\t{\n\t\tif (text.charAt(i) == '\"') \n\t\t{\n\t\t\tvalues[i] = text.substring(i+1, i+2);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tvalues[i] = text.substring(i, i+1);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn values;\n}\n\nstring[] extract_values(string text) \n{\n\tstring[] values = new string[text.length()];\n\tint i = 0;\n\tfor (i = 0; i < text.length(); i++) \n\t{\n\t\tif (text.charAt(i) == '\"') \n\t\t{\n\t\t\tvalues[i] = text.substring(i+1, i+2);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tvalues[i] = text.substring(i, i+1);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn values;\n}\n\nstring[] extract_values(string text) \n{\n\tstring[] values = new string[text.length()];\n\tint i = 0;\n\tfor (i = 0; i < text.length(); i++) \n\t{\n\t\tif (text.charAt(i) == '\"') \n\t\t{\n\t\t\tvalues[i] = text.substring(i+1, i+2);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tvalues[i] = text.substring(i, i+1);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn values;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a dthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "import std.math;\nimport std.typecons;\nlong count_Pairs(long[] arr, long n) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (arr[i]!= arr[i+1]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_Pairs_Equal(long[] arr, long n) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] == arr[i+1]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_Pairs_NotEqual(long[] arr, long n) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (arr[i]!= arr[i+1]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_Pairs_Equal_NotEqual(long[] arr, long n) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] == arr[i+1]) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a dthon function to split a string into characters.",
        "code": "import std.math;\nimport std.typecons;\nstring[] split(string word) \n{\n\tstring[] split = new string[word.length()];\n\tint i = 0;\n\tfor (i = 0; i < word.length(); i++) \n\t{\n\t\tif (word.charAt(i) =='') \n\t\t{\n\t\t\tsplit[i] = \"\";\n\t\t} \n\t\telse \n\t\t{\n\t\t\tsplit[i] = word.substring(i, i + 1);\n\t\t}\n\t}\n\treturn split;\n}\n\nstring[] split(string word, int start) \n{\n\tstring[] split = new string[word.length()];\n\tint i = 0;\n\tfor (i = start; i < word.length(); i++) \n\t{\n\t\tif (word.charAt(i) =='') \n\t\t{\n\t\t\tsplit[i] = \"\";\n\t\t} \n\t\telse \n\t\t{\n\t\t\tsplit[i] = word.substring(i, i + 1);\n\t\t}\n\t}\n\treturn split;\n}\n\nstring[] split(string word, int start, int end) \n{\n\tstring[] split = new string[word.length()];\n\tint i = 0;\n\tfor (i = start; i < end; i++) \n\t{\n\t\tif (word.charAt(i) =='') \n\t\t{\n\t\t\tsplit[i] = \"\";\n\t\t} \n\t\telse \n\t\t{\n\t\t\tsplit[i] = word.substring(i, i + 1);\n\t\t}\n\t}\n\treturn split;\n}\n\nstring[] split(string word, int start, int end, int start2) \n{\n\tstring[] split = new string[word.length()];\n\tint i =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = split;",
            "assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);",
            "assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);",
            "assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_digits(long n) \n{\n\tlong sum = 0;\n\t\n\twhile (n > 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn sum;\n}\n\nlong sum_digits_long(long n) \n{\n\tlong sum = 0;\n\t\n\twhile (n > 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn sum;\n}\n\nlong sum_digits_long_long(long n) \n{\n\tlong sum = 0;\n\t\n\twhile (n > 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn sum;\n}\n\nlong sum_digits_long_long_long(long n) \n{\n\tlong sum = 0;\n\t\n\twhile (n > 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn sum;\n}\n\nlong sum_digits_long_long_long(long n) \n{\n\tlong sum = 0;\n\t\n\twhile (n > 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn sum;\n}\n\nlong sum_digits_long_long_long(long n) \n{\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_digits;",
            "assert(candidate(345L) == 12L);",
            "assert(candidate(12L) == 3L);",
            "assert(candidate(97L) == 16L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified array is sorted or not.",
        "code": "import std.math;\nbool issort_list(long[] list1) \n{\n\tlong i, j;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool issort_list(long[] list1, long[] list2) \n{\n\tlong i, j;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < list2.length; i++)\n\t{\n\t\tif (list2[i] < 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool issort_list(long[] list1, long[] list2, long[] list3) \n{\n\tlong i, j;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < list2.length; i++)\n\t{\n\t\tif (list2[i] < 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < list3.length; i++)\n\t{\n\t\tif (list3[i] < 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool issort_list(long[] list1, long[] list2, long[] list3, long[] list4) \n{\n\tlong i, j;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = issort_list;",
            "assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);",
            "assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);",
            "assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create an array of N empty dictionaries.",
        "code": "import std.math;\nimport std.typecons;\nNone[] empty_list(long length) \n{\n\tNone[] result = new None[length];\n\tfor (int i = 0; i < length; i++)\n\t\tresult[i] = new None();\n\treturn result;\n}\n\nN[] empty_list(long length) \n{\n\tN[] result = new N[length];\n\tfor (int i = 0; i < length; i++)\n\t\tresult[i] = new N();\n\treturn result;\n}\n\nN[][] empty_list(long length) \n{\n\tN[][] result = new N[length][];\n\tfor (int i = 0; i < length; i++)\n\t\tresult[i] = new N[length];\n\treturn result;\n}\n\nN[][][] empty_list(long length) \n{\n\tN[][][] result = new N[length][][];\n\tfor (int i = 0; i < length; i++)\n\t\tresult[i] = new N[length][];\n\treturn result;\n}\n\nN[][][][] empty_list(long length) \n{\n\tN[][][][] result = new N[length][][][];\n\tfor (int i = 0; i < length; i++)\n\t\tresult[i] = new N[length][][];\n\treturn result;\n}\n\nN[][][][][] empty_list(long length) \n{\n\tN[][][][][] result = new N[length][][][][];\n\tfor (int i = 0; i < length; i++)\n\t\tresult\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = empty_list;",
            "assert(candidate(5L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);",
            "assert(candidate(6L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);",
            "assert(candidate(7L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "import std.math;\nimport std.typecons;\nstring[][] sort_sublists(string[][] list1) \n{\n\tstring[][] list2 = new string[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2[i] = new string[list1[i].length];\n\t\tfor (int j = 0; j < list1[i].length; j++) {\n\t\t\tlist2[i][j] = list1[i][j];\n\t\t}\n\t}\n\tsort(list2, 0, list2.length - 1);\n\treturn list2;\n}\n\nstring[][] sort_sublists_reverse(string[][] list1) \n{\n\tstring[][] list2 = new string[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2[i] = new string[list1[i].length];\n\t\tfor (int j = 0; j < list1[i].length; j++) {\n\t\t\tlist2[i][j] = list1[i][j];\n\t\t}\n\t}\n\tsort(list2, 0, list2.length - 1);\n\treturn list2;\n}\n\nstring[][] sort_sublists_reverse_reverse(string[][] list1) \n{\n\tstring[][] list2 = new string[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2[i] = new string[list1[i].length];\n\t\tfor (int j = 0; j < list1[i].length; j++) {\n\t\t\tlist2[i][j] = list1[i][j];\n\t\t}\n\t}\n\tsort(list2, 0, list2.\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sort_sublists;",
            "assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);",
            "assert(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]);",
            "assert(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a dthon function to check if a given number is one less than twice its reverse.",
        "code": "import std.math;\nimport std.typecons;\nbool checks(long n) \n{\n\tif (n == 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return false;\n\treturn true;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = checks;",
            "assert(candidate(70L) == false);",
            "assert(candidate(23L) == false);",
            "assert(candidate(73L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a dthon function to remove duplicate numbers from a given number of arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[] two_unique_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == nums[i])\n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = nums[i] + nums[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong[] two_unique_nums_2(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == nums[i])\n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = nums[i] + nums[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong[] two_unique_nums_3(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == nums[i])\n\t\t{\n\t\t\tresult[i] = nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = nums[i] + nums[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong[] two_unique_nums_4(\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = two_unique_nums;",
            "assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);",
            "assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a dthon function to calculate the product of the unique numbers in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong unique_product(long[] list_data) \n{\n\tlong product = 1;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = unique_product;",
            "assert(candidate([10L, 20L, 30L, 40L, 20L, 50L, 60L, 40L]) == 720000000L);",
            "assert(candidate([1L, 2L, 3L, 1L]) == 6L);",
            "assert(candidate([7L, 8L, 9L, 0L, 1L, 1L]) == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "import std.math;\nimport std.typecons;\nfloat surfacearea_cylinder(long r, long h) \n{\n\tlong i, j, k, n, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = surfacearea_cylinder;",
            "assert(candidate(10L, 5L) == 942.45);",
            "assert(candidate(4L, 5L) == 226.18800000000002);",
            "assert(candidate(4L, 10L) == 351.848);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a dthon function to check whether an array is subarray of another or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_Sub_Array(long[] A, long[] B) \n{\n\tlong i, j;\n\tlong size = A.length;\n\t\n\tif(size == 0)\n\t\treturn true;\n\t\n\tfor(i = 0; i < size; i++)\n\t{\n\t\tif(A[i] == B[i])\n\t\t\tcontinue;\n\t\t\n\t\tif(std.math.Abs(A[i] - B[i]) > std.math.Abs(A[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool is_Sub_Array(long[] A, long[] B, long[] C) \n{\n\tlong i, j;\n\tlong size = A.length;\n\t\n\tif(size == 0)\n\t\treturn true;\n\t\n\tfor(i = 0; i < size; i++)\n\t{\n\t\tif(A[i] == B[i])\n\t\t\tcontinue;\n\t\t\n\t\tif(std.math.Abs(A[i] - B[i]) > std.math.Abs(A[i]))\n\t\t\treturn false;\n\t}\n\t\n\tfor(i = 0; i < size; i++)\n\t{\n\t\tif(A[i] == C[i])\n\t\t\tcontinue;\n\t\t\n\t\tif(std.math.Abs(A[i] - C[i]) > std.math.Abs(A[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool is_Sub_Array(long[] A, long[] B, long[] C, long[] D) \n{\n\tlong i, j;\n\tlong size = A.length;\n\t\n\tif(size == 0)\n\t\treturn true;\n\t\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_Sub_Array;",
            "assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);",
            "assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);",
            "assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a dthon function to find the last digit in factorial of a given number.",
        "code": "import std.math;\nimport std.typecons;\nlong last_Digit_Factorial(long n) \n{\n\tlong result = 1;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\treturn result;\n}\n\nlong last_Digit_Factorial(long n, long m) \n{\n\tlong result = 1;\n\tlong i = 0;\n\twhile (i < m) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\treturn result;\n}\n\nlong last_Digit_Factorial(long n, long m, long k) \n{\n\tlong result = 1;\n\tlong i = 0;\n\twhile (i < m) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\twhile (i < k) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\treturn result;\n}\n\nlong last_Digit_Factorial(long n, long m, long k, long l) \n{\n\tlong result = 1;\n\tlong i = 0;\n\twhile (i < m) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\twhile (i < k) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\twhile (i < l) \n\t{\n\t\tresult *= n;\n\t\ti++;\n\t}\n\treturn result;\n}\n\nlong last_Digit_Factorial(long n,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = last_Digit_Factorial;",
            "assert(candidate(4L) == 4L);",
            "assert(candidate(21L) == 0L);",
            "assert(candidate(30L) == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 arrays of the same length into a single flat array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\tfor (i = 0; i < list1.length; i++) {\n\t\tresult[i] = list1[i];\n\t}\n\t\n\tfor (i = 0; i < list2.length; i++) {\n\t\tresult[i + list1.length] = list2[i];\n\t}\n\t\n\tfor (i = 0; i < list3.length; i++) {\n\t\tresult[i + list1.length + list2.length] = list3[i];\n\t}\n\t\n\treturn result;\n}\n\nlong[] interleave_lists_2(long[] list1, long[] list2, long[] list3) \n{\n\tlong[] result = new long[list1.length + list2.length + list3.length];\n\t\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\tfor (i = 0; i < list1.length; i++) {\n\t\tresult[i] = list1[i];\n\t}\n\t\n\tfor (i = 0; i < list2.length; i++) {\n\t\tresult[i + list1.length] = list2[i];\n\t}\n\t\n\tfor (i = 0; i < list3.length; i++) {\n\t\tresult[i + list1.length + list2.length] = list3[i];\n\t}\n\t\n\treturn result;\n}\n\nlong[] interleave_lists_3(long[] list1\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = interleave_lists;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);",
            "assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);",
            "assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long) find_dissimilar(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tTuple!(long, long, long, long) test_tup1 = test_tup1;\n\tTuple!(long, long, long, long) test_tup2 = test_tup2;\n\t\n\tlong dissimilar = 0;\n\t\n\tfor (long i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tfor (long j = 0; j < test_tup2.size(); j++)\n\t\t{\n\t\t\tif (test_tup1.get(i) == test_tup2.get(j))\n\t\t\t{\n\t\t\t\tdissimilar++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dissimilar;\n}\n\nTuple!(long, long, long, long) find_dissimilar(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tTuple!(long, long, long, long) test_tup1 = test_tup1;\n\tTuple!(long, long, long, long) test_tup2 = test_tup2;\n\t\n\tlong dissimilar = 0;\n\t\n\tfor (long i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tfor (long j = 0; j < test_tup2.size(); j++)\n\t\t{\n\t\t\tif (test_tup1.get(i) == test_tup2.get(j))\n\t\t\t{\n\t\t\t\tdissimilar++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dissimilar;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a dthon function to find the largest number that can be formed with the given array of digits.",
        "code": "import std.math;\nimport std.typecons;\nlong find_Max_Num(long[] arr) \n{\n\tlong max = 0;\n\tlong max_val = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Max_Num;",
            "assert(candidate([1L, 2L, 3L]) == 321L);",
            "assert(candidate([4L, 5L, 6L, 1L]) == 6541L);",
            "assert(candidate([1L, 2L, 3L, 9L]) == 9321L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a dthon function to find the surface area of a square dramid with a given base edge and height.",
        "code": "import std.math;\nimport std.typecons;\nlong surface_Area(long b, long s) \n{\n\tlong a = 0;\n\tlong b2 = b;\n\tlong s2 = s;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s1 = 0;\n\tlong s2 = 0;\n\tlong s3 = 0;\n\tlong s4 = 0;\n\tlong s5 = 0;\n\tlong s6 = 0;\n\tlong s7 = 0;\n\tlong s8 = 0;\n\tlong s9 = 0;\n\tlong s10 = 0;\n\tlong s11 = 0;\n\tlong s12 = 0;\n\tlong s13 = 0;\n\tlong s14 = 0;\n\tlong s15 = 0;\n\tlong s16 = 0;\n\tlong s17 = 0;\n\tlong s18 = 0;\n\tlong s19 = 0;\n\tlong s20 = 0;\n\tlong s21 = 0;\n\tlong s22 = 0;\n\tlong s23 = 0;\n\tlong s24 = 0;\n\tlong s25 = 0;\n\tlong s26 = 0;\n\tlong s27 = 0;\n\tlong s28 = 0;\n\tlong s29 = 0;\n\tlong s30 = 0;\n\tlong s31 = 0;\n\tlong s32 = 0;\n\tlong s33 = 0;\n\tlong s34 = 0;\n\tlong s35 = 0;\n\tlong s36 = 0;\n\tlong s37 = 0;\n\tlong s38 = 0;\n\tlong s39 = 0;\n\tlong s40 = 0;\n\tlong s41 = 0;\n\tlong s42 = 0;\n\tlong s43 = 0;\n\tlong s44 = 0;\n\tlong s45 = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = surface_Area;",
            "assert(candidate(3L, 4L) == 33L);",
            "assert(candidate(4L, 5L) == 56L);",
            "assert(candidate(1L, 2L) == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "import std.math;\nimport std.typecons;\nlong catalan_number(long num) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = catalan_number;",
            "assert(candidate(10L) == 16796L);",
            "assert(candidate(9L) == 4862L);",
            "assert(candidate(7L) == 429L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring find_adverbs(string text) \n{\n\tstring ret = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i33 = 0;\n\tint i34 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_adverbs;",
            "assert(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\");",
            "assert(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\");",
            "assert(candidate(\"Complete the task quickly\") == \"18-25: quickly\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "import std.math;\nimport std.typecons;\nNone[] expensive_items(None[] items, long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong m;\n\tlong n;\n\tlong m1;\n\tlong m2;\n\tlong m3;\n\tlong m4;\n\tlong m5;\n\tlong m6;\n\tlong m7;\n\tlong m8;\n\tlong m9;\n\tlong m10;\n\tlong m11;\n\tlong m12;\n\tlong m13;\n\tlong m14;\n\tlong m15;\n\tlong m16;\n\tlong m17;\n\tlong m18;\n\tlong m19;\n\tlong m20;\n\tlong m21;\n\tlong m22;\n\tlong m23;\n\tlong m24;\n\tlong m25;\n\tlong m26;\n\tlong m27;\n\tlong m28;\n\tlong m29;\n\tlong m30;\n\tlong m31;\n\tlong m32;\n\tlong m33;\n\tlong m34;\n\tlong m35;\n\tlong m36;\n\tlong m37;\n\tlong m38;\n\tlong m39;\n\tlong m40;\n\tlong m41;\n\tlong m42;\n\tlong m43;\n\tlong m44;\n\tlong m45;\n\tlong m46;\n\tlong m47;\n\tlong m48;\n\tlong m49;\n\tlong m50;\n\tlong m51;\n\tlong m52;\n\tlong m53;\n\tlong m54;\n\tlong m55;\n\tlong m56;\n\tlong m57;\n\tlong m58;\n\tlong m59;\n\tlong m60;\n\tlong m61;\n\tlong m62;\n\tlong m63;\n\tlong m64;\n\tlong m65;\n\tlong m66;\n\tlong m67;\n\tlong m68;\n\tlong m69;\n\tlong m70;\n\tlong m71;\n\tlong m72;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = expensive_items;",
            "assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);",
            "assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable], 2L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-1\", \"price\": 101.1].nullable]);",
            "assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable, [\"name\": \"Item-4\", \"price\": 22.75].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a dthon function to split an array at the nth eelment and add the first part to the end.",
        "code": "import std.math;\nimport std.typecons;\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = split_Arr;",
            "assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);",
            "assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);",
            "assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a dthon function to find the difference between largest and smallest value in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong big_diff(long[] nums) \n{\n\tlong max = 0;\n\tlong min = 0;\n\tlong sum = 0;\n\tlong temp = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = big_diff;",
            "assert(candidate([1L, 2L, 3L, 4L]) == 3L);",
            "assert(candidate([4L, 5L, 12L]) == 8L);",
            "assert(candidate([9L, 2L, 3L]) == 7L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong[] perfect_squares(long a, long b) \n{\n\tlong[] result = new long[2];\n\tlong sum = 0;\n\tlong temp = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tlong temp5 = 0;\n\tlong temp6 = 0;\n\tlong temp7 = 0;\n\tlong temp8 = 0;\n\tlong temp9 = 0;\n\tlong temp10 = 0;\n\tlong temp11 = 0;\n\tlong temp12 = 0;\n\tlong temp13 = 0;\n\tlong temp14 = 0;\n\tlong temp15 = 0;\n\tlong temp16 = 0;\n\tlong temp17 = 0;\n\tlong temp18 = 0;\n\tlong temp19 = 0;\n\tlong temp20 = 0;\n\tlong temp21 = 0;\n\tlong temp22 = 0;\n\tlong temp23 = 0;\n\tlong temp24 = 0;\n\tlong temp25 = 0;\n\tlong temp26 = 0;\n\tlong temp27 = 0;\n\tlong temp28 = 0;\n\tlong temp29 = 0;\n\tlong temp30 = 0;\n\tlong temp31 = 0;\n\tlong temp32 = 0;\n\tlong temp33 = 0;\n\tlong temp34 = 0;\n\tlong temp35 = 0;\n\tlong temp36 = 0;\n\tlong temp37 = 0;\n\tlong temp38 = 0;\n\tlong temp39 = 0;\n\tlong temp40 = 0;\n\tlong temp41 = 0;\n\tlong temp42 = 0;\n\tlong temp43 = 0;\n\tlong temp44 = 0;\n\tlong temp45 = 0;\n\tlong temp46 = 0;\n\tlong temp47 = 0;\n\tlong temp48 = 0;\n\tlong temp49 = 0;\n\tlong temp50 = 0;\n\tlong temp51 = 0;\n\tlong temp52 = 0;\n\tlong temp53 = 0;\n\tlong temp54 = 0;\n\tlong temp55 = 0;\n\tlong temp56 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = perfect_squares;",
            "assert(candidate(1L, 30L) == [1L, 4L, 9L, 16L, 25L]);",
            "assert(candidate(50L, 100L) == [64L, 81L, 100L]);",
            "assert(candidate(100L, 200L) == [100L, 121L, 144L, 169L, 196L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a dthon function to check whether the given two integers have opposite sign or not.",
        "code": "import std.math;\nimport std.typecons;\nbool opposite_Signs(long x, long y) \n{\n\tif (x < 0)\n\t\treturn false;\n\tif (y < 0)\n\t\treturn false;\n\treturn true;\n}\n\nbool opposite_Signs(int x, int y) \n{\n\tif (x < 0)\n\t\treturn false;\n\tif (y < 0)\n\t\treturn false;\n\treturn true;\n}\n\nbool opposite_Signs(long x, long y) \n{\n\tif (x < 0)\n\t\treturn false;\n\tif (y < 0)\n\t\treturn false;\n\treturn true;\n}\n\nbool opposite_Signs(int x, int y) \n{\n\tif (x < 0)\n\t\treturn false;\n\tif (y < 0)\n\t\treturn false;\n\treturn true;\n}\n\nbool opposite_Signs(long x, long y) \n{\n\tif (x < 0)\n\t\treturn false;\n\tif (y < 0)\n\t\treturn false;\n\treturn true;\n}\n\nbool opposite_Signs(int x, int y) \n{\n\tif (x < 0)\n\t\treturn false;\n\tif (y < 0)\n\t\treturn false;\n\treturn true;\n}\n\nbool opposite_Signs(long x, long\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = opposite_Signs;",
            "assert(candidate(1L, -2L) == true);",
            "assert(candidate(3L, 2L) == false);",
            "assert(candidate(-10L, -10L) == false);",
            "assert(candidate(-2L, 2L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a dthon function to interchange the first and last elements in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] swap_List(long[] newList) \n{\n\tlong[] oldList = new long[newList.length];\n\tlong[] temp = new long[newList.length];\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\toldList[i] = newList[i];\n\t\ttemp[i] = newList[i];\n\t}\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\tnewList[i] = oldList[i];\n\t\toldList[i] = temp[i];\n\t\ttemp[i] = oldList[i];\n\t}\n\treturn newList;\n}\n\nlong[] swap_Array(long[] newList) \n{\n\tlong[] oldList = new long[newList.length];\n\tlong[] temp = new long[newList.length];\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\toldList[i] = newList[i];\n\t\ttemp[i] = newList[i];\n\t}\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\tnewList[i] = oldList[i];\n\t\toldList[i] = temp[i];\n\t\ttemp[i] = oldList[i];\n\t}\n\treturn newList;\n}\n\nlong[] swap_Array_2(long[] newList) \n{\n\tlong[] oldList = new long[newList.length];\n\tlong[] temp = new long[newList.length];\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\toldList[i] = newList[i];\n\t\ttemp[i] = newList[i];\n\t}\n\tfor(\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = swap_List;",
            "assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);",
            "assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);",
            "assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a dthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_Of_product(long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_Of_product;",
            "assert(candidate(3L) == 15L);",
            "assert(candidate(4L) == 56L);",
            "assert(candidate(1L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "import std.math;\nimport std.typecons;\nstring removezero_ip(string ip) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < ip.length()) \n\t{\n\t\tif (ip[i] == '.') \n\t\t{\n\t\t\tresult += ip[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += ip[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nstring removezero_string(string str) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < str.length()) \n\t{\n\t\tif (str[i] == '.') \n\t\t{\n\t\t\tresult += str[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += str[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nvector<string> removezero_vector(vector<string> vec) \n{\n\tvector<string> result = vector<string>();\n\tint i = 0;\n\twhile (i < vec.size()) \n\t{\n\t\tif (vec[i] == \".\") \n\t\t{\n\t\t\tresult.push_back(vec[i]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult.push_back(vec[i]);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nvector<string> removezero_vector_string(vector<string> vec) \n{\n\tvector<string> result = vector<string>();\n\tint i = 0;\n\twhile (i < vec.size()) \n\t{\n\t\tif (vec[i] == \".\") \n\t\t{\n\t\t\tresult.push_back(vec[i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = removezero_ip;",
            "assert(candidate(\"216.08.094.196\") == \"216.8.94.196\");",
            "assert(candidate(\"12.01.024\") == \"12.1.24\");",
            "assert(candidate(\"216.08.094.0196\") == \"216.8.94.196\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong diff_even_odd(long[] list1) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = diff_even_odd;",
            "assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 3L);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 1L);",
            "assert(candidate([1L, 5L, 7L, 9L, 10L]) == 9L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong find_kth(long[] arr1, long[] arr2, long k) \n{\n\tlong i, j;\n\tlong res = 0;\n\tfor (i = 0; i < k; i++) {\n\t\tfor (j = 0; j < k; j++) {\n\t\t\tif (arr1[i] < arr2[j]) {\n\t\t\t\tres = arr1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (arr1[i] > arr2[j]) {\n\t\t\t\tres = arr2[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (res == 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;\n}\n\nlong find_kth(long[] arr1, long[] arr2, long k) \n{\n\tlong i, j;\n\tlong res = 0;\n\tfor (i = 0; i < k; i++) {\n\t\tfor (j = 0; j < k; j++) {\n\t\t\tif (arr1[i] < arr2[j]) {\n\t\t\t\tres = arr1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (arr1[i] > arr2[j]) {\n\t\t\t\tres = arr2[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (res == 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;\n}\n\nlong find_kth(long[] arr1, long[] arr2, long k) \n{\n\tlong i, j;\n\tlong res = 0;\n\tfor (i = 0; i < k; i++) {\n\t\tfor (j = 0; j < k; j++) {\n\t\t\tif (arr1[i] < arr2[j]) {\n\t\t\t\tres = arr1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (arr1[i] >\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_kth;",
            "assert(candidate([2L, 3L, 6L, 7L, 9L], [1L, 4L, 8L, 10L], 5L) == 6L);",
            "assert(candidate([100L, 112L, 256L, 349L, 770L], [72L, 86L, 113L, 119L, 265L, 445L, 892L], 7L) == 256L);",
            "assert(candidate([3L, 4L, 7L, 8L, 10L], [2L, 5L, 9L, 11L], 6L) == 8L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "import std.math;\nimport std.typecons;\nbool armstrong_number(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is_number(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is_number_or_zero(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is_number_or_zero_or_negative(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is_number_or_zero_or_negative_or_positive(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is_number_or_zero_or_negative_or_positive_or_zero(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is_number_or_zero_or_negative_or_positive_or_zero_or_negative(long number) \n{\n\tif (number == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool is\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = armstrong_number;",
            "assert(candidate(153L) == true);",
            "assert(candidate(259L) == false);",
            "assert(candidate(4458L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, float) sum_average(long number) \n{\n\tlong sum = 0;\n\tfloat average = 0;\n\t\n\tfor (long i = 1; i <= number; i++)\n\t{\n\t\tsum += i;\n\t\taverage += i;\n\t}\n\t\n\treturn (Tuple!(long, float) {sum, average});\n}\n\nTuple!(long, float) sum_average(long number, long n) \n{\n\tlong sum = 0;\n\tfloat average = 0;\n\t\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\taverage += i;\n\t}\n\t\n\treturn (Tuple!(long, float) {sum, average});\n}\n\nTuple!(long, float) sum_average(long number, long n, long m) \n{\n\tlong sum = 0;\n\tfloat average = 0;\n\t\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\taverage += i;\n\t\tfor (long j = 1; j <= m; j++)\n\t\t{\n\t\t\tsum += i * j;\n\t\t\taverage += i * j;\n\t\t}\n\t}\n\t\n\treturn (Tuple!(long, float) {sum, average});\n}\n\nTuple!(long, float) sum_average(long number, long n, long m, long n) \n{\n\tlong sum = 0;\n\tfloat average = 0;\n\t\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\taverage += i;\n\t\tfor (long j = 1; j <= m; j++)\n\t\t{\n\t\t\tsum +=\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_average;",
            "assert(candidate(10L) == tuple(55L, 5.5));",
            "assert(candidate(15L) == tuple(120L, 8.0));",
            "assert(candidate(20L) == tuple(210L, 10.5));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "import std.math;\nimport std.typecons;\nlong is_octagonal(long n) \n{\n\tlong i, j, k, l;\n\tlong sum;\n\t\n\tif (n < 1)\n\t\treturn 0;\n\t\n\tsum = 0;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\tfor (j = 1; j <= i; j++)\n\t\t{\n\t\t\tsum += j;\n\t\t\tfor (k = 1; k <= i; k++)\n\t\t\t{\n\t\t\t\tsum += k;\n\t\t\t\tfor (l = 1; l <= i; l++)\n\t\t\t\t{\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong is_prime(long n) \n{\n\tlong i, j, k, l;\n\tlong sum;\n\t\n\tif (n < 1)\n\t\treturn 0;\n\t\n\tsum = 0;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\tfor (j = 1; j <= i; j++)\n\t\t{\n\t\t\tsum += j;\n\t\t\tfor (k = 1; k <= i; k++)\n\t\t\t{\n\t\t\t\tsum += k;\n\t\t\t\tfor (l = 1; l <= i; l++)\n\t\t\t\t{\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong is_prime_n(long n) \n{\n\tlong i, j, k, l;\n\tlong sum;\n\t\n\tif (n < 1)\n\t\treturn 0;\n\t\n\tsum = 0;\n\tfor (i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\tfor (j = 1; j <= i; j++)\n\t\t{\n\t\t\tsum += j;\n\t\t\tfor (k = 1; k <= i; k++)\n\t\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_octagonal;",
            "assert(candidate(5L) == 65L);",
            "assert(candidate(10L) == 280L);",
            "assert(candidate(15L) == 645L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a dthon function to check whether the given number is even or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_Even(long n) \n{\n\treturn n % 2 == 0;\n}\n\nbool is_Odd(long n) \n{\n\treturn n % 2 == 1;\n}\n\nbool is_Even(int n) \n{\n\treturn n % 2 == 0;\n}\n\nbool is_Odd(int n) \n{\n\treturn n % 2 == 1;\n}\n\nbool is_Even(long n) \n{\n\treturn n % 2 == 0;\n}\n\nbool is_Odd(long n) \n{\n\treturn n % 2 == 1;\n}\n\nbool is_Even(int n) \n{\n\treturn n % 2 == 0;\n}\n\nbool is_Odd(int n) \n{\n\treturn n % 2 == 1;\n}\n\nbool is_Even(long n) \n{\n\treturn n % 2 == 0;\n}\n\nbool is_Odd(long n) \n{\n\treturn n % 2 == 1;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a dthon function to find the first repeated character in a given string.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(string) first_repeated_char(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tfor (i = 0; i < str1.length(); i++)\n\t{\n\t\tif (str1[i] == str2[i])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nString!(string) first_repeated_char(string str1) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\tfor (i = 0; i < str1.length(); i++)\n\t{\n\t\tif (str1[i] == str2[i])\n\t\t{\n\t\t\treturn str1[i];\n\t\t}\n\t}\n\treturn \"\";\n}\n\nString!(string) first_repeated_char(string str1, int i) \n{\n\tstring str2 = \"\";\n\tint j = 0;\n\tfor (j = 0; j < str1.length(); j++)\n\t{\n\t\tif (str1[j] == str2[i])\n\t\t{\n\t\t\treturn str1[j];\n\t\t}\n\t}\n\treturn \"\";\n}\n\nString!(string) first_repeated_char(string str1, int i, int j) \n{\n\tstring str2 = \"\";\n\tint k = 0;\n\tfor (k = 0; k < str1.length(); k++)\n\t{\n\t\tif (str1[k] == str2[i])\n\t\t{\n\t\t\treturn str1[k];\n\t\t}\n\t}\n\treturn \"\";\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "import std.math;\nimport std.typecons;\nlong[] get_ludic(long n) \n{\n\tlong[] result = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] get_ludic(long n) \n{\n\tlong[] result = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] get_ludic(long n) \n{\n\tlong[] result = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong[] get_ludic(long n) \n{\n\tlong[] result = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring reverse_words(string s) \n{\n\tstring rv = \"\";\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] =='') \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t}\n\treturn rv;\n}\n\nstring reverse(string s) \n{\n\tstring rv = \"\";\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] =='') \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t}\n\treturn rv;\n}\n\nstring reverse_all(string s) \n{\n\tstring rv = \"\";\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] =='') \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t}\n\treturn rv;\n}\n\nstring reverse_all_all(string s) \n{\n\tstring rv = \"\";\n\tfor (int i = 0; i < s.length(); i++) \n\t{\n\t\tif (s[i] =='') \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\trv += s[i];\n\t\t}\n\t}\n\treturn rv;\n}\n\nstring reverse_all_all_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = reverse_words;",
            "assert(candidate(\"python program\") == \"program python\");",
            "assert(candidate(\"java language\") == \"language java\");",
            "assert(candidate(\"indian man\") == \"man indian\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "import std.math;\nimport std.typecons;\nbool prime_num(long num) \n{\n\tif (num == 1) return true;\n\tif (num == 2) return true;\n\tif (num % 2 == 0) return false;\n\treturn true;\n}\n\nbool prime_num(int num) \n{\n\tif (num == 1) return true;\n\tif (num == 2) return true;\n\tif (num % 2 == 0) return false;\n\treturn true;\n}\n\nbool prime_num(long num) \n{\n\tif (num == 1) return true;\n\tif (num == 2) return true;\n\tif (num % 2 == 0) return false;\n\treturn true;\n}\n\nbool prime_num(int num) \n{\n\tif (num == 1) return true;\n\tif (num == 2) return true;\n\tif (num % 2 == 0) return false;\n\treturn true;\n}\n\nbool prime_num(long num) \n{\n\tif (num == 1) return true;\n\tif (num == 2) return true;\n\tif (num % 2 == 0) return false;\n\treturn true;\n}\n\nbool prime_num(int num) \n{\n\tif (num == 1) return true;\n\tif (num == 2) return true;\n\tif (num % 2 == 0) return false;\n\treturn true;\n}\n\nbool prime_num(long num) \n{\n\tif (\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = prime_num;",
            "assert(candidate(13L) == true);",
            "assert(candidate(7L) == true);",
            "assert(candidate(-1010L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "import std.math;\nimport std.typecons;\nfloat radian_degree(long degree) \n{\n\treturn degree * std::pi / 180.0;\n}\n\nlong degre_radian(float radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nfloat degre_radian(long radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nlong radian_degrees(float radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nlong degre_radians(float radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nfloat degre_radians(long radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nlong radian_degrees(float radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nlong degre_radians(float radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nfloat degre_radians(long radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\nlong radian_degrees(float radian) \n{\n\treturn radian * 180.0 / std::pi;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, long, long) find_literals(string text, string pattern) \n{\n\tstring s = text;\n\tlong start = 0;\n\tlong end = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_literals;",
            "assert(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") == tuple(\"fox\", 16L, 19L));",
            "assert(candidate(\"Its been a very crazy procedure right\", \"crazy\") == tuple(\"crazy\", 16L, 21L));",
            "assert(candidate(\"Hardest choices required strongest will\", \"will\") == tuple(\"will\", 35L, 39L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a dthon function to find nth bell number.",
        "code": "import std.math;\nimport std.typecons;\nlong bell_Number(long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong sum;\n\tlong sum2;\n\tlong sum3;\n\tlong sum4;\n\tlong sum5;\n\tlong sum6;\n\tlong sum7;\n\tlong sum8;\n\tlong sum9;\n\tlong sum10;\n\tlong sum11;\n\tlong sum12;\n\tlong sum13;\n\tlong sum14;\n\tlong sum15;\n\tlong sum16;\n\tlong sum17;\n\tlong sum18;\n\tlong sum19;\n\tlong sum20;\n\tlong sum21;\n\tlong sum22;\n\tlong sum23;\n\tlong sum24;\n\tlong sum25;\n\tlong sum26;\n\tlong sum27;\n\tlong sum28;\n\tlong sum29;\n\tlong sum30;\n\tlong sum31;\n\tlong sum32;\n\tlong sum33;\n\tlong sum34;\n\tlong sum35;\n\tlong sum36;\n\tlong sum37;\n\tlong sum38;\n\tlong sum39;\n\tlong sum40;\n\tlong sum41;\n\tlong sum42;\n\tlong sum43;\n\tlong sum44;\n\tlong sum45;\n\tlong sum46;\n\tlong sum47;\n\tlong sum48;\n\tlong sum49;\n\tlong sum50;\n\tlong sum51;\n\tlong sum52;\n\tlong sum53;\n\tlong sum54;\n\tlong sum55;\n\tlong sum56;\n\tlong sum57;\n\tlong sum58;\n\tlong sum59;\n\tlong sum60;\n\tlong sum61;\n\tlong sum62;\n\tlong sum63;\n\tlong sum64;\n\tlong sum65;\n\tlong sum66;\n\tlong sum67;\n\tlong sum68;\n\tlong sum69;\n\tlong sum70;\n\tlong sum71;\n\tlong sum72;\n\tlong sum73;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = bell_Number;",
            "assert(candidate(2L) == 2L);",
            "assert(candidate(3L) == 5L);",
            "assert(candidate(4L) == 15L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.",
        "code": "import std.math;\nimport std.typecons;\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[L];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tlong temp5 = 0;\n\tlong temp6 = 0;\n\tlong temp7 = 0;\n\tlong temp8 = 0;\n\tlong temp9 = 0;\n\tlong temp10 = 0;\n\tlong temp11 = 0;\n\tlong temp12 = 0;\n\tlong temp13 = 0;\n\tlong temp14 = 0;\n\tlong temp15 = 0;\n\tlong temp16 = 0;\n\tlong temp17 = 0;\n\tlong temp18 = 0;\n\tlong temp19 = 0;\n\tlong temp20 = 0;\n\tlong temp21 = 0;\n\tlong temp22 = 0;\n\tlong temp23 = 0;\n\tlong temp24 = 0;\n\tlong temp25 = 0;\n\tlong temp26 = 0;\n\tlong temp27 = 0;\n\tlong temp28 = 0;\n\tlong temp29 = 0;\n\tlong temp30 = 0;\n\tlong temp31 = 0;\n\tlong temp32 = 0;\n\tlong temp33 = 0;\n\tlong temp34 = 0;\n\tlong temp35 = 0;\n\tlong temp36 = 0;\n\tlong temp37 = 0;\n\tlong temp38 = 0;\n\tlong temp39 = 0;\n\tlong temp40 = 0;\n\tlong temp41 = 0;\n\tlong temp42 = 0;\n\tlong temp43 = 0;\n\tlong temp44 = 0;\n\tlong temp45 = 0;\n\tlong temp46 = 0;\n\tlong temp47 = 0;\n\tlong temp48 = 0;\n\tlong temp49 = 0;\n\tlong temp50 = 0;\n\tlong temp51 = 0;\n\tlong temp\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_kth_element;",
            "assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);",
            "assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);",
            "assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as an array of arrays returns the max of then'th column.",
        "code": "import std.math;\nimport std.typecons;\nlong max_of_nth(long[][] test_list, long N) \n{\n\tlong max = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong max_i = 0;\n\tlong max_j = 0;\n\tlong max_k = 0;\n\tlong max_i_j = 0;\n\tlong max_i_k = 0;\n\tlong max_j_k = 0;\n\tlong max_i_j_k = 0;\n\tlong max_i_j_k_max = 0;\n\tlong max_i_j_k_min = 0;\n\tlong max_i_j_k_min_max = 0;\n\tlong max_i_j_k_min_max_i = 0;\n\tlong max_i_j_k_min_max_j = 0;\n\tlong max_i_j_k_min_max_j_max = 0;\n\tlong max_i_j_k_min_max_j_min = 0;\n\tlong max_i_j_k_min_max_j_min_max = 0;\n\tlong max_i_j_k_min_max_j_min_max_i = 0;\n\tlong max_i_j_k_min_max_j_min_max_i_max = 0;\n\tlong max_i_j_k_min_max_j_min_max_i_max = 0;\n\tlong max_i_j_k_min_max_j_min_max_i_max_j = 0;\n\tlong max_i_j_k_min_max_j_min_max_i_max_j = 0;\n\tlong max_i_j_k_min_max_j_min_max_i_max_j_max = 0;\n\tlong max_i_j_k_min_max_j_min_max_i_max_j_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_of_nth;",
            "assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);",
            "assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);",
            "assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given array of arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong cummulative_sum(long[][] test_list) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tfor (int j = 0; j < test_list[i].length; j++) {\n\t\t\tsum += test_list[i][j];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong cummulative_sum_array(long[][] test_list) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tfor (int j = 0; j < test_list[i].length; j++) {\n\t\t\tsum += test_list[i][j];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong cummulative_sum_array_array(long[][] test_list) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tfor (int j = 0; j < test_list[i].length; j++) {\n\t\t\tsum += test_list[i][j];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong cummulative_sum_array_array_array(long[][] test_list) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < test_list.length; i++) {\n\t\tfor (int j = 0; j < test_list[i].length; j++) {\n\t\t\tsum += test_list[i][j];\n\t\t}\n\t}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = cummulative_sum;",
            "assert(candidate([[1L, 3L], [5L, 6L, 7L], [2L, 6L]]) == 30L);",
            "assert(candidate([[2L, 4L], [6L, 7L, 8L], [3L, 7L]]) == 37L);",
            "assert(candidate([[3L, 5L], [7L, 8L, 9L], [4L, 8L]]) == 44L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.",
        "code": "import std.math;\nimport std.typecons;\nfloat[] average_tuple(long[][] nums) \n{\n\tfloat[] result = new float[nums.length];\n\tfor (int i = 0; i < nums.length; i++) {\n\t\tresult[i] = 0;\n\t\tfor (int j = 0; j < nums[i].length; j++) {\n\t\t\tresult[i] += nums[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat[] average_tuple(float[][] nums) \n{\n\tfloat[] result = new float[nums.length];\n\tfor (int i = 0; i < nums.length; i++) {\n\t\tresult[i] = 0;\n\t\tfor (int j = 0; j < nums[i].length; j++) {\n\t\t\tresult[i] += nums[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat[] average_tuple(double[][] nums) \n{\n\tfloat[] result = new float[nums.length];\n\tfor (int i = 0; i < nums.length; i++) {\n\t\tresult[i] = 0;\n\t\tfor (int j = 0; j < nums[i].length; j++) {\n\t\t\tresult[i] += nums[i][j];\n\t\t}\n\t}\n\treturn result;\n}\n\nfloat[] average_tuple(int[][] nums) \n{\n\tfloat[] result = new float[nums.length];\n\tfor (int i = 0; i < nums.length; i++) {\n\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = average_tuple;",
            "assert(candidate([[10L, 10L, 10L, 12L], [30L, 45L, 56L, 45L], [81L, 80L, 39L, 32L], [1L, 2L, 3L, 4L]]) == [30.5, 34.25, 27.0, 23.25]);",
            "assert(candidate([[1L, 1L, -5L], [30L, -15L, 56L], [81L, -60L, -39L], [-10L, 2L, 3L]]) == [25.5, -18.0, 3.75]);",
            "assert(candidate([[100L, 100L, 100L, 120L], [300L, 450L, 560L, 450L], [810L, 800L, 390L, 320L], [10L, 20L, 30L, 40L]]) == [305.0, 342.5, 270.0, 232.5]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, long) tuple_modulo(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tlong result = 0;\n\tlong test_tup1_result = 0;\n\tlong test_tup2_result = 0;\n\t\n\tfor (int i = 0; i < test_tup1.size(); i++)\n\t{\n\t\ttest_tup1_result = test_tup1.get(i);\n\t\ttest_tup2_result = test_tup2.get(i);\n\t\tresult = result + test_tup1_result % test_tup2_result;\n\t}\n\t\n\treturn result;\n}\n\nTuple!(long, long, long, long) tuple_modulo(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n{\n\tlong result = 0;\n\tlong test_tup1_result = 0;\n\tlong test_tup2_result = 0;\n\t\n\tfor (int i = 0; i < test_tup1.size(); i++)\n\t{\n\t\ttest_tup1_result = test_tup1.get(i);\n\t\ttest_tup2_result = test_tup2.get(i);\n\t\tresult = result + test_tup1_result % test_tup2_result;\n\t}\n\t\n\treturn result;\n}\n\nTuple!(long, long, long, long) tuple_modulo(Tuple!(long, long, long, long) test_tup\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = tuple_modulo;",
            "assert(candidate(tuple(10L, 4L, 5L, 6L), tuple(5L, 6L, 7L, 5L)) == tuple(0L, 4L, 5L, 1L));",
            "assert(candidate(tuple(11L, 5L, 6L, 7L), tuple(6L, 7L, 8L, 6L)) == tuple(5L, 5L, 6L, 1L));",
            "assert(candidate(tuple(12L, 6L, 7L, 8L), tuple(7L, 8L, 9L, 7L)) == tuple(5L, 6L, 7L, 1L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "import std.math;\nimport std.typecons;\nfloat min_Jumps(Tuple!(long, long) steps, long d) \n{\n\tfloat min_Jumps = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = min_Jumps;",
            "assert(candidate(tuple(3L, 4L), 11L) == 3.5);",
            "assert(candidate(tuple(3L, 4L), 0L) == 0L);",
            "assert(candidate(tuple(11L, 14L), 11L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two arrays element wise.",
        "code": "import std.math;\nimport std.typecons;\nfloat[] div_list(long[] nums1, long[] nums2) \n{\n\tfloat[] result = new float[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tresult[i] = nums1[i] / nums2[i];\n\t}\n\treturn result;\n}\n\ndouble[] div_list(double[] nums1, double[] nums2) \n{\n\tdouble[] result = new double[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tresult[i] = nums1[i] / nums2[i];\n\t}\n\treturn result;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = div_list;",
            "assert(candidate([4L, 5L, 6L], [1L, 2L, 3L]) == [4.0, 2.5, 2.0]);",
            "assert(candidate([3L, 2L], [1L, 4L]) == [3.0, 0.5]);",
            "assert(candidate([90L, 120L], [50L, 70L]) == [1.8, 1.7142857142857142]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "import std.math;\nimport std.typecons;\nstring move_num(string test_str) \n{\n\tstring temp_str;\n\tint i;\n\tfor (i = 0; i < test_str.length(); i++)\n\t{\n\t\tif (test_str[i] == '0')\n\t\t{\n\t\t\ttemp_str = temp_str + test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_str = temp_str + test_str[i];\n\t\t}\n\t}\n\treturn temp_str;\n}\n\nstring move_num_reverse(string test_str) \n{\n\tstring temp_str;\n\tint i;\n\tfor (i = 0; i < test_str.length(); i++)\n\t{\n\t\tif (test_str[i] == '0')\n\t\t{\n\t\t\ttemp_str = temp_str + test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_str = temp_str + test_str[i];\n\t\t}\n\t}\n\treturn temp_str;\n}\n\nstring move_num_reverse_reverse(string test_str) \n{\n\tstring temp_str;\n\tint i;\n\tfor (i = 0; i < test_str.length(); i++)\n\t{\n\t\tif (test_str[i] == '0')\n\t\t{\n\t\t\ttemp_str = temp_str + test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_str = temp_str + test_str[i];\n\t\t}\n\t}\n\treturn temp_str;\n}\n\nstring move_num_reverse_reverse_reverse(string test_str) \n{\n\tstring temp_str;\n\tint i;\n\tfor\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = move_num;",
            "assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");",
            "assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");",
            "assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a dthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "import std.math;\nimport std.typecons;\nlong count_Substrings(string s) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tsum++;\n\t\telse\n\t\t\tsum = 0;\n\t}\n\treturn sum;\n}\n\nlong count_Substrings_2(string s) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tsum++;\n\t\telse\n\t\t\tsum = 0;\n\t}\n\treturn sum;\n}\n\nlong count_Substrings_3(string s) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tsum++;\n\t\telse\n\t\t\tsum = 0;\n\t}\n\treturn sum;\n}\n\nlong count_Substrings_4(string s) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tsum++;\n\t\telse\n\t\t\tsum = 0;\n\t}\n\treturn sum;\n}\n\nlong count_Substrings_5(string s) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < s.\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_Substrings;",
            "assert(candidate(\"112112\") == 6L);",
            "assert(candidate(\"111\") == 6L);",
            "assert(candidate(\"1101112\") == 12L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted arrays of same size.",
        "code": "import std.math;\nimport std.typecons;\nfloat get_median(long[] arr1, long[] arr2, long n) \n{\n\tfloat sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n1 = 0;\n\tlong n2 = 0;\n\tlong n3 = 0;\n\tlong n4 = 0;\n\tlong n5 = 0;\n\tlong n6 = 0;\n\tlong n7 = 0;\n\tlong n8 = 0;\n\tlong n9 = 0;\n\tlong n10 = 0;\n\tlong n11 = 0;\n\tlong n12 = 0;\n\tlong n13 = 0;\n\tlong n14 = 0;\n\tlong n15 = 0;\n\tlong n16 = 0;\n\tlong n17 = 0;\n\tlong n18 = 0;\n\tlong n19 = 0;\n\tlong n20 = 0;\n\tlong n21 = 0;\n\tlong n22 = 0;\n\tlong n23 = 0;\n\tlong n24 = 0;\n\tlong n25 = 0;\n\tlong n26 = 0;\n\tlong n27 = 0;\n\tlong n28 = 0;\n\tlong n29 = 0;\n\tlong n30 = 0;\n\tlong n31 = 0;\n\tlong n32 = 0;\n\tlong n33 = 0;\n\tlong n34 = 0;\n\tlong n35 = 0;\n\tlong n36 = 0;\n\tlong n37 = 0;\n\tlong n38 = 0;\n\tlong n39 = 0;\n\tlong n40 = 0;\n\tlong n41 = 0;\n\tlong n42 = 0;\n\tlong n43 = 0;\n\tlong n44 = 0;\n\tlong n45 = 0;\n\tlong n46 = 0;\n\tlong n47 = 0;\n\tlong n48 = 0;\n\tlong n49 = 0;\n\tlong n50 = 0;\n\tlong n51 = 0;\n\tlong n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_median;",
            "assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);",
            "assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);",
            "assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tres[i] = nums[i] * nums[i];\n\t\ti++;\n\t}\n\treturn res;\n}\n\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tres[i] = nums[i] * nums[i];\n\t\ti++;\n\t}\n\treturn res;\n}\n\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tres[i] = nums[i] * nums[i];\n\t\ti++;\n\t}\n\treturn res;\n}\n\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tres[i] = nums[i] * nums[i];\n\t\ti++;\n\t}\n\treturn res;\n}\n\nlong[] nth_nums(long[] nums, long n) \n{\n\tlong[] res = new long[n];\n\tlong i = 0;\n\twhile (i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = nth_nums;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);",
            "assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);",
            "assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a dthon function to convert a given string to uppercase.",
        "code": "import std.math;\nimport std.typecons;\nstring is_upper(string string) \n{\n\tstring temp;\n\tstring::iterator it;\n\tfor (it = string.begin(); it!= string.end(); it++)\n\t{\n\t\tif (*it == 'A' || *it == 'a' || *it == 'B' || *it == 'b')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'A';\n\t\t}\n\t\telse if (*it == 'C' || *it == 'c' || *it == 'D' || *it == 'd')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'C';\n\t\t}\n\t\telse if (*it == 'E' || *it == 'e' || *it == 'F' || *it == 'f')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'E';\n\t\t}\n\t\telse if (*it == 'G' || *it == 'g' || *it == 'H' || *it == 'h')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'G';\n\t\t}\n\t\telse if (*it == 'I' || *it == 'i' || *it == 'J' || *it == 'j')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'I';\n\t\t}\n\t\telse if (*it == 'K' || *it == 'k' || *it == 'L' || *it == 'l')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'K';\n\t\t}\n\t\telse if (*it == 'M' || *it =='m' || *it == 'N' || *it == 'n')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'M';\n\t\t}\n\t\telse if (*it == 'O' || *it == 'o' || *it == 'P' || *it == 'p')\n\t\t{\n\t\t\ttemp = *it;\n\t\t\t*it = 'O';\n\t\t}\n\t\telse if (*it == 'Q' || *it == 'q\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_upper;",
            "assert(candidate(\"person\") == \"PERSON\");",
            "assert(candidate(\"final\") == \"FINAL\");",
            "assert(candidate(\"Valid\") == \"VALID\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a dthon function to interchange the first and last element in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] swap_List(long[] newList) \n{\n\tlong[] oldList = new long[newList.length];\n\tlong[] temp = new long[newList.length];\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\toldList[i] = newList[i];\n\t\ttemp[i] = newList[i];\n\t}\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\tnewList[i] = oldList[i];\n\t\toldList[i] = temp[i];\n\t\ttemp[i] = oldList[i];\n\t}\n\treturn newList;\n}\n\nlong[] swap_List_2(long[] newList) \n{\n\tlong[] oldList = new long[newList.length];\n\tlong[] temp = new long[newList.length];\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\toldList[i] = newList[i];\n\t\ttemp[i] = newList[i];\n\t}\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\tnewList[i] = oldList[i];\n\t\toldList[i] = temp[i];\n\t\ttemp[i] = oldList[i];\n\t}\n\treturn newList;\n}\n\nlong[] swap_List_3(long[] newList) \n{\n\tlong[] oldList = new long[newList.length];\n\tlong[] temp = new long[newList.length];\n\tfor(int i = 0; i < newList.length; i++)\n\t{\n\t\toldList[i] = newList[i];\n\t\ttemp[i] = newList[i];\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = swap_List;",
            "assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);",
            "assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a dthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(long) triangle_area(long r) \n{\n\tlong a, b, c;\n\tlong area;\n\t\n\ta = b = c = 0;\n\t\n\tfor (long i = 0; i < r; i++)\n\t{\n\t\ta += (long) std::sqrt(i);\n\t\tb += (long) std::sqrt(i);\n\t\tc += (long) std::sqrt(i);\n\t}\n\t\n\tarea = a * b * c;\n\t\n\treturn area;\n}\n\nNullable(long) triangle_area(long r, long r2) \n{\n\tlong a, b, c;\n\tlong area;\n\t\n\ta = b = c = 0;\n\t\n\tfor (long i = 0; i < r; i++)\n\t{\n\t\ta += (long) std::sqrt(i);\n\t\tb += (long) std::sqrt(i);\n\t\tc += (long) std::sqrt(i);\n\t}\n\t\n\tarea = a * b * c;\n\t\n\treturn area;\n}\n\nNullable(long) triangle_area(long r, long r2, long r3) \n{\n\tlong a, b, c;\n\tlong area;\n\t\n\ta = b = c = 0;\n\t\n\tfor (long i = 0; i < r; i++)\n\t{\n\t\ta += (long) std::sqrt(i);\n\t\tb += (long) std::sqrt(i);\n\t\tc += (long) std::sqrt(i);\n\t}\n\t\n\tarea = a * b * c;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = triangle_area;",
            "{",
            "auto result = candidate(-1L);",
            "assert(result.isNull);",
            "}",
            "{",
            "auto result = candidate(0L);",
            "assert(!result.isNull && result.get == 0L);",
            "}",
            "{",
            "auto result = candidate(2L);",
            "assert(!result.isNull && result.get == 4L);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a dthon function to find the smallest missing number from a sorted array of natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[0];\n\tfor (int i = 1; i < array.length; i++)\n\t{\n\t\tif (array[i] < min)\n\t\t{\n\t\t\tmin = array[i];\n\t\t}\n\t\tif (array[i] > max)\n\t\t{\n\t\t\tmax = array[i];\n\t\t}\n\t}\n\treturn min;\n}\n\nlong find_First_Missing_2(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[0];\n\tfor (int i = 1; i < array.length; i++)\n\t{\n\t\tif (array[i] < min)\n\t\t{\n\t\t\tmin = array[i];\n\t\t}\n\t\tif (array[i] > max)\n\t\t{\n\t\t\tmax = array[i];\n\t\t}\n\t}\n\treturn min;\n}\n\nlong find_First_Missing_3(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[0];\n\tfor (int i = 1; i < array.length; i++)\n\t{\n\t\tif (array[i] < min)\n\t\t{\n\t\t\tmin = array[i];\n\t\t}\n\t\tif (array[i] > max)\n\t\t{\n\t\t\tmax = array[i];\n\t\t}\n\t}\n\treturn min;\n}\n\nlong find_First_Missing_4(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[0];\n\tfor (int i =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_First_Missing;",
            "assert(candidate([0L, 1L, 2L, 3L]) == 4L);",
            "assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);",
            "assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "import std.math;\nimport std.typecons;\nstring replace_spaces(string string) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < string.length(); i++) \n\t{\n\t\tif (string[i] =='') \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_spaces(string string, int start, int end) \n{\n\tstring result = \"\";\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tif (string[i] =='') \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_spaces(string string, int start, int end, int start_pos) \n{\n\tstring result = \"\";\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tif (string[i] =='') \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_spaces(string string, int start, int end, int start_pos, int end_pos) \n{\n\tstring result = \"\";\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tif (string[i] =='') \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += string[i];\n\t\t}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = replace_spaces;",
            "assert(candidate(\"My Name is Dawood\") == \"My%20Name%20is%20Dawood\");",
            "assert(candidate(\"I am a Programmer\") == \"I%20am%20a%20Programmer\");",
            "assert(candidate(\"I love Coding\") == \"I%20love%20Coding\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a dthon function to find even numbers from an array of numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tlong sum = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tsum += list[i];\n\t\tresult[i] = sum % 2;\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tlong sum = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tsum += list[i];\n\t\tresult[i] = sum % 2;\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tlong sum = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tsum += list[i];\n\t\tresult[i] = sum % 2;\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tlong sum = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tsum += list[i];\n\t\tresult[i] = sum % 2;\n\t}\n\treturn result;\n}\n\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tlong sum = 0;\n\tfor (int i = 0; i < list.length; i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = Split;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);",
            "assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);",
            "assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a dthon function to find smallest number in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong smallest_num(long[] xs) \n{\n\tlong min = std.math.Long.MAX_VALUE;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w1 = 0;\n\tlong w2 = 0;\n\tlong w3 = 0;\n\tlong w4 = 0;\n\tlong w5 = 0;\n\tlong w6 = 0;\n\tlong w7 = 0;\n\tlong w8 = 0;\n\tlong w9 = 0;\n\tlong w10 = 0;\n\tlong w11 = 0;\n\tlong w12 = 0;\n\tlong w13 = 0;\n\tlong w14 = 0;\n\tlong w15 = 0;\n\tlong w16 = 0;\n\tlong w17 = 0;\n\tlong w18 = 0;\n\tlong w19 = 0;\n\tlong w20 = 0;\n\tlong w21 = 0;\n\tlong w22 = 0;\n\tlong w23 = 0;\n\tlong w24 = 0;\n\tlong w25 = 0;\n\tlong w26 = 0;\n\tlong w27 = 0;\n\tlong w28 = 0;\n\tlong w29 = 0;\n\tlong w30 = 0;\n\tlong w31 = 0;\n\tlong w32 = 0;\n\tlong w33 = 0;\n\tlong w34 = 0;\n\tlong w35 = 0;\n\tlong w36 = 0;\n\tlong w37 = 0;\n\tlong w38 = 0;\n\tlong w39 = 0;\n\tlong w40 = 0;\n\tlong w41 = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = smallest_num;",
            "assert(candidate([10L, 20L, 1L, 45L, 99L]) == 1L);",
            "assert(candidate([1L, 2L, 3L]) == 1L);",
            "assert(candidate([45L, 46L, 50L, 60L]) == 45L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "import std.math;\nimport std.typecons;\nlong[][] get_coordinates(Tuple!(long, long) test_tup) \n{\n\tlong[][] result = new long[test_tup.size()][2];\n\tfor (int i = 0; i < test_tup.size(); i++) {\n\t\tresult[i][0] = test_tup.get(i);\n\t\tresult[i][1] = test_tup.get(i);\n\t}\n\treturn result;\n}\n\nlong[][] get_coordinates(Tuple!(long, long) test_tup, int n) \n{\n\tlong[][] result = new long[test_tup.size()][2];\n\tfor (int i = 0; i < test_tup.size(); i++) {\n\t\tresult[i][0] = test_tup.get(i);\n\t\tresult[i][1] = test_tup.get(i);\n\t}\n\treturn result;\n}\n\nlong[][] get_coordinates(Tuple!(long, long) test_tup, int n, int m) \n{\n\tlong[][] result = new long[test_tup.size()][2];\n\tfor (int i = 0; i < test_tup.size(); i++) {\n\t\tresult[i][0] = test_tup.get(i);\n\t\tresult[i][1] = test_tup.get(i);\n\t}\n\treturn result;\n}\n\nlong[][] get_coordinates(Tuple!(long, long) test_tup, int n, int m, int nn) \n{\n\tlong[][] result = new long[test_tup.size()\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_coordinates;",
            "assert(candidate(tuple(3L, 4L)) == [[2L, 3L], [2L, 4L], [2L, 5L], [3L, 3L], [3L, 4L], [3L, 5L], [4L, 3L], [4L, 4L], [4L, 5L]]);",
            "assert(candidate(tuple(4L, 5L)) == [[3L, 4L], [3L, 5L], [3L, 6L], [4L, 4L], [4L, 5L], [4L, 6L], [5L, 4L], [5L, 5L], [5L, 6L]]);",
            "assert(candidate(tuple(5L, 6L)) == [[4L, 5L], [4L, 6L], [4L, 7L], [5L, 5L], [5L, 6L], [5L, 7L], [6L, 5L], [6L, 6L], [6L, 7L]]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring replace_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] =='') \n\t\t{\n\t\t\tresult += \"_\";\n\t\t}\n\t\telse if (text[i] == '_') \n\t\t{\n\t\t\tresult += \"_\";\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_all_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] =='') \n\t\t{\n\t\t\tresult += \"_\";\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_all_spaces(string text, string pattern) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] =='') \n\t\t{\n\t\t\tresult += \"_\";\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t\tif (pattern.length() > 0) \n\t\t{\n\t\t\tif (text[i] == pattern[0]) \n\t\t\t{\n\t\t\t\tresult += \"_\";\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult += text[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_all_spaces(string\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = replace_spaces;",
            "assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");",
            "assert(candidate(\"The_Avengers\") == \"The Avengers\");",
            "assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a dthon function to move all zeroes to the end of the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] move_zero(long[] num_list) \n{\n\tlong[] num_list_copy = new long[num_list.length];\n\tfor (int i = 0; i < num_list.length; i++) {\n\t\tif (num_list[i] == 0) {\n\t\t\tnum_list_copy[i] = 0;\n\t\t} else {\n\t\t\tnum_list_copy[i] = num_list[i];\n\t\t}\n\t}\n\treturn num_list_copy;\n}\n\nlong[] move_zero(long[] num_list, int start_index) \n{\n\tlong[] num_list_copy = new long[num_list.length];\n\tfor (int i = start_index; i < num_list.length; i++) {\n\t\tif (num_list[i] == 0) {\n\t\t\tnum_list_copy[i] = 0;\n\t\t} else {\n\t\t\tnum_list_copy[i] = num_list[i];\n\t\t}\n\t}\n\treturn num_list_copy;\n}\n\nlong[] move_zero(long[] num_list, int start_index, int end_index) \n{\n\tlong[] num_list_copy = new long[num_list.length];\n\tfor (int i = start_index; i < end_index; i++) {\n\t\tif (num_list[i] == 0) {\n\t\t\tnum_list_copy[i] = 0;\n\t\t} else {\n\t\t\tnum_list_copy[i] = num_list[i];\n\t\t}\n\t}\n\treturn num_list_copy;\n}\n\nlong[] move_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = move_zero;",
            "assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);",
            "assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);",
            "assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a dthon function to find the sum of xor of all pairs of numbers in the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong pair_xor_Sum(long[] arr, long n) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong xor = 0;\n\tlong sum_xor = 0;\n\tlong sum_xor_p = 0;\n\tlong sum_xor_q = 0;\n\tlong sum_xor_r = 0;\n\tlong sum_xor_s = 0;\n\tlong sum_xor_t = 0;\n\tlong sum_xor_u = 0;\n\tlong sum_xor_v = 0;\n\tlong sum_xor_w = 0;\n\tlong sum_xor_x = 0;\n\tlong sum_xor_y = 0;\n\tlong sum_xor_z = 0;\n\tlong sum_xor_xor = 0;\n\tlong sum_xor_yor = 0;\n\tlong sum_xor_zor = 0;\n\tlong sum_xor_xor_p = 0;\n\tlong sum_xor_xor_q = 0;\n\tlong sum_xor_xor_r = 0;\n\tlong sum_xor_xor_s = 0;\n\tlong sum_xor_xor_t = 0;\n\tlong sum_xor_xor_u = 0;\n\tlong sum_xor_xor_v = 0;\n\tlong sum_xor_xor_w = 0;\n\tlong sum_xor_xor_x = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = pair_xor_Sum;",
            "assert(candidate([5L, 9L, 7L, 6L], 4L) == 47L);",
            "assert(candidate([7L, 3L, 5L], 3L) == 12L);",
            "assert(candidate([7L, 3L], 2L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] heap_sort(long[] iterable) \n{\n\tlong[] temp = new long[iterable.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint temp_index = 0;\n\tint temp_index_max = iterable.length - 1;\n\t\n\twhile (i < temp_index_max) \n\t{\n\t\tif (iterable[i] > iterable[j]) \n\t\t{\n\t\t\ttemp[k] = iterable[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttemp[k] = iterable[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\t\n\tfor (int i = 0; i < temp_index_max; i++) \n\t{\n\t\ttemp[i] = iterable[i];\n\t}\n\t\n\treturn temp;\n}\n\nlong[] heap_sort(long[] iterable, int start, int end) \n{\n\tlong[] temp = new long[iterable.length];\n\tint i = start;\n\tint j = end;\n\tint k = 0;\n\tint temp_index = 0;\n\tint temp_index_max = iterable.length - 1;\n\t\n\twhile (i < temp_index_max) \n\t{\n\t\tif (iterable[i] > iterable[j]) \n\t\t{\n\t\t\ttemp[k] = iterable[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ttemp[k] = iterable[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\t\n\tfor (int i = start; i < end; i++) \n\t{\n\t\ttemp[i] = iterable[i];\n\t}\n\t\n\treturn temp;\n}\n\nlong[] heap_sort(long[] iterable, int start, int end, int\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = heap_sort;",
            "assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);",
            "assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);",
            "assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "import std.math;\nimport std.typecons;\nbool noprofit_noloss(long actual_cost, long sale_amount) \n{\n\tif(actual_cost == 0)\n\t\treturn true;\n\tif(sale_amount == 0)\n\t\treturn false;\n\tif(sale_amount > actual_cost)\n\t\treturn false;\n\tif(sale_amount < actual_cost)\n\t\treturn true;\n\treturn false;\n}\n\nbool noprofit_noloss(long actual_cost, long sale_amount, long profit_amount) \n{\n\tif(actual_cost == 0)\n\t\treturn true;\n\tif(sale_amount == 0)\n\t\treturn false;\n\tif(sale_amount > actual_cost)\n\t\treturn false;\n\tif(sale_amount < actual_cost)\n\t\treturn true;\n\tif(sale_amount - profit_amount < actual_cost)\n\t\treturn true;\n\treturn false;\n}\n\nbool noprofit_noloss(long actual_cost, long sale_amount, long profit_amount, long loss_amount) \n{\n\tif(actual_cost == 0)\n\t\treturn true;\n\tif(sale_amount == 0)\n\t\treturn false;\n\tif(sale_amount > actual_cost)\n\t\treturn false;\n\tif(sale_amount < actual_cost)\n\t\treturn true;\n\tif(sale_amount - profit_amount < actual_cost)\n\t\treturn true;\n\tif(sale_amount - profit_amount - loss_amount < actual_cost)\n\t\treturn true;\n\treturn false;\n}\n\nbool noprofit_noloss(long actual_cost, long sale_amount, long profit_amount, long loss_amount, long profit_loss) \n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = noprofit_noloss;",
            "assert(candidate(1500L, 1200L) == false);",
            "assert(candidate(100L, 100L) == true);",
            "assert(candidate(2000L, 5000L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "import std.math;\nimport std.typecons;\nlong wind_chill(long v, long t) \n{\n\tlong wind_chill = 0;\n\t\n\tif (v > 0)\n\t{\n\t\twind_chill = (v * std.math.pow(10, t)) / (std.math.pow(10, t) * std.math.pow(10, t));\n\t}\n\t\n\treturn wind_chill;\n}\n\nlong wind_speed(long v, long t) \n{\n\tlong wind_speed = 0;\n\t\n\tif (v > 0)\n\t{\n\t\twind_speed = (v * std.math.pow(10, t)) / (std.math.pow(10, t) * std.math.pow(10, t));\n\t}\n\t\n\treturn wind_speed;\n}\n\nlong wind_speed_c(long v, long t) \n{\n\tlong wind_speed = 0;\n\t\n\tif (v > 0)\n\t{\n\t\twind_speed = (v * std.math.pow(10, t)) / (std.math.pow(10, t) * std.math.pow(10, t));\n\t}\n\t\n\treturn wind_speed;\n}\n\nlong wind_speed_h(long v, long t) \n{\n\tlong wind_speed = 0;\n\t\n\tif (v > 0)\n\t{\n\t\twind_speed = (v * std.math.pow(10, t)) / (std.math.pow(10, t) * std.math.pow(10, t));\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = wind_chill;",
            "assert(candidate(120L, 35L) == 40L);",
            "assert(candidate(40L, 20L) == 19L);",
            "assert(candidate(10L, 8L) == 6L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.",
        "code": "import std.math;\nimport std.typecons;\nlong sample_nam(string[] sample_names) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.length; i++)\n\t{\n\t\tif (sample_names[i].length() > 0)\n\t\t{\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sample_nam_lower(string[] sample_names) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.length; i++)\n\t{\n\t\tif (sample_names[i].length() > 0)\n\t\t{\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sample_nam_lower_lower(string[] sample_names) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.length; i++)\n\t{\n\t\tif (sample_names[i].length() > 0)\n\t\t{\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong sample_nam_lower_lower_lower(string[] sample_names) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.length; i++)\n\t{\n\t\tif (sample_names[i].length() > 0)\n\t\t{\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sample_nam;",
            "assert(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16L);",
            "assert(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10L);",
            "assert(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given tuple array.",
        "code": "import std.math;\nimport std.typecons;\nlong max_difference(Tuple!(long, long)[] test_list) \n{\n\tlong max_difference = 0;\n\tlong i, j;\n\tlong max_i = 0;\n\tlong max_j = 0;\n\tlong max_difference_i = 0;\n\tlong max_difference_j = 0;\n\tlong max_i_difference = 0;\n\tlong max_j_difference = 0;\n\tlong max_i_difference_i = 0;\n\tlong max_j_difference_j = 0;\n\tlong max_i_difference_i_j = 0;\n\tlong max_j_difference_i_j_j = 0;\n\tlong max_i_difference_i_j_j_j = 0;\n\tlong max_i_difference_i_j_j_j_j = 0;\n\tlong max_i_difference_i_j_j_j_j_j = 0;\n\tlong max_i_difference_i_j_j_j_j_j_j = 0;\n\tlong max_i_difference_i_j_j_j_j_j_j_j = 0;\n\tlong max_i_difference_i_j_j_j_j_j_j_j_j_j = 0;\n\tlong max_i_difference_i_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_difference;",
            "assert(candidate([tuple(3L, 5L), tuple(1L, 7L), tuple(10L, 3L), tuple(1L, 2L)]) == 7L);",
            "assert(candidate([tuple(4L, 6L), tuple(2L, 17L), tuple(9L, 13L), tuple(11L, 12L)]) == 15L);",
            "assert(candidate([tuple(12L, 35L), tuple(21L, 27L), tuple(13L, 23L), tuple(41L, 22L)]) == 23L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_parenthesis(string[] items) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < items.length; i++) \n\t{\n\t\tif (items[i].substr(0,1) == \"(\" && items[i].substr(items[i].length-1,1) == \")\") \n\t\t{\n\t\t\tresult = result + items[i].substr(1,items[i].length-2);\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_parenthesis(string[] items) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < items.length; i++) \n\t{\n\t\tif (items[i].substr(0,1) == \"(\" && items[i].substr(items[i].length-1,1) == \")\") \n\t\t{\n\t\t\tresult = result + items[i].substr(1,items[i].length-2);\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_parenthesis(string[] items) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < items.length; i++) \n\t{\n\t\tif (items[i].substr(0,1) == \"(\" && items[i].substr(items[i].length-1,1) == \")\") \n\t\t{\n\t\t\tresult = result + items[i].substr(1,items[i].length-2);\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_parenthesis(string[] items) \n{\n\tstring result = \"\";\n\tfor (int i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_parenthesis;",
            "assert(candidate([\"python (chrome)\"]) == \"python\");",
            "assert(candidate([\"string(.abc)\"]) == \"string\");",
            "assert(candidate([\"alpha(num)\"]) == \"alpha\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "import std.math;\nimport std.typecons;\nlong is_nonagonal(long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong sum;\n\tlong sum2;\n\tlong sum3;\n\tlong sum4;\n\tlong sum5;\n\tlong sum6;\n\tlong sum7;\n\tlong sum8;\n\tlong sum9;\n\tlong sum10;\n\tlong sum11;\n\tlong sum12;\n\tlong sum13;\n\tlong sum14;\n\tlong sum15;\n\tlong sum16;\n\tlong sum17;\n\tlong sum18;\n\tlong sum19;\n\tlong sum20;\n\tlong sum21;\n\tlong sum22;\n\tlong sum23;\n\tlong sum24;\n\tlong sum25;\n\tlong sum26;\n\tlong sum27;\n\tlong sum28;\n\tlong sum29;\n\tlong sum30;\n\tlong sum31;\n\tlong sum32;\n\tlong sum33;\n\tlong sum34;\n\tlong sum35;\n\tlong sum36;\n\tlong sum37;\n\tlong sum38;\n\tlong sum39;\n\tlong sum40;\n\tlong sum41;\n\tlong sum42;\n\tlong sum43;\n\tlong sum44;\n\tlong sum45;\n\tlong sum46;\n\tlong sum47;\n\tlong sum48;\n\tlong sum49;\n\tlong sum50;\n\tlong sum51;\n\tlong sum52;\n\tlong sum53;\n\tlong sum54;\n\tlong sum55;\n\tlong sum56;\n\tlong sum57;\n\tlong sum58;\n\tlong sum59;\n\tlong sum60;\n\tlong sum61;\n\tlong sum62;\n\tlong sum63;\n\tlong sum64;\n\tlong sum65;\n\tlong sum66;\n\tlong sum67;\n\tlong sum68;\n\tlong sum69;\n\tlong sum70;\n\tlong sum71;\n\tlong sum72;\n\tlong sum73;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_nonagonal;",
            "assert(candidate(10L) == 325L);",
            "assert(candidate(15L) == 750L);",
            "assert(candidate(18L) == 1089L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "import std.math;\nimport std.typecons;\nbool text_match_wordz_middle(string text) \n{\n\tstring::size_type pos = 0;\n\tstring::size_type pos_end = text.find_first_of(\"z\");\n\tstring::size_type pos_start = 0;\n\tstring::size_type pos_end = text.find_last_of(\"z\");\n\t\n\tif (pos_end == string::npos)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (pos_end == pos)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (pos_start == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (pos_start == pos_end)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\nbool text_match_wordz_end(string text) \n{\n\tstring::size_type pos = 0;\n\tstring::size_type pos_end = text.find_last_of(\"z\");\n\tstring::size_type pos_start = text.find_first_of(\"z\");\n\t\n\tif (pos_end == string::npos)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (pos_end == pos)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (pos_start == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (pos_start == pos_end)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\nbool text_match_wordz(string text) \n{\n\tstring::size_type pos = 0;\n\tstring::size_type pos_end = text.find_first_of(\"z\");\n\tstring::size_type pos_start = 0;\n\tstring::size_type pos_end = text.find_last_of(\"z\");\n\t\n\tif (pos_end == string::npos)\n\t{\n\t\treturn false\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_match_wordz_middle;",
            "assert(candidate(\"pythonzabc.\") == true);",
            "assert(candidate(\"zxyabc.\") == false);",
            "assert(candidate(\"  lang  .\") == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a dthon function to reverse an array upto a given position.",
        "code": "import std.math;\nimport std.typecons;\nlong[] reverse_Array_Upto_K(long[] input, long k) \n{\n\tlong[] output = new long[input.length];\n\tlong i = 0;\n\tlong j = input.length - 1;\n\tlong k_ = k;\n\tlong k_max = input.length - 1;\n\tlong k_min = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\tlong k_min_ = 0;\n\tlong k_max_ = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = reverse_Array_Upto_K;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);",
            "assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);",
            "assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort an array of tuples using the second value of each tuple.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, long)[] subject_marks(Tuple!(string, long)[] subjectmarks) \n{\n\tTuple!(string, long)[] subjectmarks_array = new Tuple!(string, long)[]{};\n\t\n\tfor (int i = 0; i < subjectmarks.length; i++) {\n\t\tsubjectmarks_array[i] = subjectmarks[i];\n\t}\n\t\n\tstd.sort(subjectmarks_array, subjectmarks_array, new std.function<Tuple!(string, long)[]>() {\n\t\tpublic Tuple!(string, long)[] call() {\n\t\t\treturn subjectmarks_array;\n\t\t}\n\t});\n\t\n\treturn subjectmarks_array;\n}\n\nTuple!(string, long)[] subject_marks(Tuple!(string, long)[] subjectmarks) \n{\n\tTuple!(string, long)[] subjectmarks_array = new Tuple!(string, long)[]{};\n\t\n\tfor (int i = 0; i < subjectmarks.length; i++) {\n\t\tsubjectmarks_array[i] = subjectmarks[i];\n\t}\n\t\n\tstd.sort(subjectmarks_array, subjectmarks_array, new std.function<Tuple!(string, long)[]>() {\n\t\tpublic Tuple!(string, long)[] call() {\n\t\t\treturn subjectmarks_array;\n\t\t}\n\t});\n\t\n\treturn subjectmarks_array;\n}\n\nTuple!(string, long)[] subject_marks(Tuple!(string, long)[] subjectmarks) \n{\n\tTuple!(string, long)[] subjectmarks_array = new Tuple!(string, long)[]{};\n\t\n\tfor (int i = 0; i < subjectmarks.length; i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = subject_marks;",
            "assert(candidate([tuple(\"English\", 88L), tuple(\"Science\", 90L), tuple(\"Maths\", 97L), tuple(\"Social sciences\", 82L)]) == [tuple(\"Social sciences\", 82L), tuple(\"English\", 88L), tuple(\"Science\", 90L), tuple(\"Maths\", 97L)]);",
            "assert(candidate([tuple(\"Telugu\", 49L), tuple(\"Hindhi\", 54L), tuple(\"Social\", 33L)]) == [tuple(\"Social\", 33L), tuple(\"Telugu\", 49L), tuple(\"Hindhi\", 54L)]);",
            "assert(candidate([tuple(\"Physics\", 96L), tuple(\"Chemistry\", 97L), tuple(\"Biology\", 45L)]) == [tuple(\"Biology\", 45L), tuple(\"Physics\", 96L), tuple(\"Chemistry\", 97L)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a dthon function to count the number of positive numbers in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong pos_count(long[] list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] > 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong neg_count(long[] list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] < 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong pos_neg_count(long[] list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] > 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (list[i] < 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong neg_neg_count(long[] list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] > 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (list[i] < 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (list[i] < 0) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong pos\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = pos_count;",
            "assert(candidate([1L, -2L, 3L, -4L]) == 2L);",
            "assert(candidate([3L, 4L, 5L, -1L]) == 3L);",
            "assert(candidate([1L, 2L, 3L, 4L]) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong bell_number(long n) \n{\n\tlong i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = bell_number;",
            "assert(candidate(2L) == 2L);",
            "assert(candidate(10L) == 115975L);",
            "assert(candidate(56L) == 6775685320645824322581483068371419745979053216268760300L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a dthon function to check whether the given array is monotonic or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_Monotonic(long[] A) \n{\n\tlong n = A.length;\n\tlong i = 0;\n\tlong j = n-1;\n\twhile (i < n) \n\t{\n\t\tif (A[i] > A[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (A[i] < A[j]) \n\t\t{\n\t\t\tj--;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool is_NotMonotonic(long[] A) \n{\n\tlong n = A.length;\n\tlong i = 0;\n\tlong j = n-1;\n\twhile (i < n) \n\t{\n\t\tif (A[i] > A[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (A[i] < A[j]) \n\t\t{\n\t\t\tj--;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool is_NotMonotonic(long[] A) \n{\n\tlong n = A.length;\n\tlong i = 0;\n\tlong j = n-1;\n\twhile (i < n) \n\t{\n\t\tif (A[i] > A[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (A[i] < A[j]) \n\t\t{\n\t\t\tj--;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool is\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_Monotonic;",
            "assert(candidate([6L, 5L, 4L, 4L]) == true);",
            "assert(candidate([1L, 2L, 2L, 3L]) == true);",
            "assert(candidate([1L, 3L, 2L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether an array contains the given subarray or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_sublist(long[] l, long[] s) \n{\n\tif(l.length!= s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i]!= s[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool is_sublist(int[] l, int[] s) \n{\n\tif(l.length!= s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i]!= s[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool is_sublist(short[] l, short[] s) \n{\n\tif(l.length!= s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i]!= s[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool is_sublist(char[] l, char[] s) \n{\n\tif(l.length!= s.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i]!= s[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool is_sublist(byte[] l, byte[] s) \n{\n\tif(l.length!= s.\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_sublist;",
            "assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);",
            "assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);",
            "assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a dthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "import std.math;\nimport std.typecons;\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong diff = a - b;\n\tif (diff == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool differ_At_One_Bit_Pos_2(long a, long b) \n{\n\tlong diff = a - b;\n\tif (diff == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool differ_At_One_Bit_Pos_3(long a, long b) \n{\n\tlong diff = a - b;\n\tif (diff == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool differ_At_One_Bit_Pos_4(long a, long b) \n{\n\tlong diff = a - b;\n\tif (diff == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool differ_At_One_Bit_Pos_5(long a, long b) \n{\n\tlong diff = a - b;\n\tif (diff == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool differ_At_One_Bit_Pos_6(long a, long b) \n{\n\tlong diff = a - b;\n\tif (diff == 0)\n\t\treturn true;\n\telse\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = differ_At_One_Bit_Pos;",
            "assert(candidate(13L, 9L) == true);",
            "assert(candidate(15L, 8L) == false);",
            "assert(candidate(2L, 4L) == false);",
            "assert(candidate(2L, 3L) == true);",
            "assert(candidate(5L, 1L) == true);",
            "assert(candidate(1L, 5L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given arrays have equal length or not.",
        "code": "import std.math;\nimport std.typecons;\nbool get_equal(long[][] Input) \n{\n\tlong i,j;\n\tlong length;\n\tfor(i=0;i<Input.length;i++)\n\t{\n\t\tlength=Input[i].length;\n\t\tfor(j=0;j<length;j++)\n\t\t{\n\t\t\tif(Input[i][j]!=Input[i][j])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nlong max(long[][] Input) \n{\n\tlong i,j;\n\tlong max;\n\tfor(i=0;i<Input.length;i++)\n\t{\n\t\tmax=0;\n\t\tfor(j=0;j<Input[i].length;j++)\n\t\t{\n\t\t\tif(Input[i][j]>max)\n\t\t\t\tmax=Input[i][j];\n\t\t}\n\t\tif(max==0)\n\t\t\treturn 0;\n\t}\n\treturn max;\n}\n\nlong min(long[][] Input) \n{\n\tlong i,j;\n\tlong min;\n\tfor(i=0;i<Input.length;i++)\n\t{\n\t\tmin=0;\n\t\tfor(j=0;j<Input[i].length;j++)\n\t\t{\n\t\t\tif(Input[i][j]<min)\n\t\t\t\tmin=Input[i][j];\n\t\t}\n\t\tif(min==0)\n\t\t\treturn 0;\n\t}\n\treturn min;\n}\n\nlong sum(long[][] Input) \n{\n\tlong i,j;\n\tlong sum;\n\tfor(i=0;i<Input.length;i++)\n\t{\n\t\tsum=0;\n\t\tfor(j=0;j<Input[\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_equal;",
            "assert(candidate([[11L, 22L, 33L], [44L, 55L, 66L]]) == true);",
            "assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L, 7L]]) == false);",
            "assert(candidate([[1L, 2L], [3L, 4L]]) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "import std.math;\nimport std.typecons;\nlong[] comb_sort(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tlong[] temp = new long[nums.length];\n\tlong[] temp2 = new long[nums.length];\n\tlong[] temp3 = new long[nums.length];\n\tlong[] temp4 = new long[nums.length];\n\tlong[] temp5 = new long[nums.length];\n\tlong[] temp6 = new long[nums.length];\n\tlong[] temp7 = new long[nums.length];\n\tlong[] temp8 = new long[nums.length];\n\tlong[] temp9 = new long[nums.length];\n\tlong[] temp10 = new long[nums.length];\n\tlong[] temp11 = new long[nums.length];\n\tlong[] temp12 = new long[nums.length];\n\tlong[] temp13 = new long[nums.length];\n\tlong[] temp14 = new long[nums.length];\n\tlong[] temp15 = new long[nums.length];\n\tlong[] temp16 = new long[nums.length];\n\tlong[] temp17 = new long[nums.length];\n\tlong[] temp18 = new long[nums.length];\n\tlong[] temp19 = new long[nums.length];\n\tlong[] temp20 = new long[nums.length];\n\tlong[] temp21 = new long[nums.length];\n\tlong[] temp22 = new long[nums.length];\n\tlong[] temp23 = new long[nums.length];\n\tlong[] temp24 = new long[nums.length];\n\tlong[] temp25 = new long[nums.length];\n\tlong[] temp26 = new long[nums.length];\n\tlong[] temp27 = new long[nums.length];\n\tlong[] temp28 = new long[nums.length];\n\tlong[] temp29 = new long[nums.length];\n\tlong[] temp30 = new long[nums.length];\n\tlong[]\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = comb_sort;",
            "assert(candidate([5L, 15L, 37L, 25L, 79L]) == [5L, 15L, 25L, 37L, 79L]);",
            "assert(candidate([41L, 32L, 15L, 19L, 22L]) == [15L, 19L, 22L, 32L, 41L]);",
            "assert(candidate([99L, 15L, 13L, 47L]) == [13L, 15L, 47L, 99L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add an associative array to the tuple. The output should be a tuple.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup, Nullable!(long[string]) test_dict) \n{\n\tlong[string] = 1;\n\treturn test_tup;\n}\n\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup, Nullable!(long[string]) test_dict) \n{\n\tlong[string] = 1;\n\treturn test_tup;\n}\n\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup, Nullable!(long[string]) test_dict) \n{\n\tlong[string] = 1;\n\treturn test_tup;\n}\n\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup, Nullable!(long[string]) test_dict) \n{\n\tlong[string] = 1;\n\treturn test_tup;\n}\n\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup,\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = add_dict_to_tuple;",
            "assert(candidate(tuple(4L, 5L, 6L), [\"MSAM\": 1L, \"is\": 2L, \"best\": 3L].nullable) == tuple(4L, 5L, 6L, [\"MSAM\": 1L, \"is\": 2L, \"best\": 3L].nullable));",
            "assert(candidate(tuple(1L, 2L, 3L), [\"UTS\": 2L, \"is\": 3L, \"Worst\": 4L].nullable) == tuple(1L, 2L, 3L, [\"UTS\": 2L, \"is\": 3L, \"Worst\": 4L].nullable));",
            "assert(candidate(tuple(8L, 9L, 10L), [\"POS\": 3L, \"is\": 4L, \"Okay\": 5L].nullable) == tuple(8L, 9L, 10L, [\"POS\": 3L, \"is\": 4L, \"Okay\": 5L].nullable));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "import std.math;\nimport std.typecons;\nfloat maxAverageOfPath(long[][] cost) \n{\n\tfloat max = 0;\n\tint maxIndex = 0;\n\tfor (int i = 0; i < cost.length; i++) {\n\t\tfor (int j = 0; j < cost[i].length; j++) {\n\t\t\tif (cost[i][j] > max) {\n\t\t\t\tmax = cost[i][j];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nfloat maxAverageOfPath(long[][] cost) \n{\n\tfloat max = 0;\n\tint maxIndex = 0;\n\tfor (int i = 0; i < cost.length; i++) {\n\t\tfor (int j = 0; j < cost[i].length; j++) {\n\t\t\tif (cost[i][j] > max) {\n\t\t\t\tmax = cost[i][j];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.",
        "code": "import std.math;\nimport std.typecons;\nlong count_same_pair(long[] nums1, long[] nums2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tif (nums1[i] == nums2[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_diff_pair(long[] nums1, long[] nums2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tif (nums1[i]!= nums2[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_diff_pair_2(long[] nums1, long[] nums2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tif (nums1[i]!= nums2[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_diff_pair_3(long[] nums1, long[] nums2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < nums1.length; i++) {\n\t\tif (nums1[i]!= nums2[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "import std.math;\nimport std.typecons;\nlong power_base_sum(long base, long power) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = power_base_sum;",
            "assert(candidate(2L, 100L) == 115L);",
            "assert(candidate(8L, 10L) == 37L);",
            "assert(candidate(8L, 15L) == 62L);",
            "assert(candidate(3L, 3L) == 9L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "import std.math;\nimport std.typecons;\nlong[] sum_list(long[] lst1, long[] lst2) \n{\n\tlong[] res = new long[lst1.length + lst2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong sum = 0;\n\tlong sum2 = 0;\n\tlong sum3 = 0;\n\tlong sum4 = 0;\n\tlong sum5 = 0;\n\tlong sum6 = 0;\n\tlong sum7 = 0;\n\tlong sum8 = 0;\n\tlong sum9 = 0;\n\tlong sum10 = 0;\n\tlong sum11 = 0;\n\tlong sum12 = 0;\n\tlong sum13 = 0;\n\tlong sum14 = 0;\n\tlong sum15 = 0;\n\tlong sum16 = 0;\n\tlong sum17 = 0;\n\tlong sum18 = 0;\n\tlong sum19 = 0;\n\tlong sum20 = 0;\n\tlong sum21 = 0;\n\tlong sum22 = 0;\n\tlong sum23 = 0;\n\tlong sum24 = 0;\n\tlong sum25 = 0;\n\tlong sum26 = 0;\n\tlong sum27 = 0;\n\tlong sum28 = 0;\n\tlong sum29 = 0;\n\tlong sum30 = 0;\n\tlong sum31 = 0;\n\tlong sum32 = 0;\n\tlong sum33 = 0;\n\tlong sum34 = 0;\n\tlong sum35 = 0;\n\tlong sum36 = 0;\n\tlong sum37 = 0;\n\tlong sum38 = 0;\n\tlong sum39 = 0;\n\tlong sum40 = 0;\n\tlong sum41 = 0;\n\tlong sum42 = 0;\n\tlong sum43 = 0;\n\tlong sum44 = 0;\n\tlong sum45 = 0;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_list;",
            "assert(candidate([10L, 20L, 30L], [15L, 25L, 35L]) == [25L, 45L, 65L]);",
            "assert(candidate([1L, 2L, 3L], [5L, 6L, 7L]) == [6L, 8L, 10L]);",
            "assert(candidate([15L, 20L, 30L], [15L, 45L, 75L]) == [30L, 65L, 105L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a dthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "import std.math;\nimport std.typecons;\nbool dif_Square(long n) \n{\n\tif(n == 0)\n\t\treturn true;\n\tif(n == 1)\n\t\treturn false;\n\tif(n == 2)\n\t\treturn true;\n\tif(n == 3)\n\t\treturn false;\n\tif(n == 4)\n\t\treturn true;\n\tif(n == 5)\n\t\treturn false;\n\tif(n == 6)\n\t\treturn true;\n\tif(n == 7)\n\t\treturn false;\n\tif(n == 8)\n\t\treturn true;\n\tif(n == 9)\n\t\treturn false;\n\tif(n == 10)\n\t\treturn true;\n\tif(n == 11)\n\t\treturn false;\n\tif(n == 12)\n\t\treturn true;\n\tif(n == 13)\n\t\treturn false;\n\tif(n == 14)\n\t\treturn true;\n\tif(n == 15)\n\t\treturn false;\n\tif(n == 16)\n\t\treturn true;\n\tif(n == 17)\n\t\treturn false;\n\tif(n == 18)\n\t\treturn true;\n\tif(n == 19)\n\t\treturn false;\n\tif(n == 20)\n\t\treturn true;\n\tif(n == 21)\n\t\treturn false;\n\tif(n == 22)\n\t\treturn true;\n\tif(n == 23)\n\t\treturn false;\n\tif(n == 24)\n\t\treturn true;\n\tif(n == 25)\n\t\treturn false;\n\tif(n == 26)\n\t\treturn true;\n\tif(n == 27)\n\t\treturn false;\n\tif(n == 28)\n\t\treturn true;\n\tif(n == 29)\n\t\treturn false;\n\tif(n == 30)\n\t\treturn true;\n\tif(n == 31)\n\t\treturn false;\n\tif(n == 32)\n\t\treturn true;\n\tif(n == 33)\n\t\treturn false;\n\tif(n == 34)\n\t\treturn true;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = dif_Square;",
            "assert(candidate(5L) == true);",
            "assert(candidate(10L) == false);",
            "assert(candidate(15L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "import std.math;\nimport std.typecons;\nfloat lateralsurface_cone(long r, long h) \n{\n\tfloat area = 0;\n\tfloat r2 = r*r;\n\tfloat h2 = h*h;\n\tfloat r3 = r2*r2;\n\tfloat h3 = h2*h2;\n\tfloat r4 = r3*r3;\n\tfloat h4 = h3*h3;\n\tfloat r5 = r4*r4;\n\tfloat h5 = h4*h4;\n\tfloat r6 = r5*r5;\n\tfloat h6 = h5*h5;\n\tfloat r7 = r6*r6;\n\tfloat h7 = h6*h6;\n\tfloat r8 = r7*r7;\n\tfloat h8 = h7*h7;\n\tfloat r9 = r8*r8;\n\tfloat h9 = h8*h8;\n\tfloat r10 = r9*r9;\n\tfloat h10 = h9*h9;\n\tfloat r11 = r10*r10;\n\tfloat h11 = h10*h10;\n\tfloat r12 = r11*r11;\n\tfloat h12 = h11*h11;\n\tfloat r13 = r12*r12;\n\tfloat h13 = h12*h12;\n\tfloat r14 = r13*r13;\n\tfloat h14 = h13*h13;\n\tfloat r15 = r14*r14;\n\tfloat h15 = h14*h14;\n\tfloat r16 = r15*r15;\n\tfloat h16 = h15*h15;\n\tfloat r17 = r16*r16;\n\tfloat h17 = h16*h16;\n\tfloat r18 = r17*r17;\n\tfloat h18 = h17*h17;\n\tfloat r19 = r18*r18;\n\tfloat h19 = h18*h18;\n\tfloat r20 = r19*r19;\n\tfloat h20 = h\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = lateralsurface_cone;",
            "assert(candidate(5L, 12L) == 204.20352248333654);",
            "assert(candidate(10L, 15L) == 566.3586699569488);",
            "assert(candidate(19L, 17L) == 1521.8090132193388);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "import std.math;\nimport std.typecons;\nstring replace_specialchar(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] =='' || text[i] == ',' || text[i] == '.') \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_specialchar_with_colon(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] =='' || text[i] == ',' || text[i] == '.') \n\t\t{\n\t\t\tresult += \":\" + text[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += \":\" + text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_specialchar_with_colon_with_space(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i] =='' || text[i] == ',' || text[i] == '.') \n\t\t{\n\t\t\tresult += \" \" + text[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += \" \" + text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring replace_specialchar_with_colon_with_space_with_space(string text) \n{\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = replace_specialchar;",
            "assert(candidate(\"Python language, Programming language.\") == \"Python:language::Programming:language:\");",
            "assert(candidate(\"a b c,d e f\") == \"a:b:c:d:e:f\");",
            "assert(candidate(\"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "import std.math;\nimport std.typecons;\nlong find_first_occurrence(long[] A, long x) \n{\n\tlong i = 0;\n\tlong j = A.length - 1;\n\twhile (i < j) \n\t{\n\t\tif (A[i] == x) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\telse if (A[i] < x) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn -1;\n}\n\nlong find_first_occurrence(long[] A, long x, long y) \n{\n\tlong i = 0;\n\tlong j = A.length - 1;\n\twhile (i < j) \n\t{\n\t\tif (A[i] == x && A[j] == y) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\telse if (A[i] < x && A[j] < y) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn -1;\n}\n\nlong find_first_occurrence(long[] A, long x, long y, long z) \n{\n\tlong i = 0;\n\tlong j = A.length - 1;\n\twhile (i < j) \n\t{\n\t\tif (A[i] == x && A[j] == y && A[j] == z) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\telse if (A[i] < x && A[j] < y && A[j] < z) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn -1;\n}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_first_occurrence;",
            "assert(candidate([2L, 5L, 5L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 5L) == 1L);",
            "assert(candidate([2L, 3L, 5L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 5L) == 2L);",
            "assert(candidate([2L, 4L, 1L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 6L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a dthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "import std.math;\nimport std.typecons;\nlong sum_Of_Subarray_Prod(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n\nlong sum_Of_Subarray_Prod_2(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n\nlong sum_Of_Subarray_Prod_3(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n\nlong sum_Of_Subarray_Prod_4(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a dthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "import std.math;\nimport std.typecons;\nlong toggle_middle_bits(long n) \n{\n\tlong i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = toggle_middle_bits;",
            "assert(candidate(9L) == 15L);",
            "assert(candidate(10L) == 12L);",
            "assert(candidate(11L) == 13L);",
            "assert(candidate(65L) == 127L);",
            "assert(candidate(77L) == 115L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/dthon-exercises/data-structures-and-algorithms/dthon-data-structure-exercise-24.php",
        "code": "import std.math;\nimport std.typecons;\nlong left_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x_ = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong x_1 = 0;\n\tlong y_1 = 0;\n\tlong z_1 = 0;\n\tlong x_2 = 0;\n\tlong y_2 = 0;\n\tlong z_2 = 0;\n\tlong x_3 = 0;\n\tlong y_3 = 0;\n\tlong z_3 = 0;\n\tlong x_4 = 0;\n\tlong y_4 = 0;\n\tlong z_4 = 0;\n\tlong x_5 = 0;\n\tlong y_5 = 0;\n\tlong z_5 = 0;\n\tlong x_6 = 0;\n\tlong y_6 = 0;\n\tlong z_6 = 0;\n\tlong x_7 = 0;\n\tlong y_7 = 0;\n\tlong z_7 = 0;\n\tlong x_8 = 0;\n\tlong y_8 = 0;\n\tlong z_8 = 0;\n\tlong x_9 = 0;\n\tlong y_9 = 0;\n\tlong z_9 = 0;\n\tlong x_10 = 0;\n\tlong y_10 = 0;\n\tlong z_10 = 0;\n\tlong x_11 = 0;\n\tlong y_11 = 0;\n\tlong z_11\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = left_insertion;",
            "assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);",
            "assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);",
            "assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "import std.math;\nimport std.typecons;\nbool check_str(string string) \n{\n\tstring::iterator it = string.begin();\n\tstring::iterator it_end = string.end();\n\t\n\twhile (it!= it_end) \n\t{\n\t\tif (std::isspace(*it)) \n\t\t{\n\t\t\tif (*it == 'a' || *it == 'A') \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (*it == 'v' || *it == 'V') \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tit++;\n\t}\n\treturn false;\n}\n\nbool check_str(string string) \n{\n\tstring::iterator it = string.end();\n\tstring::iterator it_end = string.begin();\n\t\n\twhile (it!= it_end) \n\t{\n\t\tif (std::isspace(*it)) \n\t\t{\n\t\t\tif (*it == 'a' || *it == 'A') \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (*it == 'v' || *it == 'V') \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tit--;\n\t}\n\treturn false;\n}\n\nbool check_str(string string) \n{\n\tstring::iterator it = string.end();\n\tstring::iterator it_end = string.begin();\n\t\n\twhile (it!= it_end) \n\t{\n\t\tif (\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_str;",
            "assert(candidate(\"annie\") == true);",
            "assert(candidate(\"dawood\") == false);",
            "assert(candidate(\"Else\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/dthon-exercises/data-structures-and-algorithms/dthon-recursion-exercise-9.php",
        "code": "import std.math;\nimport std.typecons;\nfloat geometric_sum(long n) \n{\n\tfloat sum = 0;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += std::pow(i, 2);\n\t}\n\treturn sum;\n}\n\nfloat geometric_sum_recursive(long n) \n{\n\tfloat sum = 0;\n\tif (n == 0)\n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 1)\n\t{\n\t\treturn sum;\n\t}\n\telse\n\t{\n\t\tsum = geometric_sum_recursive(n - 1);\n\t\tsum += geometric_sum(n - 1);\n\t\treturn sum;\n\t}\n}\n\nfloat geometric_sum_recursive_recursive(long n) \n{\n\tfloat sum = 0;\n\tif (n == 0)\n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 1)\n\t{\n\t\treturn sum;\n\t}\n\telse\n\t{\n\t\tsum = geometric_sum_recursive_recursive(n - 1);\n\t\tsum += geometric_sum_recursive(n - 1);\n\t\tsum += geometric_sum(n - 1);\n\t\treturn sum;\n\t}\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a dthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "import std.math;\nimport std.typecons;\nlong find_Index(long n) \n{\n\tlong i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Index;",
            "assert(candidate(2L) == 4L);",
            "assert(candidate(3L) == 14L);",
            "assert(candidate(4L) == 45L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given tuple to a key-value associative array using adjacent elements. https://www.geeksforgeeks.org/dthon-convert-tuple-to-adjacent-pair-associative array/",
        "code": "import std.math;\nimport std.typecons;\nNullable!(long[long]) tuple_to_dict(Tuple!(long, long, long, long, long, long) test_tup) \n{\n\tlong[long] key_value = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj = {0, 0, 0, 0, 0, 0};\n\tlong[long] key_value_adj_adj_adj_adj\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = tuple_to_dict;",
            "{",
            "auto result = candidate(tuple(1L, 5L, 7L, 10L, 13L, 5L));",
            "assert(!result.isNull && result.get == [1L: 5L, 7L: 10L, 13L: 5L]);",
            "}",
            "{",
            "auto result = candidate(tuple(1L, 2L, 3L, 4L, 5L, 6L));",
            "assert(!result.isNull && result.get == [1L: 2L, 3L: 4L, 5L: 6L]);",
            "}",
            "{",
            "auto result = candidate(tuple(7L, 8L, 9L, 10L, 11L, 12L));",
            "assert(!result.isNull && result.get == [7L: 8L, 9L: 10L, 11L: 12L]);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a dthon function to check whether all the characters are same or not.",
        "code": "import std.math;\nimport std.typecons;\nbool all_Characters_Same(string s) \n{\n\tstring::iterator it;\n\tfor (it = s.begin(); it!= s.end(); it++)\n\t{\n\t\tif (std::isalpha(*it) && std::isalpha(*it) && std::isalpha(*it))\n\t\t{\n\t\t\tif (*it == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (*it == '_')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool all_Characters_Not_Same(string s) \n{\n\tstring::iterator it;\n\tfor (it = s.begin(); it!= s.end(); it++)\n\t{\n\t\tif (std::isalpha(*it) && std::isalpha(*it) && std::isalpha(*it))\n\t\t{\n\t\t\tif (*it == '_')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (*it == '_')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool all_Characters_Not_Same(string s) \n{\n\tstring::iterator it;\n\tfor (it = s.begin(); it!= s.end(); it++)\n\t{\n\t\tif (std::isalpha(*it) && std::isalpha(*it) && std::isalpha(*it))\n\t\t{\n\t\t\tif (*it == '_')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (*it == '_')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool all_Characters_Not_Same(string s) \n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = all_Characters_Same;",
            "assert(candidate(\"python\") == false);",
            "assert(candidate(\"aaa\") == true);",
            "assert(candidate(\"data\") == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "import std.math;\nimport std.typecons;\nfloat area_tetrahedron(long side) \n{\n\tfloat area = 0;\n\tlong i, j, k;\n\tlong n = side;\n\tlong n_tetrahedra = 0;\n\tlong n_tetrahedra_max = 0;\n\tlong n_tetrahedra_min = 0;\n\tlong n_tetrahedra_min_max = 0;\n\tlong n_tetrahedra_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min = 0;\n\tlong n_tetrahedra_min_max_min_max = 0;\n\tlong n_tetrahedra_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n_tetrahedra_min_max_min_max_min_max_max = 0;\n\tlong n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = area_tetrahedron;",
            "assert(candidate(3L) == 15.588457268119894);",
            "assert(candidate(20L) == 692.8203230275509);",
            "assert(candidate(10L) == 173.20508075688772);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/",
        "code": "import std.math;\nimport std.typecons;\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\tlong[] temp3 = new long[list.length];\n\tlong[] temp4 = new long[list.length];\n\tlong[] temp5 = new long[list.length];\n\tlong[] temp6 = new long[list.length];\n\tlong[] temp7 = new long[list.length];\n\tlong[] temp8 = new long[list.length];\n\tlong[] temp9 = new long[list.length];\n\tlong[] temp10 = new long[list.length];\n\tlong[] temp11 = new long[list.length];\n\tlong[] temp12 = new long[list.length];\n\tlong[] temp13 = new long[list.length];\n\tlong[] temp14 = new long[list.length];\n\tlong[] temp15 = new long[list.length];\n\tlong[] temp16 = new long[list.length];\n\tlong[] temp17 = new long[list.length];\n\tlong[] temp18 = new long[list.length];\n\tlong[] temp19 = new long[list.length];\n\tlong[] temp20 = new long[list.length];\n\tlong[] temp21 = new long[list.length];\n\tlong[] temp22 = new long[list.length];\n\tlong[] temp23 = new long[list.length];\n\tlong[] temp24 = new long[list.length];\n\tlong[] temp25 = new long[list.length];\n\tlong[] temp26 = new long[list.length];\n\tlong[] temp27 = new long[list.length];\n\tlong[] temp28 = new long[list.length];\n\tlong[] temp29 = new long[list.length];\n\tlong[] temp30 = new long[list.length\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = rotate_right;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php",
        "code": "import std.math;\nimport std.typecons;\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[endnum - startnum + 1];\n\tlong i = startnum;\n\tlong j = endnum;\n\twhile (i <= j) \n\t{\n\t\tif (i % 10 == 0) \n\t\t{\n\t\t\tresult[i] = 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = 0;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn result;\n}\n\nlong[] divisible_by_digits(long startnum, long endnum, long[] digits) \n{\n\tlong[] result = new long[endnum - startnum + 1];\n\tlong i = startnum;\n\tlong j = endnum;\n\twhile (i <= j) \n\t{\n\t\tif (i % 10 == 0) \n\t\t{\n\t\t\tresult[i] = 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = 0;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\tfor (int i = 0; i < digits.length; i++) \n\t{\n\t\tif (digits[i] % 10 == 0) \n\t\t{\n\t\t\tresult[i] = 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = 0;\n\t\t}\n\t}\n\treturn result;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(float) sector_area(long r, long a) \n{\n\tfloat r2 = r*r;\n\tfloat a2 = a*a;\n\tfloat r3 = r2*r2;\n\tfloat a3 = a2*a2;\n\tfloat r4 = r3*r3;\n\tfloat a4 = a3*a3;\n\tfloat r5 = r4*r4;\n\tfloat a5 = a4*a4;\n\tfloat r6 = r5*r5;\n\tfloat a6 = a5*a5;\n\tfloat r7 = r6*r6;\n\tfloat a7 = a6*a6;\n\tfloat r8 = r7*r7;\n\tfloat a8 = a7*a7;\n\tfloat r9 = r8*r8;\n\tfloat a9 = a8*a8;\n\tfloat r10 = r9*r9;\n\tfloat a10 = a9*a9;\n\tfloat r11 = r10*r10;\n\tfloat a11 = a10*a10;\n\tfloat r12 = r11*r11;\n\tfloat a12 = a11*a11;\n\tfloat r13 = r12*r12;\n\tfloat a13 = a12*a12;\n\tfloat r14 = r13*r13;\n\tfloat a14 = a13*a13;\n\tfloat r15 = r14*r14;\n\tfloat a15 = a14*a14;\n\tfloat r16 = r15*r15;\n\tfloat a16 = a15*a15;\n\tfloat r17 = r16*r16;\n\tfloat a17 = a16*a16;\n\tfloat r18 = r17*r17;\n\tfloat a18 = a17*a17;\n\tfloat r19 = r18*r18;\n\tfloat a19 = a18*a18;\n\tfloat r20 = r19*r19\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sector_area;",
            "{",
            "auto result = candidate(4L, 45L);",
            "assert(!result.isNull && result.get == 6.283185307179586);",
            "}",
            "{",
            "auto result = candidate(9L, 45L);",
            "assert(!result.isNull && result.get == 31.808625617596654);",
            "}",
            "{",
            "auto result = candidate(9L, 361L);",
            "assert(result.isNull);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "import std.math;\nimport std.typecons;\nlong lcs_of_three(string X, string Y, string Z) \n{\n\tlong lcs = 0;\n\tif (X.length() == 0 || Y.length() == 0 || Z.length() == 0)\n\t\treturn 0;\n\t\n\tif (X.length() == 1 && Y.length() == 1 && Z.length() == 1)\n\t{\n\t\tlcs = std.max(lcs_of_three(X, Y, Z), lcs_of_three(Y, X, Z));\n\t\treturn lcs;\n\t}\n\t\n\tif (X.length() == 1 && Y.length() == 2 && Z.length() == 1)\n\t{\n\t\tlcs = std.max(lcs_of_three(X, Y, Z), lcs_of_three(Y, Z, X));\n\t\treturn lcs;\n\t}\n\t\n\tif (X.length() == 2 && Y.length() == 1 && Z.length() == 1)\n\t{\n\t\tlcs = std.max(lcs_of_three(X, Y, Z), lcs_of_three(Y, Z, X));\n\t\treturn lcs;\n\t}\n\t\n\tif (X.length() == 2 && Y.length() == 2 && Z.length() == 1)\n\t{\n\t\tlcs = std.max(lcs_of_three(X, Y, Z), lcs_of_three(Y, Z, X));\n\t\treturn lcs;\n\t}\n\t\n\tif (X.length() == 3 && Y.length() == 2 && Z.length() == 1)\n\t{\n\t\tlcs = std.max(lcs_of_three(X, Y, Z), lcs_of_three(Y, Z, X));\n\t\treturn lcs;\n\t}\n\t\n\tif (X.length() == 3 && Y.length() == 3 &&\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = lcs_of_three;",
            "assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);",
            "assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);",
            "assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "import std.math;\nimport std.typecons;\nstring capital_words_spaces(string str1) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\n\nstring capital_words_spaces_2(string str1) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\n\nstring capital_words_spaces_3(string str1) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\n\nstring capital_words_spaces_4(string str1) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length(); i++) \n\t{\n\t\tif (str1[i] =='') \n\t\t{\n\t\t\tstr2 += \" \";\n\t\t}\n\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = capital_words_spaces;",
            "assert(candidate(\"Python\") == \"Python\");",
            "assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");",
            "assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/dthon-sort-numeric-strings-in-a-array/",
        "code": "import std.math;\nimport std.typecons;\nlong[] sort_numeric_strings(string[] nums_str) \n{\n\tlong[] nums = new long[nums_str.length];\n\tfor(int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = nums_str[i].length();\n\t}\n\t\n\tlong[] temp = new long[nums.length];\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\ttemp[i] = nums[i];\n\t}\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tfor(int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif(nums[i] > nums[j])\n\t\t\t{\n\t\t\t\ttemp[i] = nums[j];\n\t\t\t\tnums[j] = nums[i];\n\t\t\t\tnums[i] = temp[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn nums;\n}\n\nlong[] sort_numeric_strings_in_array(long[] nums_str) \n{\n\tlong[] nums = new long[nums_str.length];\n\tfor(int i = 0; i < nums_str.length; i++)\n\t{\n\t\tnums[i] = nums_str[i];\n\t}\n\t\n\tlong[] temp = new long[nums.length];\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\ttemp[i] = nums[i];\n\t}\n\t\n\tfor(int i = 0; i <\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sort_numeric_strings;",
            "assert(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500L, -12L, 0L, 4L, 7L, 12L, 45L, 100L, 200L]);",
            "assert(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 8L, 9L, 9L]);",
            "assert(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1L, 1L, 1L, 3L, 3L, 5L, 5L, 7L, 7L, 9L, 11L, 13L, 15L, 17L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "import std.math;\nimport std.typecons;\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i, j;\n\tint n = colors.length;\n\tint m = patterns.length;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < m; j++)\n\t\t{\n\t\t\tif (colors[i] == patterns[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nbool is_samepatterns(string[] colors, string[] patterns, string[] colors2) \n{\n\tint i, j;\n\tint n = colors.length;\n\tint m = patterns.length;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < m; j++)\n\t\t{\n\t\t\tif (colors[i] == patterns[j])\n\t\t\t{\n\t\t\t\tif (colors2[i] == patterns[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nbool is_samepatterns(string[] colors, string[] patterns, string[] colors2, string[] patterns2) \n{\n\tint i, j;\n\tint n = colors.length;\n\tint m = patterns.length;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < m; j++)\n\t\t{\n\t\t\tif (colors[i] == patterns[j])\n\t\t\t{\n\t\t\t\tif (colors2[i] == patterns[j])\n\t\t\t\t{\n\t\t\t\t\tif (colors2[i] == patterns2[j])\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_samepatterns;",
            "assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);",
            "assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);",
            "assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given tuple to the given array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] add_tuple(long[] test_list, Tuple!(long, long) test_tup) \n{\n\tlong[] result = new long[test_list.length + 1];\n\tresult[0] = test_list[0];\n\tfor (int i = 1; i < test_list.length; i++)\n\t{\n\t\tresult[i] = result[i - 1] + test_list[i];\n\t}\n\treturn result;\n}\n\nlong[] add_tuple(long[] test_list, Tuple!(long, long) test_tup, long[] test_list_2) \n{\n\tlong[] result = new long[test_list.length + 1];\n\tresult[0] = test_list[0];\n\tfor (int i = 1; i < test_list.length; i++)\n\t{\n\t\tresult[i] = result[i - 1] + test_list[i];\n\t}\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tresult[i + 1] = result[i] + test_list_2[i];\n\t}\n\treturn result;\n}\n\nlong[] add_tuple(long[] test_list, Tuple!(long, long) test_tup, long[] test_list_2, long[] test_list_3) \n{\n\tlong[] result = new long[test_list.length + 1];\n\tresult[0] = test_list[0];\n\tfor (int i = 1; i < test_list.length; i++)\n\t{\n\t\tresult[i] = result[i - 1] + test_list[i];\n\t}\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tresult[i + 1] = result[i]\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = add_tuple;",
            "assert(candidate([5L, 6L, 7L], tuple(9L, 10L)) == [5L, 6L, 7L, 9L, 10L]);",
            "assert(candidate([6L, 7L, 8L], tuple(10L, 11L)) == [6L, 7L, 8L, 10L, 11L]);",
            "assert(candidate([7L, 8L, 9L], tuple(11L, 12L)) == [7L, 8L, 9L, 11L, 12L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "import std.math;\nimport std.typecons;\nbool check_min_heap(long[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tif(arr[0] == 0)\n\t\treturn true;\n\t\n\tif(arr[arr.length - 1] == 0)\n\t\treturn true;\n\t\n\tfor(int i = 0; i < arr.length - 1; i++)\n\t{\n\t\tif(arr[i] > arr[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nbool check_min_heap(int[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tif(arr[0] == 0)\n\t\treturn true;\n\t\n\tif(arr[arr.length - 1] == 0)\n\t\treturn true;\n\t\n\tfor(int i = 0; i < arr.length - 1; i++)\n\t{\n\t\tif(arr[i] > arr[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nbool check_min_heap(long[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn true;\n\t\n\tif(arr[0] == 0)\n\t\treturn true;\n\t\n\tif(arr[arr\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_min_heap;",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);",
            "assert(candidate([2L, 3L, 4L, 5L, 10L, 15L]) == true);",
            "assert(candidate([2L, 10L, 4L, 5L, 3L, 15L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "import std.math;\nimport std.typecons;\nlong jacobsthal_num(long n) \n{\n\tlong jacobsthal = 0;\n\tlong jacobsthal_prime = 1;\n\tlong jacobsthal_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 1;\n\tlong jacobsthal_prime_prime_prime_prime_prime_prime_prime_prime\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = jacobsthal_num;",
            "assert(candidate(5L) == 11L);",
            "assert(candidate(2L) == 1L);",
            "assert(candidate(4L) == 5L);",
            "assert(candidate(13L) == 2731L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from tuple array. https://www.geeksforgeeks.org/dthon-find-minimum-k-records-from-tuple-array/ - in this case a verbatim cod of test cases",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, long)[] min_k(Tuple!(string, long)[] test_list, long K) \n{\n\tTuple!(string, long)[] result = new Tuple!(string, long)[]{};\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong min_k = 0;\n\tlong max_k = 0;\n\tlong min_k_value = 0;\n\tlong max_k_value = 0;\n\tlong min_k_value_value = 0;\n\tlong max_k_value_value = 0;\n\tlong min_k_value_value_value = 0;\n\tlong max_k_value_value_value = 0;\n\tlong min_k_value_value_value_value = 0;\n\tlong max_k_value_value_value_value = 0;\n\tlong min_k_value_value_value_value_value = 0;\n\tlong max_k_value_value_value_value_value_value = 0;\n\tlong min_k_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = min_k;",
            "assert(candidate([tuple(\"Manjeet\", 10L), tuple(\"Akshat\", 4L), tuple(\"Akash\", 2L), tuple(\"Nikhil\", 8L)], 2L) == [tuple(\"Akash\", 2L), tuple(\"Akshat\", 4L)]);",
            "assert(candidate([tuple(\"Sanjeev\", 11L), tuple(\"Angat\", 5L), tuple(\"Akash\", 3L), tuple(\"Nepin\", 9L)], 3L) == [tuple(\"Akash\", 3L), tuple(\"Angat\", 5L), tuple(\"Nepin\", 9L)]);",
            "assert(candidate([tuple(\"tanmay\", 14L), tuple(\"Amer\", 11L), tuple(\"Ayesha\", 9L), tuple(\"SKD\", 16L)], 1L) == [tuple(\"Ayesha\", 9L)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/dthon-exercises/re/dthon-re-exercise-3.php",
        "code": "import std.math;\nimport std.typecons;\nbool text_match_zero_one(string text) \n{\n\tstring::size_type pos = 0;\n\tstring::size_type pos_end = text.find('a');\n\twhile (pos < text.size() && pos_end!= string::npos) \n\t{\n\t\tif (text[pos] == 'b' && text[pos+1] == 'a') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tpos++;\n\t\tpos_end = text.find('b', pos);\n\t}\n\treturn false;\n}\n\nbool text_match_zero_one_with_re(string text) \n{\n\tstring::size_type pos = 0;\n\tstring::size_type pos_end = text.find('a');\n\twhile (pos < text.size() && pos_end!= string::npos) \n\t{\n\t\tif (text[pos] == 'b' && text[pos+1] == 'a') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tpos++;\n\t\tpos_end = text.find('b', pos);\n\t}\n\treturn false;\n}\n\nbool text_match_zero_one_with_re_with_re(string text) \n{\n\tstring::size_type pos = 0;\n\tstring::size_type pos_end = text.find('a');\n\twhile (pos < text.size() && pos_end!= string::npos) \n\t{\n\t\tif (text[pos] == 'b' && text[pos+1] == 'a') \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tpos++;\n\t\tpos_end = text.find('b', pos);\n\t}\n\treturn false;\n}\n\nbool text_match_zero_one_with_re_with_re_with_re(string text) \n{\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_match_zero_one;",
            "assert(candidate(\"ac\") == false);",
            "assert(candidate(\"dc\") == false);",
            "assert(candidate(\"abbbba\") == true);",
            "assert(candidate(\"dsabbbba\") == true);",
            "assert(candidate(\"asbbbba\") == false);",
            "assert(candidate(\"abaaa\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/dthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "import std.math;\nimport std.typecons;\nlong count_reverse_pairs(string[] test_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < test_list.length; j++)\n\t\t{\n\t\t\tif (test_list[i] == test_list[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_reverse_pairs_in_array(string[] test_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < test_list.length; j++)\n\t\t{\n\t\t\tif (test_list[i] == test_list[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_reverse_pairs_in_array_in_array(string[] test_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < test_list.length; j++)\n\t\t{\n\t\t\tif (test_list[i] == test_list[j])\n\t\t\t{\n\t\t\t\tcount++;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_reverse_pairs;",
            "assert(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2L);",
            "assert(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1L);",
            "assert(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "import std.math;\nimport std.typecons;\nbool is_decimal(string num) \n{\n\tstring temp;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n\tint z;\n\tint a;\n\tint b;\n\tint c;\n\tint d;\n\tint e;\n\tint f;\n\tint g;\n\tint h;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n\tint z;\n\tint a;\n\tint b;\n\tint c;\n\tint d;\n\tint e;\n\tint f;\n\tint g;\n\tint h;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n\tint z;\n\tint a;\n\tint b;\n\tint c;\n\tint d;\n\tint e;\n\tint f;\n\tint g;\n\tint h;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_decimal;",
            "assert(candidate(\"123.11\") == true);",
            "assert(candidate(\"e666.86\") == false);",
            "assert(candidate(\"3.124587\") == false);",
            "assert(candidate(\"1.11\") == true);",
            "assert(candidate(\"1.1.11\") == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find tuples which have all elements divisible by k from the given array of tuples.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long)[] find_tuples(Tuple!(long, long, long)[] test_list, long K) \n{\n\tTuple!(long, long, long)[] result = new Tuple!(long, long, long);\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong count = 0;\n\tlong count_div = 0;\n\tlong count_div_k = 0;\n\tlong count_div_k_k = 0;\n\tlong count_div_k_k_k = 0;\n\tlong count_div_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k_k_k_k_k_k_k = 0;\n\tlong count_div_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k_k\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_tuples;",
            "assert(candidate([tuple(6L, 24L, 12L), tuple(7L, 9L, 6L), tuple(12L, 18L, 21L)], 6L) == [tuple(6L, 24L, 12L)]);",
            "assert(candidate([tuple(5L, 25L, 30L), tuple(4L, 2L, 3L), tuple(7L, 8L, 9L)], 5L) == [tuple(5L, 25L, 30L)]);",
            "assert(candidate([tuple(7L, 9L, 16L), tuple(8L, 16L, 4L), tuple(19L, 17L, 18L)], 4L) == [tuple(8L, 16L, 4L)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a dthon function to check whether an array of numbers contains only one distinct element or not.",
        "code": "import std.math;\nimport std.typecons;\nbool unique_Element(long[] arr) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = unique_Element;",
            "assert(candidate([1L, 1L, 1L]) == true);",
            "assert(candidate([1L, 2L, 1L, 2L]) == false);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "import std.math;\nimport std.typecons;\nbool check_monthnumber_number(long monthnum3) \n{\n\tlong monthnum = monthnum3;\n\tlong monthnum2 = monthnum;\n\tlong monthnum3 = monthnum2;\n\tlong monthnum4 = monthnum3;\n\tlong monthnum5 = monthnum4;\n\tlong monthnum6 = monthnum5;\n\tlong monthnum7 = monthnum6;\n\tlong monthnum8 = monthnum7;\n\tlong monthnum9 = monthnum8;\n\tlong monthnum10 = monthnum9;\n\tlong monthnum11 = monthnum10;\n\tlong monthnum12 = monthnum11;\n\tlong monthnum13 = monthnum12;\n\tlong monthnum14 = monthnum13;\n\tlong monthnum15 = monthnum14;\n\tlong monthnum16 = monthnum15;\n\tlong monthnum17 = monthnum16;\n\tlong monthnum18 = monthnum17;\n\tlong monthnum19 = monthnum18;\n\tlong monthnum20 = monthnum19;\n\tlong monthnum21 = monthnum20;\n\tlong monthnum22 = monthnum21;\n\tlong monthnum23 = monthnum22;\n\tlong monthnum24 = monthnum23;\n\tlong monthnum25 = monthnum24;\n\tlong monthnum26 = monthnum25;\n\tlong monthnum27 = monthnum26;\n\tlong monthnum28 = monthnum27;\n\tlong monthnum29 = monthnum28;\n\tlong monthnum30 = monthnum29;\n\tlong monthnum31 = monthnum30;\n\tlong monthnum32 = monthnum31;\n\tlong monthnum33 = monthnum32;\n\tlong monthnum34 = monthnum33;\n\tlong monthnum35 = monthnum34;\n\tlong monthnum36 = monthnum35;\n\tlong monthnum37 = monthnum36;\n\tlong monthnum38 = monthnum37;\n\tlong monthnum39 = monthnum38;\n\tlong monthnum40 = monthnum39;\n\tlong monthnum41 = monthnum40;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_monthnumber_number;",
            "assert(candidate(6L) == true);",
            "assert(candidate(2L) == false);",
            "assert(candidate(12L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a dthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "import std.math;\nimport std.typecons;\nlong find_min_diff(long[] arr, long n) \n{\n\tlong min = std.math.Long.MAX_VALUE;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tlong temp5 = 0;\n\tlong temp6 = 0;\n\tlong temp7 = 0;\n\tlong temp8 = 0;\n\tlong temp9 = 0;\n\tlong temp10 = 0;\n\tlong temp11 = 0;\n\tlong temp12 = 0;\n\tlong temp13 = 0;\n\tlong temp14 = 0;\n\tlong temp15 = 0;\n\tlong temp16 = 0;\n\tlong temp17 = 0;\n\tlong temp18 = 0;\n\tlong temp19 = 0;\n\tlong temp20 = 0;\n\tlong temp21 = 0;\n\tlong temp22 = 0;\n\tlong temp23 = 0;\n\tlong temp24 = 0;\n\tlong temp25 = 0;\n\tlong temp26 = 0;\n\tlong temp27 = 0;\n\tlong temp28 = 0;\n\tlong temp29 = 0;\n\tlong temp30 = 0;\n\tlong temp31 = 0;\n\tlong temp32 = 0;\n\tlong temp33 = 0;\n\tlong temp34 = 0;\n\tlong temp35 = 0;\n\tlong temp36 = 0;\n\tlong temp37 = 0;\n\tlong temp38 = 0;\n\tlong temp39 = 0;\n\tlong temp40 = 0;\n\tlong temp41 = 0;\n\tlong temp42 = 0;\n\tlong temp43 = 0;\n\tlong temp44 = 0;\n\tlong temp45 = 0;\n\tlong temp46 = 0;\n\tlong temp47 = 0;\n\tlong temp48 = 0;\n\tlong temp49 = 0;\n\tlong temp50 = 0\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_min_diff;",
            "assert(candidate([1L, 5L, 3L, 19L, 18L, 25L], 6L) == 1L);",
            "assert(candidate([4L, 3L, 2L, 6L], 4L) == 1L);",
            "assert(candidate([30L, 5L, 20L, 9L], 4L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a dthon function to count number of digits in a given string.",
        "code": "import std.math;\nimport std.typecons;\nlong number_ctr(string str) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tret += std.math.pow(10, str.length() - i - 1);\n\t}\n\treturn ret;\n}\n\nlong number_ctr(string str, int n) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tret += std.math.pow(10, n - i - 1);\n\t}\n\treturn ret;\n}\n\nlong number_ctr(string str, long n) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tret += std.math.pow(10, n - i - 1);\n\t}\n\treturn ret;\n}\n\nlong number_ctr(string str, double n) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tret += std.math.pow(10, n - i - 1);\n\t}\n\treturn ret;\n}\n\nlong number_ctr(string str, float n) \n{\n\tlong ret = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tret += std.math.pow(10, n - i - 1);\n\t}\n\treturn ret;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "import std.math;\nimport std.typecons;\nlong is_polite(long n) \n{\n\tif(n == 0)\n\t\treturn 1;\n\telse if(n == 1)\n\t\treturn 0;\n\telse\n\t\treturn is_polite(n-1) || is_polite(n-2) || is_polite(n-3) || is_polite(n-4) || is_polite(n-5) || is_polite(n-6) || is_polite(n-7) || is_polite(n-8) || is_polite(n-9) || is_polite(n-10) || is_polite(n-11) || is_polite(n-12) || is_polite(n-13) || is_polite(n-14) || is_polite(n-15) || is_polite(n-16) || is_polite(n-17) || is_polite(n-18) || is_polite(n-19) || is_polite(n-20) || is_polite(n-21) || is_polite(n-22) || is_polite(n-23) || is_polite(n-24) || is_polite(n-25) || is_polite(n-26) || is_polite(n-27) || is_polite(n-28) || is_polite(n-29) || is_polite(n-30) || is_polite(n-31) || is_polite(n-32) || is_polite(n-33) || is_polite(n-34) || is_polite(n-35) || is_polite(n-36) || is_polite(n-37) || is_polite(n-38) || is_polite(n-39) || is_polite(n-40) || is_polite(n-41) || is_polite(n-42) ||\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_polite;",
            "assert(candidate(7L) == 11L);",
            "assert(candidate(4L) == 7L);",
            "assert(candidate(9L) == 13L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return an array of all pairs of consecutive items in a given array.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long)[] pair_wise(long[] l1) \n{\n\tlong[] l2 = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++) {\n\t\tl2[i] = l1[i];\n\t}\n\treturn l2;\n}\n\nTuple!(long, long, long)[] pair_wise(long[] l1, long[] l2) \n{\n\tlong[] l3 = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++) {\n\t\tl3[i] = l1[i];\n\t}\n\tfor (int i = 0; i < l2.length; i++) {\n\t\tl3[i] = l2[i];\n\t}\n\treturn l3;\n}\n\nTuple!(long, long, long, long)[] pair_wise(long[] l1, long[] l2, long[] l3) \n{\n\tlong[] l4 = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++) {\n\t\tl4[i] = l1[i];\n\t}\n\tfor (int i = 0; i < l2.length; i++) {\n\t\tl4[i] = l2[i];\n\t}\n\tfor (int i = 0; i < l3.length; i++) {\n\t\tl4[i] = l3[i];\n\t}\n\treturn l4;\n}\n\nTuple!(long, long, long, long, long)[] pair_wise(long[] l1, long[]\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = pair_wise;",
            "assert(candidate([1L, 1L, 2L, 3L, 3L, 4L, 4L, 5L]) == [tuple(1L, 1L), tuple(1L, 2L), tuple(2L, 3L), tuple(3L, 3L), tuple(3L, 4L), tuple(4L, 4L), tuple(4L, 5L)]);",
            "assert(candidate([1L, 5L, 7L, 9L, 10L]) == [tuple(1L, 5L), tuple(5L, 7L), tuple(7L, 9L), tuple(9L, 10L)]);",
            "assert(candidate([5L, 1L, 9L, 7L, 10L]) == [tuple(5L, 1L), tuple(1L, 9L), tuple(9L, 7L), tuple(7L, 10L)]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [tuple(1L, 2L), tuple(2L, 3L), tuple(3L, 4L), tuple(4L, 5L), tuple(5L, 6L), tuple(6L, 7L), tuple(7L, 8L), tuple(8L, 9L), tuple(9L, 10L)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a dthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,",
        "code": "import std.math;\nimport std.typecons;\nlong get_pairs_count(long[] arr, long sum) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == sum) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_pairs_count(long[] arr, long sum, long[] arr2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == sum) {\n\t\t\tcount++;\n\t\t}\n\t\tif (arr2[i] == sum) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_pairs_count(long[] arr, long sum, long[] arr2, long[] arr3) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == sum) {\n\t\t\tcount++;\n\t\t}\n\t\tif (arr2[i] == sum) {\n\t\t\tcount++;\n\t\t}\n\t\tif (arr3[i] == sum) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong get_pairs_count(long[] arr, long sum, long[] arr2, long[]\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_pairs_count;",
            "assert(candidate([1L, 1L, 1L, 1L], 2L) == 6L);",
            "assert(candidate([1L, 5L, 7L, -1L, 5L], 6L) == 3L);",
            "assert(candidate([1L, -2L, 3L], 1L) == 1L);",
            "assert(candidate([-1L, -2L, 3L], -3L) == 1L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a dthon function to get the difference between two arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong[] Diff(long[] li1, long[] li2) \n{\n\tlong[] li = new long[li1.length];\n\tfor (int i = 0; i < li1.length; i++)\n\t\tli[i] = li1[i] - li2[i];\n\treturn li;\n}\n\ndouble[] Diff(double[] li1, double[] li2) \n{\n\tdouble[] li = new double[li1.length];\n\tfor (int i = 0; i < li1.length; i++)\n\t\tli[i] = li1[i] - li2[i];\n\treturn li;\n}\n\nfloat[] Diff(float[] li1, float[] li2) \n{\n\tfloat[] li = new float[li1.length];\n\tfor (int i = 0; i < li1.length; i++)\n\t\tli[i] = li1[i] - li2[i];\n\treturn li;\n}\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = Diff;",
            "assert(candidate([10L, 15L, 20L, 25L, 30L, 35L, 40L], [25L, 40L, 35L]) == [10L, 20L, 30L, 15L]);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 1L]) == [2L, 3L, 4L, 5L, 6L, 7L]);",
            "assert(candidate([1L, 2L, 3L], [6L, 7L, 1L]) == [2L, 3L, 6L, 7L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a dthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong odd_num_sum(long n) \n{\n\tlong sum = 0;\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\tif (n == 2) return 2;\n\tif (n == 3) return 3;\n\tif (n == 4) return 4;\n\tif (n == 5) return 5;\n\tif (n == 6) return 6;\n\tif (n == 7) return 7;\n\tif (n == 8) return 8;\n\tif (n == 9) return 9;\n\tif (n == 10) return 10;\n\tif (n == 11) return 11;\n\tif (n == 12) return 12;\n\tif (n == 13) return 13;\n\tif (n == 14) return 14;\n\tif (n == 15) return 15;\n\tif (n == 16) return 16;\n\tif (n == 17) return 17;\n\tif (n == 18) return 18;\n\tif (n == 19) return 19;\n\tif (n == 20) return 20;\n\tif (n == 21) return 21;\n\tif (n == 22) return 22;\n\tif (n == 23) return 23;\n\tif (n == 24) return 24;\n\tif (n == 25) return 25;\n\tif (n == 26) return 26;\n\tif (n == 27) return 27;\n\tif (n == 28) return 28;\n\tif (n == 29) return 29;\n\tif (n == 30) return 30;\n\tif (n == 31) return 31;\n\tif (n == 32) return 32;\n\tif (n == 33) return 33;\n\tif (n == 34) return 34;\n\tif (n == 35) return 35;\n\tif (n == 36) return 36;\n\tif (n == 37) return 37;\n\tif (n == 38) return 38;\n\tif (n == 39) return 39;\n\tif (n == 40) return 40;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = odd_num_sum;",
            "assert(candidate(2L) == 82L);",
            "assert(candidate(3L) == 707L);",
            "assert(candidate(4L) == 3108L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "import std.math;\nimport std.typecons;\nbool check_expression(string exp) \n{\n\tstring temp;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_expression;",
            "assert(candidate(\"{()}[{}]\") == true);",
            "assert(candidate(\"{()}[{]\") == false);",
            "assert(candidate(\"{()}[{}][]({})\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_length(string test_str, long K) \n{\n\tstring result_str = \"\";\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_length;",
            "assert(candidate(\"The person is most value tet\", 3L) == \"person is most value\");",
            "assert(candidate(\"If you told me about this ok\", 4L) == \"If you me about ok\");",
            "assert(candidate(\"Forces of darkeness is come into the play\", 4L) == \"Forces of darkeness is the\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(Tuple!(string, long, long)) occurance_substring(string text, string pattern) \n{\n\tif (text == null) return null;\n\tif (pattern == null) return null;\n\t\n\tlong start = 0;\n\tlong end = text.length();\n\tlong pos = 0;\n\t\n\twhile (pos < end)\n\t{\n\t\tif (text.substring(pos, pos + pattern.length()) == pattern)\n\t\t{\n\t\t\tpos += pattern.length();\n\t\t\treturn new Nullable<Tuple<long, long>>(pos, pos);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos++;\n\t\t}\n\t}\n\t\n\treturn null;\n}\n\nNullable!(Tuple!(string, long, long)) occurance_substring(string text, string pattern, long start, long end) \n{\n\tif (text == null) return null;\n\tif (pattern == null) return null;\n\t\n\tlong start = 0;\n\tlong end = text.length();\n\tlong pos = 0;\n\t\n\twhile (pos < end)\n\t{\n\t\tif (text.substring(pos, pos + pattern.length()) == pattern)\n\t\t{\n\t\t\tpos += pattern.length();\n\t\t\treturn new Nullable<Tuple<long, long>>(pos, pos);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpos++;\n\t\t}\n\t}\n\t\n\treturn null;\n}\n\nNullable!(Tuple!(string, long, long)) occurance_substring(string text, string pattern, long start, long end, long pos) \n{\n\tif (text == null) return null;\n\tif (pattern == null) return null;\n\t\n\tlong start = 0;\n\tlong end = text.length();\n\tlong pos = 0;\n\t\n\twhile (pos < end)\n\t{\n\t\tif (text.substring(pos, pos + pattern.length()) == pattern)\n\t\t{\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = occurance_substring;",
            "{",
            "auto result = candidate(\"python programming, python language\", \"python\");",
            "assert(!result.isNull && result.get == tuple(\"python\", 0L, 6L));",
            "}",
            "{",
            "auto result = candidate(\"python programming,programming language\", \"programming\");",
            "assert(!result.isNull && result.get == tuple(\"programming\", 7L, 18L));",
            "}",
            "{",
            "auto result = candidate(\"python programming,programming language\", \"language\");",
            "assert(!result.isNull && result.get == tuple(\"language\", 31L, 39L));",
            "}",
            "{",
            "auto result = candidate(\"c++ programming, c++ language\", \"python\");",
            "assert(result.isNull);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a dthon function to check whether every odd index contains odd numbers of a given array.",
        "code": "import std.math;\nimport std.typecons;\nbool odd_position(long[] nums) \n{\n\tbool flag = true;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] % 2 == 1)\n\t\t{\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\n\nbool even_position(long[] nums) \n{\n\tbool flag = true;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] % 2 == 0)\n\t\t{\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\n\nbool odd_index(long[] nums) \n{\n\tbool flag = true;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] % 2 == 1)\n\t\t{\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\n\nbool even_index(long[] nums) \n{\n\tbool flag = true;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] % 2 == 0)\n\t\t{\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\n\nbool odd_index(long[] nums) \n{\n\tbool flag = true;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\t\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = odd_position;",
            "assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);",
            "assert(candidate([4L, 1L, 2L]) == true);",
            "assert(candidate([1L, 2L, 3L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "import std.math;\nimport std.typecons;\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length(); i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i] == 'y' || test_str[i\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_vowels;",
            "assert(candidate(\"bestinstareels\") == 7L);",
            "assert(candidate(\"partofthejourneyistheend\") == 12L);",
            "assert(candidate(\"amazonprime\") == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a dthon function to find the sum of non-repeated elements in a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong find_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i]!= 0) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong find_sum_n(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i]!= 0) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong find_sum_n_n(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i]!= 0) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong find_sum_n_n_n(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i]!= 0) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong find_sum_n_n_n_n(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tif (arr[i]!=\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_sum;",
            "assert(candidate([1L, 2L, 3L, 1L, 1L, 4L, 5L, 6L]) == 21L);",
            "assert(candidate([1L, 10L, 9L, 4L, 2L, 10L, 10L, 45L, 4L]) == 71L);",
            "assert(candidate([12L, 10L, 9L, 45L, 2L, 10L, 10L, 45L, 10L]) == 78L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a dthon function to find whether a number is divisible by 11.",
        "code": "import std.math;\nimport std.typecons;\nbool is_Diff(long n) \n{\n\tif (n == 0) return true;\n\tif (n == 1) return false;\n\tif (n == 2) return true;\n\tif (n == 3) return false;\n\tif (n == 4) return true;\n\tif (n == 5) return false;\n\tif (n == 6) return true;\n\tif (n == 7) return false;\n\tif (n == 8) return true;\n\tif (n == 9) return false;\n\tif (n == 10) return true;\n\tif (n == 11) return false;\n\tif (n == 12) return true;\n\tif (n == 13) return false;\n\tif (n == 14) return true;\n\tif (n == 15) return false;\n\tif (n == 16) return true;\n\tif (n == 17) return false;\n\tif (n == 18) return true;\n\tif (n == 19) return false;\n\tif (n == 20) return true;\n\tif (n == 21) return false;\n\tif (n == 22) return true;\n\tif (n == 23) return false;\n\tif (n == 24) return true;\n\tif (n == 25) return false;\n\tif (n == 26) return true;\n\tif (n == 27) return false;\n\tif (n == 28) return true;\n\tif (n == 29) return false;\n\tif (n == 30) return true;\n\tif (n == 31) return false;\n\tif (n == 32) return true;\n\tif (n == 33) return false;\n\tif (n == 34) return true;\n\tif (n == 35) return false;\n\tif (n == 36) return true;\n\tif (n == 37) return false;\n\tif (n == 38) return true;\n\tif (n == 39) return false;\n\tif (n == 40) return true;\n\tif (n == 41) return false;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_Diff;",
            "assert(candidate(12345L) == false);",
            "assert(candidate(1212112L) == true);",
            "assert(candidate(1212L) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with tuples in the given tuple array. https://www.geeksforgeeks.org/dthon-combinations-of-sum-with-tuples-in-tuple-array/",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long)[] find_combinations(Tuple!(long, long)[] test_list) \n{\n\tTuple!(long, long)[] result = new Tuple!(long, long)[]{};\n\tlong n = test_list.length;\n\tlong m = test_list[0].length;\n\tlong[] test_list_array = new long[n];\n\tfor (int i = 0; i < n; i++) {\n\t\ttest_list_array[i] = test_list[i][0];\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (test_list[j][i] == test_list_array[i]) {\n\t\t\t\tresult[i] = new Tuple!(long, long)[]{test_list[j][i]};\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nTuple!(long, long)[] find_combinations(Tuple!(long, long)[] test_list, long n) \n{\n\tTuple!(long, long)[] result = new Tuple!(long, long)[]{};\n\tlong m = test_list.length;\n\tlong[] test_list_array = new long[n];\n\tfor (int i = 0; i < n; i++) {\n\t\ttest_list_array[i] = test_list[i][0];\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tfor (int j\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_combinations;",
            "assert(candidate([tuple(2L, 4L), tuple(6L, 7L), tuple(5L, 1L), tuple(6L, 10L)]) == [tuple(8L, 11L), tuple(7L, 5L), tuple(8L, 14L), tuple(11L, 8L), tuple(12L, 17L), tuple(11L, 11L)]);",
            "assert(candidate([tuple(3L, 5L), tuple(7L, 8L), tuple(6L, 2L), tuple(7L, 11L)]) == [tuple(10L, 13L), tuple(9L, 7L), tuple(10L, 16L), tuple(13L, 10L), tuple(14L, 19L), tuple(13L, 13L)]);",
            "assert(candidate([tuple(4L, 6L), tuple(8L, 9L), tuple(7L, 3L), tuple(8L, 12L)]) == [tuple(12L, 15L), tuple(11L, 9L), tuple(12L, 18L), tuple(15L, 12L), tuple(16L, 21L), tuple(15L, 15L)]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a dthon function to check whether the count of divisors is even. https://www.w3resource.com/dthon-exercises/basic/dthon-basic-1-exercise-24.php",
        "code": "import std.math;\nimport std.typecons;\nbool count_divisors(long n) \n{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n_divisors;\n\tlong n_divisors_prime;\n\tlong n_divisors_prime_prime;\n\tlong n_divisors_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_prime_prime_prime;\n\tlong n_divisors_prime_prime_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_divisors;",
            "assert(candidate(10L) == true);",
            "assert(candidate(100L) == false);",
            "assert(candidate(125L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "import std.math;\nimport std.typecons;\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 0) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong even_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 1) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong odd_length_sum_2(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] % 2 == 0) \n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong even_length_sum_2(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = odd_length_sum;",
            "assert(candidate([1L, 2L, 4L]) == 14L);",
            "assert(candidate([1L, 2L, 1L, 2L]) == 15L);",
            "assert(candidate([1L, 7L]) == 8L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "import std.math;\nimport std.typecons;\nfloat[] rgb_to_hsv(long r, long g, long b) \n{\n\tfloat[] hsv = new float[3];\n\tfloat r_r = r / 255.0f;\n\tfloat g_g = g / 255.0f;\n\tfloat b_b = b / 255.0f;\n\tfloat max = Math.max(r_r, Math.max(g_g, b_b));\n\tfloat min = Math.min(r_r, Math.min(g_g, b_b));\n\tfloat delta = max - min;\n\tfloat h = (max + min) / 2.0f;\n\tfloat s = max - delta;\n\tfloat v = (max + min) / 2.0f;\n\t\n\thsv[0] = h;\n\thsv[1] = s;\n\thsv[2] = v;\n\t\n\treturn hsv;\n}\n\nlong[] hsv_to_rgb(float[] hsv) \n{\n\tlong[] rgb = new long[3];\n\trgb[0] = (long)Math.round(hsv[0] * 255.0f);\n\trgb[1] = (long)Math.round(hsv[1] * 255.0f);\n\trgb[2] = (long)Math.round(hsv[2] * 255.0f);\n\treturn rgb;\n}\n\nfloat[] hsv_to_rgb(float[] hsv) \n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = rgb_to_hsv;",
            "assert(candidate(255L, 255L, 255L) == [0.0, 0.0, 100.0]);",
            "assert(candidate(0L, 215L, 0L) == [120.0, 100.0, 84.31372549019608]);",
            "assert(candidate(10L, 215L, 110L) == [149.26829268292684, 95.34883720930233, 84.31372549019608]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given array.",
        "code": "import std.math;\nimport std.typecons;\nlong mul_even_odd(long[] list1) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = mul_even_odd;",
            "assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);",
            "assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert tuple string to integer tuple.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long, long) tuple_str_int(string test_str) \n{\n\tlong a, b, c;\n\tstd::stringstream ss;\n\tss << test_str;\n\tss >> a >> b >> c;\n\treturn tuple(a, b, c);\n}\n\nTuple!(long, long, long) tuple_str_int(string test_str, int a, int b, int c) \n{\n\tlong a, b, c;\n\tstd::stringstream ss;\n\tss << test_str;\n\tss >> a >> b >> c;\n\treturn tuple(a, b, c);\n}\n\nTuple!(long, long, long) tuple_str_int(string test_str, int a, int b, int c, int d) \n{\n\tlong a, b, c, d;\n\tstd::stringstream ss;\n\tss << test_str;\n\tss >> a >> b >> c >> d;\n\treturn tuple(a, b, c, d);\n}\n\nTuple!(long, long, long) tuple_str_int(string test_str, int a, int b, int c, int d, int e) \n{\n\tlong a, b, c, d, e;\n\tstd::stringstream ss;\n\tss << test_str;\n\tss >> a >> b >> c >> d >> e;\n\treturn tuple(a, b, c, d, e);\n}\n\nTuple!(long, long, long) tuple_str_int(string test_str, int a, int b, int c, int d, int e, int f) \n{\n\tlong a, b, c, d, e\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = tuple_str_int;",
            "assert(candidate(\"(7, 8, 9)\") == tuple(7L, 8L, 9L));",
            "assert(candidate(\"(1, 2, 3)\") == tuple(1L, 2L, 3L));",
            "assert(candidate(\"(4, 5, 6)\") == tuple(4L, 5L, 6L));",
            "assert(candidate(\"(7, 81, 19)\") == tuple(7L, 81L, 19L));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "import std.math;\nimport std.typecons;\nlong right_insertion(long[] a, long x) \n{\n\tlong i, j;\n\tlong temp;\n\t\n\tfor (i = 0; i < a.length; i++)\n\t{\n\t\tif (a[i] == x)\n\t\t\treturn i;\n\t}\n\t\n\treturn -1;\n}\n\nlong right_insertion_sorted(long[] a, long x) \n{\n\tlong i, j;\n\tlong temp;\n\t\n\tfor (i = 0; i < a.length; i++)\n\t{\n\t\tif (a[i] == x)\n\t\t\treturn i;\n\t}\n\t\n\treturn -1;\n}\n\nlong right_insertion_sorted_sorted(long[] a, long x) \n{\n\tlong i, j;\n\tlong temp;\n\t\n\tfor (i = 0; i < a.length; i++)\n\t{\n\t\tif (a[i] == x)\n\t\t\treturn i;\n\t}\n\t\n\treturn -1;\n}\n\nlong right_insertion_sorted_sorted_sorted(long[] a, long x) \n{\n\tlong i, j;\n\tlong temp;\n\t\n\tfor (i = 0; i < a.length; i++)\n\t{\n\t\tif (a[i] == x)\n\t\t\treturn i;\n\t}\n\t\n\treturn -1;\n}\n\nlong right_insertion_sorted_sorted_sorted(long[] a, long x) \n{\n\tlong i, j;\n\tlong temp\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = right_insertion;",
            "assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);",
            "assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);",
            "assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "import std.math;\nimport std.typecons;\nbool text_match_three(string text) \n{\n\tstring s1 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s2 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s3 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s4 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s5 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s6 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s7 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s8 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s9 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s10 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s11 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s12 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s13 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s14 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s15 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s16 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s17 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s18 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s19 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s20 = \"abcdefghijklmnopqrstuvwxyz\";\n\tstring s21 = \"abcdefghijklmnopqrstuvwxyz\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = text_match_three;",
            "assert(candidate(\"ac\") == false);",
            "assert(candidate(\"dc\") == false);",
            "assert(candidate(\"abbbba\") == true);",
            "assert(candidate(\"caacabbbba\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new tuple from the given string and array.",
        "code": "import std.math;\nimport std.typecons;\nTuple!(string, string, string) new_tuple(string[] test_list, string test_str) \n{\n\tstring test_str_tmp = test_str;\n\tstring test_str_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp_tmp_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = test_str;\n\tstring test_str_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = new_tuple;",
            "assert(candidate([\"WEB\", \"is\"], \"best\") == tuple(\"WEB\", \"is\", \"best\"));",
            "assert(candidate([\"We\", \"are\"], \"Developers\") == tuple(\"We\", \"are\", \"Developers\"));",
            "assert(candidate([\"Part\", \"is\"], \"Wrong\") == tuple(\"Part\", \"is\", \"Wrong\"));",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a dthon function to check whether every even index contains even numbers of a given array.",
        "code": "import std.math;\nimport std.typecons;\nbool even_position(long[] nums) \n{\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool odd_position(long[] nums) \n{\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] % 2 == 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nbool contains(long[] nums, long num) \n{\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == num)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool contains(long[] nums, int num) \n{\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == num)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool contains(long[] nums, long num, long num2) \n{\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tif(nums[i] == num)\n\t\t{\n\t\t\tif(nums[i] == num2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = even_position;",
            "assert(candidate([3L, 2L, 1L]) == false);",
            "assert(candidate([1L, 2L, 3L]) == false);",
            "assert(candidate([2L, 1L, 4L]) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a dthon function to count the number of arrays in a given number of arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong count_list(long[][] input_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < input_list.length; i++) {\n\t\tfor (int j = 0; j < input_list[i].length; j++) {\n\t\t\tif (input_list[i][j] == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_list_2(long[][] input_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < input_list.length; i++) {\n\t\tfor (int j = 0; j < input_list[i].length; j++) {\n\t\t\tif (input_list[i][j] == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_list_3(long[][] input_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < input_list.length; i++) {\n\t\tfor (int j = 0; j < input_list[i].length; j++) {\n\t\t\tif (input_list[i][j] == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_list_4(long[][] input_list) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < input_list.length; i++) {\n\t\tfor (int j = 0; j < input_list[i].length; j++) {\n\t\t\tif (input_list[i][j\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_list;",
            "assert(candidate([[1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == 4L);",
            "assert(candidate([[1L, 2L], [2L, 3L], [4L, 5L]]) == 3L);",
            "assert(candidate([[1L, 0L], [2L, 0L]]) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a dthon function to find the last position of an element in a sorted array.",
        "code": "import std.math;\nimport std.typecons;\nlong last(long[] arr, long x) \n{\n\tlong i = 0;\n\tlong j = arr.length - 1;\n\twhile (i < j) \n\t{\n\t\tif (arr[i] < x) \n\t\t{\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn i;\n}\n\npublic class Solution {\n\tpublic static void main(String[] args) {\n\t\tlong[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tlong[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = last;",
            "assert(candidate([1L, 2L, 3L], 1L) == 0L);",
            "assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);",
            "assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "import std.math;\nimport std.typecons;\nbool text_starta_endb(string text) \n{\n\tstring::size_type pos = text.find('a');\n\tif (pos == string::npos)\n\t\treturn false;\n\tstring::size_type pos2 = text.find('b');\n\tif (pos2 == string::npos)\n\t\treturn false;\n\treturn true;\n}\n\nbool text_starta_endb_with_start(string text) \n{\n\tstring::size_type pos = text.find('a');\n\tif (pos == string::npos)\n\t\treturn false;\n\tstring::size_type pos2 = text.find('b');\n\tif (pos2 == string::npos)\n\t\treturn false;\n\treturn true;\n}\n\nbool text_starta_endb_with_end(string text) \n{\n\tstring::size_type pos = text.find('a');\n\tif (pos == string::npos)\n\t\treturn false;\n\tstring::size_type pos2 = text.find('b');\n\tif (pos2 == string::npos)\n\t\treturn false;\n\treturn true;\n}\n\nbool text_starta_endb_with_start_with_end(string text) \n{\n\tstring::size_type pos = text.find('a');\n\tif (pos == string::npos)\n\t\treturn false;\n\tstring::size_type pos2 = text.find('b');\n\tif (pos2 == string::npos)\n\t\treturn false;\n\treturn true;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given associative array.",
        "code": "import std.math;\nimport std.typecons;\nlong return_sum(Nullable!(long[string]) dict) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < string.length; i++)\n\t{\n\t\tsum += string[i];\n\t}\n\treturn sum;\n}\n\nlong return_sum(Nullable!(long[string]) dict, long[] array) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tsum += array[i];\n\t}\n\treturn sum;\n}\n\nlong return_sum(Nullable!(long[string]) dict, long[][] array) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tsum += array[i][0];\n\t}\n\treturn sum;\n}\n\nlong return_sum(Nullable!(long[string]) dict, long[][][] array) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tsum += array[i][0][0];\n\t}\n\treturn sum;\n}\n\nlong return_sum(Nullable!(long[string]) dict, long[][][][] array) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tsum += array[i][0][0][0];\n\t}\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a dthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "import std.math;\nimport std.typecons;\nlong sum_in_range(long l, long r) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w1 = 0;\n\tlong w2 = 0;\n\tlong w3 = 0;\n\tlong w4 = 0;\n\tlong w5 = 0;\n\tlong w6 = 0;\n\tlong w7 = 0;\n\tlong w8 = 0;\n\tlong w9 = 0;\n\tlong w10 = 0;\n\tlong w11 = 0;\n\tlong w12 = 0;\n\tlong w13 = 0;\n\tlong w14 = 0;\n\tlong w15 = 0;\n\tlong w16 = 0;\n\tlong w17 = 0;\n\tlong w18 = 0;\n\tlong w19 = 0;\n\tlong w20 = 0;\n\tlong w21 = 0;\n\tlong w22 = 0;\n\tlong w23 = 0;\n\tlong w24 = 0;\n\tlong w25 = 0;\n\tlong w26 = 0;\n\tlong w27 = 0;\n\tlong w28 = 0;\n\tlong w29 = 0;\n\tlong w30 = 0;\n\tlong w31 = 0;\n\tlong w32 = 0;\n\tlong w33 = 0;\n\tlong w34 = 0;\n\tlong w35 = 0;\n\tlong w36 = 0;\n\tlong w37 = 0;\n\tlong w38 = 0;\n\tlong w39 = 0;\n\tlong w40 = 0;\n\tlong w41 = 0;\n\tlong w42 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = sum_in_range;",
            "assert(candidate(2L, 5L) == 8L);",
            "assert(candidate(5L, 7L) == 12L);",
            "assert(candidate(7L, 13L) == 40L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a dthon function to find the sum of an array.",
        "code": "import std.math;\nimport std.typecons;\nlong _sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n\nlong _sum(long[] arr, long[] arr2) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i] + arr2[i];\n\t}\n\treturn sum;\n}\n\nlong _sum(long[] arr, long[] arr2, long[] arr3) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i] + arr2[i] + arr3[i];\n\t}\n\treturn sum;\n}\n\nlong _sum(long[] arr, long[] arr2, long[] arr3, long[] arr4) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i] + arr2[i] + arr3[i] + arr4[i];\n\t}\n\treturn sum;\n}\n\nlong _sum(long[] arr, long[] arr2, long[] arr3, long[] arr4, long[] arr5) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i] + arr2[i] + arr3[i] + arr4[i] + arr5[i];\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = _sum;",
            "assert(candidate([1L, 2L, 3L]) == 6L);",
            "assert(candidate([15L, 12L, 13L, 10L]) == 50L);",
            "assert(candidate([0L, 1L, 2L]) == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "import std.math;\nimport std.typecons;\nlong left_rotate(long n, long d) \n{\n\tlong r = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong rp = 0;\n\tlong rq = 0;\n\tlong rpq = 0;\n\tlong rpq = 0;\n\tlong rqq = 0;\n\tlong rqq = 0;\n\tlong rqqq = 0;\n\tlong rqqq = 0;\n\tlong rqqq = 0;\n\tlong rqqqq = 0;\n\tlong rqqqq = 0;\n\tlong rqqqq = 0;\n\tlong rqqqqq = 0;\n\tlong rqqqqq = 0;\n\tlong rqqqqqq = 0;\n\tlong rqqqqqq = 0;\n\tlong rqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqqqq = 0;\n\tlong rqqqqq\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = left_rotate;",
            "assert(candidate(16L, 2L) == 64L);",
            "assert(candidate(10L, 2L) == 40L);",
            "assert(candidate(99L, 3L) == 792L);",
            "assert(candidate(99L, 3L) == 792L);",
            "assert(candidate(1L, 3L) == 8L);",
            "assert(candidate(5L, 3L) == 40L);",
            "assert(candidate(29L, 3L) == 232L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a dthon function to check whether the length of the word is odd or not.",
        "code": "import std.math;\nimport std.typecons;\nbool word_len(string s) \n{\n\tint len = s.size();\n\tif (len % 2 == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool word_len_even(string s) \n{\n\tint len = s.size();\n\tif (len % 2 == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool word_len_odd(string s) \n{\n\tint len = s.size();\n\tif (len % 2 == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool word_len_even_odd(string s) \n{\n\tint len = s.size();\n\tif (len % 2 == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool word_len_odd_even(string s) \n{\n\tint len = s.size();\n\tif (len % 2 == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool word_len_odd_even_odd(string s) \n{\n\tint len = s.size();\n\tif (len % 2 == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool word_len_odd_even_odd\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = word_len;",
            "assert(candidate(\"Hadoop\") == false);",
            "assert(candidate(\"great\") == true);",
            "assert(candidate(\"structure\") == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "import std.math;\nimport std.typecons;\nstring remove_all_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i]!='') \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_all_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i]!='') \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_all_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i]!='') \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_all_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i]!='') \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nstring remove_all_spaces(string text) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < text.length(); i++) \n\t{\n\t\tif (text[i]!='') \n\t\t{\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = remove_all_spaces;",
            "assert(candidate(\"python  program\") == \"pythonprogram\");",
            "assert(candidate(\"python   programming    language\") == \"pythonprogramminglanguage\");",
            "assert(candidate(\"python                     program\") == \"pythonprogram\");",
            "assert(candidate(\"   python                     program\") == \"pythonprogram\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a dthon function to count the number of equal numbers from three given integers.",
        "code": "import std.math;\nimport std.typecons;\nlong test_three_equal(long x, long y, long z) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x1 = 0;\n\tlong y1 = 0;\n\tlong z1 = 0;\n\tlong x2 = 0;\n\tlong y2 = 0;\n\tlong z2 = 0;\n\tlong x3 = 0;\n\tlong y3 = 0;\n\tlong z3 = 0;\n\tlong x4 = 0;\n\tlong y4 = 0;\n\tlong z4 = 0;\n\tlong x5 = 0;\n\tlong y5 = 0;\n\tlong z5 = 0;\n\tlong x6 = 0;\n\tlong y6 = 0;\n\tlong z6 = 0;\n\tlong x7 = 0;\n\tlong y7 = 0;\n\tlong z7 = 0;\n\tlong x8 = 0;\n\tlong y8 = 0;\n\tlong z8 = 0;\n\tlong x9 = 0;\n\tlong y9 = 0;\n\tlong z9 = 0;\n\tlong x10 = 0;\n\tlong y10 = 0;\n\tlong z10 = 0;\n\tlong x11 = 0;\n\tlong y11 = 0;\n\tlong z11 = 0;\n\tlong x12 = 0;\n\tlong y12 = 0;\n\tlong z12 = 0;\n\tlong x13 = 0;\n\tlong y13 = 0;\n\tlong z13 = 0;\n\tlong x14 = 0;\n\tlong y14 = 0;\n\tlong z14 = 0;\n\tlong x15 =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = test_three_equal;",
            "assert(candidate(1L, 1L, 1L) == 3L);",
            "assert(candidate(-1L, -2L, -3L) == 0L);",
            "assert(candidate(1L, 2L, 2L) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "import std.math;\nimport std.typecons;\nlong count_rotation(long[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_rotation(int[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_rotation(char[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nlong count_rotation(short[] arr) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < arr.length\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = count_rotation;",
            "assert(candidate([3L, 2L, 1L]) == 1L);",
            "assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);",
            "assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);",
            "assert(candidate([1L, 2L, 3L]) == 0L);",
            "assert(candidate([1L, 3L, 2L]) == 2L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "import std.math;\nimport std.typecons;\nbool is_perfect_square(long n) \n{\n\tif(n == 0)\n\t\treturn true;\n\tif(n == 1)\n\t\treturn true;\n\tif(n == 2)\n\t\treturn true;\n\tif(n == 3)\n\t\treturn true;\n\tif(n == 4)\n\t\treturn true;\n\tif(n == 5)\n\t\treturn true;\n\tif(n == 6)\n\t\treturn true;\n\tif(n == 7)\n\t\treturn true;\n\tif(n == 8)\n\t\treturn true;\n\tif(n == 9)\n\t\treturn true;\n\tif(n == 10)\n\t\treturn true;\n\tif(n == 11)\n\t\treturn true;\n\tif(n == 12)\n\t\treturn true;\n\tif(n == 13)\n\t\treturn true;\n\tif(n == 14)\n\t\treturn true;\n\tif(n == 15)\n\t\treturn true;\n\tif(n == 16)\n\t\treturn true;\n\tif(n == 17)\n\t\treturn true;\n\tif(n == 18)\n\t\treturn true;\n\tif(n == 19)\n\t\treturn true;\n\tif(n == 20)\n\t\treturn true;\n\tif(n == 21)\n\t\treturn true;\n\tif(n == 22)\n\t\treturn true;\n\tif(n == 23)\n\t\treturn true;\n\tif(n == 24)\n\t\treturn true;\n\tif(n == 25)\n\t\treturn true;\n\tif(n == 26)\n\t\treturn true;\n\tif(n == 27)\n\t\treturn true;\n\tif(n == 28)\n\t\treturn true;\n\tif(n == 29)\n\t\treturn true;\n\tif(n == 30)\n\t\treturn true;\n\tif(n == 31)\n\t\treturn true;\n\tif(n == 32)\n\t\treturn true;\n\tif(\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_perfect_square;",
            "assert(candidate(10L) == false);",
            "assert(candidate(36L) == true);",
            "assert(candidate(14L) == false);",
            "assert(candidate(196L) == true);",
            "assert(candidate(125L) == false);",
            "assert(candidate(15625L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in an array is even or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_product_even(long[] arr) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum % 2 == 0;\n}\n\nbool is_product_odd(long[] arr) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum % 2 == 1;\n}\n\nbool is_product_even(int[] arr) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum % 2 == 0;\n}\n\nbool is_product_odd(int[] arr) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum % 2 == 1;\n}\n\nbool is_product_even(long[] arr) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum % 2 == 0;\n}\n\nbool is_product_odd(long[] arr) \n{\n\tlong sum\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_product_even;",
            "assert(candidate([1L, 2L, 3L]) == true);",
            "assert(candidate([1L, 2L, 1L, 4L]) == true);",
            "assert(candidate([1L, 1L]) == false);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the array in an array of arrays whose sum of elements is the highest.",
        "code": "import std.math;\nimport std.typecons;\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_sum = new long[lists.length];\n\tfor (int i = 0; i < lists.length; i++) {\n\t\tmax_sum[i] = 0;\n\t\tfor (int j = 0; j < lists[i].length; j++) {\n\t\t\tmax_sum[i] = std.max(max_sum[i], lists[i][j]);\n\t\t}\n\t}\n\treturn max_sum;\n}\n\nlong[][] max_sum_list_2(long[][] lists) \n{\n\tlong[][] max_sum = new long[lists.length][];\n\tfor (int i = 0; i < lists.length; i++) {\n\t\tmax_sum[i] = new long[lists[i].length];\n\t\tfor (int j = 0; j < lists[i].length; j++) {\n\t\t\tmax_sum[i][j] = 0;\n\t\t\tfor (int k = 0; k < lists[i].length; k++) {\n\t\t\t\tmax_sum[i][j] = std.max(max_sum[i][j], lists[i][k]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;\n}\n\nlong[][] max_sum_list_3(long[][] lists) \n{\n\tlong[][] max_sum = new long[lists.length][];\n\tfor (int i = 0; i < lists.length; i++) {\n\t\tmax_sum[i] = new long[lists[i].length];\n\t\tfor (int j = 0; j < lists[i].length; j++) {\n\t\t\tmax_sum[i][j] = 0;\n\t\t\tfor (int k =\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_sum_list;",
            "assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);",
            "assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);",
            "assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "import std.math;\nimport std.typecons;\nlong max_run_uppercase(string test_str) \n{\n\tlong max_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) \n\t{\n\t\tif (test_str[i] >= 'A' && test_str[i] <= 'Z') \n\t\t{\n\t\t\tmax_run = std::max(max_run, i);\n\t\t}\n\t}\n\treturn max_run;\n}\n\nlong max_run_lowercase(string test_str) \n{\n\tlong max_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) \n\t{\n\t\tif (test_str[i] >= 'a' && test_str[i] <= 'z') \n\t\t{\n\t\t\tmax_run = std::max(max_run, i);\n\t\t}\n\t}\n\treturn max_run;\n}\n\nlong max_run_digits(string test_str) \n{\n\tlong max_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tmax_run = std::max(max_run, i);\n\t\t}\n\t}\n\treturn max_run;\n}\n\nlong max_run_upper_case(string test_str) \n{\n\tlong max_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) \n\t{\n\t\tif (test_str[i] >= 'A' && test_str[i] <= 'Z\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = max_run_uppercase;",
            "assert(candidate(\"GeMKSForGERksISBESt\") == 5L);",
            "assert(candidate(\"PrECIOusMOVemENTSYT\") == 6L);",
            "assert(candidate(\"GooGLEFluTTER\") == 4L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a dthon function to find the first odd number in a given array of numbers.",
        "code": "import std.math;\nimport std.typecons;\nlong first_odd(long[] nums) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = first_odd;",
            "assert(candidate([1L, 3L, 5L]) == 1L);",
            "assert(candidate([2L, 4L, 1L, 3L]) == 1L);",
            "assert(candidate([8L, 9L, 1L]) == 9L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given tuples contain the k or not.",
        "code": "import std.math;\nimport std.typecons;\nbool check_K(long[] test_tup, long K) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = 0; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (test_tup[i] == test_tup[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nbool check_K(long[] test_tup, long K, long N) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = 0; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (test_tup[i] == test_tup[j])\n\t\t\t{\n\t\t\t\tif (test_tup[i] == K)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nbool check_K(long[] test_tup, long K, long N, long M) \n{\n\tlong i, j;\n\tfor (i = 0; i < test_tup.length; i++)\n\t{\n\t\tfor (j = 0; j < test_tup.length; j++)\n\t\t{\n\t\t\tif (test_tup[i] == test_tup[j])\n\t\t\t{\n\t\t\t\tif (test_tup[i] == K)\n\t\t\t\t{\n\t\t\t\t\tif (test_tup[i] == N)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (test_tup[i] == M)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = check_K;",
            "assert(candidate([10L, 4L, 5L, 6L, 8L], 6L) == true);",
            "assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 7L) == false);",
            "assert(candidate([7L, 8L, 9L, 44L, 11L, 12L], 11L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "import std.math;\nimport std.typecons;\nbool check_smaller(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n{\n\tif(test_tup1.size()!= test_tup2.size())\n\t\treturn false;\n\t\n\tfor(int i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tif(test_tup1[i] < test_tup2[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool check_larger(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n{\n\tif(test_tup1.size()!= test_tup2.size())\n\t\treturn false;\n\t\n\tfor(int i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tif(test_tup1[i] > test_tup2[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nbool check_equal(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n{\n\tif(test_tup1.size()!= test_tup2.size())\n\t\treturn false;\n\t\n\tfor(int i = 0; i < test_tup1.size(); i++)\n\t{\n\t\tif(test_tup1[i]!= test_tup2[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "import std.math;\nimport std.typecons;\nlong tetrahedral_number(long n) \n{\n\tlong i,j,k,l,m,n;\n\tlong result;\n\t\n\tif(n<=0)\n\t\treturn 0;\n\t\n\tif(n==1)\n\t\treturn 1;\n\t\n\tif(n==2)\n\t\treturn 2;\n\t\n\tif(n==3)\n\t\treturn 3;\n\t\n\tif(n==4)\n\t\treturn 4;\n\t\n\tif(n==5)\n\t\treturn 5;\n\t\n\tif(n==6)\n\t\treturn 6;\n\t\n\tif(n==7)\n\t\treturn 7;\n\t\n\tif(n==8)\n\t\treturn 8;\n\t\n\tif(n==9)\n\t\treturn 9;\n\t\n\tif(n==10)\n\t\treturn 10;\n\t\n\tif(n==11)\n\t\treturn 11;\n\t\n\tif(n==12)\n\t\treturn 12;\n\t\n\tif(n==13)\n\t\treturn 13;\n\t\n\tif(n==14)\n\t\treturn 14;\n\t\n\tif(n==15)\n\t\treturn 15;\n\t\n\tif(n==16)\n\t\treturn 16;\n\t\n\tif(n==17)\n\t\treturn 17;\n\t\n\tif(n==18)\n\t\treturn 18;\n\t\n\tif(n==19)\n\t\treturn 19;\n\t\n\tif(n==20)\n\t\treturn 20;\n\t\n\tif(n==21)\n\t\treturn 21;\n\t\n\tif(n==22)\n\t\treturn 22;\n\t\n\tif(n==23)\n\t\treturn 23;\n\t\n\tif(n==24)\n\t\treturn 24;\n\t\n\tif(n==25)\n\t\treturn 25;\n\t\n\tif(n==26)\n\t\treturn 26;\n\t\n\tif(n==27)\n\t\treturn 27;\n\t\n\tif(n==28)\n\t\treturn 28;\n\t\n\tif(n==29\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = tetrahedral_number;",
            "assert(candidate(5L) == 35L);",
            "assert(candidate(6L) == 56L);",
            "assert(candidate(7L) == 84L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a dthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "import std.math;\nimport std.typecons;\nstring get_Char(string strr) \n{\n\tstring ret;\n\tfor (int i = 0; i < strr.size(); i++)\n\t{\n\t\tret += strr[i];\n\t}\n\treturn ret;\n}\n\nstring get_Char(string strr, int i) \n{\n\tstring ret;\n\tfor (int j = 0; j < strr.size(); j++)\n\t{\n\t\tret += strr[j];\n\t}\n\treturn ret;\n}\n\nstring get_Char(string strr, int i, int j) \n{\n\tstring ret;\n\tfor (int k = 0; k < strr.size(); k++)\n\t{\n\t\tret += strr[k];\n\t}\n\treturn ret;\n}\n\nstring get_Char(string strr, int i, int j, int k) \n{\n\tstring ret;\n\tfor (int l = 0; l < strr.size(); l++)\n\t{\n\t\tret += strr[l];\n\t}\n\treturn ret;\n}\n\nstring get_Char(string strr, int i, int j, int k, int l) \n{\n\tstring ret;\n\tfor (int m = 0; m < strr.size(); m++)\n\t{\n\t\tret += strr[m];\n\t}\n\treturn\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = get_Char;",
            "assert(candidate(\"abc\") == \"f\");",
            "assert(candidate(\"gfg\") == \"t\");",
            "assert(candidate(\"ab\") == \"c\");",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "import std.math;\nimport std.typecons;\nlong sequence(long n) \n{\n\tlong i,j,k,l,m,n;\n\tlong sum;\n\t\n\tif(n<1) return 0;\n\t\n\tsum=0;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tsum+=i;\n\t\tfor(j=1;j<=n;j++)\n\t\t{\n\t\t\tif(i%j==0)\n\t\t\t{\n\t\t\t\tsum+=j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}\n\nlong sequence(long n) \n{\n\tlong i,j,k,l,m,n;\n\tlong sum;\n\t\n\tif(n<1) return 0;\n\t\n\tsum=0;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tsum+=i;\n\t\tfor(j=1;j<=n;j++)\n\t\t{\n\t\t\tif(i%j==0)\n\t\t\t{\n\t\t\t\tsum+=j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}\n\nlong sequence(long n) \n{\n\tlong i,j,k,l,m,n;\n\tlong sum;\n\t\n\tif(n<1) return 0;\n\t\n\tsum=0;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tsum+=i;\n\t\tfor(j=1;j<=n;j++)\n\t\t{\n\t\t\tif(i%j==0)\n\t\t\t{\n\t\t\t\tsum+=j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "import std.math;\nimport std.typecons;\nlong centered_hexagonal_number(long n) \n{\n\tlong i, j, k, l, m, n_max;\n\tlong n_min;\n\tlong n_sum;\n\tlong n_sum_max;\n\tlong n_sum_min;\n\tlong n_sum_sum;\n\tlong n_sum_sum_max;\n\tlong n_sum_sum_min;\n\tlong n_sum_sum_sum;\n\tlong n_sum_sum_sum_max;\n\tlong n_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum;\n\tlong n_sum_sum_sum_sum_max;\n\tlong n_sum_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum_sum;\n\tlong n_sum_sum_sum_sum_sum_max;\n\tlong n_sum_sum_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum_sum_sum;\n\tlong n_sum_sum_sum_sum_sum_sum_max;\n\tlong n_sum_sum_sum_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum_sum_sum_sum;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_max;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_sum;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_max;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_sum;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_max;\n\tlong n_sum_sum_sum_sum_sum_sum_sum_min;\n\tlong n_sum_sum_sum_sum_sum\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = centered_hexagonal_number;",
            "assert(candidate(10L) == 271L);",
            "assert(candidate(2L) == 7L);",
            "assert(candidate(9L) == 217L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single associative array.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(string[string]) merge_dictionaries_three(Nullable!(string[string]) dict1, Nullable!(string[string]) dict2, Nullable!(string[string]) dict3) \n{\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\tstring[string] = null;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = merge_dictionaries_three;",
            "{",
            "auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable, [\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"].nullable);",
            "assert(!result.isNull && result.get == [\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"]);",
            "}",
            "{",
            "auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable, [\"L\": \"lavender\", \"B\": \"Blue\"].nullable);",
            "assert(!result.isNull && result.get == [\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"]);",
            "}",
            "{",
            "auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"L\": \"lavender\", \"B\": \"Blue\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable);",
            "assert(!result.isNull && result.get == [\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"]);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in an array, returned as an associative array.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(long[long]) freq_count(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\treturn freq_count(list2);\n}\n\nNullable(long[long]) freq_count(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\treturn freq_count(list2);\n}\n\nNullable(long[long]) freq_count(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\treturn freq_count(list2);\n}\n\nNullable(long[long]) freq_count(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\treturn freq_count(list2);\n}\n\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = freq_count;",
            "{",
            "auto result = candidate([10L, 10L, 10L, 10L, 20L, 20L, 20L, 20L, 40L, 40L, 50L, 50L, 30L]);",
            "assert(!result.isNull && result.get == [10L: 4L, 20L: 4L, 40L: 2L, 50L: 2L, 30L: 1L]);",
            "}",
            "{",
            "auto result = candidate([1L, 2L, 3L, 4L, 3L, 2L, 4L, 1L, 3L, 1L, 4L]);",
            "assert(!result.isNull && result.get == [1L: 3L, 2L: 2L, 3L: 3L, 4L: 3L]);",
            "}",
            "{",
            "auto result = candidate([5L, 6L, 7L, 4L, 9L, 10L, 4L, 5L, 6L, 7L, 9L, 5L]);",
            "assert(!result.isNull && result.get == [10L: 1L, 5L: 3L, 6L: 2L, 7L: 2L, 4L: 2L, 9L: 2L]);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "import std.math;\nimport std.typecons;\nlong closest_num(long N) \n{\n\tlong min = std.math.Long.MAX_VALUE;\n\tlong max = std.math.Long.MIN_VALUE;\n\tlong i;\n\tfor (i = 0; i < N; i++) {\n\t\tif (i == 0) {\n\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t} else {\n\t\t\tif (i == 1) {\n\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t} else {\n\t\t\t\tif (i == 2) {\n\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tif (i == 3) {\n\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (i == 4) {\n\t\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (i == 5) {\n\t\t\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (i == 6) {\n\t\t\t\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (i == 7) {\n\t\t\t\t\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (i == 8) {\n\t\t\t\t\t\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\t\t\t\t\t\tmax = std.math.Long.MIN_VALUE;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (i == 9) {\n\t\t\t\t\t\t\t\t\t\t\t\tmin = std.math.Long.MAX_VALUE;\n\t\t\t\t\t\t\t\t\t\t\t\tmax = std\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = closest_num;",
            "assert(candidate(11L) == 10L);",
            "assert(candidate(7L) == 6L);",
            "assert(candidate(12L) == 11L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in an array.",
        "code": "import std.math;\nimport std.typecons;\nlong[] square_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tresult[i] = nums[i] * nums[i];\n\t}\n\treturn result;\n}\n\nlong sum_squares(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tsum += nums[i] * nums[i];\n\t}\n\treturn sum;\n}\n\nlong sum_squares_n(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tsum += nums[i] * nums[i];\n\t}\n\treturn sum;\n}\n\nlong sum_squares_n_n(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tsum += nums[i] * nums[i];\n\t}\n\treturn sum;\n}\n\nlong sum_squares_n_n_n(long[] nums) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tsum += nums[i] * nums[i];\n\t}\n\treturn sum;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a dthon function to find the length of the longest word.",
        "code": "import std.math;\nimport std.typecons;\nlong len_log(string[] list1) \n{\n\tlong len = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == \"\")\n\t\t\tcontinue;\n\t\tif (std.math.is_prime(list1[i]))\n\t\t\tlen++;\n\t}\n\treturn len;\n}\n\nlong len_log2(string[] list1) \n{\n\tlong len = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == \"\")\n\t\t\tcontinue;\n\t\tif (std.math.is_prime(list1[i]))\n\t\t\tlen++;\n\t}\n\treturn len;\n}\n\nlong len_log3(string[] list1) \n{\n\tlong len = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == \"\")\n\t\t\tcontinue;\n\t\tif (std.math.is_prime(list1[i]))\n\t\t\tlen++;\n\t}\n\treturn len;\n}\n\nlong len_log4(string[] list1) \n{\n\tlong len = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] == \"\")\n\t\t\tcontinue;\n\t\tif (std.math.is_prime(list1[i]))\n\t\t\tlen++;\n\t}\n\treturn len;\n}\n\nlong len_log5(string[] list1) \n{\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = len_log;",
            "assert(candidate([\"python\", \"PHP\", \"bigdata\"]) == 7L);",
            "assert(candidate([\"a\", \"ab\", \"abc\"]) == 3L);",
            "assert(candidate([\"small\", \"big\", \"tall\"]) == 5L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given array of string values.",
        "code": "import std.math;\nimport std.typecons;\nbool find_substring(string[] str1, string sub_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint len = str1.length;\n\tint len_sub = sub_str.length();\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(str1[i] == sub_str)\n\t\t{\n\t\t\tj = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(str1[i] == sub_str)\n\t\t{\n\t\t\tk = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(k == j)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nbool find_substring(string[] str1, string sub_str, int start, int end) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint len = str1.length;\n\tint len_sub = sub_str.length();\n\t\n\tfor(i = start; i < end; i++)\n\t{\n\t\tif(str1[i] == sub_str)\n\t\t{\n\t\t\tj = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(i = start; i < end; i++)\n\t{\n\t\tif(str1[i] == sub_str)\n\t\t{\n\t\t\tk = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(k == j)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "import std.math;\nimport std.typecons;\nbool is_undulating(long n) \n{\n\tif (n == 0)\n\t\treturn true;\n\telse if (n == 1)\n\t\treturn false;\n\telse if (n == 2)\n\t\treturn true;\n\telse if (n == 3)\n\t\treturn false;\n\telse if (n == 4)\n\t\treturn true;\n\telse if (n == 5)\n\t\treturn false;\n\telse if (n == 6)\n\t\treturn true;\n\telse if (n == 7)\n\t\treturn false;\n\telse if (n == 8)\n\t\treturn true;\n\telse if (n == 9)\n\t\treturn false;\n\telse if (n == 10)\n\t\treturn true;\n\telse if (n == 11)\n\t\treturn false;\n\telse if (n == 12)\n\t\treturn true;\n\telse if (n == 13)\n\t\treturn false;\n\telse if (n == 14)\n\t\treturn true;\n\telse if (n == 15)\n\t\treturn false;\n\telse if (n == 16)\n\t\treturn true;\n\telse if (n == 17)\n\t\treturn false;\n\telse if (n == 18)\n\t\treturn true;\n\telse if (n == 19)\n\t\treturn false;\n\telse if (n == 20)\n\t\treturn true;\n\telse if (n == 21)\n\t\treturn false;\n\telse if (n == 22)\n\t\treturn true;\n\telse if (n == 23)\n\t\treturn false;\n\telse if (n == 24)\n\t\treturn true;\n\telse if (n == 25)\n\t\treturn false;\n\telse if (n == 26)\n\t\treturn true;\n\telse if (n == 27)\n\t\treturn false;\n\telse if (n == 28)\n\t\treturn true;\n\telse if (n == 29)\n\t\treturn false;\n\telse if (n == 30)\n\t\treturn true;\n\telse if (n == 31)\n\t\treturn false;\n\telse if (n == 32)\n\t\treturn true;\n\telse\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = is_undulating;",
            "assert(candidate(1212121L) == true);",
            "assert(candidate(1991L) == false);",
            "assert(candidate(121L) == true);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "import std.math;\nimport std.typecons;\nlong power(long a, long b) \n{\n\tlong result = 1;\n\twhile (b > 0) \n\t{\n\t\tresult *= a;\n\t\ta *= a;\n\t\tb--;\n\t}\n\treturn result;\n}\n\nlong power(long a, long b, long c) \n{\n\tlong result = 1;\n\twhile (b > 0) \n\t{\n\t\tresult *= a;\n\t\ta *= a;\n\t\tb--;\n\t\tc--;\n\t}\n\treturn result;\n}\n\nlong power(long a, long b, long c, long d) \n{\n\tlong result = 1;\n\twhile (b > 0) \n\t{\n\t\tresult *= a;\n\t\ta *= a;\n\t\tb--;\n\t\tc--;\n\t\td--;\n\t}\n\treturn result;\n}\n\nlong power(long a, long b, long c, long d, long e) \n{\n\tlong result = 1;\n\twhile (b > 0) \n\t{\n\t\tresult *= a;\n\t\ta *= a;\n\t\tb--;\n\t\tc--;\n\t\td--;\n\t\te--;\n\t}\n\treturn result;\n}\n\nlong power(long a, long b, long c, long d, long e, long f) \n{\n\tlong result = 1;\n\twhile (b > 0) \n\t{\n\t\tresult *= a;\n\t\ta *= a;\n\t\tb--;\n\t\tc--;\n\t\td--;\n\t\te--;\n\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = power;",
            "assert(candidate(3L, 4L) == 81L);",
            "assert(candidate(2L, 3L) == 8L);",
            "assert(candidate(5L, 5L) == 3125L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given an array of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "import std.math;\nimport std.typecons;\nstring index_minimum(Tuple!(string, long)[] test_list) \n{\n\tstring result = \"\";\n\tlong min = std::numeric_limits<long>::max();\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tif (test_list[i].second < min)\n\t\t{\n\t\t\tmin = test_list[i].second;\n\t\t\tresult = test_list[i].first;\n\t\t}\n\t}\n\treturn result;\n}\n\nstring index_minimum(Tuple!(string, long)[] test_list, int index) \n{\n\tstring result = \"\";\n\tlong min = std::numeric_limits<long>::max();\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tif (test_list[i].second < min)\n\t\t{\n\t\t\tmin = test_list[i].second;\n\t\t\tresult = test_list[i].first;\n\t\t}\n\t}\n\treturn result;\n}\n\nstring index_minimum(Tuple!(string, long)[] test_list, int index, int length) \n{\n\tstring result = \"\";\n\tlong min = std::numeric_limits<long>::max();\n\tfor (int i = 0; i < test_list.length; i++)\n\t{\n\t\tif (test_list[i].second < min)\n\t\t{\n\t\t\tmin = test_list[i].second;\n\t\t\tresult = test_list[i].first;\n\t\t}\n\t}\n\treturn result;\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a dthon function to find the length of the smallest array in an array of arrays.",
        "code": "import std.math;\nimport std.typecons;\nlong Find_Min_Length(long[][] lst) \n{\n\tlong i, j, k, l, m, n, len;\n\tlong minlen = 0;\n\tlong maxlen = 0;\n\tlong maxi = 0;\n\tlong minj = 0;\n\tlong mink = 0;\n\tlong minl = 0;\n\tlong minm = 0;\n\tlong minn = 0;\n\tlong minp = 0;\n\tlong minq = 0;\n\tlong minr = 0;\n\tlong mins = 0;\n\tlong mint = 0;\n\tlong minu = 0;\n\tlong minv = 0;\n\tlong minw = 0;\n\tlong minx = 0;\n\tlong miny = 0;\n\tlong minz = 0;\n\tlong minw1 = 0;\n\tlong minw2 = 0;\n\tlong minw3 = 0;\n\tlong minw4 = 0;\n\tlong minw5 = 0;\n\tlong minw6 = 0;\n\tlong minw7 = 0;\n\tlong minw8 = 0;\n\tlong minw9 = 0;\n\tlong minw10 = 0;\n\tlong minw11 = 0;\n\tlong minw12 = 0;\n\tlong minw13 = 0;\n\tlong minw14 = 0;\n\tlong minw15 = 0;\n\tlong minw16 = 0;\n\tlong minw17 = 0;\n\tlong minw18 = 0;\n\tlong minw19 = 0;\n\tlong minw20 = 0;\n\tlong minw21 = 0;\n\tlong minw22 = 0;\n\tlong minw23 = 0;\n\tlong minw24 = 0;\n\tlong minw25 = 0;\n\tlong minw26 = 0;\n\tlong minw27 = 0;\n\tlong minw28 = 0;\n\tlong minw29 = 0;\n\tlong minw30 = 0;\n\tlong minw31 = 0;\n\tlong minw32\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = Find_Min_Length;",
            "assert(candidate([[1L], [1L, 2L]]) == 1L);",
            "assert(candidate([[1L, 2L], [1L, 2L, 3L], [1L, 2L, 3L, 4L]]) == 2L);",
            "assert(candidate([[3L, 3L, 3L], [4L, 4L, 4L, 4L]]) == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a dthon function to find the number of divisors of a given integer.",
        "code": "import std.math;\nimport std.typecons;\nlong divisor(long n) \n{\n\tlong i;\n\tlong result = 1;\n\t\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong divisor(long n) \n{\n\tlong i;\n\tlong result = 1;\n\t\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong divisor(long n) \n{\n\tlong i;\n\tlong result = 1;\n\t\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong divisor(long n) \n{\n\tlong i;\n\tlong result = 1;\n\t\n\tfor (i = 2; i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tresult = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nlong divisor(long n) \n{\n\tlong i;\n\tlong result = 1;\n\t\n\tfor\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = divisor;",
            "assert(candidate(15L) == 4L);",
            "assert(candidate(12L) == 6L);",
            "assert(candidate(9L) == 3L);",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened array of arrays, returned in an associative array.",
        "code": "import std.math;\nimport std.typecons;\nNullable!(long[long]) frequency_lists(long[][] list1) \n{\n\tlong[][] list2 = new long[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2[i] = new long[list1[i].length];\n\t\tfor (int j = 0; j < list1[i].length; j++) {\n\t\t\tlist2[i][j] = list1[i][j];\n\t\t}\n\t}\n\treturn frequency_lists(list2);\n}\n\nNullable!(long[][]) frequency_lists(long[][] list1) \n{\n\tlong[][] list2 = new long[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2[i] = new long[list1[i].length];\n\t\tfor (int j = 0; j < list1[i].length; j++) {\n\t\t\tlist2[i][j] = list1[i][j];\n\t\t}\n\t}\n\treturn frequency_lists(list2);\n}\n\nNullable!(long[][]) frequency_lists(long[][] list1) \n{\n\tlong[][] list2 = new long[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2[i] = new long[list1[i].length];\n\t\tfor (int j = 0; j < list1[i].length; j++) {\n\t\t\tlist2[i][j] = list1[i][j];\n\t\t}\n\t}\n\treturn frequency_lists(list2);\n}\n\nNullable!(long[][]) frequency_lists(long[][] list1) \n{\n\tlong[][] list2 = new long[list1.length][];\n\tfor (int i = 0; i < list1.length; i++) {\n\t\tlist2\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = frequency_lists;",
            "{",
            "auto result = candidate([[1L, 2L, 3L, 2L], [4L, 5L, 6L, 2L], [7L, 8L, 9L, 5L]]);",
            "assert(!result.isNull && result.get == [1L: 1L, 2L: 3L, 3L: 1L, 4L: 1L, 5L: 2L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L]);",
            "}",
            "{",
            "auto result = candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L]]);",
            "assert(!result.isNull && result.get == [1L: 1L, 2L: 1L, 3L: 1L, 4L: 1L, 5L: 1L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L, 10L: 1L, 11L: 1L, 12L: 1L]);",
            "}",
            "{",
            "auto result = candidate([[20L, 30L, 40L, 17L], [18L, 16L, 14L, 13L], [10L, 20L, 30L, 40L]]);",
            "assert(!result.isNull && result.get == [20L: 2L, 30L: 2L, 40L: 2L, 17L: 1L, 18L: 1L, 16L: 1L, 14L: 1L, 13L: 1L, 10L: 1L]);",
            "}",
            "}",
            "void main(){}"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "import std.math;\nimport std.typecons;\nstring decimal_to_binary(long n) \n{\n\tstring s;\n\tlong i;\n\t\n\tif (n == 0)\n\t\treturn \"0\";\n\t\n\ts = std::to_string(n);\n\t\n\tfor (i = s.length() - 1; i >= 0; i--)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tbreak;\n\t}\n\t\n\tif (i < 0)\n\t\treturn \"0\";\n\t\n\treturn s.substr(0, i + 1);\n}\n\nstring decimal_to_binary(double n) \n{\n\tstring s;\n\tlong i;\n\t\n\tif (n == 0)\n\t\treturn \"0\";\n\t\n\ts = std::to_string(n);\n\t\n\tfor (i = s.length() - 1; i >= 0; i--)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tbreak;\n\t}\n\t\n\tif (i < 0)\n\t\treturn \"0\";\n\t\n\treturn s.substr(0, i + 1);\n}\n\nstring decimal_to_binary(long n) \n{\n\tstring s;\n\tlong i;\n\t\n\tif (n == 0)\n\t\treturn \"0\";\n\t\n\ts = std::to_string(n);\n\t\n\tfor (i = s.length() - 1; i >= 0; i--)\n\t{\n\t\tif (s[i] == '0')\n\t\t\tbreak;\n\t}\n\t\n\tif (i < 0)\n\t\treturn \"0\";\n\t\n\treturn s.substr(0, i + 1);\n}\n\n",
        "test_list": []
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a dthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "import std.math;\nimport std.typecons;\nlong find_Rotations(string str) \n{\n\tlong rotations = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong\n",
        "test_list": [
            "unittest",
            "{",
            "alias candidate = find_Rotations;",
            "assert(candidate(\"aaaa\") == 1L);",
            "assert(candidate(\"ab\") == 2L);",
            "assert(candidate(\"abc\") == 3L);",
            "}",
            "void main(){}"
        ]
    }
]