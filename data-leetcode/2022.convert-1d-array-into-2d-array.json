[
    {
        "title": "Convert 1D Array Into 2D Array",
        "question_content": "You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with  m rows and n columns using all the elements from original.\nThe elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.\nReturn an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.\n&nbsp;\nExample 1:\n\nInput: original = [1,2,3,4], m = 2, n = 2\nOutput: [[1,2],[3,4]]\nExplanation: The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.\n\nExample 2:\n\nInput: original = [1,2,3], m = 1, n = 3\nOutput: [[1,2,3]]\nExplanation: The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.\n\nExample 3:\n\nInput: original = [1,2], m = 1, n = 1\nOutput: []\nExplanation: There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.\n\n&nbsp;\nConstraints:\n\n\t1 <= original.length <= 5 * 104\n\t1 <= original[i] <= 105\n\t1 <= m, n <= 4 * 104",
        "solutions": [
            {
                "id": 1499046,
                "title": "java-o-n",
                "content": "```\\npublic int[][] construct2DArray(int[] original, int m, int n) {\\n\\tif(original.length != m*n) return new int[0][0];\\n\\tint[][] result = new int[m][n];\\n\\tfor(int i=0;i<original.length;i++)\\n\\t\\tresult[i/n][i%n] = original[i];\\n\\treturn result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int[][] construct2DArray(int[] original, int m, int n) {\\n\\tif(original.length != m*n) return new int[0][0];\\n\\tint[][] result = new int[m][n];\\n\\tfor(int i=0;i<original.length;i++)\\n\\t\\tresult[i/n][i%n] = original[i];\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499000,
                "title": "python3-simulation",
                "content": "Please check out this [commit](https://github.com/gaosanyong/leetcode/commit/182350e41572fb26ffb8c44204b037cc9f0e5035) for solutions of biweekly 62. \\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        if len(original) == m*n: \\n            for i in range(0, len(original), n): \\n                ans.append(original[i:i+n])\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        if len(original) == m*n: \\n            for i in range(0, len(original), n): \\n                ans.append(original[i:i+n])\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1503079,
                "title": "c-2-simple-and-concise-solutions-4-lines",
                "content": "**Solution I:**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (m * n != original.size()) return {};\\n        \\n        vector<vector<int>> res;\\n        for (int i = 0; i < m*n; i+=n)\\n            res.push_back(vector<int>(original.begin()+i, original.begin()+i+n));\\n            \\n        return res;\\n    }\\n};\\n```\\n****\\n**Solution II:** For some reason, this is much faster than the first solution\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (m * n != original.size()) return {};\\n        \\n        vector<vector<int>> res;\\n        for (int i = 0; i < m*n;) {\\n            vector<int> tmp;\\n            for (int j = 0; j < n; j++) tmp.push_back(original[i++]);\\n            res.push_back(tmp);\\n        }\\n\\n        return res;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (m * n != original.size()) return {};\\n        \\n        vector<vector<int>> res;\\n        for (int i = 0; i < m*n; i+=n)\\n            res.push_back(vector<int>(original.begin()+i, original.begin()+i+n));\\n            \\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (m * n != original.size()) return {};\\n        \\n        vector<vector<int>> res;\\n        for (int i = 0; i < m*n;) {\\n            vector<int> tmp;\\n            for (int j = 0; j < n; j++) tmp.push_back(original[i++]);\\n            res.push_back(tmp);\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499785,
                "title": "fill-as-you-go",
                "content": "This is just to avoid the 1D -> 2D pointer conversion.\\n\\n**C++**\\n```cpp\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n    vector<vector<int>> res;\\n    if (m * n == original.size())\\n        for (auto i : original) {\\n            if (res.empty() || res.back().size() == n)\\n                res.push_back({});\\n            res.back().push_back(i);\\n        }\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n    vector<vector<int>> res;\\n    if (m * n == original.size())\\n        for (auto i : original) {\\n            if (res.empty() || res.back().size() == n)\\n                res.push_back({});\\n            res.back().push_back(i);\\n        }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1535074,
                "title": "python-one-line",
                "content": "One line:\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [original[i:i+n] for i in range(0, len(original), n)] if m*n == len(original) else []\\n        \\n```\\n\\nWhich is equivalent to\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original):\\n            return []\\n        \\n        q = []\\n\\n        for i in range(0, len(original), n):\\n            q.append(original[i:i+n])\\n            \\n        return q\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [original[i:i+n] for i in range(0, len(original), n)] if m*n == len(original) else []\\n        \\n```\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original):\\n            return []\\n        \\n        q = []\\n\\n        for i in range(0, len(original), n):\\n            q.append(original[i:i+n])\\n            \\n        return q\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499226,
                "title": "c-brute-force",
                "content": "## Solution 1. Brute Force\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/convert-1d-array-into-2d-array/\\n// Author: github.com/lzl124631x\\n// Time: O(K) where `K` is the length of the original array\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& A, int m, int n) {\\n        if (A.size() != m * n) return {};\\n        vector<vector<int>> ans(m, vector<int>(n));\\n        int k = 0;\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                ans[i][j] = A[k++];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/convert-1d-array-into-2d-array/\\n// Author: github.com/lzl124631x\\n// Time: O(K) where `K` is the length of the original array\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& A, int m, int n) {\\n        if (A.size() != m * n) return {};\\n        vector<vector<int>> ans(m, vector<int>(n));\\n        int k = 0;\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                ans[i][j] = A[k++];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499102,
                "title": "java-python-3-straight-forward-code",
                "content": "```java\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m * n) {\\n            return new int[0][0];\\n        }\\n        int[][] ans = new int[m][n];\\n        for (int r = 0; r < m; ++r) {\\n            for (int c = 0; c < n; ++c) {\\n                ans[r][c] = original[r * n + c];\\n            }\\n        }\\n        return ans;\\n    }\\n```\\n```python\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        if len(original) == m * n:\\n            for r in range(m):\\n                ans.append([])\\n                for c in range(n):\\n                    ans[-1].append(original[r * n + c])\\n        return ans\\n```",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m * n) {\\n            return new int[0][0];\\n        }\\n        int[][] ans = new int[m][n];\\n        for (int r = 0; r < m; ++r) {\\n            for (int c = 0; c < n; ++c) {\\n                ans[r][c] = original[r * n + c];\\n            }\\n        }\\n        return ans;\\n    }\\n```\n```python\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        if len(original) == m * n:\\n            for r in range(m):\\n                ans.append([])\\n                for c in range(n):\\n                    ans[-1].append(original[r * n + c])\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1655794,
                "title": "5-lines-easy-java-solution",
                "content": "**Upvote if you Got It** \\uD83D\\uDE42\\nclass Solution {\\n\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n!=original.length)  return new int[][]{};\\n        int[][] res = new int[m][n];\\n        for(int i=0;i<original.length;i++)\\n            res[i/n][i%n]=original[i];\\n        return res;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n!=original.length)  return new int[][]{}",
                "codeTag": "Java"
            },
            {
                "id": 1500375,
                "title": "javascript-solution-256ms",
                "content": "The goal of this problem is to turn a 1-D array `original` into a 2-D array as long as it fits the given contraints `m, n`. If it doesn\\'t fit the constraints, then we must return an empty 2-D array.\\n\\nThe first thing we need to do is make sure that the given array `original` can fit a 2-D while following the constraints of `m` & `n`. We can do that by checking if the length of the array `original.length` is equal to the product of the given constraints `m * n`, better yet we can check if they do NOT equal so we can return an empty 2-D array as our answer.\\n- `if (original.length !== (m*n)) return []`\\n\\nNext we need to instantiate 2 arrays\\n- `let result = []` \\'result\\' will be the outer array of the 2-D array for our answer\\n- `let arr = []` \\'arr\\' will be an array that we populate with numbers from the `original` array that will then be pushed into the `result` array once its length is equal to the `n` variable given, thus making `result` a 2-D array.\\n\\nWe will need a for loop to start filling the `arr` array. The loop must iterate as many times as the length of the `original` array and push the value inside the `original` array with the index of `i` into the `arr` array\\n```\\nfor (let i = 0; i < original.length; i++){\\n\\tarr.push(original[i])\\n}\\n```\\n\\nInside the for loop we must check for when the `arr` array has reached its max length so we can add it to the `result` array. If the length of `arr` is equal to `n` we can push the `arr` array into the `result` array, after that we must reset `arr` to an empty array. \\n```\\nif (arr.length === n){\\n\\tresult.push(arr)\\n\\tarr = []\\n}\\n```\\n\\nOnce the loop has finished we can return the completed 2-D `result` array.\\n\\n**Solution:**\\n\\n```\\nvar construct2DArray = function(original, m, n) {\\n    if (original.length !== (m*n)) return []\\n    let result = []\\n    let arr = []\\n    for (let i = 0; i < original.length; i++){\\n        arr.push(original[i])\\n        if (arr.length === n){\\n            result.push(arr)\\n            arr = []\\n        }\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfor (let i = 0; i < original.length; i++){\\n\\tarr.push(original[i])\\n}\\n```\n```\\nif (arr.length === n){\\n\\tresult.push(arr)\\n\\tarr = []\\n}\\n```\n```\\nvar construct2DArray = function(original, m, n) {\\n    if (original.length !== (m*n)) return []\\n    let result = []\\n    let arr = []\\n    for (let i = 0; i < original.length; i++){\\n        arr.push(original[i])\\n        if (arr.length === n){\\n            result.push(arr)\\n            arr = []\\n        }\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1500530,
                "title": "short-self-explanatory-2-approaches-c-beginner-friendly",
                "content": "**Time: O(m * n)\\nSpace : O(m * n)**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (original.size() != m*n) \\n            return {};\\n        vector<vector<int>> ans(m, vector<int>(n,0));\\n        int k = 0;\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                ans[i][j] = original[k++];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Time: O(m * n)\\nSpace : O(m * n)**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (original.size() != m*n) \\n            return {};\\n        vector<vector<int>> ans(m, vector<int>(n,0));\\n        for(int i=0;i<original.size();i++)\\n\\t\\t    ans[i/n][i%n] = original[i];\\n        return ans;\\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (original.size() != m*n) \\n            return {};\\n        vector<vector<int>> ans(m, vector<int>(n,0));\\n        int k = 0;\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                ans[i][j] = original[k++];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (original.size() != m*n) \\n            return {};\\n        vector<vector<int>> ans(m, vector<int>(n,0));\\n        for(int i=0;i<original.size();i++)\\n\\t\\t    ans[i/n][i%n] = original[i];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2724729,
                "title": "my-clean-java-solution-single-for-loop",
                "content": "### **Please Upvote** :D\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {        \\n        if (original.length != m * n) return new int[0][];\\n        \\n        int[][] ans = new int[m][n];\\n        int currRow = 0, currCol = 0;\\n        \\n        for (int num : original) {\\n            ans[currRow][currCol++] = num;\\n            \\n            if (currCol == n) {\\n                currCol = 0;\\n                currRow++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n\\n// TC: O(n), SC: O(m * n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {        \\n        if (original.length != m * n) return new int[0][];\\n        \\n        int[][] ans = new int[m][n];\\n        int currRow = 0, currCol = 0;\\n        \\n        for (int num : original) {\\n            ans[currRow][currCol++] = num;\\n            \\n            if (currCol == n) {\\n                currCol = 0;\\n                currRow++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n\\n// TC: O(n), SC: O(m * n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499923,
                "title": "python-one-liner-along-with-expanded-version",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [original[i*n:(i+1)*n] for i in range(m)] if m*n == len(original) else []\\n```\\n\\nexpanded version:\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        res = []\\n        if m*n == len(original):\\n            for i in range(m):\\n                start = i*n\\n                end = (i+1)*n\\n                res.append(original[start:end])\\n        \\n        return res\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [original[i*n:(i+1)*n] for i in range(m)] if m*n == len(original) else []\\n```\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        res = []\\n        if m*n == len(original):\\n            for i in range(m):\\n                start = i*n\\n                end = (i+1)*n\\n                res.append(original[start:end])\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1503052,
                "title": "c-100-100",
                "content": "```\\npublic int[][] Construct2DArray(int[] original, int m, int n)\\n{\\n\\tif (original.Length != m * n)\\n\\t\\treturn Array.Empty<int[]>();\\n\\n\\tvar array = new int[m][];\\n\\tvar index = 0;\\n\\n\\tfor (var i = 0; i < m; i++)\\n\\t{\\n\\t\\tarray[i] = new int[n];\\n\\t\\tfor (var j = 0; j < n; j++)\\n\\t\\t{\\n\\t\\t\\tarray[i][j] = original[index++];\\n\\t\\t}\\n\\t}\\n\\n\\treturn array;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int[][] Construct2DArray(int[] original, int m, int n)\\n{\\n\\tif (original.Length != m * n)\\n\\t\\treturn Array.Empty<int[]>();\\n\\n\\tvar array = new int[m][];\\n\\tvar index = 0;\\n\\n\\tfor (var i = 0; i < m; i++)\\n\\t{\\n\\t\\tarray[i] = new int[n];\\n\\t\\tfor (var j = 0; j < n; j++)\\n\\t\\t{\\n\\t\\t\\tarray[i][j] = original[index++];\\n\\t\\t}\\n\\t}\\n\\n\\treturn array;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3539557,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (m * n != original.length) {\\n\\t\\t    return new int[][]{};\\n        }\\n\\n        int[][] result = new int[m][n];\\n        int k = 0;\\n\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                result[i][j] = original[k++];\\n            }\\n        }\\n\\n        return result;                \\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Go"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (m * n != original.length) {\\n\\t\\t    return new int[][]{};\\n        }\\n\\n        int[][] result = new int[m][n];\\n        int k = 0;\\n\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                result[i][j] = original[k++];\\n            }\\n        }\\n\\n        return result;                \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306043,
                "title": "easiest-solution-in-3-lines-of-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nPlssssssss Up Vote! -> \\uD83D\\uDE2D   \\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (m * n != original.length) return new int[0][0]; \\n        int[][] ans = new int[m][n];\\n        for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j) ans[i][j] = original[i * n + j];\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (m * n != original.length) return new int[0][0]; \\n        int[][] ans = new int[m][n];\\n        for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j) ans[i][j] = original[i * n + j];\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2698701,
                "title": "simple-o-n",
                "content": "##### Java\\n```java\\npublic int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m * n)\\n            return new int[][] {};\\n\\n        int[][] converted = new int[m][n];\\n        for (int i = 0; i < original.length; ++i)\\n            converted[i / n][i % n] = original[i];\\n\\n        return converted;\\n    }\\n```\\n\\n##### C++\\n```c++\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int> &original, int m, int n) {\\n        if (original.size() != m * n)\\n            return {};\\n        \\n        vector<vector<int>> converted(m, vector<int>(n));\\n        for (int i = 0; i < original.size(); ++i)\\n            converted[i / n][i % n] = original[i];\\n\\n        return converted;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```java\\npublic int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m * n)\\n            return new int[][] {};\\n\\n        int[][] converted = new int[m][n];\\n        for (int i = 0; i < original.length; ++i)\\n            converted[i / n][i % n] = original[i];\\n\\n        return converted;\\n    }\\n```\n```c++\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int> &original, int m, int n) {\\n        if (original.size() != m * n)\\n            return {};\\n        \\n        vector<vector<int>> converted(m, vector<int>(n));\\n        for (int i = 0; i < original.size(); ++i)\\n            converted[i / n][i % n] = original[i];\\n\\n        return converted;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2592941,
                "title": "c-o-n-solution",
                "content": "\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n\\t\\t\\tvector<vector<int>> ans;\\n\\t\\t\\tint p = original.size();\\n\\t\\t\\tif(m*n != p)\\n\\t\\t\\t\\treturn ans;\\n        \\n\\t\\t\\tfor(int i=0;i<p;i+=n){\\n\\t\\t\\t\\tvector<int> aux(&original[i], &original[i+n]);\\n\\t\\t\\t\\tans.push_back(aux);\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n\\t\\t\\tvector<vector<int>> ans;\\n\\t\\t\\tint p = original.size();\\n\\t\\t\\tif(m*n != p)\\n\\t\\t\\t\\treturn ans;\\n        \\n\\t\\t\\tfor(int i=0;i<p;i+=n){\\n\\t\\t\\t\\tvector<int> aux(&original[i], &original[i+n]);\\n\\t\\t\\t\\tans.push_back(aux);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1549800,
                "title": "javascript-solution-faster-than-94-41-of-javascript",
                "content": "If the number of elements before conversion does not match the number of elements after conversion, no calculation is performed.\\n\\n```\\n/**\\n * @param {number[]} original\\n * @param {number} m\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar construct2DArray = function(original, m, n) {\\n    if(original.length!=(m*n)){return []}\\n    let result = []\\n    for(let i=0;i<original.length;i+=n){\\n        result.push(original.slice(i,i+n))\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} original\\n * @param {number} m\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar construct2DArray = function(original, m, n) {\\n    if(original.length!=(m*n)){return []}\\n    let result = []\\n    for(let i=0;i<original.length;i+=n){\\n        result.push(original.slice(i,i+n))\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3680344,
                "title": "c-easiest-approach",
                "content": "vector<vector<int>> construct2DArray(vector<int>& original, int m, int n)\\n  vector<vector<int> > ans(m,vector<int>(n));\\n        int k=0;\\n        if( m * n != original.size()){\\n             return {};   \\n        }\\n        else{\\n          for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n               ans[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return ans;\\n        }\\n        \\n    }\\n}\\n\\n# **Please upvote me if you liked the approach**",
                "solutionTags": [
                    "C"
                ],
                "code": "vector<vector<int>> construct2DArray(vector<int>& original, int m, int n)\\n  vector<vector<int> > ans(m,vector<int>(n));\\n        int k=0;\\n        if( m * n != original.size()){\\n             return {};   \\n        }\\n        else{\\n          for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n               ans[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return ans;\\n        }\\n        \\n    }\\n}\\n\\n# **Please upvote me if you liked the approach**",
                "codeTag": "Unknown"
            },
            {
                "id": 3418477,
                "title": "c-easy-solution-two-approach-beats-95",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- First we need to check if the number of elements in the original array can fit in the m x n 2d matrix. If it cannot fit simply return an empty vector.\\n- Else iterate over the original array and just place the elements at their right place in the result vector, keeping track of the rows and columns.\\n- Another approach can be to iterate over the result vector, placing th elements from the original array, in this case we will have to make a pointer which points to the elements of original array.\\n\\n# Code - Approach 1\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int size = original.size();\\n        if(size!=m*n)          //if the original cannot fit in m*n 2d matrix, return null\\n            return {};\\n        //create a result vector, with m rows, each contianing a vector of n size\\n        vector<vector<int>> res(m, vector<int>(n));\\n        int row = 0;                            //row pointer\\n        int col = 0;                            //column pointer\\n        for(int i=0; i<size; i++){              //for all the elements in original array\\n            res[row][col++] = original[i];      //set the ith element of original in result, and col++\\n            if(col==n){                         //if column==n\\n                col=0;                          //set column as 0 again \\n                row++;                          //and simply increment row\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n# Code - Approach 2\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size())\\n            return {};\\n        vector<vector<int>>ans(m, vector<int>(n));\\n        int x=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n; j++){\\n                ans[i][j]= original[x++];\\n            }\\n        }\\n        return ans;      \\n    }\\n};\\n```\\n# Upvote\\nIf you liked my approach and solution, please Upvote.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int size = original.size();\\n        if(size!=m*n)          //if the original cannot fit in m*n 2d matrix, return null\\n            return {};\\n        //create a result vector, with m rows, each contianing a vector of n size\\n        vector<vector<int>> res(m, vector<int>(n));\\n        int row = 0;                            //row pointer\\n        int col = 0;                            //column pointer\\n        for(int i=0; i<size; i++){              //for all the elements in original array\\n            res[row][col++] = original[i];      //set the ith element of original in result, and col++\\n            if(col==n){                         //if column==n\\n                col=0;                          //set column as 0 again \\n                row++;                          //and simply increment row\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size())\\n            return {};\\n        vector<vector<int>>ans(m, vector<int>(n));\\n        int x=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n; j++){\\n                ans[i][j]= original[x++];\\n            }\\n        }\\n        return ans;      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2714736,
                "title": "easy-to-understand-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n    int [][] arr=new int [m][n];\\n    if(original.length!=m*n)return new int[0][0];\\n    int ix=0;\\n         for(int i=0;i<arr.length;i++) {\\n         for(int j=0;j<arr[0].length;j++){\\n         arr[i][j]=original[ix++];\\n              \\n         }\\n      \\n     }\\n     return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n    int [][] arr=new int [m][n];\\n    if(original.length!=m*n)return new int[0][0];\\n    int ix=0;\\n         for(int i=0;i<arr.length;i++) {\\n         for(int j=0;j<arr[0].length;j++){\\n         arr[i][j]=original[ix++];\\n              \\n         }\\n      \\n     }\\n     return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2450425,
                "title": "java-simple-solution",
                "content": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] arr = new int[m][n];\\n        if(original.length != m*n){\\n            return new int[0][0];\\n        }\\n        for(int i = 0; i < original.length; i++) {\\n            int row = i/n;\\n            int col = i%n;\\n            arr[row][col] = original[i];\\n        }\\n        return arr;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] arr = new int[m][n];\\n        if(original.length != m*n){\\n            return new int[0][0];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2170529,
                "title": "5-lines-python-solution-easy-and-basic",
                "content": "approach : just take n elements at a time and add the elements to the array\\n\\nsolution:\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        array = []\\n        if len(original) == m*n:\\n            for i in range(0, len(original), n):\\n                array.append(original[i:i+n])\\n        return array\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        array = []\\n        if len(original) == m*n:\\n            for i in range(0, len(original), n):\\n                array.append(original[i:i+n])\\n        return array\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2117017,
                "title": "java-easy-iteration",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m * n != original.length) {\\n            return new int[0][0];\\n        }\\n        int[][] answer = new int[m][n];\\n        int rCount = 0, cCount = 0, len = original.length;\\n        for(int i=0;i<len;i++){\\n            answer[rCount][cCount++] = original[i];\\n            if(cCount == n) {\\n                rCount++;\\n                cCount = 0;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m * n != original.length) {\\n            return new int[0][0];\\n        }\\n        int[][] answer = new int[m][n];\\n        int rCount = 0, cCount = 0, len = original.length;\\n        for(int i=0;i<len;i++){\\n            answer[rCount][cCount++] = original[i];\\n            if(cCount == n) {\\n                rCount++;\\n                cCount = 0;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835095,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        array = []\\n        if len(original) == m*n:\\n            for i in range(0, len(original), n):\\n                array.append(original[i:i+n])\\n        return array\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        array = []\\n        if len(original) == m*n:\\n            for i in range(0, len(original), n):\\n                array.append(original[i:i+n])\\n        return array\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499146,
                "title": "c-2022-convert-1d-array-into-2d-array",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (original.size() != m * n) return {}; \\n        vector<vector<int>> ans(m, vector<int>(n)); \\n        for (int i = 0, k = 0; i < m; i++) \\n            for (int j = 0; j < n; ++j, ++k) \\n                ans[i][j] = original[k]; \\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if (original.size() != m * n) return {}; \\n        vector<vector<int>> ans(m, vector<int>(n)); \\n        for (int i = 0, k = 0; i < m; i++) \\n            for (int j = 0; j < n; ++j, ++k) \\n                ans[i][j] = original[k]; \\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3804535,
                "title": "convert-1d-array-into-2d-array-java-solution-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] arr = new int[m][n];\\n        int ln = 0;\\n        if(original.length!=m*n){\\n            return new int[0][0];\\n        }\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n; j++){\\n                arr[i][j] = original[ln];\\n                ln++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] arr = new int[m][n];\\n        int ln = 0;\\n        if(original.length!=m*n){\\n            return new int[0][0];\\n        }\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n; j++){\\n                arr[i][j] = original[ln];\\n                ln++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3371609,
                "title": "c-simple-easy-to-understand",
                "content": "# Complexity\\n- Time complexity:`O(n)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:`O(m * n)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& nums, int m, int n) {\\n        \\n        // get  size  of  input array\\n        int sz = nums.size();\\n\\n        // elements of input array is not equal to required elements in 2D array \\n        if(m * n != sz) return {};\\n         \\n        // create a 2D array of m rows & n columns\\n        vector<vector<int>>ans(m,vector<int>(n));\\n\\n        // keep track of rows & columns\\n        int row = 0 , col = 0;\\n\\n        // travese & assign values in 2D array\\n        for(int i=0;i<sz;i++){\\n            \\n            // current row is completed change row & set column to 0\\n            if(col == n){\\n                row++;\\n                col = 0;\\n            }\\n\\n            // assign value\\n            ans[row][col++] = nums[i];\\n        }\\n\\n        // return answer\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Matrix",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& nums, int m, int n) {\\n        \\n        // get  size  of  input array\\n        int sz = nums.size();\\n\\n        // elements of input array is not equal to required elements in 2D array \\n        if(m * n != sz) return {};\\n         \\n        // create a 2D array of m rows & n columns\\n        vector<vector<int>>ans(m,vector<int>(n));\\n\\n        // keep track of rows & columns\\n        int row = 0 , col = 0;\\n\\n        // travese & assign values in 2D array\\n        for(int i=0;i<sz;i++){\\n            \\n            // current row is completed change row & set column to 0\\n            if(col == n){\\n                row++;\\n                col = 0;\\n            }\\n\\n            // assign value\\n            ans[row][col++] = nums[i];\\n        }\\n\\n        // return answer\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3311666,
                "title": "easy-java-solution-oms",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(original.length!= m*n) return new int [][]{};\\n\\n        int[][]ans =new int[m][n];\\n        for(int i=0;i<original.length;i++)\\n    {\\n        ans[i/n][i%n]=original[i];\\n    }\\n    return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(original.length!= m*n) return new int [][]{};\\n\\n        int[][]ans =new int[m][n];\\n        for(int i=0;i<original.length;i++)\\n    {\\n        ans[i/n][i%n]=original[i];\\n    }\\n    return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3220596,
                "title": "super-easies-solution-o-n-c",
                "content": "# Intuition\\nIn the original array the ith index \\n i/n will give the row and i%n will give the column of the 2d array\\nwhere n is no of columns in the 2d array \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$ \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n   \\n        if(m*n !=original.size()) return {};\\n        vector<vector<int>>ans(m,vector<int>(n,0));\\n        for(int i=0;i<original.size();i++){\\n            ans[i/n][i%n]=original[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n   \\n        if(m*n !=original.size()) return {};\\n        vector<vector<int>>ans(m,vector<int>(n,0));\\n        for(int i=0;i<original.size();i++){\\n            ans[i/n][i%n]=original[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2943305,
                "title": "java-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (m * n != original.length) {\\n            return new int[0][0];\\n        }\\n        int[][] ans = new int[m][n];\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                ans[i][j] = original[i * n + j];\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (m * n != original.length) {\\n            return new int[0][0];\\n        }\\n        int[][] ans = new int[m][n];\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                ans[i][j] = original[i * n + j];\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2642936,
                "title": "super-easy-python-solution",
                "content": "```class Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        result=[]\\n        if m*n==len(original):\\n            for i in range(0,m*n,n):\\n                result.append(original[i:i+n])\\n        return result",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```class Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        result=[]\\n        if m*n==len(original):\\n            for i in range(0,m*n,n):\\n                result.append(original[i:i+n])\\n        return result",
                "codeTag": "Java"
            },
            {
                "id": 2187855,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> newArr(m,vector<int>(n));\\n        if(m*n!=original.size())\\n            return {};\\n        else{\\n            int k=0;\\n            for(int i=0;i<m;i++){\\n                \\n                for(int j=0;j<n;j++){\\n                    newArr[i][j]=original[k++];\\n                    \\n                }\\n                \\n            }\\n        }\\n        return newArr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> newArr(m,vector<int>(n));\\n        if(m*n!=original.size())\\n            return {};\\n        else{\\n            int k=0;\\n            for(int i=0;i<m;i++){\\n                \\n                for(int j=0;j<n;j++){\\n                    newArr[i][j]=original[k++];\\n                    \\n                }\\n                \\n            }\\n        }\\n        return newArr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2113472,
                "title": "python-two-solutions",
                "content": "Here are two solutions `build1` and `build2` that does the same thing but its good practice to think of index conversion in different ways:\\n```python\\n    # Time and Space: O(m * n) or O(len(original))\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        # edge case: the number of elements are different between arrays\\n        if len(original) != m * n:\\n            return []\\n        \\n        result = [[0] * n for i in range(m)] \\n        \\n        def build1(original, result, m, n):\\n            # build result from converting index in original to result\\n            for i in range(len(original)):\\n                result[i // n][i % n] = original[i]\\n        \\n        def build2(original, result, m, n):\\n        # build result from converting index in result to original\\n            for i in range(m):\\n                for j in range(n):\\n                    result[i][j] = original[i * n + j]\\n        \\n        #build1(original, result, m, n)\\n        build2(original, result, m, n)\\n        \\n        return result\\n```",
                "solutionTags": [],
                "code": "```python\\n    # Time and Space: O(m * n) or O(len(original))\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        # edge case: the number of elements are different between arrays\\n        if len(original) != m * n:\\n            return []\\n        \\n        result = [[0] * n for i in range(m)] \\n        \\n        def build1(original, result, m, n):\\n            # build result from converting index in original to result\\n            for i in range(len(original)):\\n                result[i // n][i % n] = original[i]\\n        \\n        def build2(original, result, m, n):\\n        # build result from converting index in result to original\\n            for i in range(m):\\n                for j in range(n):\\n                    result[i][j] = original[i * n + j]\\n        \\n        #build1(original, result, m, n)\\n        build2(original, result, m, n)\\n        \\n        return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1772903,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution(object):\\n    def construct2DArray(self,original, m, n):\\n\\t\\n        result = []\\n\\n        if len(original)==m*n:\\n            for row in range(m):\\n                result.append(original[n*row:n*row+n])\\n\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def construct2DArray(self,original, m, n):\\n\\t\\n        result = []\\n\\n        if len(original)==m*n:\\n            for row in range(m):\\n                result.append(original[n*row:n*row+n])\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1765854,
                "title": "python-easy-understanding-o-n-2",
                "content": "**If the solution helped you gain at least 1% of perspective towards the problems. Please give me a upvote. Thanks in advance!** \\n\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        arrLen = len(original)\\n        \\n        if arrLen != m*n:\\n            return []\\n        \\n        new = []\\n        \\n        index = 0\\n        \\n        for x in range(0, m):\\n            temp = []\\n            for y in range(0, n):\\n                temp.append(original[index])\\n                index += 1\\n            new.append(temp)\\n        \\n        return new\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        arrLen = len(original)\\n        \\n        if arrLen != m*n:\\n            return []\\n        \\n        new = []\\n        \\n        index = 0\\n        \\n        for x in range(0, m):\\n            temp = []\\n            for y in range(0, n):\\n                temp.append(original[index])\\n                index += 1\\n            new.append(temp)\\n        \\n        return new\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1583125,
                "title": "3-ms-faster-than-99-64-of-java-online-submissions-for-convert-1d-array-into-2d-array",
                "content": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n\\t\\tint len = original.length;\\n        \\n        //Edge Case\\n        \\n        if(m*n!=len){\\n            return new int[0][0];\\n        }\\n        \\n        int[][] result=new int[m][n];\\n        \\n        int current=0;\\n        \\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                result[i][j] = original[current];\\n                current++;\\n            }\\n        }\\n        return result;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n\\t\\tint len = original.length;\\n        \\n        //Edge Case\\n        \\n        if(m*n!=len){\\n            return new int[0][0];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1503457,
                "title": "javascript-3-lines-100",
                "content": "```\\nvar construct2DArray = function(original, m, n) {\\n    if (m * n !== original.length)\\n         return []\\n    let res = []\\n    \\n    for ( let i = 0; i < m; i++) \\n        res.push(original.splice(0,n))\\n    \\n    return res\\n};",
                "solutionTags": [],
                "code": "```\\nvar construct2DArray = function(original, m, n) {\\n    if (m * n !== original.length)\\n         return []\\n    let res = []\\n    \\n    for ( let i = 0; i < m; i++) \\n        res.push(original.splice(0,n))\\n    \\n    return res\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1499578,
                "title": "rust-solution-48-ms",
                "content": "```\\nimpl Solution {\\n    pub fn construct2_d_array(original: Vec<i32>, m: i32, n: i32) -> Vec<Vec<i32>> {\\n        match original.len() as i32 == m * n {\\n            false => vec![],\\n            true => original\\n                .chunks(n as usize)\\n                .map(|v| v.to_vec())\\n                .collect::<Vec<_>>(),\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn construct2_d_array(original: Vec<i32>, m: i32, n: i32) -> Vec<Vec<i32>> {\\n        match original.len() as i32 == m * n {\\n            false => vec![],\\n            true => original\\n                .chunks(n as usize)\\n                .map(|v| v.to_vec())\\n                .collect::<Vec<_>>(),\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499190,
                "title": "two-golang-solution",
                "content": "**Solution 1:** *(Use golang slice tricks)*\\n\\nWe can loop through the array `m` times. Inside each loop we can append the first `n` values of `original`, and then remove the first `n` values of `original`.\\n\\n``` go\\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    res := [][]int{}\\n    \\n    if len(original) == m * n {\\n        for i := 0; i < m; i++ {\\n            res = append(res, original[: n])\\n            original = original[n :]\\n        }\\n    }\\n    \\n    return res\\n}\\n```\\n\\n***\\n\\n**Solution 2:** \\n\\nWe can just use `i` to find every `n` values in `orignial`, and not manipulate `original`.\\n\\n``` go\\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    res := [][]int{}\\n    \\n    if len(original) == m * n {\\n        for i := 0; i < m; i++ {\\n            res = append(res, original[i * n : (i + 1) * n])\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    res := [][]int{}\\n    \\n    if len(original) == m * n {\\n        for i := 0; i < m; i++ {\\n            res = append(res, original[: n])\\n            original = original[n :]\\n        }\\n    }\\n    \\n    return res\\n}\\n```\n``` go\\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    res := [][]int{}\\n    \\n    if len(original) == m * n {\\n        for i := 0; i < m; i++ {\\n            res = append(res, original[i * n : (i + 1) * n])\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499171,
                "title": "python-3-simple-solution-numpy-reshape",
                "content": "```\\nimport numpy\\nclass Solution:\\n    def construct2DArray(self, original, m, n):\\n        try:\\n            return numpy.reshape(original, (m, n)).tolist()\\n        except ValueError:\\n            return []\\n```\\n\\nOne-liner (Credit to @blue_sky5):\\n```\\nreturn [] if len(original) != m * n else numpy.reshape(original, (m, n)).tolist()\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport numpy\\nclass Solution:\\n    def construct2DArray(self, original, m, n):\\n        try:\\n            return numpy.reshape(original, (m, n)).tolist()\\n        except ValueError:\\n            return []\\n```\n```\\nreturn [] if len(original) != m * n else numpy.reshape(original, (m, n)).tolist()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499021,
                "title": "c-super-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> result(m,vector<int>(n));\\n        if(original.size()!=(m*n))\\n            return {};\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                result[i][j]=original[(i*n)+j];\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> result(m,vector<int>(n));\\n        if(original.size()!=(m*n))\\n            return {};\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                result[i][j]=original[(i*n)+j];\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016605,
                "title": "java-0-n-2-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m*n) return new int[0][0];\\n        int ans[][] = new int[m][n];\\n        for (int i = 0; i < original.length; ++i){\\n            ans[i / n][i % n] = original[i];\\n        }\\n        return ans;\\n\\n//       Another Solution\\n\\n        // int ans[][] = new int[m][n];\\n        // if(original.length!=(m*n)) return new int[0][0];\\n        // for(int i=0; i<m; i++){\\n        //     for(int j=0; j<n; j++){\\n        //         ans[i][j] = original[i*n+j];\\n        //     }\\n        // }\\n        // return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m*n) return new int[0][0];\\n        int ans[][] = new int[m][n];\\n        for (int i = 0; i < original.length; ++i){\\n            ans[i / n][i % n] = original[i];\\n        }\\n        return ans;\\n\\n//       Another Solution\\n\\n        // int ans[][] = new int[m][n];\\n        // if(original.length!=(m*n)) return new int[0][0];\\n        // for(int i=0; i<m; i++){\\n        //     for(int j=0; j<n; j++){\\n        //         ans[i][j] = original[i*n+j];\\n        //     }\\n        // }\\n        // return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894061,
                "title": "converting-1d-array-into-2d-array-leetcode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size()) return {};\\n        vector<vector<int>> vec(m,vector<int>(n));\\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                vec[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return vec;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size()) return {};\\n        vector<vector<int>> vec(m,vector<int>(n));\\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                vec[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return vec;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3460307,
                "title": "c-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis question solved by just iterating through your 1-D array and add each element to your 2-D array\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMake a 2-D array and add elemnts of 1-D array\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(size of original matrix)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(m*n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n != original.size())\\n        {\\n            return {};\\n        }\\n        vector<vector<int>> matrix;\\n        int s=original.size();\\n        vector<int> row;\\n        for(int i=0;i<s;i++)\\n        {\\n            row.push_back(original[i]);\\n            if(row.size()==n)\\n            {\\n                matrix.push_back(row);\\n                row.clear();\\n            }\\n        }\\n    return matrix;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n != original.size())\\n        {\\n            return {};\\n        }\\n        vector<vector<int>> matrix;\\n        int s=original.size();\\n        vector<int> row;\\n        for(int i=0;i<s;i++)\\n        {\\n            row.push_back(original[i]);\\n            if(row.size()==n)\\n            {\\n                matrix.push_back(row);\\n                row.clear();\\n            }\\n        }\\n    return matrix;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409692,
                "title": "convert-1d-array-into-2d-array-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int i, j;\\n        vector<vector<int>> ans;\\n        vector<int> arr;\\n        if(m*n!=original.size())\\n        {\\n            return ans;\\n        }\\n        for(i=0 ; i<original.size() ; i++)\\n        {\\n            arr.push_back(original[i]);\\n            if(arr.size()==n)\\n            {\\n                ans.push_back(arr);\\n                arr.clear();\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int i, j;\\n        vector<vector<int>> ans;\\n        vector<int> arr;\\n        if(m*n!=original.size())\\n        {\\n            return ans;\\n        }\\n        for(i=0 ; i<original.size() ; i++)\\n        {\\n            arr.push_back(original[i]);\\n            if(arr.size()==n)\\n            {\\n                ans.push_back(arr);\\n                arr.clear();\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3317263,
                "title": "6-lines-of-code-powerful-math-approach",
                "content": "\\n\\n# 1. Math Approach\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original)!=m*n:\\n            return []\\n        matrix=[]\\n        for i in range(0,len(original),n):\\n            matrix.append(original[i:i+n])\\n        return matrix\\n\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original)!=m*n:\\n            return []\\n        matrix=[]\\n        for i in range(0,len(original),n):\\n            matrix.append(original[i:i+n])\\n        return matrix\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046622,
                "title": "o-mxn-time-simple-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(original.size()>(m*n) || original.size()<(m*n))return {};\\n        vector<vector<int>>mat(m,vector<int>(n));        \\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                if(k<original.size())mat[i][j]=original[k++];\\n            }\\n        }\\n        return mat;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(original.size()>(m*n) || original.size()<(m*n))return {};\\n        vector<vector<int>>mat(m,vector<int>(n));        \\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                if(k<original.size())mat[i][j]=original[k++];\\n            }\\n        }\\n        return mat;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2768428,
                "title": "python-silly-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        if(len(original)!= (m*n)):\\n            return []\\n        matrix = [[0]*n for i in range(m)]\\n        index=0\\n        for rows in range(m):\\n            for cols in range(n):\\n                matrix[rows][cols]= original[index]\\n                index+=1\\n        return matrix\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        if(len(original)!= (m*n)):\\n            return []\\n        matrix = [[0]*n for i in range(m)]\\n        index=0\\n        for rows in range(m):\\n            for cols in range(n):\\n                matrix[rows][cols]= original[index]\\n                index+=1\\n        return matrix\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2636626,
                "title": "javascript-solution",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nvar construct2DArray = function(original, m, n) {\\n    if(m * n !== original.length) return []\\n    let result = []\\n    \\n    for(let i = 0; i < original.length; i+=n){\\n        result.push(original.slice(i,n + i))\\n    }\\n    \\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar construct2DArray = function(original, m, n) {\\n    if(m * n !== original.length) return []\\n    let result = []\\n    \\n    for(let i = 0; i < original.length; i+=n){\\n        result.push(original.slice(i,n + i))\\n    }\\n    \\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2613368,
                "title": "a-possible-solution",
                "content": "**Observation:**\\nWhen is it possible to convert original into a 2D array and when is it impossible?\\n\\nCheck if the size of m x n is equal to length of the original array that is a possible case to create a 2D array if not than it\\'s not possible and simply return a empty array.\\n\\ni.e: It is possible if and only if m * n == original.length\\n\\n**Solution to Observation:**\\n\\nIf it is possible to convert original to a 2D array, keep an index i such that original[i] is the next element to add to the 2D array.\\nSo the elements to get added from the original given array to the 2D array will be founded by using the indexes of rows and coln for the same and to  achieve  the both  indexes here is the simple Formula for that.\\n\\n**Formula:**\\n\\n*To find Index of row in 2D Array:*\\n\\n\\t            int row = i/n;\\n\\t\\t\\t\\t\\n*To find Index of column in 2D Array:*\\n\\n\\t\\t\\t\\tint column = i %n;\\n\\n**Working:**\\n\\nAs you Traverse throughout the original array for each index Find the corresponding rows and columns at which the element is to be placed in the 2D Array and than simply place them into the resultant 2D Array and return it.\\n\\n\\n**Here you go:**\\n\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n\\t\\n        int len = original.length;\\n\\t\\t\\n        if(len != m*n){\\n            return new int[0][0];\\n        }\\n        int ans[][] = new int [m][n];\\n        for(int i=0; i<n; i++){\\n\\t\\t\\n            int row = i/n;\\n            int colm = i %n;\\n\\t\\t\\t\\n            ans[row][colm] = original[i];\\n        }\\n        return ans;\\n    }   \\n}\\n```\\n\\n\\n***If Helpful cheers :)***\\n\\n\\t\\t\\n\\t\\t\\t\\n\\n\\t\\t\\n\\t\\t\\n\\t",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n\\t\\n        int len = original.length;\\n\\t\\t\\n        if(len != m*n){\\n            return new int[0][0];\\n        }\\n        int ans[][] = new int [m][n];\\n        for(int i=0; i<n; i++){\\n\\t\\t\\n            int row = i/n;\\n            int colm = i %n;\\n\\t\\t\\t\\n            ans[row][colm] = original[i];\\n        }\\n        return ans;\\n    }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2430838,
                "title": "java-simple-and-easy-solution-logic-builder",
                "content": "```\\nint[][] arr = new int[m][n] ;\\n        // we make a new array which we will be returning ;\\n        \\n        if(m*n != original.length){\\n            //if this condition is true we return an empty array ;\\n            int[][] abc = new int[0][0];\\n            return abc ;\\n        }\\n        //we make 2 variables bcz we will be using them in the for loop ;\\n        int row = 0 ; int col = 0 ;\\n        //for loop for iterating over each element of original;\\n        for(int i = 0 ; i < original.length ; i++){\\n          //this fills the row and column of new array without using another 2 for loops  \\n            arr[row][col] = original[i] ;\\n            col++;\\n            if(col == n){\\n                 row++ ;\\n                col = 0 ;\\n            }\\n        }\\n        return arr ;",
                "solutionTags": [
                    "Math",
                    "Matrix"
                ],
                "code": "```\\nint[][] arr = new int[m][n] ;\\n        // we make a new array which we will be returning ;\\n        \\n        if(m*n != original.length){\\n            //if this condition is true we return an empty array ;\\n            int[][] abc = new int[0][0];\\n            return abc ;\\n        }\\n        //we make 2 variables bcz we will be using them in the for loop ;\\n        int row = 0 ; int col = 0 ;\\n        //for loop for iterating over each element of original;\\n        for(int i = 0 ; i < original.length ; i++){\\n          //this fills the row and column of new array without using another 2 for loops  \\n            arr[row][col] = original[i] ;\\n            col++;\\n            if(col == n){\\n                 row++ ;\\n                col = 0 ;\\n            }\\n        }\\n        return arr ;",
                "codeTag": "Unknown"
            },
            {
                "id": 2326669,
                "title": "c-very-easy-code-90-faster",
                "content": "Please Upvote :)\\n\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> res;\\n        if(m*n!=original.size())\\n            return res;\\n        \\n        vector<int> t;\\n        for(int k=0;k<original.size();k++)\\n        {\\n            t.push_back(original[k]);\\n            if(t.size()==n)\\n            {\\n                res.push_back(t);\\n                t.clear();\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> res;\\n        if(m*n!=original.size())\\n            return res;\\n        \\n        vector<int> t;\\n        for(int k=0;k<original.size();k++)\\n        {\\n            t.push_back(original[k]);\\n            if(t.size()==n)\\n            {\\n                res.push_back(t);\\n                t.clear();\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2241621,
                "title": "java-easy-solution-beginner-friendly",
                "content": "\\n*     public int[][] construct2DArray(int[] original, int m, int n) {\\n*      int arr[][]=new int[m][n];\\n*        int ax[][]=new int[0][0];\\n*        int x=0;\\n*         if((m*n)==original.length){\\n*             for(int j=0;j<m;j++){\\n*                 for(int i=0;i<n;i++){\\n*                     arr[j][i]=original[x++];\\n*                 }\\n*             }\\n*             \\n*             return arr;\\n*         }else{\\n*             return ax;\\n*         }\\n*     }\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n*     public int[][] construct2DArray(int[] original, int m, int n) {\\n*      int arr[][]=new int[m][n];\\n*        int ax[][]=new int[0][0];\\n*        int x=0;\\n*         if((m*n)==original.length){\\n*             for(int j=0;j<m;j++){\\n*                 for(int i=0;i<n;i++){\\n*                     arr[j][i]=original[x++];\\n*                 }\\n*             }\\n*             \\n*             return arr;\\n*         }else{\\n*             return ax;\\n*         }\\n*     }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2154611,
                "title": "c-simple-solution-o-n",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>ans(m,vector<int>(n)),fail;\\n        if(original.size()!=m*n) return fail;\\n        int k=0;\\n        for(int i=0;i<original.size();i++){\\n            int row=k/n;\\n            int column=k%n;\\n            ans[row][column]=original[i];\\n            k++;\\n        }\\n        return ans;\\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>ans(m,vector<int>(n)),fail;\\n        if(original.size()!=m*n) return fail;\\n        int k=0;\\n        for(int i=0;i<original.size();i++){\\n            int row=k/n;\\n            int column=k%n;\\n            ans[row][column]=original[i];\\n            k++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1894424,
                "title": "c-solution-fastest-than-100",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n)\\n    {\\n        vector<vector<int>>v(m,vector<int>(n,0));\\n        vector<vector<int>>p;\\n        int k=0;\\n        if(original.size()!=m*n)\\n        {\\n            return p;\\n        }else\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                v[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return v;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Matrix"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1828983,
                "title": "python-solution-simple-and-short",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        N = len(original)\\n        \\n        if (m * n) != N:\\n            return []\\n        \\n        for i in range(0, N, n):\\n            ans.append(original[i:i+n])\\n        return ans\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        N = len(original)\\n        \\n        if (m * n) != N:\\n            return []\\n        \\n        for i in range(0, N, n):\\n            ans.append(original[i:i+n])\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1785204,
                "title": "python-easy-peasy-faster-than-99-44-of-python",
                "content": "```\\nclass Solution(object):\\n    def construct2DArray(self, original, m, n):\\n        \"\"\"\\n        :type original: List[int]\\n        :type m: int\\n        :type n: int\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        mat = []\\n        if m*n < len(original) or m*n > len(original): return mat\\n        for i in range(0, len(original), n):\\n            mat.append(original[i:i+n])\\n        return mat\\n```",
                "solutionTags": [
                    "Matrix"
                ],
                "code": "```\\nclass Solution(object):\\n    def construct2DArray(self, original, m, n):\\n        \"\"\"\\n        :type original: List[int]\\n        :type m: int\\n        :type n: int\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        mat = []\\n        if m*n < len(original) or m*n > len(original): return mat\\n        for i in range(0, len(original), n):\\n            mat.append(original[i:i+n])\\n        return mat\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1521098,
                "title": "c-o-n-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& o, int m, int n) {\\n        //if we cant construct\\n        if(o.size()!=m*n)\\n            return {};\\n        vector<vector<int>> res(m,vector<int>(n));\\n        for(int i=0;i<o.size();i++)\\n        {\\n            int row=i/n;\\n            int col=i%n;\\n            res[row][col]=o[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& o, int m, int n) {\\n        //if we cant construct\\n        if(o.size()!=m*n)\\n            return {};\\n        vector<vector<int>> res(m,vector<int>(n));\\n        for(int i=0;i<o.size();i++)\\n        {\\n            int row=i/n;\\n            int col=i%n;\\n            res[row][col]=o[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500059,
                "title": "java-easy-to-understand-100-faster",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int arr[][]=new int[m][n];\\n        if(m*n!=original.length)\\n            return new int[0][0];\\n        \\n        int index=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                arr[i][j]=original[index];\\n                index++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int arr[][]=new int[m][n];\\n        if(m*n!=original.length)\\n            return new int[0][0];\\n        \\n        int index=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                arr[i][j]=original[index];\\n                index++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499013,
                "title": "c",
                "content": "```\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        vector<vector<int>> res;\\n        \\n        if(m*n != original.size())\\n            return res;        \\n        \\n        int k=0;\\n        \\n        for(int i=0; i<m; i++)\\n        {\\n            vector<int> temp;\\n            for(int j=0; j<n; j++)\\n            {\\n                temp.push_back(original[k++]);\\n            }\\n            res.push_back(temp);\\n        }\\n        \\n        return res;\\n    }",
                "solutionTags": [],
                "code": "```\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        vector<vector<int>> res;\\n        \\n        if(m*n != original.size())\\n            return res;        \\n        \\n        int k=0;\\n        \\n        for(int i=0; i<m; i++)\\n        {\\n            vector<int> temp;\\n            for(int j=0; j<n; j++)\\n            {\\n                temp.push_back(original[k++]);\\n            }\\n            res.push_back(temp);\\n        }\\n        \\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3980278,
                "title": "easy-to-understand-clear-code-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        if(original.size() != m*n) return {};\\n\\n        int k =0;\\n        vector<vector<int>>matrix(m,vector<int>(n,0));\\n        for(int i =0;i<m;i++){\\n            for(int j =0;j<n;j++){\\n            matrix[i][j] = original[k++];\\n            }\\n        }\\n        return matrix;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Matrix",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        if(original.size() != m*n) return {};\\n\\n        int k =0;\\n        vector<vector<int>>matrix(m,vector<int>(n,0));\\n        for(int i =0;i<m;i++){\\n            for(int j =0;j<n;j++){\\n            matrix[i][j] = original[k++];\\n            }\\n        }\\n        return matrix;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3926143,
                "title": "c-javascript-easy-solution",
                "content": "# Approach\\nTake a list of numbers and organizes them into a 2D array with the specified number of rows (m) and columns (n). It fills the rows of the 2D array with elements from the input list. If the given number of elements doesn\\'t match the desired size of the 2D array, it returns an empty array\\n\\n# Complexity\\n- Time complexity:  O(len), where len is the length of the original vector.\\n\\n# Code\\n# C++\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int len=original.size();\\n        vector<vector<int>>ans;\\n        if(m*n!=len) return ans;\\n        vector<int>v,vv;\\n        int cnt=0;\\n        for(int i=0;i<len;i++){\\n            v.push_back(original[i]);\\n            cnt++;\\n            if(cnt%n==0 && v.size()!=0){\\n                ans.push_back(v);\\n                v=vv;\\n            }\\n        }\\n       // if(v.size()!=0) ans.push_back(v);\\n          \\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n\\n\\n# JavaScript\\n```\\n/**\\n * @param {number[]} original\\n * @param {number} m\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar construct2DArray = function(original, m, n) {\\n    const len = original.length;\\n    const ans = [];\\n    if (m * n !== len) return ans;\\n    let v = [];\\n    let cnt = 0;\\n    for (let i = 0; i < len; i++) {\\n        v.push(original[i]);\\n        cnt++;\\n        if (cnt % n === 0 && v.length !== 0) {\\n            ans.push(v); \\n            v = [];\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "JavaScript",
                    "Array",
                    "Matrix",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int len=original.size();\\n        vector<vector<int>>ans;\\n        if(m*n!=len) return ans;\\n        vector<int>v,vv;\\n        int cnt=0;\\n        for(int i=0;i<len;i++){\\n            v.push_back(original[i]);\\n            cnt++;\\n            if(cnt%n==0 && v.size()!=0){\\n                ans.push_back(v);\\n                v=vv;\\n            }\\n        }\\n       // if(v.size()!=0) ans.push_back(v);\\n          \\n        return ans;\\n    }\\n};\\n```\n```\\n/**\\n * @param {number[]} original\\n * @param {number} m\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar construct2DArray = function(original, m, n) {\\n    const len = original.length;\\n    const ans = [];\\n    if (m * n !== len) return ans;\\n    let v = [];\\n    let cnt = 0;\\n    for (let i = 0; i < len; i++) {\\n        v.push(original[i]);\\n        cnt++;\\n        if (cnt % n === 0 && v.length !== 0) {\\n            ans.push(v); \\n            v = [];\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3800448,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\nThe construct2DArray function aims to convert a given 1D array (original) into a 2D array with dimensions m x n. If the given 1D array cannot be formed into a 2D array with the specified dimensions, the function will return an empty array.\\n\\n# Approach\\n1. The function first checks if it\\'s possible to create a 2D array with the given dimensions (m x n) from the original 1D array. If the product of m and n is not equal to the size of the original array, it means the 2D array cannot be constructed. In this case, the function returns an empty array.\\n\\n1. If the dimensions are valid, the function allocates memory for the result 2D array with m rows.\\n\\n1. It then allocates memory for the returnColumnSizes array, which stores the number of columns for each row.\\n\\n1. Next, the function copies elements from the original array to the 2D result array, row by row.\\n\\n1. Finally, the function returns the constructed 2D array.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity is O(m * n) since the function copies all the elements from the original 1D array to the 2D result array with m rows and n columns.\\n\\n- Space complexity:\\nThe space complexity is O(m * n) since we are creating a 2D array of size m x n. Additionally, there is some extra space required for the returnColumnSizes array, but it\\'s relatively small compared to the 2D array and can be ignored for complexity analysis.\\n\\n# Code\\n```\\n\\nint** construct2DArray(int* original, int originalSize, int m, int n, int* returnSize, int** returnColumnSizes){\\n    int** result = (int**)malloc(m*sizeof(int*));\\n    if(m*n!=originalSize){\\n        *returnSize=0;\\n        **returnColumnSizes=0;\\n        return result;\\n    }\\n\\n    *returnColumnSizes = (int*)malloc(m*sizeof(int));\\n    *returnSize=m;\\n\\n    for(int i=0;i<m;i++){\\n        result[i]=(int*)malloc(n*sizeof(int));\\n        (*returnColumnSizes)[i]=n;\\n    }\\n\\n    for(int i=0,index=0;i<m;i++){\\n        for(int j=0;j<n;j++)\\n            result[i][j]=original[index++];\\n    }\\n    return result;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Matrix"
                ],
                "code": "```\\n\\nint** construct2DArray(int* original, int originalSize, int m, int n, int* returnSize, int** returnColumnSizes){\\n    int** result = (int**)malloc(m*sizeof(int*));\\n    if(m*n!=originalSize){\\n        *returnSize=0;\\n        **returnColumnSizes=0;\\n        return result;\\n    }\\n\\n    *returnColumnSizes = (int*)malloc(m*sizeof(int));\\n    *returnSize=m;\\n\\n    for(int i=0;i<m;i++){\\n        result[i]=(int*)malloc(n*sizeof(int));\\n        (*returnColumnSizes)[i]=n;\\n    }\\n\\n    for(int i=0,index=0;i<m;i++){\\n        for(int j=0;j<n;j++)\\n            result[i][j]=original[index++];\\n    }\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3755757,
                "title": "c-solution-2-methods-o-n-2-and-o-n-easy-to-understand",
                "content": "# Approach\\nBasic Linear itration \\n# Complexity\\n- Time complexity:$$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(m*n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int> &original, int m, int n)\\n{\\n\\n    if (m * n != original.size())\\n        return {};\\n    vector<vector<int>> ans(m, vector<int>(n, 0));\\n    int k;\\n\\n    for (int i = 0; i < m; i++)\\n    {\\n        for (int j = 0; j < n; j++)\\n        {\\n            ans[i][j] = original[k];\\n            k++;\\n        }\\n    }\\n    return ans;\\n}\\n};\\n```\\n\\n---\\n\\n# Approach\\n  If we imagin  a 2d matrix in a 1D linear array then we can access its row by (i/n) and coloumn by (i%n);\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(m*n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n       if( m * n != original.size()) return {};\\n        vector<vector<int>>ans(m,vector<int>(n,0));\\n        for(int i =0; i<original.size();i++){\\n            ans[i/n][i%n]=original[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int> &original, int m, int n)\\n{\\n\\n    if (m * n != original.size())\\n        return {};\\n    vector<vector<int>> ans(m, vector<int>(n, 0));\\n    int k;\\n\\n    for (int i = 0; i < m; i++)\\n    {\\n        for (int j = 0; j < n; j++)\\n        {\\n            ans[i][j] = original[k];\\n            k++;\\n        }\\n    }\\n    return ans;\\n}\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n       if( m * n != original.size()) return {};\\n        vector<vector<int>>ans(m,vector<int>(n,0));\\n        for(int i =0; i<original.size();i++){\\n            ans[i/n][i%n]=original[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3529245,
                "title": "c-basic-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size()) return {};\\n        vector<vector<int>> vec(m,vector<int>(n));\\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                vec[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return vec;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size()) return {};\\n        vector<vector<int>> vec(m,vector<int>(n));\\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                vec[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return vec;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3244337,
                "title": "easy-to-understand-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>ans(m, vector<int>(n));\\n        int x=0;\\n        if(m*n!=original.size()){\\n\\n            return {};\\n        }\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n; j++){\\n                ans[i][j]= original[x++];\\n            }\\n        }\\n        return ans;\\n        \\n\\n\\n\\n\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>ans(m, vector<int>(n));\\n        int x=0;\\n        if(m*n!=original.size()){\\n\\n            return {};\\n        }\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n; j++){\\n                ans[i][j]= original[x++];\\n            }\\n        }\\n        return ans;\\n        \\n\\n\\n\\n\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233936,
                "title": "c-easy-approach-single-pass",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int size=original.size();\\n        if(m*n!=size)\\n        {\\n            return {};\\n        }\\n        vector<vector<int>>ans(m,vector<int>(n));\\n        int col=0,row=0;\\n        for(int i=0;i<size;i++)\\n        {\\n            if(col<n)\\n            {\\n                ans[row][col]=original[i];\\n                col+=1;\\n            }\\n            if(col==n)\\n            {\\n                row+=1;\\n                col=0;\\n            }\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int size=original.size();\\n        if(m*n!=size)\\n        {\\n            return {};\\n        }\\n        vector<vector<int>>ans(m,vector<int>(n));\\n        int col=0,row=0;\\n        for(int i=0;i<size;i++)\\n        {\\n            if(col<n)\\n            {\\n                ans[row][col]=original[i];\\n                col+=1;\\n            }\\n            if(col==n)\\n            {\\n                row+=1;\\n                col=0;\\n            }\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137044,
                "title": "100-c-simple-solutions",
                "content": "# Complexity\\n- Time complexity: O(mn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(mn)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n)\\n    {\\n        vector<vector<int>> vec( m , vector<int> (n, 0));\\n        if(m*n!=original.size())\\n        {\\n            vector<vector<int>> r;\\n            return r;\\n        }\\n        int k=0;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                vec[i][j]=original[k];\\n                k++;\\n            }\\n        }    \\n        return vec;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n)\\n    {\\n        vector<vector<int>> vec( m , vector<int> (n, 0));\\n        if(m*n!=original.size())\\n        {\\n            vector<vector<int>> r;\\n            return r;\\n        }\\n        int k=0;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                vec[i][j]=original[k];\\n                k++;\\n            }\\n        }    \\n        return vec;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877579,
                "title": "c-easy",
                "content": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>sp(m,vector<int> (n));\\n        if(n*m!=original.size()){\\n            return {};\\n        }\\n        int p=0,q=0;\\n        vector<int> sp1;\\n        int k=0;\\n        for(int i=0;i<original.size();i++){\\n            //sp1.push_back(original[i]);\\n            sp[p][q]=original[i];\\n            q++;\\n            k++;\\n            if(k==n)\\n            {\\n                p++;\\n                q=0;\\n                k=0;\\n            }\\n        }\\n        return sp;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>sp(m,vector<int> (n));\\n        if(n*m!=original.size()){\\n            return {}",
                "codeTag": "Java"
            },
            {
                "id": 2636160,
                "title": "java-9ms-single-pass-solution",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        // imposible cases\\n\\t\\tif (original.length != m * n)\\n            return new int [][] {};\\n\\t\\t\\t\\n\\t\\t// possible cases\\n        int [][] arr = new int [m][n];\\n        for (int i=0; i<m; i++) {\\n            for (int j=0; j<n; j++) {\\n                arr[i][j] = original[i*n + j];\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        // imposible cases\\n\\t\\tif (original.length != m * n)\\n            return new int [][] {};\\n\\t\\t\\t\\n\\t\\t// possible cases\\n        int [][] arr = new int [m][n];\\n        for (int i=0; i<m; i++) {\\n            for (int j=0; j<n; j++) {\\n                arr[i][j] = original[i*n + j];\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2594832,
                "title": "c-simple-solution-concise-beginners",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n     \\n     if(m*n != original.size())\\n         return {};\\n        \\n      vector<vector<int>> v(m,vector<int>(n));\\n        \\n      for(int i=0;i<m*n;i++)\\n         v[i/n][i%n] = original[i];\\n      \\n       return v;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n     \\n     if(m*n != original.size())\\n         return {}",
                "codeTag": "Java"
            },
            {
                "id": 2586117,
                "title": "c-optimal-solution-with-one-loop",
                "content": "```\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        if(m*n!=original.size()){\\n            return {};\\n        }\\n        vector<vector<int>> ans(m,vector<int>(n));\\n        \\n        for(int i =0;i < original.size();i++){\\n            ans[i/n][i%n]= original[i];\\n        }\\n        \\n        return ans;\\n        \\n        \\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        if(m*n!=original.size()){\\n            return {};\\n        }\\n        vector<vector<int>> ans(m,vector<int>(n));\\n        \\n        for(int i =0;i < original.size();i++){\\n            ans[i/n][i%n]= original[i];\\n        }\\n        \\n        return ans;\\n        \\n        \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2582421,
                "title": "c-easiest-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(n * m != original.size()) return {};\\n        vector<vector<int>> a(m, vector<int>(n));\\n        for(int i = 0; i < original.size(); i++) {\\n            a[i / n][i % n] = original[i];\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(n * m != original.size()) return {};\\n        vector<vector<int>> a(m, vector<int>(n));\\n        for(int i = 0; i < original.size(); i++) {\\n            a[i / n][i % n] = original[i];\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2524106,
                "title": "c-easy-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n\\n\\t\\t\\tvector<vector<int>> ans(m, vector<int> (n));\\n\\t\\t\\tvector<vector<int>> s;\\n\\t\\t\\tif(m*n != original.size())\\n\\t\\t\\t\\treturn s;\\n\\n\\t\\t\\tint ind = 0;\\n\\t\\t\\tfor(int i=0; i<m; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tfor(int j=0; j<n; j++)\\n\\t\\t\\t\\t\\tans[i][j] = original[ind++];\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n\\n\\t\\t\\tvector<vector<int>> ans(m, vector<int> (n));\\n\\t\\t\\tvector<vector<int>> s;\\n\\t\\t\\tif(m*n != original.size())\\n\\t\\t\\t\\treturn s;\\n\\n\\t\\t\\tint ind = 0;\\n\\t\\t\\tfor(int i=0; i<m; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tfor(int j=0; j<n; j++)\\n\\t\\t\\t\\t\\tans[i][j] = original[ind++];\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2497082,
                "title": "straight-forward-python-code",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original):\\n            return []\\n        ret = []\\n        for i in range(m):\\n            curr = []\\n            for j in range(n):\\n                curr.append(original[i*n+j])\\n            ret.append(curr)\\n        return ret",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original):\\n            return []\\n        ret = []\\n        for i in range(m):\\n            curr = []\\n            for j in range(n):\\n                curr.append(original[i*n+j])\\n            ret.append(curr)\\n        return ret",
                "codeTag": "Java"
            },
            {
                "id": 2415945,
                "title": "python-solution",
                "content": "```\\n\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original) != m*n: return []\\n        \\n        res = [[None for j in range(n)] for i in range(m)]\\n        k = 0\\n        \\n        for i in range(m):\\n            for j in range(n):\\n                res[i][j] = original[k]\\n                k += 1\\n        \\n        return res\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original) != m*n: return []\\n        \\n        res = [[None for j in range(n)] for i in range(m)]\\n        k = 0\\n        \\n        for i in range(m):\\n            for j in range(n):\\n                res[i][j] = original[k]\\n                k += 1\\n        \\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2407569,
                "title": "python-o-n2-solution-easy-for-looping",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], r: int, c: int) -> List[List[int]]:\\n        if len(original) == r*c:\\n            res = [[0 for c in range(c)] for r in range(r)]\\n            idx = 0\\n            for i in range(r):\\n                for j in range(c):\\n                    res[i][j] = original[idx]\\n                    idx +=1\\n            return res\\n        return None\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], r: int, c: int) -> List[List[int]]:\\n        if len(original) == r*c:\\n            res = [[0 for c in range(c)] for r in range(r)]\\n            idx = 0\\n            for i in range(r):\\n                for j in range(c):\\n                    res[i][j] = original[idx]\\n                    idx +=1\\n            return res\\n        return None\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2382887,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>v;\\n        if(original.size()!=m*n){\\n            return v;\\n        }\\n        else{\\n            int k = 0;\\n            for(int i=0;i<m;i++){\\n                vector<int>temp;\\n                for(int j=0;j<n;j++){\\n                    temp.push_back(original[k]);\\n                    k++;\\n                }\\n                v.push_back(temp);\\n            }\\n            return v;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>>v;\\n        if(original.size()!=m*n){\\n            return v;\\n        }\\n        else{\\n            int k = 0;\\n            for(int i=0;i<m;i++){\\n                vector<int>temp;\\n                for(int j=0;j<n;j++){\\n                    temp.push_back(original[k]);\\n                    k++;\\n                }\\n                v.push_back(temp);\\n            }\\n            return v;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2342645,
                "title": "python-beginner-friendly-easiest-solution-beats-77-69",
                "content": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n*This is an NFT*\\n\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        res=[]\\n        pointer = 0\\n        if(len(original)!=m*n):\\n            return []\\n        for i in range(m):\\n            temp = []\\n            for j in range(n):\\n                temp.append(original[pointer])\\n                pointer+=1\\n            res.append(temp)\\n        return res\\n```\\n![image](https://assets.leetcode.com/users/images/54333114-e25e-4af2-90b2-2e448d572088_1658950961.892606.png)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        res=[]\\n        pointer = 0\\n        if(len(original)!=m*n):\\n            return []\\n        for i in range(m):\\n            temp = []\\n            for j in range(n):\\n                temp.append(original[pointer])\\n                pointer+=1\\n            res.append(temp)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2306595,
                "title": "python3-very-simple-approach",
                "content": "```\\n        new_r=[]\\n        new_c=[]\\n        cnt=0\\n        if len(original)>m*n or len(original)<m*n:\\n            return []\\n        for i in original:\\n            new_c.append(i)\\n            cnt+=1\\n            if cnt==n:\\n                new_r.append(new_c)\\n                new_c=[]\\n                cnt=0\\n        return new_r",
                "solutionTags": [
                    "Python",
                    "Array"
                ],
                "code": "```\\n        new_r=[]\\n        new_c=[]\\n        cnt=0\\n        if len(original)>m*n or len(original)<m*n:\\n            return []\\n        for i in original:\\n            new_c.append(i)\\n            cnt+=1\\n            if cnt==n:\\n                new_r.append(new_c)\\n                new_c=[]\\n                cnt=0\\n        return new_r",
                "codeTag": "Unknown"
            },
            {
                "id": 2241618,
                "title": "java",
                "content": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n        if(m*n!=original.length){\\n                \\n            return new int[0][0];\\n        }\\n        \\n        int count=0;\\n        int [][]ans=new int[m][n];\\n        for(int i=0;i<m;i++)\\n        {\\n            \\n            for(int j=0;j<n;j++){\\n                ans[i][j]=original[count++];\\n            }\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n        if(m*n!=original.length){\\n                \\n            return new int[0][0];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2215481,
                "title": "1ms-98-faster-simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] result = new int[m][n];\\n        if((m * n) != original.length) return new int[0][0];\\n        \\n        int columns = 0;\\n        int rows = 0;\\n        for(int i = 0; i < original.length; i++){\\n            result[rows][columns] = original[i];\\n            columns++;\\n            if(columns == n){\\n                columns = 0;\\n                rows++;\\n            }\\n            \\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] result = new int[m][n];\\n        if((m * n) != original.length) return new int[0][0];\\n        \\n        int columns = 0;\\n        int rows = 0;\\n        for(int i = 0; i < original.length; i++){\\n            result[rows][columns] = original[i];\\n            columns++;\\n            if(columns == n){\\n                columns = 0;\\n                rows++;\\n            }\\n            \\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2156541,
                "title": "time-o-n-m-space-o-n",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        # make sure we can create the matrix first (m * n == len(array))\\n        # iterate through m first creatig a new list to append to matrix\\n        # add the elments to the row (new list) by adding the current element in original\\n        # after iteration, return the matrix array\\n        # Time: O(M + N) Space: O(N)\\n        \\n        if m * n != len(original):\\n            return []\\n        \\n        matrix = [[] for i in range(m)]\\n        curr = 0\\n        \\n        for i in range(m):\\n            for j in range(n):\\n                matrix[i].append(original[curr])\\n                curr += 1\\n                \\n        return matrix\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        # make sure we can create the matrix first (m * n == len(array))\\n        # iterate through m first creatig a new list to append to matrix\\n        # add the elments to the row (new list) by adding the current element in original\\n        # after iteration, return the matrix array\\n        # Time: O(M + N) Space: O(N)\\n        \\n        if m * n != len(original):\\n            return []\\n        \\n        matrix = [[] for i in range(m)]\\n        curr = 0\\n        \\n        for i in range(m):\\n            for j in range(n):\\n                matrix[i].append(original[curr])\\n                curr += 1\\n                \\n        return matrix\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2149797,
                "title": "java-o-n-o-r-c-space",
                "content": "class Solution {\\n\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n          if (original.length != m * n) return new int[0][0];\\n        \\n        int [][] ans = new int[m][n];\\n        int row = 0,col = 0;\\n        \\n        \\n        for(int i = 0; i<original.length; i++){\\n            ans[row][col] = original[i];\\n           \\n            if(col == n-1){\\n                col = 0;\\n                row++;\\n            }else {\\n                col++;\\n            }\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n          if (original.length != m * n) return new int[0][0];\\n        \\n        int [][] ans = new int[m][n];\\n        int row = 0,col = 0;\\n        \\n        \\n        for(int i = 0; i<original.length; i++){\\n            ans[row][col] = original[i];\\n           \\n            if(col == n-1){\\n                col = 0;\\n                row++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2137427,
                "title": "java-o-n-time-o-r-c-space",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n        int len = original.length;\\n        \\n        if (len != m * n) return new int[0][0];\\n        \\n        int[][] twoD = new int[m][n];\\n        \\n        int row = 0, column = 0;\\n        \\n        for (int i = 0; i < len; i++) {\\n            \\n            twoD[row][column] = original[i];\\n            \\n            if(column == n - 1) {\\n                column = 0;\\n                row++;\\n            } else {\\n                column++;\\n            }\\n        }\\n        \\n        return twoD;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n        int len = original.length;\\n        \\n        if (len != m * n) return new int[0][0];\\n        \\n        int[][] twoD = new int[m][n];\\n        \\n        int row = 0, column = 0;\\n        \\n        for (int i = 0; i < len; i++) {\\n            \\n            twoD[row][column] = original[i];\\n            \\n            if(column == n - 1) {\\n                column = 0;\\n                row++;\\n            } else {\\n                column++;\\n            }\\n        }\\n        \\n        return twoD;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2093877,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original): return []\\n        ans = []\\n        for i in range(m):\\n            ans.append([])\\n            for j in range(n):\\n                ans[i].append(original.pop(0))\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original): return []\\n        ans = []\\n        for i in range(m):\\n            ans.append([])\\n            for j in range(n):\\n                ans[i].append(original.pop(0))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084793,
                "title": "python-super-easy-and-intuitive-solution",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        listlen = len(original)\\n        if listlen % m or listlen % n or m*n != listlen:\\n            return []\\n        return[[ original[i+j] for j in range(n)] for i in range(0, len(original), n)]\\n```",
                "solutionTags": [
                    "Matrix"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        listlen = len(original)\\n        if listlen % m or listlen % n or m*n != listlen:\\n            return []\\n        return[[ original[i+j] for j in range(n)] for i in range(0, len(original), n)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2067108,
                "title": "javascript-one-line",
                "content": "```\\nconst construct2DArray = (original, m, n) =>\\n  m * n !== original.length ? [] : Array(m).fill(0).map(() => original.splice(0, n));\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst construct2DArray = (original, m, n) =>\\n  m * n !== original.length ? [] : Array(m).fill(0).map(() => original.splice(0, n));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2054400,
                "title": "ruby-one-liner",
                "content": "```\\n# @param {Integer[]} original\\n# @param {Integer} m\\n# @param {Integer} n\\n# @return {Integer[][]}\\ndef construct2_d_array(original, m, n)\\n  original.size == m * n ? original.each_slice(n).to_a : []\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {Integer[]} original\\n# @param {Integer} m\\n# @param {Integer} n\\n# @return {Integer[][]}\\ndef construct2_d_array(original, m, n)\\n  original.size == m * n ? original.each_slice(n).to_a : []\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2037368,
                "title": "c-simple-short-solution",
                "content": "**Please do leave an upvote if you liked my code ;)**\\n\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) \\n    {\\n        if(m*n != original.size()) return {};\\n        \\n        vector<vector<int>> ans;\\n        \\n        for(int i=0; i<m; i++)\\n        {\\n            vector<int> temp;\\n            for(int j=0; j<n; j++) temp.push_back(original[i*n+j]);\\n            ans.push_back(temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) \\n    {\\n        if(m*n != original.size()) return {};\\n        \\n        vector<vector<int>> ans;\\n        \\n        for(int i=0; i<m; i++)\\n        {\\n            vector<int> temp;\\n            for(int j=0; j<n; j++) temp.push_back(original[i*n+j]);\\n            ans.push_back(temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2026901,
                "title": "100-fastest-java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int index = original.length;\\n        \\n        if(index != m*n){\\n            int [] [] ans = new int [0][0];\\n            return ans;\\n        }\\n        \\n        int [] [] ans = new int [m][n];\\n        \\n        int a = 0;\\n        \\n        for(int i = 0; i<m; i++){\\n            for(int j = 0; j<n; j++){\\n                ans[i][j] = original[a];\\n                a++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int index = original.length;\\n        \\n        if(index != m*n){\\n            int [] [] ans = new int [0][0];\\n            return ans;\\n        }\\n        \\n        int [] [] ans = new int [m][n];\\n        \\n        int a = 0;\\n        \\n        for(int i = 0; i<m; i++){\\n            for(int j = 0; j<n; j++){\\n                ans[i][j] = original[a];\\n                a++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1993973,
                "title": "c-solution-133ms-faster-than-81-85-4mb-less-than-82",
                "content": "Runtime: 133 ms, faster than 81.64% of C++ online submissions for Convert 1D Array Into 2D Array.\\nMemory Usage: 85.4 MB, less than 82.53% of C++ online submissions for Convert 1D Array Into 2D Array.\\n\\n```\\nclass Solution \\n{\\npublic:\\n    vector<vector<int>> construct2DArray(const vector<int>& arr, int m, int n)\\n    {\\n        if (m * n != arr.size())\\n            return {};\\n        \\n        std::vector<std::vector<int>> res(m, std::vector<int>(n, 0));\\n        for (int i = 0; i < arr.size(); i++)\\n        {\\n            res[i / n][i % n] = arr[i];\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<vector<int>> construct2DArray(const vector<int>& arr, int m, int n)\\n    {\\n        if (m * n != arr.size())\\n            return {};\\n        \\n        std::vector<std::vector<int>> res(m, std::vector<int>(n, 0));\\n        for (int i = 0; i < arr.size(); i++)\\n        {\\n            res[i / n][i % n] = arr[i];\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1930101,
                "title": "simple-javascript-solution-99-82-93-97",
                "content": "Runtime: 180 ms, faster than 99.82% of JavaScript online submissions for Convert 1D Array Into 2D Array.\\nMemory Usage: 61.7 MB, less than 93.97% of JavaScript online submissions for Convert 1D Array Into 2D Array.\\n\\n```\\nfunction construct2DArray(original, m, n) {\\n  const l = original.length;\\n\\n  if (m * n !== l) return [];\\n\\n  const a = [];\\n\\n  for (let i = 0; i < l; a.push(original.slice(i, (i += n))));\\n\\n  return a;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction construct2DArray(original, m, n) {\\n  const l = original.length;\\n\\n  if (m * n !== l) return [];\\n\\n  const a = [];\\n\\n  for (let i = 0; i < l; a.push(original.slice(i, (i += n))));\\n\\n  return a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1894310,
                "title": "c-divide-and-modulo-index",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        int size = original.size();\\n        \\n        if (m * n != size) {\\n           return {}; \\n        }\\n        \\n        vector<vector<int>> twod_array(m, vector<int>(n));\\n        \\n        for (int i = 0; i < size; ++i) {\\n            twod_array[(i / n)][i % n] = original[i]; \\n        }\\n        \\n        return twod_array;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        int size = original.size();\\n        \\n        if (m * n != size) {\\n           return {}; \\n        }\\n        \\n        vector<vector<int>> twod_array(m, vector<int>(n));\\n        \\n        for (int i = 0; i < size; ++i) {\\n            twod_array[(i / n)][i % n] = original[i]; \\n        }\\n        \\n        return twod_array;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1883587,
                "title": "java-solution-92-78-faster-4ms-o-n",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] a, int m, int n) {\\n        if(m*n != a.length) return new int[0][0];\\n        int[][] mat = new int[m][n];\\n        int r = 0,c=0;\\n        for(int i=0;i< a.length;i++) {\\n            mat[r][c++] = a[i];\\n            if(c==n) {\\n                r++;\\n                c=0;\\n            }\\n        }\\n        return mat;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] a, int m, int n) {\\n        if(m*n != a.length) return new int[0][0];\\n        int[][] mat = new int[m][n];\\n        int r = 0,c=0;\\n        for(int i=0;i< a.length;i++) {\\n            mat[r][c++] = a[i];\\n            if(c==n) {\\n                r++;\\n                c=0;\\n            }\\n        }\\n        return mat;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1861769,
                "title": "explicit-easy-to-follow-solution",
                "content": "Let me know if there are any questions. Give this a thumbs up if this helped.\\n\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original) != m * n:\\n            return []\\n        \\n        result = []\\n        i = 0        \\n        \\n        for _ in range(m):\\n            row = []\\n            for _ in range(n):\\n                row.append(original[i])\\n                i += 1\\n                \\n            result.append(row)\\n            \\n        return result",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "Let me know if there are any questions. Give this a thumbs up if this helped.\\n\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original) != m * n:\\n            return []\\n        \\n        result = []\\n        i = 0        \\n        \\n        for _ in range(m):\\n            row = []\\n            for _ in range(n):\\n                row.append(original[i])\\n                i += 1\\n                \\n            result.append(row)\\n            \\n        return result",
                "codeTag": "Java"
            },
            {
                "id": 1833329,
                "title": "faster-easy-to-understand-c-code",
                "content": "* ***Approach 1 : Brute Force***\\n\\n* ***Time Complexity : O(N * M)***\\n* ***Space Complexity : O(N * M)***\\n\\n```\\nvector<vector<int>> construct2DArray(vector<int>& arr, int n, int m) {\\n        \\n        int size = arr.size();\\n        \\n        if(size != n * m)\\n            return {};\\n        \\n        vector<vector<int>> res(n, vector<int> (m, 0));\\n        \\n        int k = 0;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            for(int j = 0; j < m; j++)\\n            {\\n                res[i][j] = arr[k];\\n                \\n                k++;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n```\\n\\n* ***Approach 2 : Optimized***\\n\\n* ***Time Complexity : O(K) , where K is the size of array***\\n* ***Space Complexity : O(1) , because space used for outputing doesn\\'t count as space complexity***\\n\\n```\\nvector<vector<int>> construct2DArray(vector<int>& arr, int n, int m) {\\n        \\n        int size = arr.size();\\n        \\n        if(size != n * m)\\n            return {};\\n        \\n        vector<vector<int>> res(n, vector<int> (m, 0));\\n        \\n        for(int i = 0; i < size; i++)\\n        {\\n            res[i / m][i % m] = arr[i];\\n        }\\n        \\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "Matrix"
                ],
                "code": "```\\nvector<vector<int>> construct2DArray(vector<int>& arr, int n, int m) {\\n        \\n        int size = arr.size();\\n        \\n        if(size != n * m)\\n            return {};\\n        \\n        vector<vector<int>> res(n, vector<int> (m, 0));\\n        \\n        int k = 0;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            for(int j = 0; j < m; j++)\\n            {\\n                res[i][j] = arr[k];\\n                \\n                k++;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n```\n```\\nvector<vector<int>> construct2DArray(vector<int>& arr, int n, int m) {\\n        \\n        int size = arr.size();\\n        \\n        if(size != n * m)\\n            return {};\\n        \\n        vector<vector<int>> res(n, vector<int> (m, 0));\\n        \\n        for(int i = 0; i < size; i++)\\n        {\\n            res[i / m][i % m] = arr[i];\\n        }\\n        \\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1832651,
                "title": "java-solution-95-faster-and-84-space",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n != original.length) {\\n         int array[][]={};\\n         return array;   \\n        }\\n        int[][] result = new int[m][n];\\n        int j = 0;\\n        int k= 0;\\n        for(int i = 0; i< original.length; i++) {\\n            result[j][k] = original[i];\\n            if(k == n-1) {\\n                j++;\\n                k= 0;\\n            } else k++;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n != original.length) {\\n         int array[][]={};\\n         return array;   \\n        }\\n        int[][] result = new int[m][n];\\n        int j = 0;\\n        int k= 0;\\n        for(int i = 0; i< original.length; i++) {\\n            result[j][k] = original[i];\\n            if(k == n-1) {\\n                j++;\\n                k= 0;\\n            } else k++;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1824761,
                "title": "java-solution",
                "content": "```java\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int k=0;\\n        int[][] a;\\n        if(m*n==original.length)\\n        a = new int[m][n];\\n        else\\n        {\\n         a = new int[0][0];\\n            return a;\\n        }\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                a[i][j]=original[k];\\n                k++;\\n            }\\n        }\\n        return a;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int k=0;\\n        int[][] a;\\n        if(m*n==original.length)\\n        a = new int[m][n];\\n        else\\n        {\\n         a = new int[0][0];\\n            return a;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1819304,
                "title": "python-2-solutions-second-one-97-15-faster-is-optimized-time-o-n-space-o-n",
                "content": "### First Solution (Brute Force)\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        length = len(original)\\n        arr = []\\n        a = 0\\n        \\n        if length != m*n:\\n            return arr\\n        \\n        for i in range(m):\\n            col = []\\n            for j in range(n):\\n                col.append(original[a])\\n                a += 1\\n            arr.append(col)\\n\\n        return arr\\n```\\n\\n### Second Solution (Optimized)\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        length = len(original)\\n        arr = []\\n        \\n        if length != m*n:\\n            return arr\\n        \\n        for i in range(0, length, n):\\n            arr.append(original[i:i+n])\\n        \\n        return arr\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        length = len(original)\\n        arr = []\\n        a = 0\\n        \\n        if length != m*n:\\n            return arr\\n        \\n        for i in range(m):\\n            col = []\\n            for j in range(n):\\n                col.append(original[a])\\n                a += 1\\n            arr.append(col)\\n\\n        return arr\\n```\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        length = len(original)\\n        arr = []\\n        \\n        if length != m*n:\\n            return arr\\n        \\n        for i in range(0, length, n):\\n            arr.append(original[i:i+n])\\n        \\n        return arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1807536,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n!=original.length) return new int[][]{};\\n        int[][] output_arr=new int[m][n];\\n        int index=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                output_arr[i][j]=original[index];\\n                index++;\\n            }\\n        }\\n        return output_arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n!=original.length) return new int[][]{};\\n        int[][] output_arr=new int[m][n];\\n        int index=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                output_arr[i][j]=original[index];\\n                index++;\\n            }\\n        }\\n        return output_arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1781265,
                "title": "converting-1d-to-2d-easiest-soln",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> ans(m,vector<int>(n));\\n        int k=0;\\n        if(original.size()!=m*n){\\n            return {};\\n        }\\n        \\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                ans[i][j] = original[k];\\n                k++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```\\n\\n# ****PLEASE UPVOTE",
                "solutionTags": [
                    "C",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        vector<vector<int>> ans(m,vector<int>(n));\\n        int k=0;\\n        if(original.size()!=m*n){\\n            return {};\\n        }\\n        \\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                ans[i][j] = original[k];\\n                k++;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1779011,
                "title": "3ms-better-than-99-solution-please-upvote-for-support",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] arr1=new int[0][0];\\n        if(m*n!=original.length){  //for default cases to overcome index bound problem\\n            return arr1;\\n        }\\n        int[][] arr=new int[m][n];\\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                arr[i][j]=original[k];  //inserting elements of array in 2d array\\n                k++;   //increment array index\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int[][] arr1=new int[0][0];\\n        if(m*n!=original.length){  //for default cases to overcome index bound problem\\n            return arr1;\\n        }\\n        int[][] arr=new int[m][n];\\n        int k=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                arr[i][j]=original[k];  //inserting elements of array in 2d array\\n                k++;   //increment array index\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1761250,
                "title": "c-very-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& v, int m, int n) {\\n        vector<vector<int> > v1;\\n        int k=0,l = v.size();\\n        if(l!=m*n) return v1;\\n        for(int i=0; i<m; ++i){\\n            vector<int> v2;\\n            for(int j=0; j<n; ++j){\\n                v2.push_back(v[k+j]);\\n            }\\n            v1.push_back(v2);\\n            k += n;\\n        }\\n        return v1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& v, int m, int n) {\\n        vector<vector<int> > v1;\\n        int k=0,l = v.size();\\n        if(l!=m*n) return v1;\\n        for(int i=0; i<m; ++i){\\n            vector<int> v2;\\n            for(int j=0; j<n; ++j){\\n                v2.push_back(v[k+j]);\\n            }\\n            v1.push_back(v2);\\n            k += n;\\n        }\\n        return v1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1746113,
                "title": "99-74-easy-to-understand-solution",
                "content": "```\\n/**\\n * @param {number[]} original\\n * @param {number} m\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar construct2DArray = function (original, m, n) {\\n  if (m * n !== original.length) return []\\n  let res = []\\n  for (let i = 0; i < m; i++) {\\n    res.push(original.slice(i * n, n * (i + 1)))\\n  }\\n  return res\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} original\\n * @param {number} m\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar construct2DArray = function (original, m, n) {\\n  if (m * n !== original.length) return []\\n  let res = []\\n  for (let i = 0; i < m; i++) {\\n    res.push(original.slice(i * n, n * (i + 1)))\\n  }\\n  return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1745544,
                "title": "java-o-n",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(original.length != m*n){\\n            return new int[][]{};\\n        }\\n        int[][] output  = new int[m][n];\\n        for(int i=0; i<original.length; i++){\\n            output[i/n][i%n] = original[i];\\n        }\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(original.length != m*n){\\n            return new int[][]{};\\n        }\\n        int[][] output  = new int[m][n];\\n        for(int i=0; i<original.length; i++){\\n            output[i/n][i%n] = original[i];\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1705276,
                "title": "java-easy-4ms-solution",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int len=original.length;\\n        if(len!=m*n)\\n            return new int[0][0];\\n        int res[][]=new int[m][n];\\n        int x=0;\\n        int y=0;\\n        for(int i=0;i<len;i++)\\n        {\\n            res[x][y]=original[i];\\n            y++;\\n            if(y==n)\\n            {\\n                y=0;\\n                x++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int len=original.length;\\n        if(len!=m*n)\\n            return new int[0][0];\\n        int res[][]=new int[m][n];\\n        int x=0;\\n        int y=0;\\n        for(int i=0;i<len;i++)\\n        {\\n            res[x][y]=original[i];\\n            y++;\\n            if(y==n)\\n            {\\n                y=0;\\n                x++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696847,
                "title": "easy-and-short-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        if(m*n != original.size())\\n            return {};\\n        vector<vector<int>> answer(m, vector<int>(n,0));\\n        int index = 0;\\n        for(int i = 0; i<m; i++)\\n        {\\n            for(int j = 0; j<n; j++)\\n            {\\n                answer[i][j] = original[index++];\\n            }\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        \\n        if(m*n != original.size())\\n            return {};\\n        vector<vector<int>> answer(m, vector<int>(n,0));\\n        int index = 0;\\n        for(int i = 0; i<m; i++)\\n        {\\n            for(int j = 0; j<n; j++)\\n            {\\n                answer[i][j] = original[index++];\\n            }\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696219,
                "title": "java-3ms-beats-99-straightforward",
                "content": "```\\n/*\\nRuntime: 3 ms, faster than 99.37% of Java online submissions for Convert 1D Array Into 2D Array.\\nMemory Usage: 49.2 MB, less than 85.07% of Java online submissions for Convert 1D Array Into 2D Array.\\n*/\\n\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n        // guard clause\\n        if (original.length != m * n) {\\n            return new int[0][0];\\n        }\\n        \\n        int[][] res = new int[m][n];\\n        \\n        for (int indexM = 0; indexM < m; ++indexM) {\\n            for (int indexN = 0; indexN < n; ++indexN) {\\n                res[indexM][indexN] = original[indexM * n + indexN];\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\nRuntime: 3 ms, faster than 99.37% of Java online submissions for Convert 1D Array Into 2D Array.\\nMemory Usage: 49.2 MB, less than 85.07% of Java online submissions for Convert 1D Array Into 2D Array.\\n*/\\n\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        \\n        // guard clause\\n        if (original.length != m * n) {\\n            return new int[0][0];\\n        }\\n        \\n        int[][] res = new int[m][n];\\n        \\n        for (int indexM = 0; indexM < m; ++indexM) {\\n            for (int indexN = 0; indexN < n; ++indexN) {\\n                res[indexM][indexN] = original[indexM * n + indexN];\\n            }\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1678892,
                "title": "python-index-conversion",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        a = len(original)\\n        \\n        if m * n != a:\\n            return []\\n        \\n        res = [[0] * n for _ in range(m)]\\n        \\n        for i, val in enumerate(original):\\n            res[i // n][i % n] = val\\n        \\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        a = len(original)\\n        \\n        if m * n != a:\\n            return []\\n        \\n        res = [[0] * n for _ in range(m)]\\n        \\n        for i, val in enumerate(original):\\n            res[i // n][i % n] = val\\n        \\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1667087,
                "title": "python3-easy-sol-o-n-space-and-o-n-2-time-with-comments-and-complexity-analysis",
                "content": "\\t\\t#focus on the cols. then count the rows and tally the count with m\\n        #start to n-1; change start to n and again go till n-1\\n        length = len(original)\\n        final = [] \\n        start = 0\\n        end = n\\n        row = 0\\n        \\n        if length%n!=0:\\n            return \\n        \\n        while start<length:\\n            row+=1\\n            if end-1<length:\\n                final.append(original[start:end])\\n            start=end\\n            end+=n\\n        \\n        if row!=m:\\n            return\\n        else:\\n            return final\\n        \\n        \\n        \"\"\"\\n        time complexity -> O(n^2):\\n        in worst case number of columns is the number of elements in the list, hence for loop runs         n times in such case  --> O(N)\\n        slicing -> O(n) because slicing complexity depends on number of parts and here number of           parts is n\\n        \\n        \\n        net time complexity ->\\n        space complexity (becuase of final 2d array) -> O(N)\\n        \\n        \"\"\"\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\t\\t#focus on the cols. then count the rows and tally the count with m\\n        #start to n-1; change start to n and again go till n-1\\n        length = len(original)\\n        final = [] \\n        start = 0\\n        end = n\\n        row = 0\\n        \\n        if length%n!=0:\\n            return \\n        \\n        while start<length:\\n            row+=1\\n            if end-1<length:\\n                final.append(original[start:end])\\n            start=end\\n            end+=n\\n        \\n        if row!=m:\\n            return\\n        else:\\n            return final\\n        \\n        \\n        \"\"\"\\n        time complexity -> O(n^2):\\n        in worst case number of columns is the number of elements in the list, hence for loop runs         n times in such case  --> O(N)\\n        slicing -> O(n) because slicing complexity depends on number of parts and here number of           parts is n\\n        \\n        \\n        net time complexity ->\\n        space complexity (becuase of final 2d array) -> O(N)\\n        \\n        \"\"\"\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1660317,
                "title": "python-clean-and-easy-solution",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m * n != len(original):\\n            return []\\n\\n        matrix = []\\n        for i in range(0, len(original), n):\\n            matrix.append(original[i:i+n])\\n        return matrix\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m * n != len(original):\\n            return []\\n\\n        matrix = []\\n        for i in range(0, len(original), n):\\n            matrix.append(original[i:i+n])\\n        return matrix\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1654247,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n!=original.length) return new int[][]{};\\n        int result[][]=new int[m][n];\\n        int i=0,j=0;\\n        for(int val:original){\\n            result[i][j]=val;\\n            j=(j+1)%n;\\n            if(j==0)\\n                i++;\\n        }\\n        return result;       \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n!=original.length) return new int[][]{};\\n        int result[][]=new int[m][n];\\n        int i=0,j=0;\\n        for(int val:original){\\n            result[i][j]=val;\\n            j=(j+1)%n;\\n            if(j==0)\\n                i++;\\n        }\\n        return result;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1641695,
                "title": "easy-java-sol",
                "content": "```\\nclass Solution \\n{\\n    public int[][] construct2DArray(int[] original, int m, int n)\\n    {\\n       if(m*n!=original.length)\\n            return new int[0][0];\\n        int[][] arr=new int[m][n];\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                arr[i][j]=original[n*i+j];\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[][] construct2DArray(int[] original, int m, int n)\\n    {\\n       if(m*n!=original.length)\\n            return new int[0][0];\\n        int[][] arr=new int[m][n];\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                arr[i][j]=original[n*i+j];\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1621093,
                "title": "simple-java-solution-without-formula-need",
                "content": "```\\npublic int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n != original.length) {\\n            return new int[0][];\\n        }\\n        int[][] arr = new int[m][n];\\n        int c = 0;\\n        for(int i=0;i<m;i++) {\\n            for(int j=0;j<n;j++) {\\n                arr[i][j]=original[c++];\\n            }\\n        }        \\n        return arr;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n != original.length) {\\n            return new int[0][];\\n        }\\n        int[][] arr = new int[m][n];\\n        int c = 0;\\n        for(int i=0;i<m;i++) {\\n            for(int j=0;j<n;j++) {\\n                arr[i][j]=original[c++];\\n            }\\n        }        \\n        return arr;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1603528,
                "title": "simple-compact-python3-solution",
                "content": "Straightforward but compact solution in Python3.\\nVery simply it is just adding a new array, sliced from `original` m times. The slicing is done by calculating the start and end index of the row, which can be found by multiplying the current row by the number of columns in a row (`n`).\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m * n != len(original): return []\\n        return [original[row*n:(row+1)*n] for row in range(m)]\\n```\\nAnyways, thought it was a fun exercise in list consumptions and other fun python features. LMK in the comments if I\\'m missing a way to make it shorter or more elegant.",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m * n != len(original): return []\\n        return [original[row*n:(row+1)*n] for row in range(m)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1591656,
                "title": "c-solution",
                "content": "Here\\'s my solution implemented in C programming language.\\n```\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** construct2DArray(int* original, int originalSize, int m, int n, int* returnSize, int** returnColumnSizes){\\n    int arr_len = originalSize;\\n    \\n    if(m * n != arr_len) {\\n        *returnSize = 0;\\n        return NULL;\\n    }\\n    \\n    *returnColumnSizes = (int* )malloc(m * sizeof(int));\\n    for(int i = 0; i < m; i++) (*returnColumnSizes)[i] = n;\\n        \\n    *returnSize = m;\\n    int** new_2d = (int** )malloc(m * sizeof(int* ));\\n    \\n    int k = 0;\\n    for(int i = 0; i < m; i++) {\\n        new_2d[i] = (int* )malloc(n * sizeof(int));\\n        for(int j = 0; j < n; j++)\\n            new_2d[i][j] = original[k++];\\n    }\\n    \\n    return new_2d;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** construct2DArray(int* original, int originalSize, int m, int n, int* returnSize, int** returnColumnSizes){\\n    int arr_len = originalSize;\\n    \\n    if(m * n != arr_len) {\\n        *returnSize = 0;\\n        return NULL;\\n    }\\n    \\n    *returnColumnSizes = (int* )malloc(m * sizeof(int));\\n    for(int i = 0; i < m; i++) (*returnColumnSizes)[i] = n;\\n        \\n    *returnSize = m;\\n    int** new_2d = (int** )malloc(m * sizeof(int* ));\\n    \\n    int k = 0;\\n    for(int i = 0; i < m; i++) {\\n        new_2d[i] = (int* )malloc(n * sizeof(int));\\n        for(int j = 0; j < n; j++)\\n            new_2d[i][j] = original[k++];\\n    }\\n    \\n    return new_2d;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1565903,
                "title": "python-two-lines-fast-and-optimal",
                "content": "![image](https://assets.leetcode.com/users/images/7d805868-792d-477e-a7ee-386821b0f97f_1636349908.1739883.png)\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original): return []\\n        return [original[i:i+n] for i in range(0, m*n, n)]",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/7d805868-792d-477e-a7ee-386821b0f97f_1636349908.1739883.png)\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n != len(original): return []\\n        return [original[i:i+n] for i in range(0, m*n, n)]",
                "codeTag": "Java"
            },
            {
                "id": 1560251,
                "title": "java-simple-solution",
                "content": "```\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m * n) {\\n            return new int[0][0];\\n        }\\n        int[][] result = new int[m][n];\\n        for (int row = 0; row < m; row++) {\\n\\t\\t    /**\\n\\t\\t\\t * copy row by row\\n\\t\\t\\t */\\n            System.arraycopy(original, row * n, result[row], 0, n);\\n        }\\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if (original.length != m * n) {\\n            return new int[0][0];\\n        }\\n        int[][] result = new int[m][n];\\n        for (int row = 0; row < m; row++) {\\n\\t\\t    /**\\n\\t\\t\\t * copy row by row\\n\\t\\t\\t */\\n            System.arraycopy(original, row * n, result[row], 0, n);\\n        }\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1535462,
                "title": "kotlin-using-slicearray",
                "content": "```\\nclass Solution {\\n    fun construct2DArray(original: IntArray, m: Int, n: Int): Array<IntArray> {\\n        return if (original.size != m * n) emptyArray()\\n        else Array(m) { original.sliceArray(it * n until (it + 1) * n) }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun construct2DArray(original: IntArray, m: Int, n: Int): Array<IntArray> {\\n        return if (original.size != m * n) emptyArray()\\n        else Array(m) { original.sliceArray(it * n until (it + 1) * n) }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1523137,
                "title": "go-golang-solution",
                "content": "```go\\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    if len(original) != m * n { return [][]int{} }\\n    ans, index := make([][]int, m), 0\\n    for i := 0; i < m; i++ {\\n        ans[i] = make([]int, n)\\n        for j := 0; j < n; j++ {\\n            ans[i][j] = original[index]\\n            index++\\n        }\\n    }\\n    return ans\\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    if len(original) != m * n { return [][]int{} }\\n    ans, index := make([][]int, m), 0\\n    for i := 0; i < m; i++ {\\n        ans[i] = make([]int, n)\\n        for j := 0; j < n; j++ {\\n            ans[i][j] = original[index]\\n            index++\\n        }\\n    }\\n    return ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1519298,
                "title": "python-o-size-by-list-comprehension-w-comment",
                "content": "Python O(size) by list comprehension, where size = len(original)\\n\\n---\\n\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        # total element count of input array\\n        element_count = len(original)\\n        \\n        if element_count != m * n:\\n            \\n            # Reject if element count mismatch with new 2D array\\n            return []\\n        \\n        # reshape to specified 2D array by list comprehension\\n        return [ original[y*n:y*n+n] for y in range(m)]\\n```\\n\\n---\\n\\nReference:\\n\\n[1] [Python official docs about list comprehension](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)\\n\\n---\\n\\nRelated leetcode challenge:\\n\\n[Leetcode %566 Reshapre the Matrix](https://leetcode.com/problems/reshape-the-matrix/)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        # total element count of input array\\n        element_count = len(original)\\n        \\n        if element_count != m * n:\\n            \\n            # Reject if element count mismatch with new 2D array\\n            return []\\n        \\n        # reshape to specified 2D array by list comprehension\\n        return [ original[y*n:y*n+n] for y in range(m)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1510970,
                "title": "swift-2022-convert-1d-array-into-2d-array-one-liner",
                "content": "For a row `row` we can get the elements for the row using `original[row*n...<(row+1)*n]` assuming that `row` runs from `0..<m`.\\n\\nThis means we can get all the rows by mapping over the range `0..<m` as follows:\\n```swift\\n(0..<m).map { Array(original[$0*n..<($0+1)*n]) }\\n```\\nWe need to add the `Array(...)` to convert from an `ArraySlice` to an `Array`.\\n\\nAll that\\'s left is to protect against the case where `m*n != original.count` and we have:\\n```swift\\nclass Solution {\\n    func construct2DArray(_ original: [Int], _ m: Int, _ n: Int) -> [[Int]] {\\n        (m*n != original.count) ? [] : (0..<m).map { Array(original[$0*n..<($0+1)*n]) }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\n(0..<m).map { Array(original[$0*n..<($0+1)*n]) }\\n```\n```swift\\nclass Solution {\\n    func construct2DArray(_ original: [Int], _ m: Int, _ n: Int) -> [[Int]] {\\n        (m*n != original.count) ? [] : (0..<m).map { Array(original[$0*n..<($0+1)*n]) }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1507826,
                "title": "python-o-n",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original) != m*n:\\n            return []\\n        r,c = 0,0\\n        ans =[[0] * n for _ in range(m)]\\n        for num in original:\\n            ans[r][c] = num\\n            c +=1\\n            if c == n:\\n                c= 0\\n                r +=1\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if len(original) != m*n:\\n            return []\\n        r,c = 0,0\\n        ans =[[0] * n for _ in range(m)]\\n        for num in original:\\n            ans[r][c] = num\\n            c +=1\\n            if c == n:\\n                c= 0\\n                r +=1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1506644,
                "title": "simple-java-solution",
                "content": "class Solution {\\n\\n    public int[][] construct2DArray(int[] o, int m, int n) {\\n        int k=o.length;\\n        int a[][]=new int[0][0];\\n        if(k!=(m*n))\\n            return a;\\n        a=new int[m][n];\\n        int g=0;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                a[i][j]=o[g++];\\n            }\\n        }\\n        return a;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int[][] construct2DArray(int[] o, int m, int n) {\\n        int k=o.length;\\n        int a[][]=new int[0][0];\\n        if(k!=(m*n))\\n            return a;\\n        a=new int[m][n];\\n        int g=0;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                a[i][j]=o[g++];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1505787,
                "title": "c-easy-solution",
                "content": "```\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n    int len=original.size();\\n    vector<vector<int>> res;\\n    if(len!=m*n){\\n        return res;\\n    }\\n    res.resize(m,vector<int>(n));\\n    for(int i=0;i<len;++i){\\n        res[i/n][i%n]=original[i];\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nvector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n    int len=original.size();\\n    vector<vector<int>> res;\\n    if(len!=m*n){\\n        return res;\\n    }\\n    res.resize(m,vector<int>(n));\\n    for(int i=0;i<len;++i){\\n        res[i/n][i%n]=original[i];\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1503691,
                "title": "python-3-and-c-converting-1d-index-to-2d-index",
                "content": "```python\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        k = len(original)\\n        \\n        if m * n != k:\\n            return []\\n        \\n        matrix = [[0 for _ in range(n)] for _ in range(m)]\\n        for i in range(k):\\n            row = i // n\\n            col = i % n\\n            matrix[row][col] = original[i]\\n            \\n        return matrix\\n```\\n\\n```c++\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int k = original.size();\\n        if (m * n != k){\\n            return {};\\n        }\\n        \\n        vector<vector<int>> matrix(m, vector<int>(n, 0));\\n        for (auto i = 0; i < k; i++){\\n            int row = i / n;\\n            int col = i % n;\\n            matrix[row][col] = original[i];\\n        }\\n        return matrix;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        k = len(original)\\n        \\n        if m * n != k:\\n            return []\\n        \\n        matrix = [[0 for _ in range(n)] for _ in range(m)]\\n        for i in range(k):\\n            row = i // n\\n            col = i % n\\n            matrix[row][col] = original[i]\\n            \\n        return matrix\\n```\n```c++\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int k = original.size();\\n        if (m * n != k){\\n            return {};\\n        }\\n        \\n        vector<vector<int>> matrix(m, vector<int>(n, 0));\\n        for (auto i = 0; i < k; i++){\\n            int row = i / n;\\n            int col = i % n;\\n            matrix[row][col] = original[i];\\n        }\\n        return matrix;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501150,
                "title": "javascript-straight-forward-208ms-beats-100",
                "content": "\\n```js\\nconst construct2DArray = function (original, m, n) {\\n  if (original.length !== m * n) return [];\\n\\n  const result = new Array(m);\\n  for (let i = 0; i < m; i++) {\\n    result[i] = original.slice(i * n, (i + 1) * n);\\n  }\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst construct2DArray = function (original, m, n) {\\n  if (original.length !== m * n) return [];\\n\\n  const result = new Array(m);\\n  for (let i = 0; i < m; i++) {\\n    result[i] = original.slice(i * n, (i + 1) * n);\\n  }\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1501001,
                "title": "100-speed-100-memory",
                "content": "![image](https://assets.leetcode.com/users/images/215a3c7c-bede-4ada-88fe-e4e03eef397d_1633263199.4925833.png)\\n\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if not n*m == len(original) :\\n            return []\\n        arr = []\\n        for i in range(0, len(original), n):\\n            arr.append(original[i:i+n])\\n        return arr\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if not n*m == len(original) :\\n            return []\\n        arr = []\\n        for i in range(0, len(original), n):\\n            arr.append(original[i:i+n])\\n        return arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500443,
                "title": "very-easy-concept-and-o-n-solution",
                "content": "public int[][] construct2DArray(int[] original, int n, int m) {\\n        \\tif(original.length != m*n) return new int[0][0];\\n\\tint[][] result = new int[m][n];\\n       int[][] skydata=new int[n][m];\\n       int i = 0;\\n       for(int r=0; r<n; r++){\\n    for( int c=0; c<m; c++){\\n            skydata[r][c]=original[i++];\\n    }\\n}\\nreturn skydata;\\n    }",
                "solutionTags": [],
                "code": "public int[][] construct2DArray(int[] original, int n, int m) {\\n        \\tif(original.length != m*n) return new int[0][0];\\n\\tint[][] result = new int[m][n];\\n       int[][] skydata=new int[n][m];\\n       int i = 0;\\n       for(int r=0; r<n; r++){\\n    for( int c=0; c<m; c++){\\n            skydata[r][c]=original[i++];\\n    }\\n}\\nreturn skydata;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1500394,
                "title": "runtime-1016-ms-faster-than-100-00-of-python3",
                "content": "# Runtime: 1016 ms, faster than 100.00% of Python3 \\n# Memory Usage: 21.8 MB, less than 100.00% of Python3 \\n\\nclass Solution:\\n\\tdef construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        if m*n!=len(original):\\n            return []\\n        \\n        ans=[]\\n        j=0\\n\\t\\t\\n        for i in range(m):\\n            ans.append(original[j:j+n])\\n            j=j+n\\n\\t\\t\\t\\n        return ans\\n\\t\\t\\n\\t# Please UpVote\\n\\t\\t",
                "solutionTags": [
                    "Python3"
                ],
                "code": "# Runtime: 1016 ms, faster than 100.00% of Python3 \\n# Memory Usage: 21.8 MB, less than 100.00% of Python3 \\n\\nclass Solution:\\n\\tdef construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        \\n        if m*n!=len(original):\\n            return []\\n        \\n        ans=[]\\n        j=0\\n\\t\\t\\n        for i in range(m):\\n            ans.append(original[j:j+n])\\n            j=j+n\\n\\t\\t\\t\\n        return ans\\n\\t\\t\\n\\t# Please UpVote\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1500107,
                "title": "python-and-golang-solution",
                "content": "Python\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ls = len(original)\\n        if m * n != ls:\\n            return []\\n        \\n        res = [[0] * n for _ in range(m)]\\n        \\n        for i, val in enumerate(original):\\n            r, c = divmod(i, n)\\n            res[r][c] = val\\n        return res\\n ```  \\n Golang\\n ```   \\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    res := make([][]int, m)\\n    if len(original) != m * n {\\n        return [][]int{}\\n    }\\n    for i :=0; i < m; i++ {\\n        tmp := make([]int, n)\\n        res[i] = tmp\\n    }\\n    for i, val := range original {\\n        r, c := i / n, i % n\\n        res[r][c] = val\\n    }    \\n    return res\\n    \\n}\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ls = len(original)\\n        if m * n != ls:\\n            return []\\n        \\n        res = [[0] * n for _ in range(m)]\\n        \\n        for i, val in enumerate(original):\\n            r, c = divmod(i, n)\\n            res[r][c] = val\\n        return res\\n ```\n```   \\nfunc construct2DArray(original []int, m int, n int) [][]int {\\n    res := make([][]int, m)\\n    if len(original) != m * n {\\n        return [][]int{}\\n    }\\n    for i :=0; i < m; i++ {\\n        tmp := make([]int, n)\\n        res[i] = tmp\\n    }\\n    for i, val := range original {\\n        r, c := i / n, i % n\\n        res[r][c] = val\\n    }    \\n    return res\\n    \\n}\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499892,
                "title": "c-104-ms",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(const vector<int>& original, int m, int n) {\\n        if(m*n != original.size()) return {};\\n        int p=0;\\n        vector<vector<int>> vec;\\n        for(int i=0; i<m; ++i) {\\n            vector<int> tmp {original.begin()+p,original.begin()+p+n};\\n            vec.push_back(tmp);\\n            p+=n;\\n        }\\n        return vec;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(const vector<int>& original, int m, int n) {\\n        if(m*n != original.size()) return {};\\n        int p=0;\\n        vector<vector<int>> vec;\\n        for(int i=0; i<m; ++i) {\\n            vector<int> tmp {original.begin()+p,original.begin()+p+n};\\n            vec.push_back(tmp);\\n            p+=n;\\n        }\\n        return vec;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499591,
                "title": "c-brute-force",
                "content": "```\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) \\n    {\\n        if(m*n!=original.size())\\n            return {};\\n        int k=0;\\n        vector<vector<int>> res;\\n        for(int i=0;i<m;i++)\\n        {\\n             vector<int> temp;\\n            for(int j=0;j<n;j++)\\n            {\\n                   temp.push_back(original[k++]);\\n            }\\n            res.push_back(temp);\\n        }\\n        return res;\\n }\\n```",
                "solutionTags": [],
                "code": "```\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) \\n    {\\n        if(m*n!=original.size())\\n            return {};\\n        int k=0;\\n        vector<vector<int>> res;\\n        for(int i=0;i<m;i++)\\n        {\\n             vector<int> temp;\\n            for(int j=0;j<n;j++)\\n            {\\n                   temp.push_back(original[k++]);\\n            }\\n            res.push_back(temp);\\n        }\\n        return res;\\n }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499485,
                "title": "java-100-fast-very-easy",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n       \\n        int[][] res = new int[m][n];\\n        int k = 0;\\n\\n        if(m*n == original.length)\\n        {\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=0;j<n;j++)\\n                {\\n                    res[i][j] = original[k++];\\n                }\\n            }\\n        }\\n        else\\n        {\\n            return new int[][]{};\\n        }\\n        \\n        return res;\\n    }\\n    \\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n       \\n        int[][] res = new int[m][n];\\n        int k = 0;\\n\\n        if(m*n == original.length)\\n        {\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=0;j<n;j++)\\n                {\\n                    res[i][j] = original[k++];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1499297,
                "title": "python-3-1-line",
                "content": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [] if n*m != len(original) else [original[i*n:(i+1)*n] for i in range(m)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [] if n*m != len(original) else [original[i*n:(i+1)*n] for i in range(m)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499182,
                "title": "python-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n\\t\\t\\tif len(original) != m * n:\\n\\t\\t\\t\\treturn None\\n\\t\\t\\tres = []\\n\\t\\t\\ti = 0\\n\\t\\t\\twhile i < len(original):\\n\\t\\t\\t\\ttmp = []\\n\\t\\t\\t\\tfor j in range(n):\\n\\t\\t\\t\\t\\ttmp.append(original[i])\\n\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tres.append(tmp)\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n\\t\\t\\tif len(original) != m * n:\\n\\t\\t\\t\\treturn None\\n\\t\\t\\tres = []\\n\\t\\t\\ti = 0\\n\\t\\t\\twhile i < len(original):\\n\\t\\t\\t\\ttmp = []\\n\\t\\t\\t\\tfor j in range(n):\\n\\t\\t\\t\\t\\ttmp.append(original[i])\\n\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\tres.append(tmp)\\n\\t\\t\\treturn res",
                "codeTag": "Java"
            },
            {
                "id": 1499147,
                "title": "simple-javascript-solution-o-n",
                "content": "```\\nvar construct2DArray = function(original, m, n) {\\n    if (original.length !== m * n) return [];\\n    \\n    let index = 0;\\n    const result = new Array(m);\\n    \\n    for (let i = 0; i < m; ++i) {\\n        result[i] = new Array(n);\\n        for (let j = 0; j < n; ++j) {\\n            result[i][j] = original[index++];\\n        }\\n    }\\n    \\n    return result;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar construct2DArray = function(original, m, n) {\\n    if (original.length !== m * n) return [];\\n    \\n    let index = 0;\\n    const result = new Array(m);\\n    \\n    for (let i = 0; i < m; ++i) {\\n        result[i] = new Array(n);\\n        for (let j = 0; j < n; ++j) {\\n            result[i][j] = original[index++];\\n        }\\n    }\\n    \\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499109,
                "title": "c-easy-solution",
                "content": "```\\n// PLEASE UPVOTE IF YOU LIKE THE SOLUTION\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int i,j;\\n        if(m*n!=original.size())\\n            return {};\\n        else\\n        {\\n            vector<vector<int>>ans(m,vector<int>(n));\\n            int x=0;\\n            for(i=0;i<m;i++)\\n                {\\n                 for(int j=0;j<n;j++)\\n                 {\\n                     ans[i][j]=original[x];\\n                     x++;\\n                 }\\n                }\\n            return ans;\\n        }\\n       \\n          \\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int i,j;\\n        if(m*n!=original.size())\\n            return {}",
                "codeTag": "Java"
            },
            {
                "id": 1499055,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int total = original.size();\\n        int x = (m*n);\\n        vector<vector<int>> v;\\n        if(total != x){\\n            return v;\\n        }\\n        else{\\n            for(int i=0;i<m;i++){\\n                vector<int> v1;\\n                for(int j=0;j<n;j++){\\n                    v1.push_back(original[i*n + j]);\\n                }\\n                v.push_back(v1);\\n            }\\n        }\\n         return v;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        int total = original.size();\\n        int x = (m*n);\\n        vector<vector<int>> v;\\n        if(total != x){\\n            return v;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1499034,
                "title": "c-simple-concise",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size())\\n            return {};\\n        vector<vector<int>>ans(m,vector<int>(n,0));\\n        for(int i=0;i<original.size();i++)\\n            ans[i/n][i%n]=original[i];\\n        return ans;\\n    }\\n};\\n```\\nDo **UPVOTE** if it helps:)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\\n        if(m*n!=original.size())\\n            return {};\\n        vector<vector<int>>ans(m,vector<int>(n,0));\\n        for(int i=0;i<original.size();i++)\\n            ans[i/n][i%n]=original[i];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1499003,
                "title": "a-few-solutions",
                "content": "*Kotlin*\\n```\\nclass Solution {\\n    fun construct2DArray(A: IntArray, M: Int, N: Int): Array<IntArray> {\\n        if (A.size != M * N)\\n            return arrayOf()\\n        var (i, j) = listOf(0, 0)\\n        var ans = mutableListOf<IntArray>()\\n        for (x in A) {\\n            if (i++ % N == 0) {\\n                ans.add(IntArray(N){ 0 })\\n                j = 0\\n            }\\n            ans[ans.lastIndex][j++] = x\\n        }\\n        return ans.toTypedArray()\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet construct2DArray = (A, M, N, i = 0, ans = []) => {\\n    if (A.length != M * N)\\n        return [];\\n    for (let x of A) {\\n        if (!(i++ % N))\\n            ans.push([]);\\n        ans[ans.length - 1].push(x);\\n    }\\n    return ans;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def construct2DArray(self, A: List[int], M: int, N: int, i = 0) -> List[List[int]]:\\n        if len(A) != M * N:\\n            return []\\n        ans = []\\n        for x in A:\\n            if not (i % N):\\n                ans.append([])\\n            ans[-1].append(x)\\n            i += 1\\n        return ans\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    VVI construct2DArray(VI& A, int M, int N, int i = 0, VVI ans = {}) {\\n        if (A.size() != M * N)\\n            return {};\\n        for (auto x: A) {\\n            if (i++ % N == 0)\\n                ans.emplace_back();\\n            ans.back().push_back(x);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun construct2DArray(A: IntArray, M: Int, N: Int): Array<IntArray> {\\n        if (A.size != M * N)\\n            return arrayOf()\\n        var (i, j) = listOf(0, 0)\\n        var ans = mutableListOf<IntArray>()\\n        for (x in A) {\\n            if (i++ % N == 0) {\\n                ans.add(IntArray(N){ 0 })\\n                j = 0\\n            }\\n            ans[ans.lastIndex][j++] = x\\n        }\\n        return ans.toTypedArray()\\n    }\\n}\\n```\n```\\nlet construct2DArray = (A, M, N, i = 0, ans = []) => {\\n    if (A.length != M * N)\\n        return [];\\n    for (let x of A) {\\n        if (!(i++ % N))\\n            ans.push([]);\\n        ans[ans.length - 1].push(x);\\n    }\\n    return ans;\\n};\\n```\n```\\nclass Solution:\\n    def construct2DArray(self, A: List[int], M: int, N: int, i = 0) -> List[List[int]]:\\n        if len(A) != M * N:\\n            return []\\n        ans = []\\n        for x in A:\\n            if not (i % N):\\n                ans.append([])\\n            ans[-1].append(x)\\n            i += 1\\n        return ans\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    VVI construct2DArray(VI& A, int M, int N, int i = 0, VVI ans = {}) {\\n        if (A.size() != M * N)\\n            return {};\\n        for (auto x: A) {\\n            if (i++ % N == 0)\\n                ans.emplace_back();\\n            ans.back().push_back(x);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071786,
                "title": "an-intelligent-and-simple-solution",
                "content": "# Intuition\\nThe goal is to transform a 1D list into a 2D array with the given dimensions (rows and columns). If the length of the original list is equal to m * n, then it can be reshaped into an m x n 2D array. Otherwise, it\\'s not possible to create a valid 2D array.\\n\\n# Approach\\n* Initialize an empty list called ans to store the resulting 2D array.\\n* Check if the length of the original list is equal to m * n. If it is not, return an empty list (since it\\'s impossible to construct a valid 2D array).\\n* If the length is valid, iterate through the original list in steps of n elements at a time using a for loop.\\n* In each iteration, slice the original list to extract n elements, which represent a row in the 2D array.\\n* Append the extracted row to the ans list.\\n* After iterating through the entire original list, the ans list will contain the reshaped 2D array, and it is returned as the result.\\n\\n# Complexity\\n- Time complexity:\\nO(m*n)\\n\\n- Space complexity:\\nO(m*n)\\n\\n# Code\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        if len(original) == m*n:\\n            for i in range(0,m*n, n):\\n                ans.append(original[i: i+n])\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        ans = []\\n        if len(original) == m*n:\\n            for i in range(0,m*n, n):\\n                ans.append(original[i: i+n])\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070023,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int x =0;\\n        int arr[][]=new int[m][n];\\n        if(m*n!=original.length){\\n        \\n                return new int[0][0];\\n        }\\n        else{\\n        for(int i=0;i<m;i++){\\n            for(int j =0;j<n;j++){\\n                arr[i][j]=original[x];\\n                x++;\\n            }\\n        }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        int x =0;\\n        int arr[][]=new int[m][n];\\n        if(m*n!=original.length){\\n        \\n                return new int[0][0];\\n        }\\n        else{\\n        for(int i=0;i<m;i++){\\n            for(int j =0;j<n;j++){\\n                arr[i][j]=original[x];\\n                x++;\\n            }\\n        }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068870,
                "title": "simple-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def construct2DArray(self, original, m, n):\\n        \"\"\"\\n        :type original: List[int]\\n        :type m: int\\n        :type n: int\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        if len(original) % m != 0:\\n            return []\\n        if len(original) / m != n:\\n            return []\\n        x = 0\\n        res = []\\n        for i in range(m):\\n            temp=[]\\n            for j in range(n):\\n                if x<len(original):\\n                    temp.append(original[x])\\n                x= x+1\\n            res.append(temp)\\n        return res\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def construct2DArray(self, original, m, n):\\n        \"\"\"\\n        :type original: List[int]\\n        :type m: int\\n        :type n: int\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        if len(original) % m != 0:\\n            return []\\n        if len(original) / m != n:\\n            return []\\n        x = 0\\n        res = []\\n        for i in range(m):\\n            temp=[]\\n            for j in range(n):\\n                if x<len(original):\\n                    temp.append(original[x])\\n                x= x+1\\n            res.append(temp)\\n        return res\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065296,
                "title": "1d-to-2d-array-with-0-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n !=original.length){\\n            return new int[][]{};\\n        }\\n        int k=0;\\n        int res[][]=new int[m][n];\\n        for(int i=0;i<original.length;i++)\\n          res[i/n][i%n]=original[i];\\n        return res;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n !=original.length){\\n            return new int[][]{};\\n        }\\n        int k=0;\\n        int res[][]=new int[m][n];\\n        for(int i=0;i<original.length;i++)\\n          res[i/n][i%n]=original[i];\\n        return res;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065246,
                "title": "1d-array-to-2d-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n !=original.length){\\n            return new int[][]{};\\n        }\\n        int k=0;\\n        int res[][]=new int[m][n];\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                res[i][j]=original[k++];\\n            }\\n        }\\n        return res;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] construct2DArray(int[] original, int m, int n) {\\n        if(m*n !=original.length){\\n            return new int[][]{};\\n        }\\n        int k=0;\\n        int res[][]=new int[m][n];\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n;j++){\\n                res[i][j]=original[k++];\\n            }\\n        }\\n        return res;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4062269,
                "title": "easy-python-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n==len(original):\\n            \\n            i=0\\n            l=[]\\n            for k in range(m):\\n                new=[]\\n                for j in range (n):\\n                    new.append(original[i])\\n                    i+=1\\n                l.append(new)\\n            return l\\n        else:return []\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        if m*n==len(original):\\n            \\n            i=0\\n            l=[]\\n            for k in range(m):\\n                new=[]\\n                for j in range (n):\\n                    new.append(original[i])\\n                    i+=1\\n                l.append(new)\\n            return l\\n        else:return []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058108,
                "title": "easy-solution-1-line",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [original[i:i+n] for i in range(0, l, n)] if m * n == (l := len(original)) else []\\n```\\n\\nPlease let me know if any improvements can be made.\\n\\nThanks",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:\\n        return [original[i:i+n] for i in range(0, l, n)] if m * n == (l := len(original)) else []\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1723527,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "for empty 2D Array  in C# initialize array with zero length;\n\n```\nif( m*n != original.Length ) return new int[0][];\n```"
                    },
                    {
                        "username": "DuoUnderscore",
                        "content": "Unclear question. Should an input be considered impossible if the length of `original` is less than the area of the desired matrix?"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "WHy Leet code don\\'t want give float type ? why why why ?????"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "When is it possible to convert original into a 2D array and when is it impossible? "
                    },
                    {
                        "username": "prathishgm14",
                        "content": "It is possible only when len(original)==m*n. otherwise number of elements in 1d array and 2d array is not same."
                    },
                    {
                        "username": "rcomesan",
                        "content": "It is possible when you have exactly M * N elements. If you have more than M * N, there will be elements left in the original array that don\\'t fit in the output matrix. If you have less than M * N, you\\'ll end up with empty slots."
                    }
                ]
            },
            {
                "id": 2007484,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "for empty 2D Array  in C# initialize array with zero length;\n\n```\nif( m*n != original.Length ) return new int[0][];\n```"
                    },
                    {
                        "username": "DuoUnderscore",
                        "content": "Unclear question. Should an input be considered impossible if the length of `original` is less than the area of the desired matrix?"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "WHy Leet code don\\'t want give float type ? why why why ?????"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "When is it possible to convert original into a 2D array and when is it impossible? "
                    },
                    {
                        "username": "prathishgm14",
                        "content": "It is possible only when len(original)==m*n. otherwise number of elements in 1d array and 2d array is not same."
                    },
                    {
                        "username": "rcomesan",
                        "content": "It is possible when you have exactly M * N elements. If you have more than M * N, there will be elements left in the original array that don\\'t fit in the output matrix. If you have less than M * N, you\\'ll end up with empty slots."
                    }
                ]
            },
            {
                "id": 1682818,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "for empty 2D Array  in C# initialize array with zero length;\n\n```\nif( m*n != original.Length ) return new int[0][];\n```"
                    },
                    {
                        "username": "DuoUnderscore",
                        "content": "Unclear question. Should an input be considered impossible if the length of `original` is less than the area of the desired matrix?"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "WHy Leet code don\\'t want give float type ? why why why ?????"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "When is it possible to convert original into a 2D array and when is it impossible? "
                    },
                    {
                        "username": "prathishgm14",
                        "content": "It is possible only when len(original)==m*n. otherwise number of elements in 1d array and 2d array is not same."
                    },
                    {
                        "username": "rcomesan",
                        "content": "It is possible when you have exactly M * N elements. If you have more than M * N, there will be elements left in the original array that don\\'t fit in the output matrix. If you have less than M * N, you\\'ll end up with empty slots."
                    }
                ]
            },
            {
                "id": 1682514,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "for empty 2D Array  in C# initialize array with zero length;\n\n```\nif( m*n != original.Length ) return new int[0][];\n```"
                    },
                    {
                        "username": "DuoUnderscore",
                        "content": "Unclear question. Should an input be considered impossible if the length of `original` is less than the area of the desired matrix?"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "WHy Leet code don\\'t want give float type ? why why why ?????"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "When is it possible to convert original into a 2D array and when is it impossible? "
                    },
                    {
                        "username": "prathishgm14",
                        "content": "It is possible only when len(original)==m*n. otherwise number of elements in 1d array and 2d array is not same."
                    },
                    {
                        "username": "rcomesan",
                        "content": "It is possible when you have exactly M * N elements. If you have more than M * N, there will be elements left in the original array that don\\'t fit in the output matrix. If you have less than M * N, you\\'ll end up with empty slots."
                    }
                ]
            }
        ]
    }
]