[
    {
        "title": "Friend Requests II: Who Has the Most Friends",
        "question_content": "Table: RequestAccepted\n\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| requester_id   | int     |\n| accepter_id    | int     |\n| accept_date    | date    |\n+----------------+---------+\n(requester_id, accepter_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\n\n&nbsp;\nWrite a solution to find the people who have the most friends and the most friends number.\nThe test cases are generated so that only one person has the most friends.\nThe result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nRequestAccepted table:\n+--------------+-------------+-------------+\n| requester_id | accepter_id | accept_date |\n+--------------+-------------+-------------+\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n+--------------+-------------+-------------+\nOutput: \n+----+-----+\n| id | num |\n+----+-----+\n| 3  | 3   |\n+----+-----+\nExplanation: \nThe person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others.\n\n&nbsp;\nFollow up: In the real world, multiple people could have the same most number of friends. Could you find all these people in this case?",
        "solutions": [
            {
                "id": 103804,
                "title": "shouldn-t-we-use-union-instead-of-union-all",
                "content": "I think the answer missed the case when A send B a friend request, and B send A a friend request, and both requests got approved. In this case, A or B really just gained one friend. But the answer seems to count this case twice.\\nIsn't union (remove duplicates) should be used instead of union all?\\n```\\nselect id1 as id, count(id2) as num\\nfrom\\n(select requester_id as id1, accepter_id as id2 \\nfrom request_accepted\\nunion\\nselect accepter_id as id1, requester_id as id2 \\nfrom request_accepted) tmp1\\ngroup by id1 \\norder by num desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect id1 as id, count(id2) as num\\nfrom\\n(select requester_id as id1, accepter_id as id2 \\nfrom request_accepted\\nunion\\nselect accepter_id as id1, requester_id as id2 \\nfrom request_accepted) tmp1\\ngroup by id1 \\norder by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103812,
                "title": "share-my-accepted-sql-query-using-union-all-the-first-accepted-answer-of-all",
                "content": "```\\nselect id, count(*) num from \\n(\\n      (select requester_id id from request_accepted) \\n      union all \\n      (select accepter_id id from request_accepted)\\n) tb \\ngroup by id order by num desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect id, count(*) num from \\n(\\n      (select requester_id id from request_accepted) \\n      union all \\n      (select accepter_id id from request_accepted)\\n) tb \\ngroup by id order by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3803211,
                "title": "union-all-is-what-you-need-don-t-overcomplicate",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith base as(select requester_id id from RequestAccepted\\nunion all\\nselect accepter_id id from RequestAccepted)\\n\\n\\nselect id, count(*) num  from base group by 1 order by 2 desc limit 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith base as(select requester_id id from RequestAccepted\\nunion all\\nselect accepter_id id from RequestAccepted)\\n\\n\\nselect id, count(*) num  from base group by 1 order by 2 desc limit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3490697,
                "title": "clean-simplest-mysql-solution-ever",
                "content": "# Please Comment and UpVote the answer if it helps\\uD83D\\uDE00\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect requester_id as id,\\n       (select count(*) from RequestAccepted\\n            where id=requester_id or id=accepter_id) as num\\nfrom RequestAccepted\\ngroup by requester_id\\norder by num desc limit 1\\n\\n                \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect requester_id as id,\\n       (select count(*) from RequestAccepted\\n            where id=requester_id or id=accepter_id) as num\\nfrom RequestAccepted\\ngroup by requester_id\\norder by num desc limit 1\\n\\n                \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1821392,
                "title": "simple-solution-without-union-cte-join",
                "content": "If we look at the table, the question means that for an id -> count the rows where  either requester_id or accepter_id is equal to that id\\n\\n```\\nselect \\n    requester_id as id,\\n    (   select count(t.requester_id) \\n        from RequestAccepted t\\n        where t.requester_id = id or t.accepter_id = id\\n    ) as num\\nfrom RequestAccepted\\ngroup by id\\norder by num desc\\nlimit 1;\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n    requester_id as id,\\n    (   select count(t.requester_id) \\n        from RequestAccepted t\\n        where t.requester_id = id or t.accepter_id = id\\n    ) as num\\nfrom RequestAccepted\\ngroup by id\\norder by num desc\\nlimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3535337,
                "title": "simple-solution-using-subquery-in-sql-server",
                "content": "**Upvote if you feel it easy :)**\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT TOP 1 X.id, count(X.id) as num\\nFROM (\\n    SELECT requester_id as id\\n    FROM RequestAccepted\\n    UNION ALL\\n    SELECT accepter_id\\n    FROM RequestAccepted\\n) X\\nGROUP BY X.id\\nORDER BY num DESC;\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT TOP 1 X.id, count(X.id) as num\\nFROM (\\n    SELECT requester_id as id\\n    FROM RequestAccepted\\n    UNION ALL\\n    SELECT accepter_id\\n    FROM RequestAccepted\\n) X\\nGROUP BY X.id\\nORDER BY num DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 146577,
                "title": "follow-up-solution",
                "content": "```\\nwith Cnt as (\\nselect id, count(id) as num from \\n(\\nselect requester_id as id, accepter_id as id2 from  request_accepted2\\nunion all \\nselect accepter_id as id, requester_id as id2 from  request_accepted2\\n) x \\ngroup by id \\n)\\nselect * from cnt\\nwhere num = (select max(num) from cnt) \\n```",
                "solutionTags": [],
                "code": "```\\nwith Cnt as (\\nselect id, count(id) as num from \\n(\\nselect requester_id as id, accepter_id as id2 from  request_accepted2\\nunion all \\nselect accepter_id as id, requester_id as id2 from  request_accepted2\\n) x \\ngroup by id \\n)\\nselect * from cnt\\nwhere num = (select max(num) from cnt) \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2546835,
                "title": "union",
                "content": "```\\nselect distinct id, count(distinct friend) as num\\nfrom\\n(select requester_id as id, accepter_id as friend\\nfrom requestaccepted\\nunion\\nselect accepter_id as id, requester_id as friend\\nfrom requestaccepted) t\\ngroup by id\\norder by num desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct id, count(distinct friend) as num\\nfrom\\n(select requester_id as id, accepter_id as friend\\nfrom requestaccepted\\nunion\\nselect accepter_id as id, requester_id as friend\\nfrom requestaccepted) t\\ngroup by id\\norder by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 687509,
                "title": "simple-mysql-using-union-all",
                "content": "```\\n# Write your MySQL query statement below\\nselect id, count(*) as num from(\\nselect requester_id id from request_accepted\\nunion all \\n    select accepter_id id from request_accepted) t\\ngroup by id\\norder by num desc limit 1 \\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, count(*) as num from(\\nselect requester_id id from request_accepted\\nunion all \\n    select accepter_id id from request_accepted) t\\ngroup by id\\norder by num desc limit 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 455750,
                "title": "mysql-clean-solution",
                "content": "```\\nSELECT id, COUNT(DISTINCT id2) AS num FROM (\\nSELECT requester_id AS id,accepter_id AS id2 from request_accepted\\nUNION \\nSELECT accepter_id AS id,requester_id AS id2 from request_accepted) A\\nGROUP BY id ORDER BY num DESC LIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id, COUNT(DISTINCT id2) AS num FROM (\\nSELECT requester_id AS id,accepter_id AS id2 from request_accepted\\nUNION \\nSELECT accepter_id AS id,requester_id AS id2 from request_accepted) A\\nGROUP BY id ORDER BY num DESC LIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2253573,
                "title": "faster-than-96",
                "content": "```\\nSELECT \\n        id,\\n        COUNT(*) AS num\\nFROM\\n(\\nSELECT\\n        requester_id AS id\\nFROM\\n        RequestAccepted \\n\\nUNION ALL\\n\\nSELECT \\n        accepter_id AS id\\nFROM\\n        RequestAccepted\\n) AS a\\nGROUP BY \\n        id\\nORDER BY \\n        num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n        id,\\n        COUNT(*) AS num\\nFROM\\n(\\nSELECT\\n        requester_id AS id\\nFROM\\n        RequestAccepted \\n\\nUNION ALL\\n\\nSELECT \\n        accepter_id AS id\\nFROM\\n        RequestAccepted\\n) AS a\\nGROUP BY \\n        id\\nORDER BY \\n        num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1722703,
                "title": "union-all-and-top-n-ms-sql-easy-to-understand-and-fast",
                "content": "select top 1 id, count(*) as num from (\\nSELECT requester_id as id from RequestAccepted\\nunion all \\nselect accepter_id as id from RequestAccepted\\n) X group by id order by count(*) desc",
                "solutionTags": [],
                "code": "select top 1 id, count(*) as num from (\\nSELECT requester_id as id from RequestAccepted\\nunion all \\nselect accepter_id as id from RequestAccepted\\n) X group by id order by count(*) desc",
                "codeTag": "Unknown"
            },
            {
                "id": 103811,
                "title": "solution-with-union-all-and-aggregation",
                "content": "select t3.id as id, count(t3.id) as num from \\n( \\nselect t1.requester_id as id, t1.accepter_id as friend_id from request_accepted as t1 \\nUNION ALL\\nselect t2.accepter_id as id, t2.requester_id as friend_id from request_accepted as t2\\n) \\nas t3\\nGROUP BY \\nt3.id \\nORDER BY num DESC\\nLIMIT 1;",
                "solutionTags": [],
                "code": "select t3.id as id, count(t3.id) as num from \\n( \\nselect t1.requester_id as id, t1.accepter_id as friend_id from request_accepted as t1 \\nUNION ALL\\nselect t2.accepter_id as id, t2.requester_id as friend_id from request_accepted as t2\\n) \\nas t3\\nGROUP BY \\nt3.id \\nORDER BY num DESC\\nLIMIT 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 3830355,
                "title": "step-by-step-detailed-solution-easy-to-understand-without-cte-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA beginner friendly answer is written by following basic concepts step by step.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst step form a basic select statement looking at the output\\nSELECT ___ as id, ___ as num\\nFROM _____\\n\\nFor next step, we try and complete the FROM statement by forming a subquery. For this question the approach used is of counting the occurrence of an id both as a requester and as an accepter (as (requester_id, accepter_id) is the primary key the combination will always be unique and no overcounting will occur).\\nOne way of doing this is by using UNION ALL (as id of one person will repeat in the resulting table)\\nFor this the subquery written is \\nSELECT ___ as id, ___ as num\\nFROM (SELECT requester_id as frnd_id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id as frnd_id\\nFROM RequestAccepted) as t\\n\\nNow to count the occurences of each unique id as num, we use COUNT(*) and GROUP BY frnd_id\\nSELECT frnd_id as id, count(*) as num \\nFROM\\n(SELECT requester_id as frnd_id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id as frnd_id\\nFROM RequestAccepted) as t\\nGROUP BY frnd_id\\n\\nNow to obtain only the one with maximum friends in the result table we ORDER BY num DESC (Descending) and put a limit of 1 row\\nThus the final code becomes\\nSELECT frnd_id as id, count(*) as num \\nFROM\\n(SELECT requester_id as frnd_id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id as frnd_id\\nFROM RequestAccepted) as t\\nGROUP BY frnd_id\\nORDER BY num DESC\\nlimit 1\\n\\n# Complexity\\n- Runtime : 565 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Beats : 76.97%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT frnd_id as id, count(*) as num \\nFROM\\n(SELECT requester_id as frnd_id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id as frnd_id\\nFROM RequestAccepted) as t\\nGROUP BY frnd_id\\nORDER BY num DESC\\nlimit 1\\n```\\nIf you like my explanation kindly upvote for me :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT frnd_id as id, count(*) as num \\nFROM\\n(SELECT requester_id as frnd_id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id as frnd_id\\nFROM RequestAccepted) as t\\nGROUP BY frnd_id\\nORDER BY num DESC\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3605709,
                "title": "mysql-solution-for-friend-request-ii-who-has-the-most-friends-problem",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\nThe intuition behind the solution is to find the person(s) who have the most friends among all the users. To achieve this, we need to count the occurrences of each user in both the requester_id and accepter_id columns and compare their friend counts.\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n1. Create a derived table all_users by combining the requester_id and accepter_id columns using the UNION ALL operator. This will give us a single column user_id containing all the users involved in the requests.\\r\\n1. Group the rows in all_users by user_id and count the occurrences of each user_id using the COUNT(*) function. This will give us the friend count for each user.\\r\\n1. Use a subquery to find the maximum friend count by repeating the same steps as above and ordering the result by the friend count in descending order. Limit the result to only the first row using the LIMIT clause.\\r\\n1. Finally, filter the result by selecting only the rows where the friend count is equal to the maximum friend count using the HAVING clause. This will give us the person(s) with the most friends.\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\nThe time complexity of this solution is O(n log n), where n is the total number of rows in the RequestAccepted table. The query involves grouping and counting the occurrences of each user, which requires traversing the table. Sorting is performed in the subquery to find the maximum friend count, which has a time complexity of O(n log n). However, since the subquery is executed once, the overall time complexity is dominated by the grouping and counting operations.\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\nThe space complexity of this solution is O(n), where n is the total number of rows in the RequestAccepted table. This is because the derived table all_users is created to store the combined user IDs, and its size is directly proportional to the number of rows in the table. The additional space used for grouping and storing the friend counts is also proportional to the number of unique users.\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n# SELECT requester_id AS id, COUNT(*) AS num\\r\\n# FROM RequestAccepted\\r\\n# GROUP BY requester_id\\r\\n# ORDER BY num DESC\\r\\n# LIMIT 1;\\r\\n\\r\\nSELECT user_id AS id, COUNT(*) AS num\\r\\nFROM\\r\\n(\\r\\n    SELECT requester_id AS user_id\\r\\n    FROM RequestAccepted\\r\\n    UNION ALL\\r\\n    SELECT accepter_id AS user_id\\r\\n    FROM RequestAccepted\\r\\n) AS all_users\\r\\nGROUP BY user_id\\r\\nHAVING num = (\\r\\n    SELECT COUNT(*) AS max_friends\\r\\n    FROM\\r\\n    (\\r\\n        SELECT requester_id AS user_id\\r\\n        FROM RequestAccepted\\r\\n        UNION ALL\\r\\n        SELECT accepter_id AS user_id\\r\\n        FROM RequestAccepted\\r\\n    ) AS all_users\\r\\n    GROUP BY user_id\\r\\n    ORDER BY max_friends DESC\\r\\n    LIMIT 1\\r\\n);\\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n# SELECT requester_id AS id, COUNT(*) AS num\\r\\n# FROM RequestAccepted\\r\\n# GROUP BY requester_id\\r\\n# ORDER BY num DESC\\r\\n# LIMIT 1;\\r\\n\\r\\nSELECT user_id AS id, COUNT(*) AS num\\r\\nFROM\\r\\n(\\r\\n    SELECT requester_id AS user_id\\r\\n    FROM RequestAccepted\\r\\n    UNION ALL\\r\\n    SELECT accepter_id AS user_id\\r\\n    FROM RequestAccepted\\r\\n) AS all_users\\r\\nGROUP BY user_id\\r\\nHAVING num = (\\r\\n    SELECT COUNT(*) AS max_friends\\r\\n    FROM\\r\\n    (\\r\\n        SELECT requester_id AS user_id\\r\\n        FROM RequestAccepted\\r\\n        UNION ALL\\r\\n        SELECT accepter_id AS user_id\\r\\n        FROM RequestAccepted\\r\\n    ) AS all_users\\r\\n    GROUP BY user_id\\r\\n    ORDER BY max_friends DESC\\r\\n    LIMIT 1\\r\\n);\\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1490503,
                "title": "accepted-ms-sql-with-union",
                "content": "I think the test case was corrected\\nI got my code accepted\\n```\\n/* Write your T-SQL query statement below */\\nwith all_friend as (\\nselect requester_id as f1, accepter_id as f2\\nfrom request_accepted\\nunion\\nselect accepter_id as f1, requester_id as f2\\nfrom request_accepted\\n)\\nselect top 1 f1 as id\\n    , count(distinct f2) as num\\nfrom all_friend\\ngroup by f1\\norder by num desc\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Union Find"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith all_friend as (\\nselect requester_id as f1, accepter_id as f2\\nfrom request_accepted\\nunion\\nselect accepter_id as f1, requester_id as f2\\nfrom request_accepted\\n)\\nselect top 1 f1 as id\\n    , count(distinct f2) as num\\nfrom all_friend\\ngroup by f1\\norder by num desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1203542,
                "title": "mysql-using-union-all-and-cte",
                "content": "```\\nWITH tcte AS\\n(\\nSELECT requester_id AS id\\nFROM request_accepted\\nUNION ALL\\nSELECT accepter_id AS id\\nFROM \\nrequest_accepted\\n) \\n\\nSELECT id, COUNT(*) as num \\nFROM tcte \\nGROUP BY id\\nORDER BY num DESC LIMIT 1",
                "solutionTags": [],
                "code": "```\\nWITH tcte AS\\n(\\nSELECT requester_id AS id\\nFROM request_accepted\\nUNION ALL\\nSELECT accepter_id AS id\\nFROM \\nrequest_accepted\\n) \\n\\nSELECT id, COUNT(*) as num \\nFROM tcte \\nGROUP BY id\\nORDER BY num DESC LIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 3958499,
                "title": "simple-solution-easy-to-understand",
                "content": "```\\nselect id , count(id) as num\\nfrom (\\n\\n    select requester_id as id from requestaccepted\\n    union all\\n    select accepter_id from requestaccepted\\n)s\\ngroup by id\\norder by count(id) desc limit 1 ;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect id , count(id) as num\\nfrom (\\n\\n    select requester_id as id from requestaccepted\\n    union all\\n    select accepter_id from requestaccepted\\n)s\\ngroup by id\\norder by count(id) desc limit 1 ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897951,
                "title": "mysql-solution-very-simple-with-cte",
                "content": "\\n\\nThe simpliest code to solve this problem! With CTE function.\\n\\nPlease upvote if you think it helpful!\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH friends AS (SELECT requester_id id\\nFROM RequestAccepted\\nUNION ALL\\nSELECT accepter_id\\nFROM RequestAccepted)\\n\\nSELECT id, COUNT(id) num\\nFROM friends\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH friends AS (SELECT requester_id id\\nFROM RequestAccepted\\nUNION ALL\\nSELECT accepter_id\\nFROM RequestAccepted)\\n\\nSELECT id, COUNT(id) num\\nFROM friends\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3682479,
                "title": "mysql-2-selects-1-union",
                "content": "# Code\\r\\n```\\r\\nselect t.id, sum(t.num) as num\\r\\nfrom\\r\\n(select  r.accepter_id as id, count(r.accepter_id) as num\\r\\nfrom requestaccepted r\\r\\ngroup by id\\r\\nunion all\\r\\nselect  rr.requester_id as id, count(rr.requester_id) as num\\r\\nfrom requestaccepted rr\\r\\ngroup by id) t\\r\\ngroup by id\\r\\norder by num desc\\r\\nlimit 1\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\nselect t.id, sum(t.num) as num\\r\\nfrom\\r\\n(select  r.accepter_id as id, count(r.accepter_id) as num\\r\\nfrom requestaccepted r\\r\\ngroup by id\\r\\nunion all\\r\\nselect  rr.requester_id as id, count(rr.requester_id) as num\\r\\nfrom requestaccepted rr\\r\\ngroup by id) t\\r\\ngroup by id\\r\\norder by num desc\\r\\nlimit 1\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3582444,
                "title": "simple-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect a as id, count(b) as num from\\n(select requester_id  as a, accepter_id  as b from RequestAccepted \\nunion\\nselect accepter_id  as a, requester_id  as b from RequestAccepted ) as T\\ngroup by a\\norder by num desc limit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a as id, count(b) as num from\\n(select requester_id  as a, accepter_id  as b from RequestAccepted \\nunion\\nselect accepter_id  as a, requester_id  as b from RequestAccepted ) as T\\ngroup by a\\norder by num desc limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3517216,
                "title": "mysql-beat-80-simple-code",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe given problem is to find the person who has the most number of friends, given a table RequestAccepted that stores information about friend requests accepted by people.\\n\\nThe SQL query first selects the requester_id column as id, which represents the person\\'s id. It then uses a subquery to count the number of friends that person has. The subquery selects the count of rows from the RequestAccepted table where the person\\'s id is either the requester_id or the accepter_id. This count represents the total number of friends that the person has.\\n\\nThe order by clause sorts the result set in descending order by the num column, which represents the number of friends. The limit clause then returns only the first row of the sorted result set, which represents the person with the most number of friends.\\n\\nThis query assumes that only one person has the most number of friends, as stated in the problem statement. In case there are multiple people with the same maximum number of friends, this query will only return one of them. To find all such people, we would need to modify the query accordingly.\\n\\n# Code\\n```\\nselect requester_id as id,\\n       (select count(*) from RequestAccepted\\n            where id=requester_id or id=accepter_id) as num\\nfrom RequestAccepted\\norder by num desc limit 1\\n                \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect requester_id as id,\\n       (select count(*) from RequestAccepted\\n            where id=requester_id or id=accepter_id) as num\\nfrom RequestAccepted\\norder by num desc limit 1\\n                \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3418094,
                "title": "mysql-beats-99",
                "content": "\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\n-- this table is temporary table that stores requesters id and its count.\\r\\n\\r\\nwith request_count as\\r\\n(\\r\\n    select requester_id, count(requester_id) as req\\r\\n     from RequestAccepted group by requester_id order by req desc\\r\\n),\\r\\n\\r\\n-- this table is temporary table that stores accepters id and its count.\\r\\n\\r\\naccept_count as\\r\\n(\\r\\n    select accepter_id, count(accepter_id) as acc\\r\\n    from RequestAccepted group by accepter_id order by acc desc\\r\\n),\\r\\n\\r\\n-- this table contains all the id\\'s and their friends count.\\r\\n\\r\\nfinal_table as\\r\\n(\\r\\n    select r.requester_id, r.req, a.accepter_id, a.acc, (\\r\\n        case \\r\\n        when a.acc is null then r.req\\r\\n        when r.req is null then a.acc\\r\\n        else\\r\\n        a.acc + r.req\\r\\n        end\\r\\n    ) as sum \\r\\n    from accept_count a right join request_count r on a.accepter_id = r.requester_id\\r\\n    \\r\\n)\\r\\n\\r\\n-- here find the id who has maximum friends.\\r\\n\\r\\nselect requester_id as id, sum as num from final_table where sum in (\\r\\n    select max(sum) from final_table\\r\\n)\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\n-- this table is temporary table that stores requesters id and its count.\\r\\n\\r\\nwith request_count as\\r\\n(\\r\\n    select requester_id, count(requester_id) as req\\r\\n     from RequestAccepted group by requester_id order by req desc\\r\\n),\\r\\n\\r\\n-- this table is temporary table that stores accepters id and its count.\\r\\n\\r\\naccept_count as\\r\\n(\\r\\n    select accepter_id, count(accepter_id) as acc\\r\\n    from RequestAccepted group by accepter_id order by acc desc\\r\\n),\\r\\n\\r\\n-- this table contains all the id\\'s and their friends count.\\r\\n\\r\\nfinal_table as\\r\\n(\\r\\n    select r.requester_id, r.req, a.accepter_id, a.acc, (\\r\\n        case \\r\\n        when a.acc is null then r.req\\r\\n        when r.req is null then a.acc\\r\\n        else\\r\\n        a.acc + r.req\\r\\n        end\\r\\n    ) as sum \\r\\n    from accept_count a right join request_count r on a.accepter_id = r.requester_id\\r\\n    \\r\\n)\\r\\n\\r\\n-- here find the id who has maximum friends.\\r\\n\\r\\nselect requester_id as id, sum as num from final_table where sum in (\\r\\n    select max(sum) from final_table\\r\\n)\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3257726,
                "title": "simple-solution-use-with-as",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith t1 as\\n(select requester_id as id from RequestAccepted\\nunion all\\nselect accepter_id as id from RequestAccepted)\\n\\nselect id, count(*) as num\\nfrom t1\\ngroup by id\\norder by num desc\\nlimit 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith t1 as\\n(select requester_id as id from RequestAccepted\\nunion all\\nselect accepter_id as id from RequestAccepted)\\n\\nselect id, count(*) as num\\nfrom t1\\ngroup by id\\norder by num desc\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3894653,
                "title": "super-simple-beginner-friendly-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith cte as \\n(select requester_id as id\\nfrom requestaccepted\\nunion all\\nselect accepter_id\\nfrom requestaccepted\\n)\\n\\nselect id, count(*) as num\\nfrom cte\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as \\n(select requester_id as id\\nfrom requestaccepted\\nunion all\\nselect accepter_id\\nfrom requestaccepted\\n)\\n\\nselect id, count(*) as num\\nfrom cte\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3871214,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith cte as \\n(select requester_id id from RequestAccepted\\nunion all\\nselect accepter_id id from RequestAccepted)\\nselect id,count(*) num from cte\\ngroup by id\\norder by num desc\\nlimit 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as \\n(select requester_id id from RequestAccepted\\nunion all\\nselect accepter_id id from RequestAccepted)\\nselect id,count(*) num from cte\\ngroup by id\\norder by num desc\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3550546,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nwith cte as (\\nselect id ,count(*) as num from(\\n        select requester_id as id from RequestAccepted\\n         union all\\n        select accepter_id as id from RequestAccepted\\n     )group by id\\n)select id,num from cte where num = (select max(num) from cte); \\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nwith cte as (\\nselect id ,count(*) as num from(\\n        select requester_id as id from RequestAccepted\\n         union all\\n        select accepter_id as id from RequestAccepted\\n     )group by id\\n)select id,num from cte where num = (select max(num) from cte); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3438615,
                "title": "solution-with-count-over-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n\\r\\nWITH CTE AS (\\r\\n        SELECT\\r\\n            *,\\r\\n            COUNT(requester_id) OVER(PARTITION BY requester_id) CountR,\\r\\n            COUNT(accepter_id) OVER(PARTITION BY accepter_id ) CountA\\r\\n        FROM\\r\\n            RequestAccepted\\r\\n)\\r\\n,CTE2 AS (\\r\\n        SELECT \\r\\n            DISTINCT\\r\\n            requester_id, CountR \\r\\n        FROM\\r\\n            CTE\\r\\n)\\r\\n,CTE3 AS (\\r\\n        SELECT\\r\\n            DISTINCT\\r\\n            accepter_id,CountA\\r\\n        FROM \\r\\n            CTE\\r\\n)\\r\\n,CTE4 AS (\\r\\n\\tSELECT\\r\\n\\t\\trequester_id,\\r\\n\\t\\tSUM(CountR) TotalR\\r\\n\\tFROM\\r\\n\\t\\t(\\r\\n\\t\\t\\tSELECT\\r\\n\\t\\t\\t\\t*\\r\\n\\t\\t\\tFROM\\r\\n\\t\\t\\t\\tCTE2\\r\\n\\t\\t\\tUNION ALL\\r\\n\\t\\t\\tSELECT\\r\\n\\t\\t\\t\\t *\\r\\n\\t\\t\\tFROM\\r\\n\\t\\t\\t\\tCTE3\\r\\n\\t\\t)Sub\\r\\n\\tGROUP BY\\r\\n\\t\\trequester_id\\r\\n\\r\\n)\\r\\nSELECT\\r\\n\\trequester_id id,\\r\\n\\tTotalR num\\r\\nFROM\\t\\r\\n\\tCTE4\\r\\nWHERE\\r\\n\\tTotalR = ( SELECT MAX( TotalR) FROM CTE4 )\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n\\r\\nWITH CTE AS (\\r\\n        SELECT\\r\\n            *,\\r\\n            COUNT(requester_id) OVER(PARTITION BY requester_id) CountR,\\r\\n            COUNT(accepter_id) OVER(PARTITION BY accepter_id ) CountA\\r\\n        FROM\\r\\n            RequestAccepted\\r\\n)\\r\\n,CTE2 AS (\\r\\n        SELECT \\r\\n            DISTINCT\\r\\n            requester_id, CountR \\r\\n        FROM\\r\\n            CTE\\r\\n)\\r\\n,CTE3 AS (\\r\\n        SELECT\\r\\n            DISTINCT\\r\\n            accepter_id,CountA\\r\\n        FROM \\r\\n            CTE\\r\\n)\\r\\n,CTE4 AS (\\r\\n\\tSELECT\\r\\n\\t\\trequester_id,\\r\\n\\t\\tSUM(CountR) TotalR\\r\\n\\tFROM\\r\\n\\t\\t(\\r\\n\\t\\t\\tSELECT\\r\\n\\t\\t\\t\\t*\\r\\n\\t\\t\\tFROM\\r\\n\\t\\t\\t\\tCTE2\\r\\n\\t\\t\\tUNION ALL\\r\\n\\t\\t\\tSELECT\\r\\n\\t\\t\\t\\t *\\r\\n\\t\\t\\tFROM\\r\\n\\t\\t\\t\\tCTE3\\r\\n\\t\\t)Sub\\r\\n\\tGROUP BY\\r\\n\\t\\trequester_id\\r\\n\\r\\n)\\r\\nSELECT\\r\\n\\trequester_id id,\\r\\n\\tTotalR num\\r\\nFROM\\t\\r\\n\\tCTE4\\r\\nWHERE\\r\\n\\tTotalR = ( SELECT MAX( TotalR) FROM CTE4 )\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3415155,
                "title": "day-379",
                "content": "\\n\\n# Code\\n```\\nselect \\n    requester_id as id,\\n    (   select count(t.requester_id) \\n        from RequestAccepted t\\n        where t.requester_id = id or t.accepter_id = id\\n    ) as num\\nfrom RequestAccepted\\ngroup by id\\norder by num desc\\nlimit 1;\\n```\\n\\n\\n# updated \\n\\n```sql\\n# Write your MySQL query statement below\\n\\n\\nselect id , sum(cnt) as num from\\n(\\n  (select requester_id as id, count(*) as cnt from RequestAccepted group by requester_id)\\nunion all\\n(select accepter_id as id, count(*) as cnt from RequestAccepted group by accepter_id) \\n) t3\\ngroup by id\\norder by num desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\n    requester_id as id,\\n    (   select count(t.requester_id) \\n        from RequestAccepted t\\n        where t.requester_id = id or t.accepter_id = id\\n    ) as num\\nfrom RequestAccepted\\ngroup by id\\norder by num desc\\nlimit 1;\\n```\n```sql\\n# Write your MySQL query statement below\\n\\n\\nselect id , sum(cnt) as num from\\n(\\n  (select requester_id as id, count(*) as cnt from RequestAccepted group by requester_id)\\nunion all\\n(select accepter_id as id, count(*) as cnt from RequestAccepted group by accepter_id) \\n) t3\\ngroup by id\\norder by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2480425,
                "title": "mysql-with-cte-union-all-count-distinct-limit-good-luck",
                "content": "```\\n# Write your MySQL query statement below\\n/**\\nOne Table: RequestAccepted\\n\\n(requester_id, accepter_id) is the primary key for RequestAccepted table.\\nRequestAccepted table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\\n\\nPROBLEM: find the people who have the most friends and the most friends number.\\n\\n*/\\n\\nWITH CTE AS\\n(\\nSELECT\\n    requester_id AS user,\\n    accepter_id  AS friend\\nFROM RequestAccepted\\n    UNION ALL\\nSELECT\\n    accepter_id AS user,\\n    requester_id  AS friend\\nFROM RequestAccepted\\n)\\nSELECT \\n    user id,\\n    count(distinct friend) as num\\nFROM CTE\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 1\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n/**\\nOne Table: RequestAccepted\\n\\n(requester_id, accepter_id) is the primary key for RequestAccepted table.\\nRequestAccepted table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\\n\\nPROBLEM: find the people who have the most friends and the most friends number.\\n\\n*/\\n\\nWITH CTE AS\\n(\\nSELECT\\n    requester_id AS user,\\n    accepter_id  AS friend\\nFROM RequestAccepted\\n    UNION ALL\\nSELECT\\n    accepter_id AS user,\\n    requester_id  AS friend\\nFROM RequestAccepted\\n)\\nSELECT \\n    user id,\\n    count(distinct friend) as num\\nFROM CTE\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2264926,
                "title": "oracle-100-faster-solution",
                "content": "\\'\\'\\'\\n```\\nwith temp as (\\nselect requester_id as id from RequestAccepted\\n    union all\\nselect accepter_id  as id from RequestAccepted\\n)\\n\\nselect id , num from (\\nselect id,count(*) num,\\ndense_rank() over(order by count(id) desc) rnk \\nfrom temp\\ngroup by id\\n  )k where rnk = 1\\n```\\n  \\'\\'\\'",
                "solutionTags": [],
                "code": "```\\nwith temp as (\\nselect requester_id as id from RequestAccepted\\n    union all\\nselect accepter_id  as id from RequestAccepted\\n)\\n\\nselect id , num from (\\nselect id,count(*) num,\\ndense_rank() over(order by count(id) desc) rnk \\nfrom temp\\ngroup by id\\n  )k where rnk = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2204224,
                "title": "union-all-is-the-key",
                "content": "```\\nwith a as( (select requester_id,accepter_id\\nfrom RequestAccepted )\\nunion all \\n(select accepter_id as requester_id, requester_id as accepter_id\\nfrom RequestAccepted )) # \"union all\" both both users in ONE friendship in one column and in order to avoid repeating or missing in later count\\n\\nselect requester_id as id, count(accepter_id)as num\\nfrom a \\ngroup by requester_id\\norder by num DESC\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nwith a as( (select requester_id,accepter_id\\nfrom RequestAccepted )\\nunion all \\n(select accepter_id as requester_id, requester_id as accepter_id\\nfrom RequestAccepted )) # \"union all\" both both users in ONE friendship in one column and in order to avoid repeating or missing in later count\\n\\nselect requester_id as id, count(accepter_id)as num\\nfrom a \\ngroup by requester_id\\norder by num DESC\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1355997,
                "title": "union-all-is-good-for-this-one",
                "content": "The idea is to merge 2 columns into one using UNION ALL. Then use group by to select.\\n\\nSELECT requester_id AS id, COUNT(*) AS num\\nFROM(SELECT requester_id\\n     FROM request_accepted\\n     UNION ALL\\n     SELECT accepter_id AS requester_id\\n     FROM request_accepted) AS A\\nGROUP BY requester_id\\nORDER BY num DESC\\nLIMIT 1",
                "solutionTags": [],
                "code": "The idea is to merge 2 columns into one using UNION ALL. Then use group by to select.\\n\\nSELECT requester_id AS id, COUNT(*) AS num\\nFROM(SELECT requester_id\\n     FROM request_accepted\\n     UNION ALL\\n     SELECT accepter_id AS requester_id\\n     FROM request_accepted) AS A\\nGROUP BY requester_id\\nORDER BY num DESC\\nLIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 873143,
                "title": "simple-accepted-solution",
                "content": "```\\nselect id, sum(cnt) as num\\n\\nfrom\\n(\\n(select requester_id as id, count(*) as cnt\\nfrom request_accepted\\ngroup by requester_id) \\nunion all\\n(\\nselect accepter_id as id, count(*) as cnt\\nfrom request_accepted\\ngroup by accepter_id) \\n    ) as base\\n    \\ngroup by id\\n\\norder by num desc\\n\\nlimit 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect id, sum(cnt) as num\\n\\nfrom\\n(\\n(select requester_id as id, count(*) as cnt\\nfrom request_accepted\\ngroup by requester_id) \\nunion all\\n(\\nselect accepter_id as id, count(*) as cnt\\nfrom request_accepted\\ngroup by accepter_id) \\n    ) as base\\n    \\ngroup by id\\n\\norder by num desc\\n\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 489314,
                "title": "ms-sql-solution-faster-than-97-5",
                "content": "```\\nselect\\n   top 1 sent.requester_id id,\\n   isnull(sent.sent_count, 0) + isnull(received.received_count, 0) num \\nfrom\\n   (\\n      select\\n         requester_id,\\n         count(*) sent_count \\n      from\\n         request_accepted \\n      group by\\n         requester_id \\n   )\\n   as sent \\n   left outer join\\n      (\\n         select\\n            accepter_id,\\n            count(*) received_count \\n         from\\n            request_accepted \\n         group by\\n            accepter_id \\n      )\\n      as received \\n      on sent.requester_id = received.accepter_id \\norder by\\n   isnull(sent.sent_count, 0) + isnull(received.received_count, 0) DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect\\n   top 1 sent.requester_id id,\\n   isnull(sent.sent_count, 0) + isnull(received.received_count, 0) num \\nfrom\\n   (\\n      select\\n         requester_id,\\n         count(*) sent_count \\n      from\\n         request_accepted \\n      group by\\n         requester_id \\n   )\\n   as sent \\n   left outer join\\n      (\\n         select\\n            accepter_id,\\n            count(*) received_count \\n         from\\n            request_accepted \\n         group by\\n            accepter_id \\n      )\\n      as received \\n      on sent.requester_id = received.accepter_id \\norder by\\n   isnull(sent.sent_count, 0) + isnull(received.received_count, 0) DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 240603,
                "title": "simple-solution",
                "content": "```\\nselect id,sum(num_friends) as num\\nfrom (Select count(*) as num_friends, accepter_id  as id from request_accepted  group by accepter_id\\nunion all\\nSelect count(*) as num_friends , requester_id as id from request_accepted  group by requester_id) as d\\ngroup by id\\norder by sum(num_friends) desc\\nLimit 1;\\n```",
                "solutionTags": [],
                "code": "```\\nselect id,sum(num_friends) as num\\nfrom (Select count(*) as num_friends, accepter_id  as id from request_accepted  group by accepter_id\\nunion all\\nSelect count(*) as num_friends , requester_id as id from request_accepted  group by requester_id) as d\\ngroup by id\\norder by sum(num_friends) desc\\nLimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103805,
                "title": "solution-beats-99-67-group-by-before-union-all",
                "content": "```\\nSELECT id, sum(cnt) num FROM\\n(\\n    SELECT requester_id id, count(*) cnt FROM request_accepted GROUP BY requester_id\\n    UNION ALL\\n    SELECT accepter_id id, count(*) cnt FROM request_accepted GROUP BY accepter_id\\n) AS T1\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id, sum(cnt) num FROM\\n(\\n    SELECT requester_id id, count(*) cnt FROM request_accepted GROUP BY requester_id\\n    UNION ALL\\n    SELECT accepter_id id, count(*) cnt FROM request_accepted GROUP BY accepter_id\\n) AS T1\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059051,
                "title": "simplified-using-union-all-mssql-server",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT TOP 1 r.id, SUM(r.num) num\\nFROM\\n(\\nSELECT requester_id id, COUNT(requester_id) num FROM RequestAccepted GROUP BY requester_id\\nUNION ALL\\nSELECT accepter_id id, COUNT(accepter_id) num  FROM RequestAccepted GROUP BY accepter_id\\n) r\\nGROUP BY r.id \\nORDER BY num  DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT TOP 1 r.id, SUM(r.num) num\\nFROM\\n(\\nSELECT requester_id id, COUNT(requester_id) num FROM RequestAccepted GROUP BY requester_id\\nUNION ALL\\nSELECT accepter_id id, COUNT(accepter_id) num  FROM RequestAccepted GROUP BY accepter_id\\n) r\\nGROUP BY r.id \\nORDER BY num  DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3936343,
                "title": "oracle-easiest-solution-beats-80-in-oracle-using-sub-query-rownum-easy-to-understand",
                "content": "Outer query to select who have maximum friends using rownum\\n1st inner query to sum all who are friends\\n\\n2nd (2 inner queries) are for merging a 2 lists\\n\\nselect * from\\n(select A as id , sum(temp) as num from\\n(\\n  (select count(requester_id) temp, requester_id as a from RequestAccepted group by requester_id)\\nunion all\\n   (select count(accepter_id) temp,accepter_id as b from RequestAccepted group by accepter_id)\\n)\\ngroup by A order by num desc) where rownum=1;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "Outer query to select who have maximum friends using rownum\\n1st inner query to sum all who are friends\\n\\n2nd (2 inner queries) are for merging a 2 lists\\n\\nselect * from\\n(select A as id , sum(temp) as num from\\n(\\n  (select count(requester_id) temp, requester_id as a from RequestAccepted group by requester_id)\\nunion all\\n   (select count(accepter_id) temp,accepter_id as b from RequestAccepted group by accepter_id)\\n)\\ngroup by A order by num desc) where rownum=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3914463,
                "title": "pandas-succinct-code-value-counts",
                "content": "# Intuition\\nvalue counts both accepters and requesters, join and add both values.\\nThen just return num where num is max.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef most_friends(request_accepted: pd.DataFrame) -> pd.DataFrame:\\n    req = request_accepted.requester_id.value_counts().reset_index().rename(columns ={\\'requester_id\\':\\'id\\'})\\n    acc = request_accepted.accepter_id.value_counts().reset_index().rename(columns ={\\'accepter_id\\':\\'id\\'})\\n    df = req.merge(acc, on =\\'id\\', how =\\'outer\\', suffixes=(\\'_req\\',\\'_acc\\')).fillna(0)\\n    return df.assign(num = df.count_req + df.count_acc)[[\\'id\\',\\'num\\']].query(\\'num == num.max()\\')\\n\\n```\\n",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef most_friends(request_accepted: pd.DataFrame) -> pd.DataFrame:\\n    req = request_accepted.requester_id.value_counts().reset_index().rename(columns ={\\'requester_id\\':\\'id\\'})\\n    acc = request_accepted.accepter_id.value_counts().reset_index().rename(columns ={\\'accepter_id\\':\\'id\\'})\\n    df = req.merge(acc, on =\\'id\\', how =\\'outer\\', suffixes=(\\'_req\\',\\'_acc\\')).fillna(0)\\n    return df.assign(num = df.count_req + df.count_acc)[[\\'id\\',\\'num\\']].query(\\'num == num.max()\\')\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2045734,
                "title": "easy-mysql-solution-with-cte",
                "content": "```\\nwith cte as (\\n                select requester_id id from RequestAccepted r1\\n\\n                union all\\n\\n                select accepter_id id from RequestAccepted r2\\n)\\n\\n\\nselect id, count(*) num from cte group by id order by 2 desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nwith cte as (\\n                select requester_id id from RequestAccepted r1\\n\\n                union all\\n\\n                select accepter_id id from RequestAccepted r2\\n)\\n\\n\\nselect id, count(*) num from cte group by id order by 2 desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2011965,
                "title": "mysql-simple-solution-using-union-all",
                "content": "```\\nSELECT id, count(*) as num\\nFROM\\n(   SELECT requester_id as id  FROM RequestAccepted\\n    UNION ALL\\n    SELECT accepter_id as id FROM RequestAccepted\\n ) p\\nGROUP BY id\\nORDER BY 2 desc\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id, count(*) as num\\nFROM\\n(   SELECT requester_id as id  FROM RequestAccepted\\n    UNION ALL\\n    SELECT accepter_id as id FROM RequestAccepted\\n ) p\\nGROUP BY id\\nORDER BY 2 desc\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1967767,
                "title": "union-mysql-simple",
                "content": "```\\nselect t.id, count(distinct t.friends) as num \\nfrom (select requester_id as id, accepter_id as friends\\nfrom RequestAccepted\\nUNION \\nselect accepter_id as id, requester_id as friends\\nfrom RequestAccepted) t\\ngroup by t.id \\norder by 2 desc \\nlimit 1; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect t.id, count(distinct t.friends) as num \\nfrom (select requester_id as id, accepter_id as friends\\nfrom RequestAccepted\\nUNION \\nselect accepter_id as id, requester_id as friends\\nfrom RequestAccepted) t\\ngroup by t.id \\norder by 2 desc \\nlimit 1; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1958241,
                "title": "simple-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT requester_id as id, count(accepter_id) as num FROM\\n(SELECT requester_id, accepter_id from requestAccepted UNION SELECT accepter_id, requester_id FROM RequestAccepted) T1\\ngroup by 1 ORDER BY 2 DESC LIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT requester_id as id, count(accepter_id) as num FROM\\n(SELECT requester_id, accepter_id from requestAccepted UNION SELECT accepter_id, requester_id FROM RequestAccepted) T1\\ngroup by 1 ORDER BY 2 DESC LIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1873472,
                "title": "fast-and-simple-solution-using-union-and-group-by",
                "content": "```\\nselect k.id , sum(k.num) as num\\nfrom \\n(\\nselect requester_id as id, count(accepter_id) as num\\nfrom RequestAccepted\\ngroup by requester_id \\nunion all\\nselect accepter_id as id, count(requester_id) as num\\nfrom RequestAccepted\\ngroup by accepter_id) k\\ngroup by k.id\\norder by sum(k.num) desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect k.id , sum(k.num) as num\\nfrom \\n(\\nselect requester_id as id, count(accepter_id) as num\\nfrom RequestAccepted\\ngroup by requester_id \\nunion all\\nselect accepter_id as id, count(requester_id) as num\\nfrom RequestAccepted\\ngroup by accepter_id) k\\ngroup by k.id\\norder by sum(k.num) desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1772174,
                "title": "mysql-cte-union",
                "content": "```sql\\nWITH FriendList AS (\\n  SELECT\\n    requester_id AS person,\\n    accepter_id AS friend\\n  FROM\\n    RequestAccepted\\n  UNION\\n  SELECT\\n    accepter_id AS person,\\n    requester_id AS friend\\n  FROM\\n    RequestAccepted\\n)\\nSELECT\\n  person AS id,\\n  COUNT(*) AS num\\nFROM\\n  FriendList\\nGROUP BY\\n  id\\nORDER BY\\n  num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```sql\\nWITH FriendList AS (\\n  SELECT\\n    requester_id AS person,\\n    accepter_id AS friend\\n  FROM\\n    RequestAccepted\\n  UNION\\n  SELECT\\n    accepter_id AS person,\\n    requester_id AS friend\\n  FROM\\n    RequestAccepted\\n)\\nSELECT\\n  person AS id,\\n  COUNT(*) AS num\\nFROM\\n  FriendList\\nGROUP BY\\n  id\\nORDER BY\\n  num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1706246,
                "title": "cte-union-all-easy-understand",
                "content": "```\\nwith cte as (\\n    select requester_id \\nfrom requestAccepted\\nunion all\\nselect accepter_id \\nfrom requestAccepted\\n    )\\n    \\nselect requester_id as id,count(requester_id) as num\\nfrom cte\\ngroup by requester_id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nwith cte as (\\n    select requester_id \\nfrom requestAccepted\\nunion all\\nselect accepter_id \\nfrom requestAccepted\\n    )\\n    \\nselect requester_id as id,count(requester_id) as num\\nfrom cte\\ngroup by requester_id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1667376,
                "title": "oracle-solution-with-union-all",
                "content": "```\\nselect * from \\n(\\n    select id, count(*) num from(\\n        select requester_id id from RequestAccepted \\n        union all\\n        select accepter_id id from RequestAccepted\\n    )group by id order by 2 desc\\n) where rownum =1\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect * from \\n(\\n    select id, count(*) num from(\\n        select requester_id id from RequestAccepted \\n        union all\\n        select accepter_id id from RequestAccepted\\n    )group by id order by 2 desc\\n) where rownum =1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1634300,
                "title": "easy-mysql-solution",
                "content": "```\\n\\nselect id,\\ncount(*) as num\\nfrom\\n\\n(select requester_id as id\\nfrom requestAccepted\\nunion all\\nselect accepter_id as id\\nfrom requestAccepted) x\\n\\ngroup by 1\\norder by 2 desc\\nlimit 1\\n",
                "solutionTags": [],
                "code": "```\\n\\nselect id,\\ncount(*) as num\\nfrom\\n\\n(select requester_id as id\\nfrom requestAccepted\\nunion all\\nselect accepter_id as id\\nfrom requestAccepted) x\\n\\ngroup by 1\\norder by 2 desc\\nlimit 1\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1563283,
                "title": "simple-mysql",
                "content": "SELECT f1 as \\'id\\', count(distinct f2) as \\'num\\'\\nFROM ((SELECT requester_id as \\'f1\\', accepter_id as \\'f2\\'\\nFROM RequestAccepted)\\nUNION\\n(SELECT accepter_id as \\'f1\\', requester_id as \\'f2\\'\\nFROM RequestAccepted)) a\\nGROUP BY f1\\nORDER BY count(distinct f2) DESC\\nLIMIT 1",
                "solutionTags": [],
                "code": "SELECT f1 as \\'id\\', count(distinct f2) as \\'num\\'\\nFROM ((SELECT requester_id as \\'f1\\', accepter_id as \\'f2\\'\\nFROM RequestAccepted)\\nUNION\\n(SELECT accepter_id as \\'f1\\', requester_id as \\'f2\\'\\nFROM RequestAccepted)) a\\nGROUP BY f1\\nORDER BY count(distinct f2) DESC\\nLIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 1547970,
                "title": "simple-and-fast-solution-using-union-all",
                "content": "\\nWITH friends AS\\n(SELECT requester_id AS id\\n FROM RequestAccepted\\n UNION ALL\\n SELECT accepter_id AS id\\n FROM RequestAccepted)\\n \\n SELECT id, COUNT(id) AS num\\nFROM friends\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1",
                "solutionTags": [],
                "code": "\\nWITH friends AS\\n(SELECT requester_id AS id\\n FROM RequestAccepted\\n UNION ALL\\n SELECT accepter_id AS id\\n FROM RequestAccepted)\\n \\n SELECT id, COUNT(id) AS num\\nFROM friends\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 1526752,
                "title": "my-sql-union",
                "content": "select requester_id as id, count(requester_id) as num from (\\nselect requester_id, accepter_id from request_accepted \\nunion\\nselect accepter_id as \"requester_id\", requester_id as \"accepter_id\" from request_accepted\\n    ) t\\ngroup by requester_id\\norder by count(requester_id) desc\\nlimit 1\\n\\n/* UNION not UNION ALL here: will exclude the case that someone may send request to the same person more than once and that the one may accept the request from the same requester more than once */",
                "solutionTags": [],
                "code": "select requester_id as id, count(requester_id) as num from (\\nselect requester_id, accepter_id from request_accepted \\nunion\\nselect accepter_id as \"requester_id\", requester_id as \"accepter_id\" from request_accepted\\n    ) t\\ngroup by requester_id\\norder by count(requester_id) desc\\nlimit 1\\n\\n/* UNION not UNION ALL here: will exclude the case that someone may send request to the same person more than once and that the one may accept the request from the same requester more than once */",
                "codeTag": "Unknown"
            },
            {
                "id": 1512756,
                "title": "ms-sql",
                "content": "#### Question\\n````\\n602. Friend Requests II: Who Has the Most Friends\\nMedium\\n\\n\\nSQL Schema\\nIn social network like Facebook or Twitter, people send friend requests and accept others\\' requests as well.\\n\\n \\n\\nTable request_accepted\\n\\n+--------------+-------------+------------+\\n| requester_id | accepter_id | accept_date|\\n|--------------|-------------|------------|\\n| 1            | 2           | 2016_06-03 |\\n| 1            | 3           | 2016-06-08 |\\n| 2            | 3           | 2016-06-08 |\\n| 3            | 4           | 2016-06-09 |\\n+--------------+-------------+------------+\\nThis table holds the data of friend acceptance, while requester_id and accepter_id both are the id of a person.\\n \\n\\nWrite a query to find the the people who has most friends and the most friends number under the following rules:\\n\\nIt is guaranteed there is only 1 people having the most friends.\\nThe friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\\nFor the sample data above, the result is:\\n\\nResult table:\\n+------+------+\\n| id   | num  |\\n|------|------|\\n| 3    | 3    |\\n+------+------+\\nThe person with id \\'3\\' is a friend of people \\'1\\', \\'2\\' and \\'4\\', so he has 3 friends in total, which is the most number than any others.\\nFollow-up:\\nIn the real world, multiple people could have the same most number of friends, can you find all these people in this case?\\n````\\n#### Answer\\n```SQL\\n/* Write your T-SQL query statement below */\\nwith total as (\\n    select requester_id as id from request_accepted\\n    union all\\n    select accepter_id as id from request_accepted\\n    )\\n    \\n\\n    select top(1) id, count(*) as nu\\n    --, dense_rank() over (partiion by count(*) desc) as rn \\n    from total\\n    group by id\\n    order by count(*) desc\\n--    limit 1\\n```",
                "solutionTags": [],
                "code": "````\\n602. Friend Requests II: Who Has the Most Friends\\nMedium\\n\\n\\nSQL Schema\\nIn social network like Facebook or Twitter, people send friend requests and accept others\\' requests as well.\\n\\n \\n\\nTable request_accepted\\n\\n+--------------+-------------+------------+\\n| requester_id | accepter_id | accept_date|\\n|--------------|-------------|------------|\\n| 1            | 2           | 2016_06-03 |\\n| 1            | 3           | 2016-06-08 |\\n| 2            | 3           | 2016-06-08 |\\n| 3            | 4           | 2016-06-09 |\\n+--------------+-------------+------------+\\nThis table holds the data of friend acceptance, while requester_id and accepter_id both are the id of a person.\\n \\n\\nWrite a query to find the the people who has most friends and the most friends number under the following rules:\\n\\nIt is guaranteed there is only 1 people having the most friends.\\nThe friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\\nFor the sample data above, the result is:\\n\\nResult table:\\n+------+------+\\n| id   | num  |\\n|------|------|\\n| 3    | 3    |\\n+------+------+\\nThe person with id \\'3\\' is a friend of people \\'1\\', \\'2\\' and \\'4\\', so he has 3 friends in total, which is the most number than any others.\\nFollow-up:\\nIn the real world, multiple people could have the same most number of friends, can you find all these people in this case?\\n```\n```SQL\\n/* Write your T-SQL query statement below */\\nwith total as (\\n    select requester_id as id from request_accepted\\n    union all\\n    select accepter_id as id from request_accepted\\n    )\\n    \\n\\n    select top(1) id, count(*) as nu\\n    --, dense_rank() over (partiion by count(*) desc) as rn \\n    from total\\n    group by id\\n    order by count(*) desc\\n--    limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1507220,
                "title": "simple-mysql-faster-than-90",
                "content": "```\\nWITH cte AS (\\n    SELECT requester_id AS \\'id\\', accepter_id\\n    FROM request_accepted\\n    UNION ALL\\n    SELECT accepter_id, requester_id\\n    FROM request_accepted\\n)\\nSELECT id, COUNT(*) AS \\'num\\'\\nFROM cte\\nGROUP BY 1\\nORDER BY COUNT(*) DESC LIMIT 1",
                "solutionTags": [],
                "code": "```\\nWITH cte AS (\\n    SELECT requester_id AS \\'id\\', accepter_id\\n    FROM request_accepted\\n    UNION ALL\\n    SELECT accepter_id, requester_id\\n    FROM request_accepted\\n)\\nSELECT id, COUNT(*) AS \\'num\\'\\nFROM cte\\nGROUP BY 1\\nORDER BY COUNT(*) DESC LIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 1430229,
                "title": "mysql-union-all-count-distinct",
                "content": "```\\nselect id, count(distinct counterpart) as num\\nfrom\\n(\\n    select requester_id as id, accepter_id as counterpart\\n    from request_accepted\\n    union all\\n    select accepter_id as id, requester_id as counterpart\\n    from request_accepted\\n) f\\ngroup by 1\\norder by 2 desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect id, count(distinct counterpart) as num\\nfrom\\n(\\n    select requester_id as id, accepter_id as counterpart\\n    from request_accepted\\n    union all\\n    select accepter_id as id, requester_id as counterpart\\n    from request_accepted\\n) f\\ngroup by 1\\norder by 2 desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1417798,
                "title": "union-and-a-nested-query",
                "content": "```\\nSELECT TOP 1 id, COUNT(*) AS num\\nFROM\\n    (\\n    SELECT requester_id AS id\\n    FROM request_accepted\\n\\n    UNION ALL\\n\\n    SELECT accepter_id AS id\\n    FROM request_accepted\\n    ) AS temp_data\\nGROUP BY id\\nORDER BY COUNT(*) DESC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT TOP 1 id, COUNT(*) AS num\\nFROM\\n    (\\n    SELECT requester_id AS id\\n    FROM request_accepted\\n\\n    UNION ALL\\n\\n    SELECT accepter_id AS id\\n    FROM request_accepted\\n    ) AS temp_data\\nGROUP BY id\\nORDER BY COUNT(*) DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1341393,
                "title": "mysql-using-union-all",
                "content": "```\\n# Write your MySQL query statement below\\n\\nselect f2 id , sum(f1) num\\nfrom (\\nselect requester_id as f2, count(accepter_id) as f1\\nfrom request_accepted\\ngroup by requester_id\\nunion all\\nselect accepter_id as f2, count(requester_id) as f1\\nfrom request_accepted\\ngroup by accepter_id\\n) t\\ngroup by f2\\norder by sum(f1) desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect f2 id , sum(f1) num\\nfrom (\\nselect requester_id as f2, count(accepter_id) as f1\\nfrom request_accepted\\ngroup by requester_id\\nunion all\\nselect accepter_id as f2, count(requester_id) as f1\\nfrom request_accepted\\ngroup by accepter_id\\n) t\\ngroup by f2\\norder by sum(f1) desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1270600,
                "title": "sql-server-solution",
                "content": "```\\nwith \\ncte as\\n(\\nselect accepter_id as requester_id,requester_id as accepter_id\\nfrom request_accepted\\nunion\\nselect requester_id, accepter_id\\nfrom request_accepted\\n),\\ncte2 as\\n(\\nselect requester_id as id, count(*)as num\\nfrom cte\\ngroup by requester_id\\n)\\n\\nselect id,num\\nfrom cte2 \\nwhere num in (select max(num) from cte2)\\n```",
                "solutionTags": [],
                "code": "```\\nwith \\ncte as\\n(\\nselect accepter_id as requester_id,requester_id as accepter_id\\nfrom request_accepted\\nunion\\nselect requester_id, accepter_id\\nfrom request_accepted\\n),\\ncte2 as\\n(\\nselect requester_id as id, count(*)as num\\nfrom cte\\ngroup by requester_id\\n)\\n\\nselect id,num\\nfrom cte2 \\nwhere num in (select max(num) from cte2)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1015823,
                "title": "simple-solution-with-union-union-all-works-but-union-seems-to-be-the-deal-for-the-use-case",
                "content": "```\\n# Write your MySQL query statement below\\nselect id, count(friend) as num\\nfrom(\\nselect \\n    requester_id as id, \\n    accepter_id as friend\\nfrom\\n    request_accepted\\nunion\\nselect \\n    accepter_id as id, \\n    requester_id as friend\\nfrom\\n    request_accepted )as a\\ngroup by 1\\norder by 2 desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, count(friend) as num\\nfrom(\\nselect \\n    requester_id as id, \\n    accepter_id as friend\\nfrom\\n    request_accepted\\nunion\\nselect \\n    accepter_id as id, \\n    requester_id as friend\\nfrom\\n    request_accepted )as a\\ngroup by 1\\norder by 2 desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 994800,
                "title": "my-sql-solution-with-union-and-cte",
                "content": "WITH ids AS (\\n    SELECT requester_id AS id FROM request_accepted\\n    UNION ALL\\n    SELECT accepter_id AS id FROM request_accepted\\n)\\nSELECT id, COUNT(id) AS num\\nFROM ids \\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1",
                "solutionTags": [],
                "code": "WITH ids AS (\\n    SELECT requester_id AS id FROM request_accepted\\n    UNION ALL\\n    SELECT accepter_id AS id FROM request_accepted\\n)\\nSELECT id, COUNT(id) AS num\\nFROM ids \\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 979435,
                "title": "mysql-cte-rank-solution-covers-followup-question",
                "content": "```sql\\nwith with_union as (\\n  select \\n    requester_id,\\n    accepter_id\\n  from request_accepted\\n  union\\n    select \\n    accepter_id,\\n    requester_id\\n  from request_accepted\\n),\\n\\nwith_friends_rank as (\\n  select\\n    requester_id as id,\\n    count(requester_id) as num,\\n    rank() over(order by count(requester_id) desc) as friends_rank\\n  from with_union\\n  group by requester_id\\n  order by num desc\\n)\\n\\nselect \\n  id,\\n  num\\nfrom with_friends_rank\\nwhere friends_rank = 1\\n```",
                "solutionTags": [],
                "code": "```sql\\nwith with_union as (\\n  select \\n    requester_id,\\n    accepter_id\\n  from request_accepted\\n  union\\n    select \\n    accepter_id,\\n    requester_id\\n  from request_accepted\\n),\\n\\nwith_friends_rank as (\\n  select\\n    requester_id as id,\\n    count(requester_id) as num,\\n    rank() over(order by count(requester_id) desc) as friends_rank\\n  from with_union\\n  group by requester_id\\n  order by num desc\\n)\\n\\nselect \\n  id,\\n  num\\nfrom with_friends_rank\\nwhere friends_rank = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 949592,
                "title": "easy-to-understand-with-union",
                "content": "```\\n# 602. Friend Requests II: Who Has the Most Friends\\n\\nWITH friends_net AS (\\n    SELECT requester_id, accepter_id\\n    FROM request_accepted\\n    UNION\\n    SELECT accepter_id, requester_id\\n    FROM request_accepted\\n    )\\n    \\nSELECT   requester_id AS id, \\n         COUNT(*) AS num\\nFROM     friends_net\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 1 \\n```",
                "solutionTags": [],
                "code": "```\\n# 602. Friend Requests II: Who Has the Most Friends\\n\\nWITH friends_net AS (\\n    SELECT requester_id, accepter_id\\n    FROM request_accepted\\n    UNION\\n    SELECT accepter_id, requester_id\\n    FROM request_accepted\\n    )\\n    \\nSELECT   requester_id AS id, \\n         COUNT(*) AS num\\nFROM     friends_net\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 878735,
                "title": "ms-sql-self-join",
                "content": "WITH CTE AS (\\n    SELECT r.requester_id,COUNT(DISTINCT r.accepter_id)+COUNT(DISTINCT a.requester_id) AS num\\n    FROM request_accepted r\\n    LEFT JOIN request_accepted a\\n    ON r.requester_id=a.accepter_id\\n    GROUP BY r.requester_id)\\nSELECT requester_id AS id,num AS num\\nFROM CTE \\nWHERE num=(SELECT MAX(num) FROM CTE)",
                "solutionTags": [],
                "code": "WITH CTE AS (\\n    SELECT r.requester_id,COUNT(DISTINCT r.accepter_id)+COUNT(DISTINCT a.requester_id) AS num\\n    FROM request_accepted r\\n    LEFT JOIN request_accepted a\\n    ON r.requester_id=a.accepter_id\\n    GROUP BY r.requester_id)\\nSELECT requester_id AS id,num AS num\\nFROM CTE \\nWHERE num=(SELECT MAX(num) FROM CTE)",
                "codeTag": "Unknown"
            },
            {
                "id": 871118,
                "title": "sql-server-simple",
                "content": "select top 1 ID as id   , Total as num    from \\n\\n(\\nselect requester_id as ID , \\n    \\n    (select count(*)from request_accepted where requester_id = c.requester_id or  accepter_id = c.requester_id   ) as    Total     \\n    from  request_accepted c\\n \\n) e\\norder by  Total desc\\n",
                "solutionTags": [],
                "code": "select top 1 ID as id   , Total as num    from \\n\\n(\\nselect requester_id as ID , \\n    \\n    (select count(*)from request_accepted where requester_id = c.requester_id or  accepter_id = c.requester_id   ) as    Total     \\n    from  request_accepted c\\n \\n) e\\norder by  Total desc\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 697190,
                "title": "ms-sql-cte-union",
                "content": "```\\nwith friends as (select * from request_accepted\\n                union select accepter_id, requester_id, accept_date from request_accepted)\\n\\nselect top 1\\n    requester_id as id,\\n    count(distinct concat(requester_id,accepter_id)) as num\\nfrom friends\\ngroup by requester_id\\norder by count(distinct concat(requester_id,accepter_id)) desc\\n```",
                "solutionTags": [],
                "code": "```\\nwith friends as (select * from request_accepted\\n                union select accepter_id, requester_id, accept_date from request_accepted)\\n\\nselect top 1\\n    requester_id as id,\\n    count(distinct concat(requester_id,accepter_id)) as num\\nfrom friends\\ngroup by requester_id\\norder by count(distinct concat(requester_id,accepter_id)) desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 687302,
                "title": "mssql-handles-any-number-of-tying-users",
                "content": "This echoes a problem I\\'ve had to solve a few times at work when doing root cause on ETL issues involving related records. Very similar to \"identify relationships without a reciprocal\" in a system where all relationships are reciprocal.\\n\\n```\\nWITH user_stats (user_id, friends, rank)\\nAS\\n(\\n    SELECT requester_id\\n            ,COUNT(DISTINCT accepter_id)\\n            ,DENSE_RANK() OVER (ORDER BY COUNT(DISTINCT accepter_id) DESC)\\n    FROM\\n    (\\n        SELECT requester_id, accepter_id\\n        FROM request_accepted\\n        UNION ALL\\n        SELECT accepter_id, requester_id\\n        FROM request_accepted\\n    ) pairs\\n    GROUP BY requester_id\\n)\\nSELECT user_id [id], friends [num]\\nFROM user_stats\\nWHERE rank=1\\n```",
                "solutionTags": [],
                "code": "```\\nWITH user_stats (user_id, friends, rank)\\nAS\\n(\\n    SELECT requester_id\\n            ,COUNT(DISTINCT accepter_id)\\n            ,DENSE_RANK() OVER (ORDER BY COUNT(DISTINCT accepter_id) DESC)\\n    FROM\\n    (\\n        SELECT requester_id, accepter_id\\n        FROM request_accepted\\n        UNION ALL\\n        SELECT accepter_id, requester_id\\n        FROM request_accepted\\n    ) pairs\\n    GROUP BY requester_id\\n)\\nSELECT user_id [id], friends [num]\\nFROM user_stats\\nWHERE rank=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 500388,
                "title": "mysql-union-union-all",
                "content": "Using `UNION` (414ms, 37.82%): \\n```\\nSELECT \\n    requester_id AS id, \\n    COUNT(*) AS num\\nFROM (SELECT requester_id, accepter_id FROM request_accepted \\n      UNION\\n      SELECT accepter_id, requester_id FROM request_accepted) a\\nGROUP BY requester_id\\nORDER BY num DESC\\nLIMIT 1; \\n```\\n\\nUsing `UNION ALL` (267ms, 84.47%): \\n```\\nSELECT \\n    id, \\n    COUNT(*) AS num\\nFROM (SELECT requester_id AS id FROM request_accepted \\n      UNION ALL\\n      SELECT accepter_id AS id FROM request_accepted) a\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    requester_id AS id, \\n    COUNT(*) AS num\\nFROM (SELECT requester_id, accepter_id FROM request_accepted \\n      UNION\\n      SELECT accepter_id, requester_id FROM request_accepted) a\\nGROUP BY requester_id\\nORDER BY num DESC\\nLIMIT 1; \\n```\n```\\nSELECT \\n    id, \\n    COUNT(*) AS num\\nFROM (SELECT requester_id AS id FROM request_accepted \\n      UNION ALL\\n      SELECT accepter_id AS id FROM request_accepted) a\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 412852,
                "title": "oracle-union",
                "content": "````\\nSELECT id,\\n       num\\nFROM\\n  (SELECT id,\\n          num, rank() over(ORDER BY num DESC) rnk\\n   FROM\\n     (SELECT id,\\n             sum(num) num\\n      FROM\\n        (SELECT requester_id id,\\n                count(requester_id)num\\n         FROM request_accepted\\n         GROUP BY requester_id\\n         UNION ALL SELECT accepter_id id,\\n                          count(accepter_id) num\\n         FROM request_accepted\\n         GROUP BY accepter_id)\\n      GROUP BY id)\\n)   WHERE rnk=1\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "````\\nSELECT id,\\n       num\\nFROM\\n  (SELECT id,\\n          num, rank() over(ORDER BY num DESC) rnk\\n   FROM\\n     (SELECT id,\\n             sum(num) num\\n      FROM\\n        (SELECT requester_id id,\\n                count(requester_id)num\\n         FROM request_accepted\\n         GROUP BY requester_id\\n         UNION ALL SELECT accepter_id id,\\n                          count(accepter_id) num\\n         FROM request_accepted\\n         GROUP BY accepter_id)\\n      GROUP BY id)\\n)   WHERE rnk=1\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 399416,
                "title": "fast-and-simple-mysql-solution",
                "content": "select temp.id, count(*) as num from (\\n\\t select requester_id as id from request_accepted\\n\\t union all\\n\\t select accepter_id as id from request_accepted\\n\\t ) as temp\\ngroup by temp.id order by count(*) desc limit 1",
                "solutionTags": [],
                "code": "select temp.id, count(*) as num from (\\n\\t select requester_id as id from request_accepted\\n\\t union all\\n\\t select accepter_id as id from request_accepted\\n\\t ) as temp\\ngroup by temp.id order by count(*) desc limit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 391531,
                "title": "simple-mysql-solution",
                "content": "```\\nSELECT          cte2.requester_id AS id,\\n                CASE WHEN cte1.agg IS NULL THEN 0 + cte2.agg2\\n                WHEN cte2.agg2 IS NULL THEN cte1.agg + 0\\n                ELSE (cte1.agg + cte2.agg2) END AS num\\n\\nFROM\\n(SELECT         accepter_id,\\n                CASE WHEN COUNT(*) IS NULL THEN 0 ELSE COUNT(*) END AS agg\\nFROM            request_accepted \\nGROUP BY        accepter_id\\nORDER BY        agg DESC) AS cte1\\n\\nRIGHT JOIN\\n(SELECT         requester_id,\\n                CASE WHEN COUNT(*) IS NULL THEN 0 ELSE COUNT(*) END AS agg2\\nFROM            request_accepted \\nGROUP BY        requester_id\\nORDER BY        agg2 DESC) AS cte2\\n\\nON              cte1.accepter_id = cte2.requester_id\\nORDER BY        (cte1.agg + cte2.agg2) DESC\\nLIMIT           1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT          cte2.requester_id AS id,\\n                CASE WHEN cte1.agg IS NULL THEN 0 + cte2.agg2\\n                WHEN cte2.agg2 IS NULL THEN cte1.agg + 0\\n                ELSE (cte1.agg + cte2.agg2) END AS num\\n\\nFROM\\n(SELECT         accepter_id,\\n                CASE WHEN COUNT(*) IS NULL THEN 0 ELSE COUNT(*) END AS agg\\nFROM            request_accepted \\nGROUP BY        accepter_id\\nORDER BY        agg DESC) AS cte1\\n\\nRIGHT JOIN\\n(SELECT         requester_id,\\n                CASE WHEN COUNT(*) IS NULL THEN 0 ELSE COUNT(*) END AS agg2\\nFROM            request_accepted \\nGROUP BY        requester_id\\nORDER BY        agg2 DESC) AS cte2\\n\\nON              cte1.accepter_id = cte2.requester_id\\nORDER BY        (cte1.agg + cte2.agg2) DESC\\nLIMIT           1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 387188,
                "title": "simple-mysql-solution-along-with-follow-up-question",
                "content": "-- Write a query to find the the people who has most friends and the most friends number. For the sample data above, the result is:\\n```\\nselect requester_id as id, count(*) as num\\nfrom (select requester_id from  request_accepted--\\n      UNION ALL\\n      select accepter_id\\n      from request_accepted)\\nas sub1\\ngroup by requester_id\\norder by num desc limit 1;\\n```\\n\\n-- Follow up question: In the real world, multiple people could have the same most number of friends, can you find all these people in this case?\\n```\\nselect id, num, ranking \\nfrom (select id, num, dense_rank() over(order by num desc) as ranking \\nfrom (select requester_id as id, count(*) as num \\nfrom (select requester_id from  request_accepted\\n      UNION ALL\\n      select accepter_id from request_accepted) as sub1 \\ngroup by requester_id) as sub2) as sub3 \\nwhere ranking = 1 ;\\n```\\n\\nNOTE: the question is ambiguous. It didn\\'t say if A could send a friend request to B and B could also send a friend request to A at the same time. If you want to handle such case, use UNION (to remove duplicates) and group by instead of UNION ALL. See the below query:\\n```\\nselect id1 as id, count(id2) as num from (SELECT requester_id AS id1, accepter_id AS id2 FROM request_accepted\\nUNION\\nSELECT accepter_id AS id1 , requester_id AS id2 FROM request_accepted) as sub1 \\ngroup by id1\\norder by num desc limit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect requester_id as id, count(*) as num\\nfrom (select requester_id from  request_accepted--\\n      UNION ALL\\n      select accepter_id\\n      from request_accepted)\\nas sub1\\ngroup by requester_id\\norder by num desc limit 1;\\n```\n```\\nselect id, num, ranking \\nfrom (select id, num, dense_rank() over(order by num desc) as ranking \\nfrom (select requester_id as id, count(*) as num \\nfrom (select requester_id from  request_accepted\\n      UNION ALL\\n      select accepter_id from request_accepted) as sub1 \\ngroup by requester_id) as sub2) as sub3 \\nwhere ranking = 1 ;\\n```\n```\\nselect id1 as id, count(id2) as num from (SELECT requester_id AS id1, accepter_id AS id2 FROM request_accepted\\nUNION\\nSELECT accepter_id AS id1 , requester_id AS id2 FROM request_accepted) as sub1 \\ngroup by id1\\norder by num desc limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 365959,
                "title": "elegant-mysql-solution",
                "content": "```\\nSELECT id, COUNT(*) AS num\\nFROM (\\n    SELECT requester_id AS id FROM request_accepted\\n    UNION ALL \\n    SELECT accepter_id AS id FROM request_accepted) as new\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id, COUNT(*) AS num\\nFROM (\\n    SELECT requester_id AS id FROM request_accepted\\n    UNION ALL \\n    SELECT accepter_id AS id FROM request_accepted) as new\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 289871,
                "title": "follow-up-by-window-function",
                "content": "select id, \\n\\t  num\\nfrom (select id,\\n             num,\\n             dense_rank() over(order by num desc) as rank\\n      from (select id,\\n                   count(*) as num\\n            from (select requester_id as id\\n                  from request_accepted\\n                  union all\\n                  select accepter_id as id\\n                  from request_accepted) as subq\\n            group by id\\n           ) as subq \\n      ) as bigsubq\\nwhere bigsubq.rank = 1",
                "solutionTags": [],
                "code": "select id, \\n\\t  num\\nfrom (select id,\\n             num,\\n             dense_rank() over(order by num desc) as rank\\n      from (select id,\\n                   count(*) as num\\n            from (select requester_id as id\\n                  from request_accepted\\n                  union all\\n                  select accepter_id as id\\n                  from request_accepted) as subq\\n            group by id\\n           ) as subq \\n      ) as bigsubq\\nwhere bigsubq.rank = 1",
                "codeTag": "Unknown"
            },
            {
                "id": 240384,
                "title": "the-solution-given-by-the-system-is-flawed",
                "content": "According to the system, my solution ({\"headers\":[\"id\",\"num\"],\"values\":[[16,11]]}) is incorrect for the following test case. However, it is the solution given by the system ({\"headers\":[\"id\",\"num\"],\"values\":[[12,14]]}) that is flawed. \\n\\nIn this given test case, the following assumptions are not true\\n1. The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value. ([12,4,\"2017/01/04\"], [12,4,\"2016/12/24\"], [12,17,\"2017/01/19\"],[12,17,\"2017/03/23\"])\\n2. If a has accepted friend request from b, then b cannot send friend request to a. ([12,18,\"2016/10/09\"],[18,12,\"2016/12/08\"], [12,7,\"2016/12/21\"], [7,12,\"2017/01/01\"]). \\n\\n{\"headers\":{\"request_accepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"request_accepted\":[[14,3,\"2016/11/27\"],[16,2,\"2016/11/22\"],[11,3,\"2017/01/02\"],[12,17,\"2017/01/19\"],[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\nMy SQL is below:\\n```\\nSELECT id, count(distinct friend_id) as num\\nFROM\\n(\\n    SELECT t1.requester_id as id, t1.accepter_id as friend_id\\nFROM request_accepted t1\\nUNION ALL\\n    SELECT t2.accepter_id as id, t2.requester_id as friend_id\\nFROM request_accepted t2\\n) t group by id\\nHAVING count(distinct friend_id) = (\\n    SELECT max(num)\\n    FROM \\n    (\\n    SELECT id, count(distinct friend_id) as num\\nFROM\\n(\\n    SELECT t1.requester_id as id, t1.accepter_id as friend_id\\nFROM request_accepted t1\\nUNION ALL\\n    SELECT t2.accepter_id as id, t2.requester_id as friend_id\\nFROM request_accepted t2\\n) t group by id) m\\n)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id, count(distinct friend_id) as num\\nFROM\\n(\\n    SELECT t1.requester_id as id, t1.accepter_id as friend_id\\nFROM request_accepted t1\\nUNION ALL\\n    SELECT t2.accepter_id as id, t2.requester_id as friend_id\\nFROM request_accepted t2\\n) t group by id\\nHAVING count(distinct friend_id) = (\\n    SELECT max(num)\\n    FROM \\n    (\\n    SELECT id, count(distinct friend_id) as num\\nFROM\\n(\\n    SELECT t1.requester_id as id, t1.accepter_id as friend_id\\nFROM request_accepted t1\\nUNION ALL\\n    SELECT t2.accepter_id as id, t2.requester_id as friend_id\\nFROM request_accepted t2\\n) t group by id) m\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103808,
                "title": "solution-using-union-order-by-and-limit",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT\\n    u1.id,\\n    u1.num\\nFROM (\\n    SELECT \\n        u2.id,\\n        (\\n            SELECT COUNT(r.requester_id)\\n            FROM request_accepted r\\n            WHERE r.requester_id = u2.id\\n        ) + (\\n            SELECT COUNT(r.accepter_id)\\n            FROM request_accepted r\\n            WHERE r.accepter_id = u2.id\\n        ) AS \"num\"\\n    FROM ((\\n        SELECT requester_id AS \"id\"\\n        FROM request_accepted \\n    ) UNION (\\n        SELECT accepter_id AS \"id\"\\n        FROM request_accepted\\n    )) u2\\n) u1\\nORDER BY u1.num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    u1.id,\\n    u1.num\\nFROM (\\n    SELECT \\n        u2.id,\\n        (\\n            SELECT COUNT(r.requester_id)\\n            FROM request_accepted r\\n            WHERE r.requester_id = u2.id\\n        ) + (\\n            SELECT COUNT(r.accepter_id)\\n            FROM request_accepted r\\n            WHERE r.accepter_id = u2.id\\n        ) AS \"num\"\\n    FROM ((\\n        SELECT requester_id AS \"id\"\\n        FROM request_accepted \\n    ) UNION (\\n        SELECT accepter_id AS \"id\"\\n        FROM request_accepted\\n    )) u2\\n) u1\\nORDER BY u1.num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103810,
                "title": "my-simplest-solution",
                "content": "select t.id as id, count(t.id) as num from \\n(select r1.requester_id as id from request_accepted r1 union all select r2.accepter_id as id from request_accepted r2)  t\\ngroup by t.id order by count(t.id) desc limit 1",
                "solutionTags": [],
                "code": "select t.id as id, count(t.id) as num from \\n(select r1.requester_id as id from request_accepted r1 union all select r2.accepter_id as id from request_accepted r2)  t\\ngroup by t.id order by count(t.id) desc limit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 4092112,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, sum(num) AS num\\nFROM\\n(SELECT requester_id AS id, count(requester_id) AS num\\nFROM RequestAccepted\\nGROUP BY requester_id\\nunion all\\nSELECT accepter_id AS id, count(accepter_id) AS num\\nFROM RequestAccepted\\nGROUP BY accepter_id) tb\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, sum(num) AS num\\nFROM\\n(SELECT requester_id AS id, count(requester_id) AS num\\nFROM RequestAccepted\\nGROUP BY requester_id\\nunion all\\nSELECT accepter_id AS id, count(accepter_id) AS num\\nFROM RequestAccepted\\nGROUP BY accepter_id) tb\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090513,
                "title": "with-union-all",
                "content": "\\n```SQL\\nWITH id_table AS (\\n  SELECT requester_id id\\n  FROM requestaccepted\\n    UNION ALL\\n  SELECT accepter_id id\\n  FROM requestaccepted\\n), id_num_table AS (\\n  SELECT id, count(id) num\\n  FROM id_table\\n  GROUP BY id\\n)\\n\\nSELECT id, num \\nFROM id_num_table\\nWHERE num = (SELECT max(num) FROM id_num_table)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```SQL\\nWITH id_table AS (\\n  SELECT requester_id id\\n  FROM requestaccepted\\n    UNION ALL\\n  SELECT accepter_id id\\n  FROM requestaccepted\\n), id_num_table AS (\\n  SELECT id, count(id) num\\n  FROM id_table\\n  GROUP BY id\\n)\\n\\nSELECT id, num \\nFROM id_num_table\\nWHERE num = (SELECT max(num) FROM id_num_table)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089875,
                "title": "with-cte",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH base AS (select accepter_id as id from RequestAccepted union all select requester_id as id from RequestAccepted)\\nselect id, count(*) as num from base group by id order by num desc limit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH base AS (select accepter_id as id from RequestAccepted union all select requester_id as id from RequestAccepted)\\nselect id, count(*) as num from base group by id order by num desc limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083482,
                "title": "union-subquery-easy-limit",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM (\\n        SELECT requester_id AS id, COUNT(requester_id) AS num\\n        FROM (\\n            SELECT A.requester_id, A.accepter_id\\n            FROM RequestAccepted A\\n            UNION\\n            SELECT B.accepter_id, B.requester_id\\n            FROM RequestAccepted B\\n            ) AS tmp\\n        GROUP by requester_id\\n    ) AS tmp1\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM (\\n        SELECT requester_id AS id, COUNT(requester_id) AS num\\n        FROM (\\n            SELECT A.requester_id, A.accepter_id\\n            FROM RequestAccepted A\\n            UNION\\n            SELECT B.accepter_id, B.requester_id\\n            FROM RequestAccepted B\\n            ) AS tmp\\n        GROUP by requester_id\\n    ) AS tmp1\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081784,
                "title": "mysql",
                "content": "select id , sum(one) as num from (\\nwith table1 as(\\nselect distinct requester_id as id, count(requester_id)  over(partition by requester_id) as one\\nfrom requestaccepted) ,\\ntable2 as(\\nselect distinct accepter_id ,count(accepter_id) over(partition by accepter_id) as two \\nfrom requestaccepted)\\nselect id , one \\nfrom table1\\nunion all\\nselect accepter_id , two\\nfrom table2) x \\ngroup by id \\norder by num desc\\nlimit 1;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select id , sum(one) as num from (\\nwith table1 as(\\nselect distinct requester_id as id, count(requester_id)  over(partition by requester_id) as one\\nfrom requestaccepted) ,\\ntable2 as(\\nselect distinct accepter_id ,count(accepter_id) over(partition by accepter_id) as two \\nfrom requestaccepted)\\nselect id , one \\nfrom table1\\nunion all\\nselect accepter_id , two\\nfrom table2) x \\ngroup by id \\norder by num desc\\nlimit 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 4080277,
                "title": "mssql",
                "content": "# Approach\\nUse \"union ALL\", not just \"union\", otherwise duplicate rows will get eliminated\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect top 1 \\n    id,\\n    cnt as num\\nfrom (    \\n    select\\n        id,\\n        count(*) as cnt\\n    from (    \\n        select requester_id as id from RequestAccepted \\n        union all\\n        select accepter_id  from RequestAccepted \\n    ) as aa\\n    group by id\\n) as bb    \\norder by cnt desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect top 1 \\n    id,\\n    cnt as num\\nfrom (    \\n    select\\n        id,\\n        count(*) as cnt\\n    from (    \\n        select requester_id as id from RequestAccepted \\n        union all\\n        select accepter_id  from RequestAccepted \\n    ) as aa\\n    group by id\\n) as bb    \\norder by cnt desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078979,
                "title": "simple-approach-union-all-cte-all-test-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing cte and union all, create a id column which includes all id\\'s from acceptor and requestor then count and group by id. ordering it in descending order will give highest count of friend on top of list then limit it by one to get highest count friends for the particular id.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith base as(select requester_id id from RequestAccepted\\nunion all\\nselect accepter_id id from RequestAccepted)\\nselect id, count(*) num  \\nfrom base \\ngroup by 1 \\norder by 2 desc \\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith base as(select requester_id id from RequestAccepted\\nunion all\\nselect accepter_id id from RequestAccepted)\\nselect id, count(*) num  \\nfrom base \\ngroup by 1 \\norder by 2 desc \\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073977,
                "title": "mysql-easy-solution-using-union-all-sub-query",
                "content": "\\n\\n# Code\\n```\\nSELECT id, COUNT(*) AS num\\nFROM(SELECT requester_id AS id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id AS id\\nFROM RequestAccepted) AS a\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT id, COUNT(*) AS num\\nFROM(SELECT requester_id AS id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id AS id\\nFROM RequestAccepted) AS a\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072705,
                "title": "beats-95-of-users-using-with-union-all-sum-all",
                "content": "WITH total AS \\n(SELECT requester_id as id, COUNT(*) as num FROM requestaccepted GROUP BY 1 \\nUNION ALL\\nSELECT accepter_id as id, COUNT(*) as num  FROM requestaccepted GROUP BY 1)\\n\\n\\nSELECT  id,\\n        SUM(num) as num\\nFROM total \\nGROUP BY id \\nHAVING SUM(num) >= ALL(SELECT SUM(num) FROM total group by id); \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "WITH total AS \\n(SELECT requester_id as id, COUNT(*) as num FROM requestaccepted GROUP BY 1 \\nUNION ALL\\nSELECT accepter_id as id, COUNT(*) as num  FROM requestaccepted GROUP BY 1)\\n\\n\\nSELECT  id,\\n        SUM(num) as num\\nFROM total \\nGROUP BY id \\nHAVING SUM(num) >= ALL(SELECT SUM(num) FROM total group by id); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072184,
                "title": "mysql-union",
                "content": "# Approach\\nGet all the distinct IDs and then count the requests that were sent/accepted for each ID.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect\\n    id_table.id as  id,\\n    (select count(*) from requestaccepted where requester_id = id or accepter_id = id)\\n        as num\\nfrom\\n    (\\n        select distinct requester_id as id from requestaccepted\\n        union\\n        select distinct accepter_id as id from requestaccepted\\n    ) id_table\\norder by\\n    num desc\\nlimit 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    id_table.id as  id,\\n    (select count(*) from requestaccepted where requester_id = id or accepter_id = id)\\n        as num\\nfrom\\n    (\\n        select distinct requester_id as id from requestaccepted\\n        union\\n        select distinct accepter_id as id from requestaccepted\\n    ) id_table\\norder by\\n    num desc\\nlimit 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071730,
                "title": "mysql-union-all",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect id, sum(counts) as num\\nfrom (\\n    select requester_id as id, count(*) as counts from requestaccepted group by requester_id\\n    union all\\n    select accepter_id as id, count(*) as counts from requestaccepted group by accepter_id\\n) as t\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect id, sum(counts) as num\\nfrom (\\n    select requester_id as id, count(*) as counts from requestaccepted group by requester_id\\n    union all\\n    select accepter_id as id, count(*) as counts from requestaccepted group by accepter_id\\n) as t\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071085,
                "title": "simple-mysql-code-with-union-all-and-cte",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as\\n(\\n  select requester_id as id from RequestAccepted\\n union all\\n  select accepter_id as id from RequestAccepted\\n)\\nselect id,count(id) as num from cte group by id order by count(id) desc limit 1 \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as\\n(\\n  select requester_id as id from RequestAccepted\\n union all\\n  select accepter_id as id from RequestAccepted\\n)\\nselect id,count(id) as num from cte group by id order by count(id) desc limit 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067714,
                "title": "friend-requests-ii-who-has-the-most-friends",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect t.id,sum(t.num) as num\\nfrom\\n(\\nselect\\n    requester_id as id,\\n    count(requester_id) as num\\nfrom\\n    RequestAccepted\\ngroup by\\n     requester_id\\nunion all\\nselect\\n    accepter_id as id,\\n    count(accepter_id ) as num\\nfrom\\n    RequestAccepted\\ngroup by\\n     accepter_id\\n) as t\\ngroup by t.id\\norder by num DESC\\nlimit 1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect t.id,sum(t.num) as num\\nfrom\\n(\\nselect\\n    requester_id as id,\\n    count(requester_id) as num\\nfrom\\n    RequestAccepted\\ngroup by\\n     requester_id\\nunion all\\nselect\\n    accepter_id as id,\\n    count(accepter_id ) as num\\nfrom\\n    RequestAccepted\\ngroup by\\n     accepter_id\\n) as t\\ngroup by t.id\\norder by num DESC\\nlimit 1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067153,
                "title": "day-5",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nSELECT a.id,SUM(a.num) AS num\\n\\nFROM\\n(\\n(SELECT requester_id AS id,COUNT(accepter_id) AS num\\nFROM RequestAccepted\\nGROUP BY requester_id)\\n\\nUNION ALL\\n\\n(SELECT accepter_id AS id,COUNT(requester_id) AS num\\nFROM RequestAccepted\\nGROUP BY accepter_id) \\n)a\\nGROUP BY a.id\\nORDER BY num DESC\\nLIMIT 1\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nSELECT a.id,SUM(a.num) AS num\\n\\nFROM\\n(\\n(SELECT requester_id AS id,COUNT(accepter_id) AS num\\nFROM RequestAccepted\\nGROUP BY requester_id)\\n\\nUNION ALL\\n\\n(SELECT accepter_id AS id,COUNT(requester_id) AS num\\nFROM RequestAccepted\\nGROUP BY accepter_id) \\n)a\\nGROUP BY a.id\\nORDER BY num DESC\\nLIMIT 1\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067148,
                "title": "easy-and-runtime-details-494ms-beats-96-12-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect requester_id as id , count(requester_id) num from (select requester_id from requestaccepted \\nunion all\\nselect accepter_id from requestaccepted) a group by id order by num desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect requester_id as id , count(requester_id) num from (select requester_id from requestaccepted \\nunion all\\nselect accepter_id from requestaccepted) a group by id order by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066356,
                "title": "simple-easy-to-understand-solution-beat-91-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as (\\n  select distinct requester_id as id, count(*) as num from requestaccepted group by requester_id\\n  union all\\n  select distinct accepter_id as id, count(*) as num from requestaccepted group by accepter_id\\n)\\n\\nselect id, sum(num) as num from cte group by id order by num desc limit 1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as (\\n  select distinct requester_id as id, count(*) as num from requestaccepted group by requester_id\\n  union all\\n  select distinct accepter_id as id, count(*) as num from requestaccepted group by accepter_id\\n)\\n\\nselect id, sum(num) as num from cte group by id order by num desc limit 1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065975,
                "title": "simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect * from (select * from (select REQUESTER_ID id,sum(reqid) num from(\\nselect requester_id,count(1) reqid from RequestAccepted group by requester_id union all \\nselect accepter_id,count(1) reqid from RequestAccepted group by accepter_id)\\ngroup by REQUESTER_ID)\\norder by num desc)\\nwhere rownum =1;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect * from (select * from (select REQUESTER_ID id,sum(reqid) num from(\\nselect requester_id,count(1) reqid from RequestAccepted group by requester_id union all \\nselect accepter_id,count(1) reqid from RequestAccepted group by accepter_id)\\ngroup by REQUESTER_ID)\\norder by num desc)\\nwhere rownum =1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061640,
                "title": "solution-via-two-ctes",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH CTE AS (\\nselect requester_id as \\'id\\', count(accepter_id) as \\'num\\'\\nfrom requestaccepted\\ngroup by requester_id\\nUNION ALL\\nselect accepter_id as \\'id\\', count(requester_id) as \\'num\\'\\nfrom requestaccepted\\ngroup by accepter_id\\nORDER BY 2 desc\\n),\\nCTE2 as (\\nselect cte.id, sum(cte.num) as \\'num\\',\\nRANK() OVER(ORDER BY sum(cte.num) desc) as \\'rk\\'\\nfrom CTE\\ngroup by cte.id )\\nSELECT id, num from CTE2 where rk = 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH CTE AS (\\nselect requester_id as \\'id\\', count(accepter_id) as \\'num\\'\\nfrom requestaccepted\\ngroup by requester_id\\nUNION ALL\\nselect accepter_id as \\'id\\', count(requester_id) as \\'num\\'\\nfrom requestaccepted\\ngroup by accepter_id\\nORDER BY 2 desc\\n),\\nCTE2 as (\\nselect cte.id, sum(cte.num) as \\'num\\',\\nRANK() OVER(ORDER BY sum(cte.num) desc) as \\'rk\\'\\nfrom CTE\\ngroup by cte.id )\\nSELECT id, num from CTE2 where rk = 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061432,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as (\\nselect requester_id as id from requestaccepted\\nunion all\\nselect accepter_id as id from requestaccepted)\\n\\nselect id,count(id)as num\\nfrom cte \\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as (\\nselect requester_id as id from requestaccepted\\nunion all\\nselect accepter_id as id from requestaccepted)\\n\\nselect id,count(id)as num\\nfrom cte \\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057710,
                "title": "sql-solution-by-using-union-all-and-with-as-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI divide the original table as two tables, the id of first table is group by the requester_id, the id of second table is group by the accepter_id. I used UNION ALL to add the number and found the most friends.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nWITH NewTable AS ((SELECT requester_id as id, COUNT(accepter_id) as num FROM RequestAccepted\\nGROUP BY requester_id)\\nUNION ALL\\n(SELECT accepter_id as id, COUNT(requester_id) as num FROM RequestAccepted\\nGROUP BY accepter_id))\\nSELECT id, SUM(num) as num FROM NewTable\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nWITH NewTable AS ((SELECT requester_id as id, COUNT(accepter_id) as num FROM RequestAccepted\\nGROUP BY requester_id)\\nUNION ALL\\n(SELECT accepter_id as id, COUNT(requester_id) as num FROM RequestAccepted\\nGROUP BY accepter_id))\\nSELECT id, SUM(num) as num FROM NewTable\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051798,
                "title": "mysql-solution",
                "content": "# Code\\n```\\nselect id, count(id) as num\\nfrom\\n(\\n  select requester_id as id from RequestAccepted\\n  union all\\n  select accepter_id as id from RequestAccepted\\n) t\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect id, count(id) as num\\nfrom\\n(\\n  select requester_id as id from RequestAccepted\\n  union all\\n  select accepter_id as id from RequestAccepted\\n) t\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048150,
                "title": "least-time-complexity",
                "content": "# Intuition \\n<!-- Describe your first thoughts on how to solve this problem. -->\\nNumber of friends of each user is just the sum of the count of user in requester and accepter columns. \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUNION ALL makes a complete list of all the instances of every user. Now we need to just extract count of each user id and get the max one out of it in the output.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n) since we need to operate on each row in the given table.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nNONE!\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith tab as (\\n    (select requester_id as id\\nfrom RequestAccepted )\\n\\nunion all\\n\\n(select accepter_id  as id\\nfrom RequestAccepted)\\n)\\n\\nselect distinct id, count(id) as num\\nfrom tab\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith tab as (\\n    (select requester_id as id\\nfrom RequestAccepted )\\n\\nunion all\\n\\n(select accepter_id  as id\\nfrom RequestAccepted)\\n)\\n\\nselect distinct id, count(id) as num\\nfrom tab\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047574,
                "title": "union-all-cte-top-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith cte as\\n(\\n  select requester_id as id, count(accepter_id) as nums\\n  from RequestAccepted\\n  group by requester_id\\n  union all\\n  select accepter_id as id, count(requester_id) as nums\\n  from RequestAccepted\\n  group by accepter_id\\n)\\n    select top 1 id, sum(nums) as num from cte group by id order by num desc\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nwith cte as\\n(\\n  select requester_id as id, count(accepter_id) as nums\\n  from RequestAccepted\\n  group by requester_id\\n  union all\\n  select accepter_id as id, count(requester_id) as nums\\n  from RequestAccepted\\n  group by accepter_id\\n)\\n    select top 1 id, sum(nums) as num from cte group by id order by num desc\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045394,
                "title": "using-union-all-and-order-by-and-limit",
                "content": "# Intuition\\nUNION ALL and order by and limit\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\nWITH UNIONALL as (\\n    SELECT requester_id as id ,accepter_id as num  FROM RequestAccepted \\n    UNION ALL\\n    SELECT accepter_id as num ,requester_id as id FROM RequestAccepted \\n),\\n\\nSUMnumThenLIMIT AS (\\n    SELECT DISTINCT id, count(id) OVER (PARTITION BY id)  as num\\n    FROM UNIONALL \\n    order by num desc\\n    limit 1\\n    \\n)\\n\\nSELECT * FROM SUMnumThenLIMIT;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH UNIONALL as (\\n    SELECT requester_id as id ,accepter_id as num  FROM RequestAccepted \\n    UNION ALL\\n    SELECT accepter_id as num ,requester_id as id FROM RequestAccepted \\n),\\n\\nSUMnumThenLIMIT AS (\\n    SELECT DISTINCT id, count(id) OVER (PARTITION BY id)  as num\\n    FROM UNIONALL \\n    order by num desc\\n    limit 1\\n    \\n)\\n\\nSELECT * FROM SUMnumThenLIMIT;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043092,
                "title": "union-all-hack",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect \\nid,\\ncount(*) num\\nfrom (\\nselect\\nrequester_id as id\\nfrom RequestAccepted\\nunion all\\nselect\\naccepter_id as id\\nfrom RequestAccepted\\n) t\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect \\nid,\\ncount(*) num\\nfrom (\\nselect\\nrequester_id as id\\nfrom RequestAccepted\\nunion all\\nselect\\naccepter_id as id\\nfrom RequestAccepted\\n) t\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037620,
                "title": "cte-union-subquery-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nwith cte1 as (SELECT a as id, count(*) as num\\nfrom (SELECT requester_id as a , accepter_id as b from requestaccepted\\nUNION \\nSELECT accepter_id as a, requester_id as b from requestaccepted) as a\\nGroup by a ),\\ncte2 as (select max(num) as maxx from cte1) \\n\\nselect id, num\\nfrom cte1\\nwhere\\nnum = (Select maxx from cte2) \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith cte1 as (SELECT a as id, count(*) as num\\nfrom (SELECT requester_id as a , accepter_id as b from requestaccepted\\nUNION \\nSELECT accepter_id as a, requester_id as b from requestaccepted) as a\\nGroup by a ),\\ncte2 as (select max(num) as maxx from cte1) \\n\\nselect id, num\\nfrom cte1\\nwhere\\nnum = (Select maxx from cte2) \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034501,
                "title": "easy-to-understand-using-union-all-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, count(id) as num\\nfrom \\n\\n(\\n  select requester_id as id\\n  from RequestAccepted\\n  union all\\n  select accepter_id as id\\n  from RequestAccepted\\n)a\\ngroup by 1\\norder by count(id) desc\\nlimit 1 ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, count(id) as num\\nfrom \\n\\n(\\n  select requester_id as id\\n  from RequestAccepted\\n  union all\\n  select accepter_id as id\\n  from RequestAccepted\\n)a\\ngroup by 1\\norder by count(id) desc\\nlimit 1 ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4028478,
                "title": "uisng-ctes",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nWITH  accepter as (\\nSELECT accepter_id,count(accepter_id) as acc FROM RequestAccepted GROUP BY accepter_id ) ,\\nrequester as \\n(SELECT requester_id,count(requester_id) as req FROM RequestAccepted GROUP BY requester_id),\\nfriends as \\n(SELECT *, ISNULL(acc,0) + ISNULL(req,0) as friends  FROM accepter FULL JOIN requester ON accepter.accepter_id = requester.requester_id )\\n\\n--SELECT * from friends \\n\\nSELECT   TOP 1 COALESCE(accepter_id,requester_id) as id,friends as num FROM friends ORDER BY friends DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nWITH  accepter as (\\nSELECT accepter_id,count(accepter_id) as acc FROM RequestAccepted GROUP BY accepter_id ) ,\\nrequester as \\n(SELECT requester_id,count(requester_id) as req FROM RequestAccepted GROUP BY requester_id),\\nfriends as \\n(SELECT *, ISNULL(acc,0) + ISNULL(req,0) as friends  FROM accepter FULL JOIN requester ON accepter.accepter_id = requester.requester_id )\\n\\n--SELECT * from friends \\n\\nSELECT   TOP 1 COALESCE(accepter_id,requester_id) as id,friends as num FROM friends ORDER BY friends DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025699,
                "title": "beats-90-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\n\\nselect id, sum(num) as num\\n\\nfrom\\n\\n(select accepter_id as id,\\n      count(requester_id) as num\\n      from requestaccepted\\n      group by accepter_id\\n\\nUnion all\\n\\nselect requester_id as id,\\n      count(accepter_id) as num\\n      from requestaccepted\\n      group by requester_id\\n) t\\ngroup by id\\norder by num desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\n\\nselect id, sum(num) as num\\n\\nfrom\\n\\n(select accepter_id as id,\\n      count(requester_id) as num\\n      from requestaccepted\\n      group by accepter_id\\n\\nUnion all\\n\\nselect requester_id as id,\\n      count(accepter_id) as num\\n      from requestaccepted\\n      group by requester_id\\n) t\\ngroup by id\\norder by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023824,
                "title": "mysql-detailed-explaination-union-all-easy-understanding",
                "content": "# Finding the Person with the Most Friends and the Number of Friends\\n\\nTo find the person with the most friends and the number of friends they have, we can utilize SQL queries to analyze the data from the `RequestAccepted` table. The goal is to identify the user who has the most connections, considering both their roles as requesters and accepters of friend requests.\\n\\n# QUERY\\n\\n```sql\\nSELECT requester_id AS id, SUM(friend) AS num\\nFROM (\\n    SELECT requester_id, COUNT(requester_id) AS friend\\n    FROM RequestAccepted\\n    GROUP BY requester_id\\n    UNION ALL\\n    SELECT accepter_id, COUNT(accepter_id)\\n    FROM RequestAccepted\\n    GROUP BY accepter_id\\n) AS friends\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n```\\n\\n**Explanation:**\\n- We start by creating a subquery that combines two sets of data using the `UNION ALL` operator. One set counts the number of times a user appears as a requester, and the other set counts the number of times a user appears as an accepter. These counts represent the number of friends for each user.\\n- Next, we use the main query to group the results by the user\\'s ID (both requester and accepter) and calculate the sum of friends for each user.\\n- Finally, we order the results in descending order of the number of friends and limit the output to the first row, which gives us the person with the most friends and the number of friends they have.\\n\\nThis query efficiently identifies the user with the most friends. If there are multiple users with the same maximum number of friends, you can modify the query by removing the `LIMIT 1` clause to retrieve all of them.\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT requester_id AS id, SUM(friend) AS num\\nFROM (\\n    SELECT requester_id, COUNT(requester_id) AS friend\\n    FROM RequestAccepted\\n    GROUP BY requester_id\\n    UNION ALL\\n    SELECT accepter_id, COUNT(accepter_id)\\n    FROM RequestAccepted\\n    GROUP BY accepter_id\\n) AS friends\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020649,
                "title": "ms-sql-server-solution",
                "content": "\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT TOP 1 B.id, COUNT(B.id) AS num FROM (\\nSELECT requester_id AS id\\nFROM RequestAccepted WHERE accept_date IS NOT NULL\\nUNION ALL\\nSELECT accepter_id AS id\\nFROM RequestAccepted WHERE accept_date IS NOT NULL) B\\nGROUP BY B.id ORDER BY COUNT(B.id) DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT TOP 1 B.id, COUNT(B.id) AS num FROM (\\nSELECT requester_id AS id\\nFROM RequestAccepted WHERE accept_date IS NOT NULL\\nUNION ALL\\nSELECT accepter_id AS id\\nFROM RequestAccepted WHERE accept_date IS NOT NULL) B\\nGROUP BY B.id ORDER BY COUNT(B.id) DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4019641,
                "title": "with-union-all-cte",
                "content": "```\\nwith x as \\n(\\n\\nwith a\\nas\\n(\\nselect xid , sum(cnt) as n from \\n(\\n# Write your MySQL query statement below\\nselect requester_id as xid , count(accepter_id) as cnt from requestaccepted \\ngroup by 1 \\n\\n\\nUNION  ALL\\n\\n# Write your MySQL query statement below\\nselect accepter_id as xid , count(requester_id) as cnt from requestaccepted \\ngroup by 1\\n) K\\ngroup by 1\\n\\n)\\nselect xid as id , n , dense_rank() over(order by n desc) as rnk from a \\n)\\nselect id ,  n as num from x \\nwhere rnk = 1 \\n```",
                "solutionTags": [],
                "code": "```\\nwith x as \\n(\\n\\nwith a\\nas\\n(\\nselect xid , sum(cnt) as n from \\n(\\n# Write your MySQL query statement below\\nselect requester_id as xid , count(accepter_id) as cnt from requestaccepted \\ngroup by 1 \\n\\n\\nUNION  ALL\\n\\n# Write your MySQL query statement below\\nselect accepter_id as xid , count(requester_id) as cnt from requestaccepted \\ngroup by 1\\n) K\\ngroup by 1\\n\\n)\\nselect xid as id , n , dense_rank() over(order by n desc) as rnk from a \\n)\\nselect id ,  n as num from x \\nwhere rnk = 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4017650,
                "title": "indonesia-language-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\njumlah teman tiap orang harus dihitung count dari requester_id dan accepter_id sehingga dua kolom tersebut harus di Union\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ndi innner query, pilih requester_id union accepter_id sebagai id1 yang akan dihitung friendsnya. Llau pilih  requester_id union accepter_id  sebagai idCount\\nuntuk jumlah teman masing masing id1\\nLalu di outer query, group by id1 dan count(idCount). untuk menghtiung jumlah teman masing masing id1\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n/*\\nide:\\ndi innner query, pilih requester_id union accepter_id sebagai id1 yang akan dihitung friendsnya. Llau pilih  requester_id union accepter_id  sebagai idCount\\nuntuk jumlah teman masing masing id1\\nLalu di outer query, group by id1 dan count(idCount). untuk menghtiung jumlah teman masing masing id1\\n\\n*/\\nSELECT id1 as id, count(idCount) as num\\nFROM (\\n    SELECT  requester_id as id1 , accepter_id  as idCount\\n    FROM RequestAccepted\\n    UNION\\n    SELECT accepter_id as id1, requester_id as idCount\\n    FROM RequestAccepted\\n) friendIdAndCount\\nGROUP BY id1\\nORDER BY num DESC\\nLIMIT 1; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n/*\\nide:\\ndi innner query, pilih requester_id union accepter_id sebagai id1 yang akan dihitung friendsnya. Llau pilih  requester_id union accepter_id  sebagai idCount\\nuntuk jumlah teman masing masing id1\\nLalu di outer query, group by id1 dan count(idCount). untuk menghtiung jumlah teman masing masing id1\\n\\n*/\\nSELECT id1 as id, count(idCount) as num\\nFROM (\\n    SELECT  requester_id as id1 , accepter_id  as idCount\\n    FROM RequestAccepted\\n    UNION\\n    SELECT accepter_id as id1, requester_id as idCount\\n    FROM RequestAccepted\\n) friendIdAndCount\\nGROUP BY id1\\nORDER BY num DESC\\nLIMIT 1; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4017649,
                "title": "indonesia-language-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n/*\\nide:\\ndi innner query, pilih requester_id union accepter_id sebagai id1 yang akan dihitung friendsnya. Llau pilih  requester_id union accepter_id  sebagai idCount\\nuntuk jumlah teman masing masing id1\\nLalu di outer query, group by id1 dan count(idCount). untuk menghtiung jumlah teman masing masing id1\\n\\n*/\\nSELECT id1 as id, count(idCount) as num\\nFROM (\\n    SELECT  requester_id as id1 , accepter_id  as idCount\\n    FROM RequestAccepted\\n    UNION\\n    SELECT accepter_id as id1, requester_id as idCount\\n    FROM RequestAccepted\\n) friendIdAndCount\\nGROUP BY id1\\nORDER BY num DESC\\nLIMIT 1; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n/*\\nide:\\ndi innner query, pilih requester_id union accepter_id sebagai id1 yang akan dihitung friendsnya. Llau pilih  requester_id union accepter_id  sebagai idCount\\nuntuk jumlah teman masing masing id1\\nLalu di outer query, group by id1 dan count(idCount). untuk menghtiung jumlah teman masing masing id1\\n\\n*/\\nSELECT id1 as id, count(idCount) as num\\nFROM (\\n    SELECT  requester_id as id1 , accepter_id  as idCount\\n    FROM RequestAccepted\\n    UNION\\n    SELECT accepter_id as id1, requester_id as idCount\\n    FROM RequestAccepted\\n) friendIdAndCount\\nGROUP BY id1\\nORDER BY num DESC\\nLIMIT 1; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4016700,
                "title": "solution-it-s-easy",
                "content": "\\n\\n# Code\\n```\\nWITH CTE AS (\\n  SELECT requester_id as id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id as id\\n  FROM RequestAccepted\\n)\\nSELECT id,COUNT(id) AS num\\nFROM CTE\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH CTE AS (\\n  SELECT requester_id as id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id as id\\n  FROM RequestAccepted\\n)\\nSELECT id,COUNT(id) AS num\\nFROM CTE\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4010311,
                "title": "clear-easy-sql-step-by-step-correct-formatting-comprehensive-explanation",
                "content": "# \\u2757 Upvote \\u2B06 if you found this useful \\u2714\\n\\nMySQL solution for **602. Friend Requests II Who Has the Most Friends** Problem. \\n\\n# \\uD83D\\uDCA1 Intuition (hint)\\n\\nNot much complicated problem that can be solved using UNION ALL and COUNT. \\n\\n# \\uD83C\\uDFAF Approach (solution)\\n\\nFirst, we will create two queries.\\n\\nQuery 1 - counts all *accepter_id* for each *requester_id*:\\n```sql\\nSELECT\\n\\trequester_id AS id\\n\\t, COUNT(accepter_id) AS cnt\\nFROM RequestAccepted\\nGROUP BY requester_id\\n```\\n\\nQuery 2 - counts all *requester_id* for each *accepter_id*:\\n```sql\\nSELECT\\n\\taccepter_id AS id\\n\\t, COUNT(requester_id) AS cnt\\nFROM RequestAccepted\\nGROUP BY accepter_id\\n```\\n\\nThen we \\tUNION ALL both queries and wrap inside CTE named *friends*.\\n\\nThe last step is to SUM all the counts, GROUP BY id, ORDER BY SUM DESCending to get the highest count first and lastly limit the results to 1. \\n\\n```sql\\nSELECT\\n\\xA0 \\xA0 id\\n\\xA0 \\xA0 , SUM(cnt) AS num\\nFROM friends\\nGROUP BY id\\nORDER BY SUM(cnt) DESC\\nLIMIT 1;\\n```\\n\\n# \\uD83D\\uDCC8 Complexity\\n\\n- \\u23F1 Time complexity:\\nBeats 69% of solutions with MySQL (at the time of submission)\\n\\n- \\uD83D\\uDCBE Space complexity:\\nBeats 100% of solutions with MySQL (space complexity in case of this problem is constant for all solutions)\\n\\n# \\uD83D\\uDD25 Code\\n\\n```sql\\nWITH friends AS (\\n\\xA0 \\xA0 SELECT\\n\\xA0 \\xA0 \\xA0 \\xA0 requester_id AS id\\n\\xA0 \\xA0 \\xA0 \\xA0 , COUNT(accepter_id) AS cnt\\n\\xA0 \\xA0 FROM RequestAccepted\\n\\xA0 \\xA0 GROUP BY requester_id\\n\\n\\tUNION ALL\\n\\xA0 \\xA0 \\n\\xA0 \\xA0 SELECT\\n\\xA0 \\xA0 \\xA0 \\xA0 accepter_id AS id\\n\\xA0 \\xA0 \\xA0 \\xA0 , COUNT(requester_id) AS cnt\\n\\xA0 \\xA0 FROM RequestAccepted\\n\\xA0 \\xA0 GROUP BY accepter_id\\n)\\n\\nSELECT\\n\\xA0 \\xA0 id\\n\\xA0 \\xA0 , SUM(cnt) AS num\\nFROM friends\\nGROUP BY id\\nORDER BY SUM(cnt) DESC\\nLIMIT 1;\\n```\\n# \\u2757 Upvote \\u2B06 if you found this useful \\u2714",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT\\n\\trequester_id AS id\\n\\t, COUNT(accepter_id) AS cnt\\nFROM RequestAccepted\\nGROUP BY requester_id\\n```\n```sql\\nSELECT\\n\\taccepter_id AS id\\n\\t, COUNT(requester_id) AS cnt\\nFROM RequestAccepted\\nGROUP BY accepter_id\\n```\n```sql\\nSELECT\\n\\xA0 \\xA0 id\\n\\xA0 \\xA0 , SUM(cnt) AS num\\nFROM friends\\nGROUP BY id\\nORDER BY SUM(cnt) DESC\\nLIMIT 1;\\n```\n```sql\\nWITH friends AS (\\n\\xA0 \\xA0 SELECT\\n\\xA0 \\xA0 \\xA0 \\xA0 requester_id AS id\\n\\xA0 \\xA0 \\xA0 \\xA0 , COUNT(accepter_id) AS cnt\\n\\xA0 \\xA0 FROM RequestAccepted\\n\\xA0 \\xA0 GROUP BY requester_id\\n\\n\\tUNION ALL\\n\\xA0 \\xA0 \\n\\xA0 \\xA0 SELECT\\n\\xA0 \\xA0 \\xA0 \\xA0 accepter_id AS id\\n\\xA0 \\xA0 \\xA0 \\xA0 , COUNT(requester_id) AS cnt\\n\\xA0 \\xA0 FROM RequestAccepted\\n\\xA0 \\xA0 GROUP BY accepter_id\\n)\\n\\nSELECT\\n\\xA0 \\xA0 id\\n\\xA0 \\xA0 , SUM(cnt) AS num\\nFROM friends\\nGROUP BY id\\nORDER BY SUM(cnt) DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4010302,
                "title": "simple-ms-sql-solution-with-explanation",
                "content": "# Approach\\nThe big challenge here is that there are two columns that can have ID\\'s. A simple CTE with a `UNION ALL` to put requester_id and accepter_id into the same column (reminder - `UNION` removes duplicates) will get us that. Then it\\'s a simple count of how many times each ID appears and only returning the result that has the most.\\n\\n# Code\\n```\\nWITH Friends AS (\\n  SELECT requester_id AS id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id AS id\\n  FROM RequestAccepted\\n)\\nSELECT TOP(1)\\n    id\\n   ,COUNT(1) AS num\\nFROM Friends\\nGROUP BY id\\nORDER BY num DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nWITH Friends AS (\\n  SELECT requester_id AS id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id AS id\\n  FROM RequestAccepted\\n)\\nSELECT TOP(1)\\n    id\\n   ,COUNT(1) AS num\\nFROM Friends\\nGROUP BY id\\nORDER BY num DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004507,
                "title": "sql-simple-solution-select-nested-union-all",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect r.id, r.num from (\\n  select a.requester_id id, sum(a.cnt1) num from (\\n    select requester_id, count(requester_id) cnt1 from RequestAccepted group by requester_id\\n    union all\\n    select accepter_id, count(accepter_id) cnt1 from RequestAccepted group by accepter_id\\n  ) a group by a.requester_id order by num desc\\n) r\\nhaving r.num=max(r.num)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect r.id, r.num from (\\n  select a.requester_id id, sum(a.cnt1) num from (\\n    select requester_id, count(requester_id) cnt1 from RequestAccepted group by requester_id\\n    union all\\n    select accepter_id, count(accepter_id) cnt1 from RequestAccepted group by accepter_id\\n  ) a group by a.requester_id order by num desc\\n) r\\nhaving r.num=max(r.num)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000029,
                "title": "sql-friend-requests-ii-who-has-the-most-friends",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, COUNT(id) AS num\\nFROM (SELECT requester_id as id FROM RequestAccepted\\n      UNION ALL\\n      SELECT accepter_id FROM RequestAccepted) AS s\\nGROUP BY id \\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, COUNT(id) AS num\\nFROM (SELECT requester_id as id FROM RequestAccepted\\n      UNION ALL\\n      SELECT accepter_id FROM RequestAccepted) AS s\\nGROUP BY id \\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3998852,
                "title": "simple-sql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect id, count(*) as num from \\n    (\\n        select requester_id id from RequestAccepted\\n        union all\\n        select accepter_id id from RequestAccepted\\n    ) t\\ngroup by t.id\\norder by count(*) desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect id, count(*) as num from \\n    (\\n        select requester_id id from RequestAccepted\\n        union all\\n        select accepter_id id from RequestAccepted\\n    ) t\\ngroup by t.id\\norder by count(*) desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997568,
                "title": "easy-to-understand-using-union-all",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id,\\n       COUNT(id) as num\\nFROM (\\nSELECT requester_id as id\\nFROM RequestAccepted\\nUNION ALL\\nSELECT accepter_id as id\\nFROM RequestAccepted ) as temp\\nGROUP BY id\\nORDER by 2 DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id,\\n       COUNT(id) as num\\nFROM (\\nSELECT requester_id as id\\nFROM RequestAccepted\\nUNION ALL\\nSELECT accepter_id as id\\nFROM RequestAccepted ) as temp\\nGROUP BY id\\nORDER by 2 DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994402,
                "title": "answer",
                "content": "\\n\\n# Code\\n```\\nwith cte as (\\n(select requester_id \\nfrom RequestAccepted)\\nunion all \\n(select accepter_id\\nfrom RequestAccepted)\\n)\\n\\nselect requester_id as id, count(*) as num from cte\\ngroup by requester_id\\n# having max(count(*))\\norder by count(*) desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as (\\n(select requester_id \\nfrom RequestAccepted)\\nunion all \\n(select accepter_id\\nfrom RequestAccepted)\\n)\\n\\nselect requester_id as id, count(*) as num from cte\\ngroup by requester_id\\n# having max(count(*))\\norder by count(*) desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989888,
                "title": "most-easiest-approach-you-will-ever-see",
                "content": "# Intuition\\n![upvote.png](https://assets.leetcode.com/users/images/f984317e-32d2-4460-9246-cb28bfc2f35c_1693595302.8719745.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nWITH CTE1\\nAS\\n(\\nSELECT requester_id AS id FROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id AS id FROM RequestAccepted\\n)\\nSELECT TOP 1 id, COUNT(*) AS num\\nFROM CTE1\\nGROUP BY id\\nORDER BY COUNT(*) DESC\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nWITH CTE1\\nAS\\n(\\nSELECT requester_id AS id FROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id AS id FROM RequestAccepted\\n)\\nSELECT TOP 1 id, COUNT(*) AS num\\nFROM CTE1\\nGROUP BY id\\nORDER BY COUNT(*) DESC\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989102,
                "title": "simple-and-multiple-both-cases-simple-solutions-with-minimal-code",
                "content": "# Intuition\\nThese approach emphasizes achieving **performance with minimal code**.\\n\\nPlease **Upvote** if you find helpful.\\n\\n# Simple Case\\n\\nIn the simple case where an individual user has the maximum number of friends:\\n\\n# Code\\n```\\nWITH ids as (\\n  SELECT requester_id as id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id as id\\n  FROM RequestAccepted\\n)\\n\\nSELECT id, COUNT(id) as num\\nFROM ids\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```\\n\\n# Multiple Case\\n\\nIn cases where multiple users can have the maximum number of friends:\\n\\n# Code\\n```\\nWITH ids as (\\n  SELECT requester_id as id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id as id\\n  FROM RequestAccepted\\n)\\n\\nSELECT id, COUNT(id) as num\\nFROM ids\\nGROUP BY id\\nHAVING num = (\\n  SELECT MAX(num)\\n  FROM (\\n    SELECT COUNT(id) as num\\n    FROM ids\\n    GROUP BY id\\n  ) as friends_count\\n)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH ids as (\\n  SELECT requester_id as id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id as id\\n  FROM RequestAccepted\\n)\\n\\nSELECT id, COUNT(id) as num\\nFROM ids\\nGROUP BY id\\nORDER BY num DESC\\nLIMIT 1\\n```\n```\\nWITH ids as (\\n  SELECT requester_id as id\\n  FROM RequestAccepted\\n  UNION ALL\\n  SELECT accepter_id as id\\n  FROM RequestAccepted\\n)\\n\\nSELECT id, COUNT(id) as num\\nFROM ids\\nGROUP BY id\\nHAVING num = (\\n  SELECT MAX(num)\\n  FROM (\\n    SELECT COUNT(id) as num\\n    FROM ids\\n    GROUP BY id\\n  ) as friends_count\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981541,
                "title": "simple-and-straight-forward-using-two-select-and-union-all",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect user_id as id, sum(cnt) as num from (\\n  ( select requester_id as user_id, Count(requester_id) as cnt from RequestAccepted\\ngroup by requester_id\\norder by cnt desc)\\n\\nunion all\\n\\n ( select accepter_id as user_id, Count(accepter_id) as cnt from RequestAccepted\\ngroup by accepter_id\\norder by cnt desc\\n )\\n\\n) as a\\ngroup by user_id\\norder by num desc\\nlimit 1\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect user_id as id, sum(cnt) as num from (\\n  ( select requester_id as user_id, Count(requester_id) as cnt from RequestAccepted\\ngroup by requester_id\\norder by cnt desc)\\n\\nunion all\\n\\n ( select accepter_id as user_id, Count(accepter_id) as cnt from RequestAccepted\\ngroup by accepter_id\\norder by cnt desc\\n )\\n\\n) as a\\ngroup by user_id\\norder by num desc\\nlimit 1\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981173,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, sum(q) as num from \\n  (select requester_id as id, count(*) as q from RequestAccepted group by requester_id\\n  union all \\n  select accepter_id as id, count(*) as q from RequestAccepted group by accepter_id) x\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, sum(q) as num from \\n  (select requester_id as id, count(*) as q from RequestAccepted group by requester_id\\n  union all \\n  select accepter_id as id, count(*) as q from RequestAccepted group by accepter_id) x\\ngroup by id\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978892,
                "title": "long-query-but-quick-and-easy-to-understand-564ms",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\nselect id, sum(num) as num\\r\\nfrom(\\r\\nselect (requester_id) as id,\\r\\n        count(requester_id) num\\r\\nfrom RequestAccepted\\r\\ngroup by requester_id\\r\\nunion all\\r\\nselect accepter_id,\\r\\n       count(accepter_id)\\r\\nfrom RequestAccepted\\r\\ngroup by accepter_id ) a\\r\\ngroup by id \\r\\nhaving num = (select max(num) as max\\r\\nfrom(\\r\\nselect id, sum(num) as num\\r\\nfrom(\\r\\nselect (requester_id) as id,\\r\\n        count(requester_id) num\\r\\nfrom RequestAccepted\\r\\ngroup by requester_id\\r\\nunion all\\r\\nselect accepter_id,\\r\\n       count(accepter_id)\\r\\nfrom RequestAccepted\\r\\ngroup by accepter_id ) a\\r\\ngroup by id) b)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\nselect id, sum(num) as num\\r\\nfrom(\\r\\nselect (requester_id) as id,\\r\\n        count(requester_id) num\\r\\nfrom RequestAccepted\\r\\ngroup by requester_id\\r\\nunion all\\r\\nselect accepter_id,\\r\\n       count(accepter_id)\\r\\nfrom RequestAccepted\\r\\ngroup by accepter_id ) a\\r\\ngroup by id \\r\\nhaving num = (select max(num) as max\\r\\nfrom(\\r\\nselect id, sum(num) as num\\r\\nfrom(\\r\\nselect (requester_id) as id,\\r\\n        count(requester_id) num\\r\\nfrom RequestAccepted\\r\\ngroup by requester_id\\r\\nunion all\\r\\nselect accepter_id,\\r\\n       count(accepter_id)\\r\\nfrom RequestAccepted\\r\\ngroup by accepter_id ) a\\r\\ngroup by id) b)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978861,
                "title": "simplest-solution-union-all-neatcode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe just need to count the frequesncy of a particular id in both requester_id column and accepter_id column. This can be done, if we get these two columns combined as 1 column (1 below the other). hence, we use UNION ALL.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing UNION ALL, we get all the entries of accepter_id and requester_id 1 below the other in a single column. Now, we can just do a group by id and Count(*).\\nTo get the id with maximum number of friends, use ORDER BY and LIMIT.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nWITH CTE AS\\n(\\n    (\\n        SELECT\\n            accepter_id AS id\\n        FROM\\n            RequestAccepted\\n    )\\n    UNION ALL\\n    (\\n        SELECT\\n            requester_id AS id\\n        FROM\\n            RequestAccepted\\n    )\\n)\\n\\nSELECT\\n    id,\\n    COUNT(*) AS num\\nFROM\\n    CTE\\nGROUP BY\\n    1\\nORDER BY\\n    2 DESC\\nLIMIT\\n    1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH CTE AS\\n(\\n    (\\n        SELECT\\n            accepter_id AS id\\n        FROM\\n            RequestAccepted\\n    )\\n    UNION ALL\\n    (\\n        SELECT\\n            requester_id AS id\\n        FROM\\n            RequestAccepted\\n    )\\n)\\n\\nSELECT\\n    id,\\n    COUNT(*) AS num\\nFROM\\n    CTE\\nGROUP BY\\n    1\\nORDER BY\\n    2 DESC\\nLIMIT\\n    1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973538,
                "title": "mysql-union-all-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, SUM(num) num\\nFROM (\\n    SELECT requester_id AS id, COUNT(*) AS num\\n    FROM RequestAccepted\\n    GROUP BY requester_id\\n    UNION ALL\\n    SELECT accepter_id AS id, COUNT(*) AS num\\n    FROM RequestAccepted\\n    GROUP BY accepter_id\\n) AS subquery\\nGROUP BY id\\nORDER BY SUM(num) DESC\\nLIMIT 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, SUM(num) num\\nFROM (\\n    SELECT requester_id AS id, COUNT(*) AS num\\n    FROM RequestAccepted\\n    GROUP BY requester_id\\n    UNION ALL\\n    SELECT accepter_id AS id, COUNT(*) AS num\\n    FROM RequestAccepted\\n    GROUP BY accepter_id\\n) AS subquery\\nGROUP BY id\\nORDER BY SUM(num) DESC\\nLIMIT 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972114,
                "title": "mysql-bruteforce-approach",
                "content": "\\n# Code\\n```\\nwith cte as\\n(\\n    (\\n        select requester_id as id, (\\n            count(*) + (select count(*) from RequestAccepted where accepter_id = id)\\n        ) as num from RequestAccepted\\n        group by requester_id\\n    ) \\n    union\\n    (\\n        select accepter_id as id, (\\n            count(*) + (select count(*) from RequestAccepted where requester_id = id)\\n        ) as num from RequestAccepted\\n        group by accepter_id\\n    ) \\n)\\nselect * from cte\\n order by num desc\\n limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as\\n(\\n    (\\n        select requester_id as id, (\\n            count(*) + (select count(*) from RequestAccepted where accepter_id = id)\\n        ) as num from RequestAccepted\\n        group by requester_id\\n    ) \\n    union\\n    (\\n        select accepter_id as id, (\\n            count(*) + (select count(*) from RequestAccepted where requester_id = id)\\n        ) as num from RequestAccepted\\n        group by accepter_id\\n    ) \\n)\\nselect * from cte\\n order by num desc\\n limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3964532,
                "title": "easy-to-understand-union-approach",
                "content": "# Intuition\\n<Use UNION to combine requester ID with accepter ID>\\n\\n# Approach\\n\\nNote that. In this problem, a direct connection between two individuals only occurs once. Will need to get the distinct combinations if a given connection (eg, from 2 to 3) can happen muitiple times.\\n\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT requester_id as id, count(*) as num\\nFROM(\\nSELECT requester_id, accepter_id \\nFROM RequestAccepted\\nUNION\\nSELECT accepter_id, requester_id \\nFROM RequestAccepted) as statistics\\nGROUP BY requester_id\\nORDER BY num DESC\\nLIMIT 1\\n;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT requester_id as id, count(*) as num\\nFROM(\\nSELECT requester_id, accepter_id \\nFROM RequestAccepted\\nUNION\\nSELECT accepter_id, requester_id \\nFROM RequestAccepted) as statistics\\nGROUP BY requester_id\\nORDER BY num DESC\\nLIMIT 1\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3959714,
                "title": "simple-solution-with-cte",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nwith list1 as \\n(\\n    select requester_id from RequestAccepted \\n    union all \\n    select accepter_id  from RequestAccepted\\n)\\n,list2 as (\\nselect requester_id id , count(requester_id) num\\nfrom list1\\ngroup by REQUESTER_ID )\\n,list3 as (\\nselect id,num,row_number() over (  order by num desc  ) rn \\nfrom list2 )\\nselect id,num from list3 where rn=1\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nwith list1 as \\n(\\n    select requester_id from RequestAccepted \\n    union all \\n    select accepter_id  from RequestAccepted\\n)\\n,list2 as (\\nselect requester_id id , count(requester_id) num\\nfrom list1\\ngroup by REQUESTER_ID )\\n,list3 as (\\nselect id,num,row_number() over (  order by num desc  ) rn \\nfrom list2 )\\nselect id,num from list3 where rn=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3956952,
                "title": "602-friend-requests-ii-who-has-the-most-friends-sql",
                "content": "# 602. Friend Requests II: Who Has the Most Friends.sql\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\nSELECT requester_id AS id, \\r\\n    ( SELECT COUNT(*) \\r\\n    FROM RequestAccepted \\r\\n    WHERE requester_id = id OR accepter_id = id\\r\\n    ) AS num\\r\\n    \\r\\nFROM RequestAccepted \\r\\nGROUP BY requester_id\\r\\n\\r\\nUNION\\r\\n\\r\\nSELECT accepter_id as id,\\r\\n    ( SELECT COUNT(*) \\r\\n    FROM RequestAccepted  \\r\\n    WHERE requester_id = id OR accepter_id = id\\r\\n    ) AS num\\r\\nFROM RequestAccepted\\r\\nGROUP BY accepter_id\\r\\n\\r\\nORDER BY num DESC LIMIT 1\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\nSELECT requester_id AS id, \\r\\n    ( SELECT COUNT(*) \\r\\n    FROM RequestAccepted \\r\\n    WHERE requester_id = id OR accepter_id = id\\r\\n    ) AS num\\r\\n    \\r\\nFROM RequestAccepted \\r\\nGROUP BY requester_id\\r\\n\\r\\nUNION\\r\\n\\r\\nSELECT accepter_id as id,\\r\\n    ( SELECT COUNT(*) \\r\\n    FROM RequestAccepted  \\r\\n    WHERE requester_id = id OR accepter_id = id\\r\\n    ) AS num\\r\\nFROM RequestAccepted\\r\\nGROUP BY accepter_id\\r\\n\\r\\nORDER BY num DESC LIMIT 1\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3956132,
                "title": "union-all-orderby-and-limit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, sum(tot) as num FROM(\\nSELECT requester_id as id,COUNT(distinct accepter_id) as tot FROM RequestAccepted r1\\ngroup by 1\\nUNION ALL\\nSELECT accepter_id as id,count(distinct requester_id) as tot FROM RequestAccepted r2\\ngroup by 1\\n)a\\nGROUP BY 1\\norder by 2 desc\\nlimit 1\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, sum(tot) as num FROM(\\nSELECT requester_id as id,COUNT(distinct accepter_id) as tot FROM RequestAccepted r1\\ngroup by 1\\nUNION ALL\\nSELECT accepter_id as id,count(distinct requester_id) as tot FROM RequestAccepted r2\\ngroup by 1\\n)a\\nGROUP BY 1\\norder by 2 desc\\nlimit 1\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3949941,
                "title": "simple-easy-mssql-solutiom",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUNION ---> SUM WINDOW FUNCTION ---> CTE ---> MAX OUTPUT\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\n\\nwith cte as (\\nselect *,sum(cnt) over(partition by id order by id) totalfrnds from (\\nselect requester_id id, count(*) cnt  from RequestAccepted\\ngroup by requester_id\\n\\n\\nunion all \\n\\nselect accepter_id id, count(*) cnt from RequestAccepted\\ngroup by accepter_id\\n)a)\\n\\nselect TOP 1 id, totalfrnds num from cte where totalfrnds  = (select MAX(totalfrnds) from cte) \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\nwith cte as (\\nselect *,sum(cnt) over(partition by id order by id) totalfrnds from (\\nselect requester_id id, count(*) cnt  from RequestAccepted\\ngroup by requester_id\\n\\n\\nunion all \\n\\nselect accepter_id id, count(*) cnt from RequestAccepted\\ngroup by accepter_id\\n)a)\\n\\nselect TOP 1 id, totalfrnds num from cte where totalfrnds  = (select MAX(totalfrnds) from cte) \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947321,
                "title": "what-s-wrong-with-this-solution",
                "content": "with cte_1 as\\r\\n(select accepter_id, count(*) as cnt1 from RequestAccepted \\r\\ngroup by accepter_id) , cte_2 as \\r\\n(select requester_id, count(*) as cnt2 from RequestAccepted \\r\\ngroup by requester_id)\\r\\nselect (aa.cnt1 + bb.cnt2) as num, nvl(aa.accepter_id, bb.requester_id) as id from cte_1 aa inner join cte_2 bb on\\r\\naa.accepter_id = bb.requester_id\\r\\norder by (aa.cnt1 + bb.cnt2) desc limit 1\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "with cte_1 as\\r\\n(select accepter_id, count(*) as cnt1 from RequestAccepted \\r\\ngroup by accepter_id) , cte_2 as \\r\\n(select requester_id, count(*) as cnt2 from RequestAccepted \\r\\ngroup by requester_id)\\r\\nselect (aa.cnt1 + bb.cnt2) as num, nvl(aa.accepter_id, bb.requester_id) as id from cte_1 aa inner join cte_2 bb on\\r\\naa.accepter_id = bb.requester_id\\r\\norder by (aa.cnt1 + bb.cnt2) desc limit 1\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946264,
                "title": "most-connected-user-friend-request-activity",
                "content": "# Intuition\\nThis query aims to identify the user who is the most connected based on their friend request activity. It calculates the total number of unique users who sent or received friend requests for a given user and returns the user with the highest count.\\n# Approach\\n- The query uses a UNION ALL operation to combine the requester IDs and accepter IDs from the RequestAccepted table into a single column.\\n- The subquery in the FROM clause retrieves all the unique user IDs (requester or accepter) who were involved in friend request activities.\\n- The outer query groups the results by user ID and uses the COUNT(*) function to calculate the total number of friend request activities for each user.\\n- The results are ordered in descending order of the count and limited to the top user with the most connections.\\n# Complexity\\n- Time complexity:\\nThe time complexity is O(n), where n is the total number of rows in the RequestAccepted table. The UNION ALL operation and grouping by user ID involve linear scans through the data.\\n- Space complexity:\\nThe space complexity is O(m), where m is the number of distinct users involved in friend request activities. This accounts for the storage of intermediate results and temporary data structures.\\n# Code\\n```\\nSELECT  id, COUNT(*) AS num\\nFROM\\n(SELECT requester_id AS id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id AS id\\nFROM RequestAccepted) AS a\\nGROUP BY id\\nORDER BY num DESC LIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT  id, COUNT(*) AS num\\nFROM\\n(SELECT requester_id AS id\\nFROM RequestAccepted \\nUNION ALL\\nSELECT accepter_id AS id\\nFROM RequestAccepted) AS a\\nGROUP BY id\\nORDER BY num DESC LIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944708,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement be\\nwith cte as(\\nselect accepter_id as id, count(requester_id) as num from requestaccepted group by accepter_id\\nunion all\\nselect requester_id as id, count(accepter_id) as num from requestaccepted group by requester_id)\\n select id,sum(num) as num from cte\\n group by id\\n order by sum(num) desc\\n limit 1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement be\\nwith cte as(\\nselect accepter_id as id, count(requester_id) as num from requestaccepted group by accepter_id\\nunion all\\nselect requester_id as id, count(accepter_id) as num from requestaccepted group by requester_id)\\n select id,sum(num) as num from cte\\n group by id\\n order by sum(num) desc\\n limit 1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944707,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement be\\nwith cte as(\\nselect accepter_id as id, count(requester_id) as num from requestaccepted group by accepter_id\\nunion all\\nselect requester_id as id, count(accepter_id) as num from requestaccepted group by requester_id)\\n select id,sum(num) as num from cte\\n group by id\\n order by sum(num) desc\\n limit 1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement be\\nwith cte as(\\nselect accepter_id as id, count(requester_id) as num from requestaccepted group by accepter_id\\nunion all\\nselect requester_id as id, count(accepter_id) as num from requestaccepted group by requester_id)\\n select id,sum(num) as num from cte\\n group by id\\n order by sum(num) desc\\n limit 1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943580,
                "title": "beginner-friendly-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith friend_cnt as (\\n    select requester_id ID , count(requester_id) c_num from RequestAccepted\\n    group by ID\\n    union all\\n    select accepter_id ID , count(accepter_id) c_num from RequestAccepted \\n    group by ID ) ,\\ncombined_friend as (\\n    select ID , sum(c_num) as num from friend_cnt \\n    group by ID   )\\n\\nselect ID , num\\nfrom combined_friend\\norder by num desc LIMIT 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith friend_cnt as (\\n    select requester_id ID , count(requester_id) c_num from RequestAccepted\\n    group by ID\\n    union all\\n    select accepter_id ID , count(accepter_id) c_num from RequestAccepted \\n    group by ID ) ,\\ncombined_friend as (\\n    select ID , sum(c_num) as num from friend_cnt \\n    group by ID   )\\n\\nselect ID , num\\nfrom combined_friend\\norder by num desc LIMIT 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3941888,
                "title": "solution-using-value-counts-and-concat",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef most_friends(request_accepted: pd.DataFrame) -> pd.DataFrame:\\n    friends_1 = request_accepted[\\'requester_id\\'].value_counts().reset_index().rename(columns={\\'requester_id\\':\\'id\\'})\\n    friends_2 = request_accepted[\\'accepter_id\\'].value_counts().reset_index().rename(columns={\\'accepter_id\\':\\'id\\'})\\n    \\n    concat_df = pd.concat([friends_1, friends_2], axis=0).rename(columns={\\'count\\':\\'num\\'})\\n    result_df = concat_df.groupby(\\'id\\')[\\'num\\'].sum().reset_index()\\n    \\n    return result_df[result_df[\\'num\\'] == result_df[\\'num\\'].max()]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef most_friends(request_accepted: pd.DataFrame) -> pd.DataFrame:\\n    friends_1 = request_accepted[\\'requester_id\\'].value_counts().reset_index().rename(columns={\\'requester_id\\':\\'id\\'})\\n    friends_2 = request_accepted[\\'accepter_id\\'].value_counts().reset_index().rename(columns={\\'accepter_id\\':\\'id\\'})\\n    \\n    concat_df = pd.concat([friends_1, friends_2], axis=0).rename(columns={\\'count\\':\\'num\\'})\\n    result_df = concat_df.groupby(\\'id\\')[\\'num\\'].sum().reset_index()\\n    \\n    return result_df[result_df[\\'num\\'] == result_df[\\'num\\'].max()]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3940120,
                "title": "no-of-max-friends",
                "content": "# Intuition\\r\\nUnion and Group by\\r\\n\\r\\nwith max_friend_data as\\r\\n(\\r\\nselect id, sum(no_of_frnds) as tot_friends from\\r\\n(\\r\\n select requester_id as id, count(1) no_of_frnds\\r\\n  from RequestAccepted\\r\\n  group by requester_id\\r\\n  \\r\\n  UNION ALL\\r\\n \\r\\n select accepter_id as id, count(1) no_of_frnds\\r\\n  from RequestAccepted\\r\\n  group by accepter_id\\r\\n )\\r\\n group by id\\r\\n)\\r\\nselect id, tot_friends as num\\r\\nfrom max_friend_data\\r\\nwhere tot_friends =\\r\\n(\\r\\n  select max(tot_friends) from  max_friend_data\\r\\n)\\r\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "# Intuition\\r\\nUnion and Group by\\r\\n\\r\\nwith max_friend_data as\\r\\n(\\r\\nselect id, sum(no_of_frnds) as tot_friends from\\r\\n(\\r\\n select requester_id as id, count(1) no_of_frnds\\r\\n  from RequestAccepted\\r\\n  group by requester_id\\r\\n  \\r\\n  UNION ALL\\r\\n \\r\\n select accepter_id as id, count(1) no_of_frnds\\r\\n  from RequestAccepted\\r\\n  group by accepter_id\\r\\n )\\r\\n group by id\\r\\n)\\r\\nselect id, tot_friends as num\\r\\nfrom max_friend_data\\r\\nwhere tot_friends =\\r\\n(\\r\\n  select max(tot_friends) from  max_friend_data\\r\\n)\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3939338,
                "title": "union-all-is-a-most-simpler-way-to-solve-this",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT ID, COUNT(ID) AS NUM FROM(\\n    SELECT REQUESTER_ID AS ID\\n    FROM REQUESTACCEPTED\\nUNION ALL\\nSELECT ACCEPTER_ID\\n    FROM REQUESTACCEPTED\\n) AS G\\nGROUP BY ID\\nORDER BY NUM DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT ID, COUNT(ID) AS NUM FROM(\\n    SELECT REQUESTER_ID AS ID\\n    FROM REQUESTACCEPTED\\nUNION ALL\\nSELECT ACCEPTER_ID\\n    FROM REQUESTACCEPTED\\n) AS G\\nGROUP BY ID\\nORDER BY NUM DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3934655,
                "title": "beginner-friendly-no-cte-only-union-step-by-step",
                "content": "\\n```sql\\n# Write your MySQL query statement below\\nSELECT\\n    id\\n    , COUNT(*) AS num\\nFROM (\\n    SELECT requester_id AS id FROM RequestAccepted\\n    UNION ALL\\n    SELECT accepter_id FROM RequestAccepted\\n) t\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\n# Write your MySQL query statement below\\nSELECT\\n    id\\n    , COUNT(*) AS num\\nFROM (\\n    SELECT requester_id AS id FROM RequestAccepted\\n    UNION ALL\\n    SELECT accepter_id FROM RequestAccepted\\n) t\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931289,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect id, count(id) as num\\nfrom (SELECT requester_id as id \\nFROM RequestAccepted\\nUNION ALL\\nSELECT accepter_id\\nFROM RequestAccepted) x\\ngroup by id \\norder by num desc \\nlimit 1 \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect id, count(id) as num\\nfrom (SELECT requester_id as id \\nFROM RequestAccepted\\nUNION ALL\\nSELECT accepter_id\\nFROM RequestAccepted) x\\ngroup by id \\norder by num desc \\nlimit 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3926109,
                "title": "cte-dividing-into-two-cte-s-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith cte as(\\n          select requester_id as id from RequestAccepted\\n          union all\\n          select accepter_id  as id from RequestAccepted\\n           ),\\n      abc as(\\n\\n          select id ,count(*) num from cte group by id\\n           )\\n\\nselect id,num from abc where num =(select max(num) from abc)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as(\\n          select requester_id as id from RequestAccepted\\n          union all\\n          select accepter_id  as id from RequestAccepted\\n           ),\\n      abc as(\\n\\n          select id ,count(*) num from cte group by id\\n           )\\n\\nselect id,num from abc where num =(select max(num) from abc)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3922260,
                "title": "no-join-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUltimately you need to only count the number of users\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Combine both the tables based on requester_id and accepter_id\\n2. FInd the counts of all ids.\\n3. Select the id with max count\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nwith cte (id,n) as \\n(\\n  select id,count(1) as n from \\n(select requester_id as id,accept_date from RequestAccepted \\nunion all\\nselect accepter_id,accept_date from RequestAccepted)  a group by id\\n)\\n\\n\\n\\nselect id,n as num from cte\\n where n=(select max(n) from cte)\\n\\n \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith cte (id,n) as \\n(\\n  select id,count(1) as n from \\n(select requester_id as id,accept_date from RequestAccepted \\nunion all\\nselect accepter_id,accept_date from RequestAccepted)  a group by id\\n)\\n\\n\\n\\nselect id,n as num from cte\\n where n=(select max(n) from cte)\\n\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3921860,
                "title": "union-all-from-2-column",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, count(*) as num\\nfrom (\\n  select *\\n  from (\\n    select accepter_id as id\\n    from RequestAccepted\\n  ) as t1 union all (\\n    select requester_id as id\\n    from RequestAccepted  \\n  )\\n) as t\\ngroup by id\\norder by num desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, count(*) as num\\nfrom (\\n  select *\\n  from (\\n    select accepter_id as id\\n    from RequestAccepted\\n  ) as t1 union all (\\n    select requester_id as id\\n    from RequestAccepted  \\n  )\\n) as t\\ngroup by id\\norder by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3921637,
                "title": "group-by-outer-join",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\nGet count ot requester & accepter, then join them together where accepter = requester\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nwith requester as (\\r\\nselect requester_id, count(1) over (partition by requester_id) total_request\\r\\nfrom RequestAccepted\\r\\n),\\r\\naccepter as (\\r\\n  select accepter_id, count(1) over (partition by accepter_id) total_accept\\r\\nfrom RequestAccepted\\r\\n)\\r\\n(select distinct requester_id id, (total_request + coalesce(total_accept, 0)) num\\r\\nfrom requester r\\r\\nleft join accepter a\\r\\non requester_id = accepter_id\\r\\norder by (total_request + coalesce(total_accept, 0)) desc\\r\\nlimit 1\\r\\n)\\r\\nunion\\r\\n(select distinct accepter_id id, (coalesce(total_request, 0) + total_accept) num\\r\\nfrom requester r\\r\\nright join accepter a\\r\\non requester_id = accepter_id\\r\\norder by (coalesce(total_request, 0) + total_accept) desc\\r\\nlimit 1\\r\\n) order by num desc limit 1\\r\\n;\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nwith requester as (\\r\\nselect requester_id, count(1) over (partition by requester_id) total_request\\r\\nfrom RequestAccepted\\r\\n),\\r\\naccepter as (\\r\\n  select accepter_id, count(1) over (partition by accepter_id) total_accept\\r\\nfrom RequestAccepted\\r\\n)\\r\\n(select distinct requester_id id, (total_request + coalesce(total_accept, 0)) num\\r\\nfrom requester r\\r\\nleft join accepter a\\r\\non requester_id = accepter_id\\r\\norder by (total_request + coalesce(total_accept, 0)) desc\\r\\nlimit 1\\r\\n)\\r\\nunion\\r\\n(select distinct accepter_id id, (coalesce(total_request, 0) + total_accept) num\\r\\nfrom requester r\\r\\nright join accepter a\\r\\non requester_id = accepter_id\\r\\norder by (coalesce(total_request, 0) + total_accept) desc\\r\\nlimit 1\\r\\n) order by num desc limit 1\\r\\n;\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3920970,
                "title": "solution-assume-requester-and-accepter-are-not-sending-request-to-each-other",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect id, sum(num) as num \\nfrom (\\nselect requester_id as id, count(distinct accepter_id) as num \\nfrom RequestAccepted\\ngroup by 1\\nunion  all \\nselect accepter_id as id, count(distinct requester_id) as num \\nfrom RequestAccepted\\ngroup by 1\\n) t\\ngroup by 1\\norder by 2 desc \\nlimit 1\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect id, sum(num) as num \\nfrom (\\nselect requester_id as id, count(distinct accepter_id) as num \\nfrom RequestAccepted\\ngroup by 1\\nunion  all \\nselect accepter_id as id, count(distinct requester_id) as num \\nfrom RequestAccepted\\ngroup by 1\\n) t\\ngroup by 1\\norder by 2 desc \\nlimit 1\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3920021,
                "title": "oracle-joke",
                "content": "# Intuition\\r\\nLife is suffering or Suffering is Life?\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your PL/SQL query statement below */\\r\\nWITH\\r\\nam_1 as \\r\\n(\\r\\nSELECT accepter_id, count(*) OVER (partition by accepter_id) as amount_acc\\r\\nFROM RequestAccepted\\r\\nWHERE accept_date is not NULL\\r\\n),\\r\\nam_2 as\\r\\n(\\r\\nSELECT requester_id, count(*) OVER (partition by requester_id) as amount_req\\r\\nFROM RequestAccepted\\r\\nWHERE accept_date is not NULL\\r\\n),\\r\\nfinale as\\r\\n(\\r\\nSELECT CASE WHEN requester_id is not NULL THEN requester_id ELSE accepter_id END as id, coalesce(amount_acc, 0) + coalesce(amount_req, 0) as friends\\r\\nFROM am_1\\r\\nFULL OUTER join am_2 on accepter_id = requester_id\\r\\n)\\r\\nSELECT distinct id, friends as num\\r\\nFROM finale\\r\\nWHERE friends = ( SELECT max(friends)\\r\\n            FROM finale )\\r\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\r\\n/* Write your PL/SQL query statement below */\\r\\nWITH\\r\\nam_1 as \\r\\n(\\r\\nSELECT accepter_id, count(*) OVER (partition by accepter_id) as amount_acc\\r\\nFROM RequestAccepted\\r\\nWHERE accept_date is not NULL\\r\\n),\\r\\nam_2 as\\r\\n(\\r\\nSELECT requester_id, count(*) OVER (partition by requester_id) as amount_req\\r\\nFROM RequestAccepted\\r\\nWHERE accept_date is not NULL\\r\\n),\\r\\nfinale as\\r\\n(\\r\\nSELECT CASE WHEN requester_id is not NULL THEN requester_id ELSE accepter_id END as id, coalesce(amount_acc, 0) + coalesce(amount_req, 0) as friends\\r\\nFROM am_1\\r\\nFULL OUTER join am_2 on accepter_id = requester_id\\r\\n)\\r\\nSELECT distinct id, friends as num\\r\\nFROM finale\\r\\nWHERE friends = ( SELECT max(friends)\\r\\n            FROM finale )\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3914193,
                "title": "easy-to-under-stand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, sum(count) as num from(select requester_id as id, count(accepter_id) as count from RequestAccepted group by requester_id\\nunion all\\nselect accepter_id as id, count(requester_id) as count from RequestAccepted group by accepter_id) as a\\ngroup by id order by num desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, sum(count) as num from(select requester_id as id, count(accepter_id) as count from RequestAccepted group by requester_id\\nunion all\\nselect accepter_id as id, count(requester_id) as count from RequestAccepted group by accepter_id) as a\\ngroup by id order by num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3912240,
                "title": "simple-solution-union-all",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nwith cte\\nas\\n(\\nselect requester_id \\nfrom RequestAccepted \\nunion all\\nselect accepter_id  \\nfrom RequestAccepted )\\nselect top(1) requester_id as id, count(*)  as num\\nfrom cte\\ngroup by requester_id\\norder by num desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith cte\\nas\\n(\\nselect requester_id \\nfrom RequestAccepted \\nunion all\\nselect accepter_id  \\nfrom RequestAccepted )\\nselect top(1) requester_id as id, count(*)  as num\\nfrom cte\\ngroup by requester_id\\norder by num desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3911802,
                "title": "sql-solution-using-window-function-and-union",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nWITH cte AS\\r\\n(\\r\\n  SELECT DISTINCT requester_id\\r\\n  FROM RequestAccepted\\r\\n\\r\\n  UNION \\r\\n\\r\\n  SELECT DISTINCT accepter_id\\r\\n  FROM RequestAccepted\\r\\n)\\r\\n\\r\\nSELECT A.requester_id AS id,COUNT(*) AS num\\r\\nFROM cte A\\r\\nJOIN RequestAccepted B\\r\\nON A.requester_id = B.requester_id OR A.requester_id = B.accepter_id\\r\\nGROUP BY A.requester_id\\r\\nORDER BY num DESC\\r\\nLIMIT 1\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nWITH cte AS\\r\\n(\\r\\n  SELECT DISTINCT requester_id\\r\\n  FROM RequestAccepted\\r\\n\\r\\n  UNION \\r\\n\\r\\n  SELECT DISTINCT accepter_id\\r\\n  FROM RequestAccepted\\r\\n)\\r\\n\\r\\nSELECT A.requester_id AS id,COUNT(*) AS num\\r\\nFROM cte A\\r\\nJOIN RequestAccepted B\\r\\nON A.requester_id = B.requester_id OR A.requester_id = B.accepter_id\\r\\nGROUP BY A.requester_id\\r\\nORDER BY num DESC\\r\\nLIMIT 1\\r\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1886133,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1565953,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1568425,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1876239,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1566581,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1930238,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1573505,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1572873,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1568685,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1749374,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1886133,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1565953,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1568425,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1876239,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1566581,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1930238,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1573505,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1572873,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1568685,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            },
            {
                "id": 1749374,
                "content": [
                    {
                        "username": "bedmuthaapoorv",
                        "content": "Interviewer: Describe your SQL skills\\nMe: I am able to write some shit that does the job but I can never understand how"
                    },
                    {
                        "username": "rookieChao",
                        "content": "[[14,3,\"2016/11/27\"],\\n[16,2,\"2016/11/22\"],\\n[11,3,\"2017/01/02\"],\\n[12,17,\"2017/01/19\"],\\n[17,1,\"2016/12/12\"],[16,4,\"2016/11/01\"],[12,14,\"2017/02/22\"],[19,3,\"2016/10/28\"],[4,1,\"2017/01/13\"],[9,19,\"2016/11/13\"],[3,12,\"2017/01/11\"],[14,1,\"2017/04/05\"],[12,5,\"2016/10/25\"],[2,1,\"2017/03/10\"],[14,5,\"2017/01/14\"],[9,3,\"2016/11/15\"],[19,17,\"2017/01/20\"],[2,18,\"2016/10/23\"],[19,6,\"2017/03/28\"],[16,13,\"2016/10/28\"],[15,19,\"2016/10/03\"],[11,16,\"2017/02/10\"],[12,13,\"2016/11/28\"],[10,20,\"2017/01/02\"],[9,15,\"2017/01/01\"],[20,4,\"2017/04/05\"],[16,5,\"2016/11/23\"],[9,13,\"2017/01/21\"],[17,7,\"2016/10/01\"],[4,17,\"2016/12/07\"],[19,11,\"2017/02/14\"],[12,7,\"2016/12/21\"],[3,16,\"2016/09/29\"],[8,7,\"2017/03/01\"],[4,13,\"2017/03/14\"],[7,14,\"2017/03/16\"],[12,18,\"2016/10/09\"],[7,20,\"2016/10/20\"],[17,18,\"2016/12/14\"],[14,17,\"2017/01/23\"],[3,7,\"2017/03/02\"],[6,13,\"2016/10/21\"],[19,9,\"2016/11/16\"],[4,8,\"2017/03/22\"],[12,16,\"2017/02/01\"],[7,11,\"2017/01/09\"],[19,10,\"2017/02/11\"],[18,8,\"2017/03/18\"],[19,20,\"2016/11/11\"],[19,4,\"2017/01/13\"],[2,20,\"2016/10/02\"],[7,15,\"2017/01/03\"],[18,12,\"2016/12/08\"],[10,5,\"2016/11/29\"],[12,4,\"2017/01/04\"],[15,4,\"2017/01/08\"],[8,11,\"2016/10/15\"],[16,10,\"2017/03/25\"],[10,6,\"2016/11/03\"],[16,19,\"2016/11/15\"],[2,3,\"2017/02/03\"],[7,12,\"2017/01/01\"],[16,18,\"2016/12/30\"],[12,17,\"2017/03/23\"],[8,15,\"2016/09/29\"],[20,13,\"2016/12/15\"],[11,1,\"2017/03/31\"],[12,4,\"2016/12/24\"],[12,11,\"2016/12/16\"],[10,18,\"2017/02/11\"],[17,16,\"2016/11/07\"],[20,10,\"2017/04/09\"],[18,20,\"2016/11/08\"],[11,14,\"2016/10/25\"],[5,10,\"2016/10/11\"],[15,5,\"2017/03/26\"]]}}\\n\\n\\n(12,17) pair counts twice while the problem claims\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\nThe UNION ALL solution can't detect such senarios."
                    },
                    {
                        "username": "kevingao1136",
                        "content": "with a as\\n(select requester_id as id from request_accepted\\nunion all\\nselect accepter_id as id from request_accepted)\\n\\nselect id, count(id) as num\\nfrom a\\ngroup by id\\norder by num desc\\nlimit 1"
                    },
                    {
                        "username": "srjefers",
                        "content": "order by ... limit 1? What about if there is more than one record that has the max value? It only fits for specific models not for all of them. Also I know that instructions mentions already that there was only one value but I  highly sugget to solve it with a where subselect."
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic\\n"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Approach:\\n1.  Run two queries of select. In first select requester_id as id from table and in second query select accepter_id as id from table.\\n2.  Combine their result  with union all. Since we need to count every friend we can\\'t use union only as union only result unique values.\\n3. Store this result in cte.\\n4. From cte select id and count(*) and group by id.\\n5. Now order by count desc so we can get id with maximum friends op top.\\n6. Finally use limit 1 to find the topmost id which will have maximum number of friends."
                    },
                    {
                        "username": "YUGANUGRAHA",
                        "content": "[@gobindmishra23](/gobindmishra23) put columns requester_id and accepter_id in the same column and group by it and count it "
                    },
                    {
                        "username": "gobindmishra23",
                        "content": "whats the logic behind this\\n"
                    },
                    {
                        "username": "user6543U",
                        "content": "![image](https://assets.leetcode.com/users/user6543u/image_1570911363.png)\\n\"The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.\"\\n\\nI think this test case might be wrong :)"
                    },
                    {
                        "username": "mahajansd",
                        "content": "Test case seems to be wrong or either the evolution !!\n\n\n| requester_id | accepter_id | accept_date |\n| ------------ | ----------- | ----------- |\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 4            | 3           | 2016/06/09  |\n\nas far as my understanding goes for this problem, this test case should throw error. if not then the result of this testcase should be \n\n\n| id | num |\n| -- | -- |\n| 3  | 3   |\n\n\nand not \n| id | num |\n| -- | --- |\n| 3  | 4   |"
                    },
                    {
                        "username": "jbs100",
                        "content": "WITH t1 as\\n(\\nSELECT ID,\\nrow_number() OVER(PARTITION BY ID order by id) AS CNT FROM\\n(\\nSELECT\\nrequester_id AS ID\\nFROM request_accepted\\n\\nUNION ALL\\n\\nSELECT\\naccepter_id AS ID\\nFROM request_accepted\\n)A\\n)\\n\\nselect id, cnt as num from t1 \\nwhere cnt = (select max(cnt) from t1)\\n"
                    },
                    {
                        "username": "pmorri23",
                        "content": "I like this one, but where did you get ID, is this a global variable to find the ID of a column in order?"
                    },
                    {
                        "username": "seafish",
                        "content": "\\nwith newunion as \\n(select requester_id as id from request_accepted \\nunion  all\\nselect accepter_id as id from request_accepted) \\n\\nselect id, num \\nfrom \\n(select id,count(*) as num, rank()over(order by count(*) desc) as ranking \\nfrom newunion \\ngroup by id) \\nwhere ranking=1"
                    },
                    {
                        "username": "kshtriyadin999",
                        "content": "WITH CTE AS(\\nSELECT requester_id , accepter_id \\nFROM RequestAccepted\\nUNION ALL    \\nSELECT accepter_id , requester_id\\nFROM RequestAccepted\\n    )\\nSELECT requester_id id, count(accepter_id) num\\nFROM CTE\\ngroup by 1\\nORDER BY 2 DESC\\nLIMIT 1"
                    },
                    {
                        "username": "mythrigm",
                        "content": "Why is this not letting me submit the answer, but it runs ?\\n\\nwith req as \\n(\\n\\nselect requester_id as id ,count(distinct accepter_id) as countn\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n, acc as \\n\\n(\\nselect accepter_id as id ,count(distinct requester_id) as countnr\\nfrom RequestAccepted \\ngroup by 1\\n)\\n\\n\\nselect id, num\\nfrom\\n(select req.id, (countn + countnr) as num\\nfrom \\nreq\\njoin acc on req.id = acc.id \\n)a\\norder by num desc\\nlimit 1"
                    }
                ]
            }
        ]
    }
]