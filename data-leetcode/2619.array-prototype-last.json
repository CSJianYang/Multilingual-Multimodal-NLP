[
    {
        "title": "Array Prototype Last",
        "question_content": "Write code that enhances all arrays such that you can call the&nbsp;array.last()&nbsp;method on any array and it will return the last element. If there are no elements in the array, it should return&nbsp;-1.\nYou may assume the array is the output of&nbsp;JSON.parse.\n&nbsp;\nExample 1:\n\nInput: nums = [null, {}, 3]\nOutput: 3\nExplanation: Calling nums.last() should return the last element: 3.\n\nExample 2:\n\nInput: nums = []\nOutput: -1\nExplanation: Because there are no elements, return -1.\n\n&nbsp;\nConstraints:\n\n\tarr is a valid JSON array\n\t0 <= arr.length <= 1000",
        "solutions": [
            {
                "id": 3421043,
                "title": "array-prototype-last-level-up-your-javascript-skills-with-these-intuitive-implementations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n#### The `Array.prototype.last()` method is designed to return the last element of an array, or -1 if the array is empty. This can be useful in scenarios where you want to quickly access the last element of an array without having to write additional code to handle empty arrays.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n## Implementation 1:\\n```JS []\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```\\n```TS []\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\n```\\n\\n>  In this implementation, we use a simple if/else statement to check if the length of the input array is zero. If it is, we return -1. If it is not zero, we return the last element of the array using the `[this.length - 1]` index. This approach is straightforward and easy to understand, but may be slightly less concise than other implementations\\n\\n## Implementation 2:\\n```JS []\\nArray.prototype.last = function() {\\n  return this.length ? this[this.length - 1] : -1;\\n};\\n```\\n> In this implementation, we use a ternary operator to check if the length of the input array is truthy (non-zero). If it is, we return the last element of the array using the `[this.length - 1]` index. If it is not, we return -1. This approach is more concise than the previous implementation, and may be more readable for developers who are familiar with the ternary operator\\n\\n## Implementation 3:\\n``` JS []\\nArray.prototype.last = function() {\\n  return this.length ? this.slice(-1)[0] : -1;\\n};\\n\\n```\\n> In this implementation, we use the `Array.prototype.slice()` method to create a new array containing only the last element of the input array. We do this by passing a negative index of `-1` to the `slice()` method, which returns a new array containing only the last element. We then return the first (and only) element of this new array using the `[0]` index. If the length of the input array is zero, we return -1. This approach is more concise than the previous implementation and may be slightly more optimized, as it avoids direct indexing of the input array.\\n\\nOverall, all three implementations achieve the same goal of returning the last element of an array or -1 if the array is empty, but use slightly different approaches to accomplish this. The\\nsecond and third implementations are more concise and may be slightly more optimized than the first implementation, but all three implementations are valid and function correctly\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n\\n\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the `Array.prototype.last()` method is O(1), since all operations involved (checking the length of the array, slicing the array, and returning the first element) are constant-time operations that do not depend on the size of the input array\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the `Array.prototype.last()` method is also O(1), since we are not creating any new arrays or variables that depend on the size of the input array. The only\\nvariables used are `this` (the input array) and a constant integer value of `-1`. The `Array.prototype.slice()` method does create a new array containing only the last element of the input array, but since this new array contains only one element, its size is constant and does not depend on the size of the input array.\\n\\n\\n# Important topic to Learn\\n```\\n1. JavaScript syntax and data types\\n2. Functions and function expressions\\n3. Arrays and array methods such as `slice()`, `map()`, and `reduce()`\\n4. Prototype inheritance and the `prototype` property\\n5. The `this` keyword and how it is used in functions\\n6. Arrow functions and their differences from regular functions\\n7. Ternary operators and their syntax\\n8. JavaScript object-oriented programming (OOP) concepts such as classes and objects\\n\\n```\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```JS []\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```\n```TS []\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\n```\n```JS []\\nArray.prototype.last = function() {\\n  return this.length ? this[this.length - 1] : -1;\\n};\\n```\n``` JS []\\nArray.prototype.last = function() {\\n  return this.length ? this.slice(-1)[0] : -1;\\n};\\n\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```\\n1. JavaScript syntax and data types\\n2. Functions and function expressions\\n3. Arrays and array methods such as `slice()`, `map()`, and `reduce()`\\n4. Prototype inheritance and the `prototype` property\\n5. The `this` keyword and how it is used in functions\\n6. Arrow functions and their differences from regular functions\\n7. Ternary operators and their syntax\\n8. JavaScript object-oriented programming (OOP) concepts such as classes and objects\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407591,
                "title": "100-beat-runtime-and-memory-straightforward",
                "content": "# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this[this.length - 1] ?? -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this[this.length - 1] ?? -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3567497,
                "title": "easy-one-liner-return-this-length-0-1-this-this-length-1",
                "content": "## \\u2705\\u2705\\u2705\\u2B06\\uFE0F\\u2B06\\uFE0F\\u2B06\\uFE0F Please upvote \\u2B06\\uFE0F\\u2B06\\uFE0F\\u2B06\\uFE0F\\u2705\\u2705\\u2705\\n\\n## Approach:\\nCheck if the size of the current array object(`this`) is `zero` or not. If it\\'s `zero` return `-1` otherwise return the `last element` of the current array object.\\n\\n# Code\\n```javascript\\nArray.prototype.last = function() {\\n    return this.length===0? -1 : this[this.length - 1];\\n};\\n```\\n\\nThe above solution works for this problem. But in real world `-1` could be an array element and this prototype function returning `-1` could lead to confusion whether the array is empty or its last element is `-1`. In such cases it is recommended to return `undefined` rather than -1. Also, we should ensure `prototype.last` is not set before setting it other wise it might overwrite the previous custom implementation, if any. Below code takes care of these cases.\\n\\n```javascript\\n// Check if the \\'last\\' method already exists to avoid conflicts\\nif (!Array.prototype.last) {\\n  Array.prototype.last = function() {\\n    const length = this.length;\\n    return length===0? undefined : this[length - 1];\\n  };\\n}\\n```\\n## \\u2705\\u2705\\u2705\\u2B06\\uFE0F\\u2B06\\uFE0F\\u2B06\\uFE0F Please upvote \\u2B06\\uFE0F\\u2B06\\uFE0F\\u2B06\\uFE0F\\u2705\\u2705\\u2705\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nArray.prototype.last = function() {\\n    return this.length===0? -1 : this[this.length - 1];\\n};\\n```\n```javascript\\n// Check if the \\'last\\' method already exists to avoid conflicts\\nif (!Array.prototype.last) {\\n  Array.prototype.last = function() {\\n    const length = this.length;\\n    return length===0? undefined : this[length - 1];\\n  };\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3628431,
                "title": "array-last-explained-o-1-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo enhance all arrays with the `last()` method, we can extend the `Array` prototype in JavaScript. The method will check if the array is empty and return the last element if it exists. Otherwise, it will return `-1`.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will extend the `Array` prototype by adding a new method called `last()`. This method will be defined as follows:\\n\\n1. Check if the array\\'s length is 0.\\n2. If the length is 0, return `-1`.\\n3. Otherwise, return the last element of the array by accessing `this[this.length - 1]`.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of accessing the last element of an array is O(1), so the `last()` method will also have a time complexity of O(1).\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe `last()` method does not use any additional space, so its space complexity is O(1).\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length == 0){\\n        return -1;\\n    }\\n    return this[this.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length == 0){\\n        return -1;\\n    }\\n    return this[this.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3411850,
                "title": "javascript-full-explaination-comments-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe need to check Only 2 Condition :-\\n1. Check if the element is zero then return -1.\\n2. Else there are 1 or more elements then simply retrun element with index array length - 1.\\n\\n# Complexity\\n- Time complexity: O(1), since it simply retrieves the last element of the array using its length property and index lookup. The length property and index lookup take constant time.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1), since it does not create any additional variables or data structures that depend on the input size.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    // Check if the element is zero then return -1;\\n    if(this.length == 0){\\n        return -1;\\n    }else{ //Else there are 1 or more elements then simply return element with index array length - 1\\n        return this[this.length-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    // Check if the element is zero then return -1;\\n    if(this.length == 0){\\n        return -1;\\n    }else{ //Else there are 1 or more elements then simply return element with index array length - 1\\n        return this[this.length-1];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3418682,
                "title": "easy-to-understand-simple-solution",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3515457,
                "title": "simple-and-sort-solution-using-this-pointer-in-javascript-o-1-tc-o-1-sc",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. If we have an arr then we can easily return it\\'s last element\\n Using `arr[arr.length-1]` .\\n 1. Now the question how can we have access of array object in the Array.prototype.last?\\n 2. We can access the array object on which last method has been called using `this` Pointer in Javascript,which is bydefault present in each method of Array object.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n 1. let arr=this;\\n 2. if(arr.length==0) then -1 \\n 3. else arr[arr.length-1];\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n      let arr=this;\\n      if(arr.length==0)\\n      {\\n         return -1;\\n      }\\n      return arr[arr.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n      let arr=this;\\n      if(arr.length==0)\\n      {\\n         return -1;\\n      }\\n      return arr[arr.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3435786,
                "title": "javascript-simple-to-understand-and-implement-short-code",
                "content": "# Flow of Code\\n1. Returning the Last element as result using slice(-1) method.\\n2. If the array length is zero then return -1 as result.\\n```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this.slice(-1);\\n};\\n\\n```\\n# Other Methods for returning Last element\\n1. this[this.length-1]\\n```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this[this.length-1];\\n};\\n```\\n2. this.pop()\\n```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this.pop();\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this.slice(-1);\\n};\\n\\n```\n```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this[this.length-1];\\n};\\n```\n```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this.pop();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566791,
                "title": "java-script-solution-for-array-prototype-last-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code enhances the Array prototype by adding a last method that returns the last element of an array. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is straightforward: it checks if the array has any elements. If the array is empty (this.length === 0), it returns -1. Otherwise, it returns the last element of the array using this[this.length - 1].\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the last method is constant, O(1), because accessing the last element of an array by index takes constant time. The length of the array doesn\\'t affect the time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the code is O(1) as well, as it doesn\\'t require any additional space proportional to the size of the input array.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3409636,
                "title": "js-easy-solution",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this.pop();\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\\nBy SK Sandy solution \\u2764\\uFE0F",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length===0)\\n        return -1;\\n    return this.pop();\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566755,
                "title": "day-22-o-1-o-1-commented-examples",
                "content": "This code extends the functionality of the JavaScript Array prototype by adding a new method called `last()`. This method returns the last element of an array.\\n\\n***Here\\'s an explanation of the code of current problem:***\\n\\n```javascript\\nArray.prototype.last = function() {\\n if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n\\nThe code begins by defining a new function called `last()` and assigns it as a property of the `Array.prototype`. This means that the `last()` function will be available to all array instances in your JavaScript code.\\n\\nWithin the function, there is an `if` statement that checks if the length of the array (`this.length`) is equal to 0. If the array is empty, it means there are no elements, so the function returns -1 as an indicator that there is no last element to return.\\n\\nIf the array is not empty, the `else` block is executed. In this block, the function returns the value of the last element in the array using the index `this.length - 1`. The `this` keyword refers to the array on which the `last()` method is called.\\n\\nNow, let\\'s see some examples of how to use this `last()` method:\\n\\n```javascript\\nconst numbers = [1, 2, 3, 4, 5];\\nconsole.log(numbers.last()); // Output: 5\\n\\nconst emptyArray = [];\\nconsole.log(emptyArray.last()); // Output: -1\\n```\\n\\nIn the first example, we have an array `numbers` with elements 1, 2, 3, 4, and 5. By calling `numbers.last()`, the function will return the last element of the array, which is 5.\\n\\nIn the second example, we have an empty array `emptyArray`. Since it has no elements, calling `emptyArray.last()` will return -1 as specified in the code.\\n\\nNote that modifying built-in prototypes like `Array.prototype` can have unintended consequences and is generally not recommended unless you have a specific reason to do so.\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```javascript\\nArray.prototype.last = function() {\\n if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n\\nThe code begins by defining a new function called `last()` and assigns it as a property of the `Array.prototype`. This means that the `last()` function will be available to all array instances in your JavaScript code.\\n\\nWithin the function, there is an `if` statement that checks if the length of the array (`this.length`) is equal to 0. If the array is empty, it means there are no elements, so the function returns -1 as an indicator that there is no last element to return.\\n\\nIf the array is not empty, the `else` block is executed. In this block, the function returns the value of the last element in the array using the index `this.length - 1`. The `this` keyword refers to the array on which the `last()` method is called.\\n\\nNow, let\\'s see some examples of how to use this `last()` method:\\n\\n```\n```\\n\\nIn the first example, we have an array `numbers` with elements 1, 2, 3, 4, and 5. By calling `numbers.last()`, the function will return the last element of the array, which is 5.\\n\\nIn the second example, we have an empty array `emptyArray`. Since it has no elements, calling `emptyArray.last()` will return -1 as specified in the code.\\n\\nNote that modifying built-in prototypes like `Array.prototype` can have unintended consequences and is generally not recommended unless you have a specific reason to do so.\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3518713,
                "title": "easy-ts-js-crunch-beats-94",
                "content": "# Code\\n```ts\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if(!this.length) return -1\\n\\n    return this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```ts\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if(!this.length) return -1\\n\\n    return this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3473258,
                "title": "fastest-way-to-solve-this-question-beats-100",
                "content": "# Intuition\\nThe intuition behind this code is to provide a convenient way to access the last element of an array without manually calculating the index.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. Defines a new function called last().\\n2. Adds the last() function to the Array.prototype object.\\n3. The last() function checks the length of the array.\\n4. If the array is not empty, the function returns the last element of the array.\\n5. If the array is empty, the function returns -1.\\n6. The this keyword refers to the current array that the last() function is called on.\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length) {\\n    return this[this.length - 1];\\n  } else {\\n    return -1;\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length) {\\n    return this[this.length - 1];\\n  } else {\\n    return -1;\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406540,
                "title": "one-liner-o-1-time-space-easy-to-understand",
                "content": "TLDR:\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this.at(-1) : -1\\n};\\n\\n```\\n\\nThings to consider:\\n\\n1. Getting the length of an array is O(1).\\n2. Getting an element of an array is O(1).\\n\\nWe can therefore say:\\n*  If the array is less than size one, return -1.\\n*  Else, return the last element.\\nWe can simplify the code\\n```\\nif (cond) {\\n\\treturn x\\n} \\nelse {\\n\\treturn y\\n}\\n```\\n\\nTo a much more elegant form\\n\\n```\\nreturn cond ? x : y\\n```\\nWe can call the array and its methods by using the \\'this\\' binding.\\nWe can also use the .at() method to return the element at a certain index. Keep in mind that, when using negative numbers, it counts elements starting from the end. Therefore:\\n\\n```\\nconst arr = [1,2,3]\\n\\nconsole.log(arr.at(-1))\\n// prints 3\\n\\nconsole.log(arr[arr.length - 1])\\n// prints 3\\n```\\n\\nAll things considered, the one-liner answer is:\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this.at(-1) : -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this.at(-1) : -1\\n};\\n\\n```\n```\\nif (cond) {\\n\\treturn x\\n} \\nelse {\\n\\treturn y\\n}\\n```\n```\\nreturn cond ? x : y\\n```\n```\\nconst arr = [1,2,3]\\n\\nconsole.log(arr.at(-1))\\n// prints 3\\n\\nconsole.log(arr[arr.length - 1])\\n// prints 3\\n```\n```\\nArray.prototype.last = function() {\\n    return this.length ? this.at(-1) : -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3578249,
                "title": "the-simplest-shortest-solution-beats-93-in-runtime-and-97-in-memory",
                "content": "\\n```\\nArray.prototype.last = function() {\\n    return this.at(-1) ?? -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.at(-1) ?? -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3570815,
                "title": "simple-javascript-solution",
                "content": "\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n      return -1;\\n    } else {\\n      return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n      return -1;\\n    } else {\\n      return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566406,
                "title": "very-easy-full-explanation-what-is-the-this-keyword-beginner-friendly",
                "content": "# Introduction to the \"this\" keyword\\nLet\\'s say we create the following array:\\n```const arr = [1, 2, 3];```\\n\\nIf we use command ```arr.last();```, we should get the last element of the array, 3. You are probably familiar with being able to access information about parameters to return the desired answer, but here, instead of typing ```last(arr);```, we simply write ```arr.last();```.\\n\\nHowever, it might not immediately seem clear as to how we can get information about the array when it\\'s not a parameter. If it were a parameter, we could use the name of the parameter to get information about the array. So if I wanted to know the size of the array, and the array was passed as a parameter with name ```arr```, I could simply use ```arr.length```. But if the array is passed using ```arr.last()```, JavaScript does not let you get the length with ```arr.length```, since we did not pass the name ```arr``` as a parameter. \\n\\nWith this kind of function, we create a function with keyword ```prototype```. What this does is it allows us to get information about the array by using the ```this``` keyword. So, if we wrote the function to have a parameter named ```arr``` and we wanted to know the length of it, we write ```arr.length```, but in this function, since the array is not passed as a parameter, we write ```this.length```. So, we treat the array as if it were passed in as a parameter named ```this```! We can access information about the array in a prototype function in the same way you can do for any other function, just use the ```this``` keyword!\\n\\n# Approach\\n- If the array has length of 0, there is no last element, so return -1. Else, we want to return the last element.\\n- Note, the first element of an array has an index of 0. So if we wanted to return the first element of an array, we write ```return this[0]```. If the 2nd element, use index 1: ```return this[1]```, and so on.\\\\\\n- In general, to get the element i of an array, we use index i - 1. So, to get the last element of the array, we use index [size of array] - 1, aka index ```this.length - 1```. So we write ```return this[this.length - 1]```\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1; // if length of array is 0, return -1\\n    else return this[this.length - 1]; // else, return last element\\n};\\n```\\nYou can write simple if else statements in a different shorter way if there is only one conditional (for example, something along the lines of ```if (something) -1, else return [last element]``` only has one conditional, but ```if (something) return -1, else if (something else) return 0, else return [last element]``` has two conditionals). In the code below, you return something based on whether or not this.length === 0. A single conditional is written before the question mark, and the possible return values is written after. If the conditional is true, return the first value, if it is false, return the second value. So, it is of form ```return [conditional] ? [return value if conditional is true] : [return value if conditional is false]```. Don\\'t worry if you don\\'t understand this, the code above is just as valid as the code below, it is simply different ways of writing it.\\n```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length - 1]; \\n};\\n```\\nUPVOTE if this was helpful \\uD83C\\uDF5E\\uD83C\\uDF5E\\uD83C\\uDF5E",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```const arr = [1, 2, 3];```\n```arr.last();```\n```last(arr);```\n```arr.last();```\n```arr```\n```arr.length```\n```arr.last()```\n```arr.length```\n```arr```\n```prototype```\n```this```\n```arr```\n```arr.length```\n```this.length```\n```this```\n```this```\n```return this[0]```\n```return this[1]```\n```this.length - 1```\n```return this[this.length - 1]```\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1; // if length of array is 0, return -1\\n    else return this[this.length - 1]; // else, return last element\\n};\\n```\n```if (something) -1, else return [last element]```\n```if (something) return -1, else if (something else) return 0, else return [last element]```\n```return [conditional] ? [return value if conditional is true] : [return value if conditional is false]```\n```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length - 1]; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3533458,
                "title": "very-simple-and-easy-solution-wow-you-must-watch-solution-0-o",
                "content": "# Please upvote :)\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3438840,
                "title": "javascript-solution-with-nullish-coalescing-operator-one-liner-solution",
                "content": "```\\nArray.prototype.last = function() {\\n    return this[this.length - 1] ?? -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this[this.length - 1] ?? -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3407472,
                "title": "javascript-faster-easy-to-understand",
                "content": "* ***JavaScript***\\n\\n* ***Time Complexity :- O(1)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nArray.prototype.last = function() {\\n    \\n    if(this.length == 0)\\n    {\\n        return -1;\\n    }\\n    else\\n    {\\n        return this[this.length - 1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    \\n    if(this.length == 0)\\n    {\\n        return -1;\\n    }\\n    else\\n    {\\n        return this[this.length - 1];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406416,
                "title": "efficient-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis code defines a new method called last on the prototype of the built-in Array class. This method returns the last element of the array on which it is called, or -1 if the array is empty.\\n\\nTo achieve this, the last method first checks if the length of the array is greater than 0. If it is, it returns the last element of the array using the index arr.length - 1. If the array is empty, it returns -1.\\n# Complexity\\n- Time complexity:\\nThe time complexity of the last() method added to the Array prototype is **O(1)** because it simply returns the last element of the array, which can be accessed in constant time.\\n\\n- Space complexity:\\nThe space complexity of this code is also **O(1)** because it does not create any additional data structures or store any additional data. It simply adds a method to the existing Array prototype, which is already part of the JavaScript runtime environment.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\\n\\n**In One Line:**\\n```\\nArray.prototype.last = function() { return this.length === 0 ? -1 : this[this.length - 1]; };\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\n```\\nArray.prototype.last = function() { return this.length === 0 ? -1 : this[this.length - 1]; };\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3622772,
                "title": "arry-prototype-last-optimized-solutions-with-detailed-explanation-with-time-and-space-complexity",
                "content": "# Intuition\\n**This Method is used to return last element of an array, if array is blank then it will return -1**\\n\\n# Approach\\n**Implementation 1:**\\n```\\nArray.prototype.last = function(){\\nreturn this[this.length-1]??-1\\n}\\n```\\nThis Implementation includes nullish coalescing in javascript:\\nThe nullish coalescing (??) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\\n\\n**Implementation 2:**\\n```\\nArray.prototype.last = function(){\\nreturn this.length?this[this.length-1]:-1;\\n}\\n```\\nIn this Implementation we use ternary condition:\\nthe conditional (ternary) operator ? is used to check if the array length is truthy (non-zero) and return this[this.length - 1] (the last element) in that case. If the length is falsy (zero), it returns -1. Additionally, we check if Array.prototype.last already exists to prevent overwriting it in case it is already defined.\\n\\nThis optimized solution reduces the code to a single line inside the last() method, providing a concise and efficient implementation for retrieving the last element or returning -1 if the array is empty.\\n# Complexity\\n- Time complexity:\\n**O(1)**\\nThe time complexity of accessing an element in an array by its index (this[this.length - 1]) is O(1). It does not depend on the size of the array and remains constant.\\n\\n\\n- Space complexity:\\n**O(1)**\\nbecause it does not require any additional memory that scales with the size of the array. It only uses a constant amount of memory to store the return value (-1) and temporary variables.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this[this.length-1]?? -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function(){\\nreturn this[this.length-1]??-1\\n}\\n```\n```\\nArray.prototype.last = function(){\\nreturn this.length?this[this.length-1]:-1;\\n}\\n```\n```\\nArray.prototype.last = function() {\\n    return this[this.length-1]?? -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566850,
                "title": "1-line-easiest-solution",
                "content": "\\n# Code\\n```javascript\\nArray.prototype.last = function() {\\n  return this.length ? this[this.length-1] : -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nArray.prototype.last = function() {\\n  return this.length ? this[this.length-1] : -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566565,
                "title": "simple-java-script-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566458,
                "title": "javascript-using-this-keyword",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return (this.length >= 1) ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return (this.length >= 1) ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3565225,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function() {\\n    const len = this.length;\\n    return len === 0 ? -1 : this[len-1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    const len = this.length;\\n    return len === 0 ? -1 : this[len-1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3527044,
                "title": "javascript-very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function () {\\nif(this.length !== 0){\\n    return this[this.length - 1]\\n}else {\\n    return -1\\n}\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function () {\\nif(this.length !== 0){\\n    return this[this.length - 1]\\n}else {\\n    return -1\\n}\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495467,
                "title": "simple-explained-solution-using-this",
                "content": "We need to create a new function **\\'last()\\'** for our array objects which will return the last element of the array if it exists, else return -1.\\n\\nWhile using \\'prototype\\' we can use **\\'this\\'** to reference our object.\\n\\nSo, we simply need to create the function.\\nWe can first check if the array is empty by checking its length, if it is just return -1.\\nElse return the last element of the array by indexing our array.\\n\\nNote - **Don\\'t use pop()** method as it will remove the element from the array and modify our array, which we should avoid doing until stated. \\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n        return -1;\\n    }\\n\\n    else{\\n        return this[this.length - 1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n        return -1;\\n    }\\n\\n    else{\\n        return this[this.length - 1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3444950,
                "title": "hope-this-code-snippet-will-help-you",
                "content": "# Intuition\\nMB WEBBER\\'S\\n\\n# Approach\\nThis implementation checks if the input array is empty by using the length property. If the length is zero, we return -1. Otherwise, we retrieve the last element of the array using the [this.length - 1] index and return it. While this approach is simple and easy to follow, it may be less concise compared to other alternatives.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the **Array.prototype.last()** method is **O(1)**, since all operations involved (checking the length of the array, slicing the array, and returning the first element) are constant-time operations that do not depend on the size of the input array\\n\\n- Space complexity:\\nThe space complexity of the **Array.prototype.last()** method is also **O(1)**, since we are not creating any new arrays or variables that depend on the size of the input array. The only\\nvariables used are this (the input array) and a constant integer value of **-1**. The ***Array.prototype.slice()*** method does create a new array containing only the last element of the input array, but since this new array contains only one element, its size is constant and does not depend on the size of the input array.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3431818,
                "title": "javasript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n return this.length ? this[this.length - 1] : -1;   \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n return this.length ? this[this.length - 1] : -1;   \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3414900,
                "title": "simple-solution-beats-93",
                "content": "\\n# Approach\\nTo solve the problem, we want to add a new method called last() to all arrays in JavaScript. This method should return the last element of the array, or -1 if the array is empty.\\n\\nTo do this, we can define the last() method on the Array.prototype object. This will make the method available to all array instances in JavaScript.\\n\\nWe can define the last() method using Object.defineProperty(), which is a built-in JavaScript function that lets us add properties to an object. In this case, we want to add the last property to the Array.prototype object.\\n\\nThe last property should be defined as a getter function, which means that it will behave like a regular property, but its value will be computed dynamically each time it is accessed. The getter function should return the last element of the array if the array is not empty, or -1 if the array is empty.\\n\\nOnce we have defined the last() method on the Array.prototype object, we can use it on any array instance by calling array.last(), where array is an instance of an array. This will return the last element of the array or -1 if the array is empty.\\n\\n# Complexity\\nDefining the last() method on the Array.prototype object has a time complexity of O(1) because it only needs to be done once.\\n\\nThe space complexity of defining the last() method is also O(1), because it only requires a small amount of memory to store the getter function.\\n\\nWhen calling array.last(), the time complexity is O(1) because we are just retrieving the last element of the array, and the space complexity is also O(1) because we are not creating any new data structures.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3414790,
                "title": "easy-simple-javascript-solution",
                "content": "\\n```\\nArray.prototype.last = function() {\\n    if(this.length==0){\\n        return -1\\n    }else{\\n        return this[this.length -1]\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length==0){\\n        return -1\\n    }else{\\n        return this[this.length -1]\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3412789,
                "title": "1-liner",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3409501,
                "title": "easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n if(this.length==0) {\\n     return -1\\n }else{\\n     return this[this.length-1]\\n }  \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n if(this.length==0) {\\n     return -1\\n }else{\\n     return this[this.length-1]\\n }  \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3407192,
                "title": "best-easy-understandable-one-liner-solution",
                "content": "```\\n// Do upvote if you like\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n// Do upvote if you like\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406478,
                "title": "intuitive-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nwe know that by default this keyword points to the current object thats been binded to it hence for every array being created in its prototype object we can access it using this keyword as it has the reference of the object thats binded with it.. how ever we should not manipulate the prototype objects directly and use something like a \"Class Syntax\" for such purposes..\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length==0) return -1;\\n    return this[this.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length==0) return -1;\\n    return this[this.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100854,
                "title": "great-and-simple-solution-in-javascript-96-81",
                "content": "\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if(this.length !== 0){\\n        return this.pop()\\n    }else{\\n        return -1\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if(this.length !== 0){\\n        return this.pop()\\n    }else{\\n        return -1\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4099901,
                "title": "first-proper-leetcode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if(this.length === 0 ){\\n      return -1;\\n    }\\n\\n    return this[this.length -1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if(this.length === 0 ){\\n      return -1;\\n    }\\n\\n    return this[this.length -1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097513,
                "title": "used-at",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    return this.length >0 ? this.at(-1) : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    return this.length >0 ? this.at(-1) : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096593,
                "title": "by-using-if-condition-solve-this-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n   if(this.length==0){\\n     return -1\\n   }else{\\n     return this[this.length -1]\\n   }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n   if(this.length==0){\\n     return -1\\n   }else{\\n     return this[this.length -1]\\n   }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096253,
                "title": "2619-array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n      return this.length > 0 ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n      return this.length > 0 ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096252,
                "title": "array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if (this.length > 0) {\\n        let lastelement = this.length - 1;\\n        return this[lastelement]\\n    } else {\\n        return -1\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if (this.length > 0) {\\n        let lastelement = this.length - 1;\\n        return this[lastelement]\\n    } else {\\n        return -1\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093321,
                "title": "javascript-code-that-returns-the-last-index-of-an-array-and-returns-1-if-array-is-empty",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n  if (this.length > 0) {\\n    const lastValue = this[this.length -1];\\n    return lastValue;\\n  } else {\\n    lastValue = -1;\\n    return lastValue;\\n  }   \\n};\\n\\n\\nconst arr = [1, 2, 3];\\narr.last(); // 3\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n  if (this.length > 0) {\\n    const lastValue = this[this.length -1];\\n    return lastValue;\\n  } else {\\n    lastValue = -1;\\n    return lastValue;\\n  }   \\n};\\n\\n\\nconst arr = [1, 2, 3];\\narr.last(); // 3\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093262,
                "title": "solo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n  return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n  return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093201,
                "title": "easy-ts-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if(this.length === 0) return -1\\n    return this[this.length-1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if(this.length === 0) return -1\\n    return this[this.length-1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092752,
                "title": "easy-solution-to-find-last-element-in-array",
                "content": "# Intuition\\nEasy solution javascript!!\\n# Approach\\nAccessing last index of array \\n\\n# Complexity\\n- Time complexity:\\n- o(1) \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if(this.length==0){\\n        return -1;\\n    }\\n    else{\\n        let last = this[this.length-1];\\n    return last;\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {null|boolean|number|string|Array|Object}\\n */\\nArray.prototype.last = function() {\\n    if(this.length==0){\\n        return -1;\\n    }\\n    else{\\n        let last = this[this.length-1];\\n    return last;\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091319,
                "title": "first-beginer-challenge-on-leetcode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   return this.length > 0 ? this[this.length-1] : this.length-1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   return this.length > 0 ? this[this.length-1] : this.length-1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091197,
                "title": "array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0){\\n        return -1;\\n    }else{\\n        return this[this.length -1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0){\\n        return -1;\\n    }else{\\n        return this[this.length -1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087737,
                "title": "1-line-easiest-solution",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function(val) {\\n    return this.length ? this[this.length-1] : -1;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n# Code\\n```\\nArray.prototype.last = function(val) {\\n    return this.length ? this[this.length-1] : -1;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 4087724,
                "title": "2619-array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1;\\n    return this.pop();\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1;\\n    return this.pop();\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084097,
                "title": "array-prototype-last-solution",
                "content": "# Intuition\\nTo solve this problem, we need to extend the Array prototype by adding a last() method. This method will check if the array is empty and return -1 in that case, or return the last element if the array has elements. \\n\\n# Approach\\nWe can achieve this by defining the `last()` method on the``Array.prototype``. Within the method, we check the length of the array. If it\\'s empty (length is 0), we `return -1`. Otherwise, we return the last element using `this[this.length - 1]`.\\n\\n# Complexity\\n- Time complexity:  `O(1)` - Accessing the last element of an array is a constant-time operation.\\n\\n- Space complexity: `O(1)` - The method doesn\\'t use any extra memory proportional to the input size.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n if(this.length === 0 ){\\n   \\n       return -1;\\n      \\n}else{\\n    return this[this.length - 1];\\n      \\n\\n} \\n}\\n```\\n\\n# Other Method \\nAs for alternative ways to solve this problem,We can use `ternary conditional expression`, However the above original solution is already quite straightforward but using `ternary conditional expressoin` will help to make the code more concise.\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  return this.length === 0 ? -1 : this[this.length - 1];\\n}\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n if(this.length === 0 ){\\n   \\n       return -1;\\n      \\n}else{\\n    return this[this.length - 1];\\n      \\n\\n} \\n}\\n```\n```\\nArray.prototype.last = function() {\\n  return this.length === 0 ? -1 : this[this.length - 1];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082373,
                "title": "last-element-of-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ntake the last value from the list with this.pop() and save it in a variable. If the value is undefined it returns -1 and otherwise it returns the value.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI investigated the values it returns and improved them\\n# Complexity\\n- Time complexity: \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n3 minutes\\n- Space complexity: \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nEasy\\n# Code\\n```\\nArray.prototype.last = function() {\\n   let value = this.pop()\\n   return value === undefined ? -1 : value\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   let value = this.pop()\\n   return value === undefined ? -1 : value\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082271,
                "title": "implementation-of-the-last-function-on-javascript-the-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  const lastArrLength = this.length\\n  return lastArrLength === 0 || lastArrLength > 1000 ? -1 : this[lastArrLength - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  const lastArrLength = this.length\\n  return lastArrLength === 0 || lastArrLength > 1000 ? -1 : this[lastArrLength - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081186,
                "title": "simplejs-solution",
                "content": "\\n# Approach\\nYou need to take care of null too.\\n\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    const val = this.pop();\\n    if(val === undefined) return -1;\\n    return val;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    const val = this.pop();\\n    if(val === undefined) return -1;\\n    return val;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076987,
                "title": "approach-with-this",
                "content": "# Intuition\\nUse length property to get the last element of an array.\\n\\n# Approach\\nFirst get the array by using \\'this\\' keyword then find the last element of the array by accessing \\'length\\' property then substract 1 as array indexes are starting from 0.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    const len = this.length\\n    return len ? this[len - 1] : -1;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    const len = this.length\\n    return len ? this[len - 1] : -1;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076664,
                "title": "shortest-solution",
                "content": "# Code\\n```\\nArray.prototype.last = function () {\\n   return this.length ? this.pop() : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function () {\\n   return this.length ? this.pop() : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076261,
                "title": "javascript-arrayprototypelast",
                "content": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073064,
                "title": "o-1-solution-easy-to-understand-the-solution-beats-89-99-of-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo write  the solution you should be having clearing idea on the concept of Prototype in Javascript\\n\\nFor enhancing a specific functionality for any array we can use prototype.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWrote a function in javascript for enhancing the array prototype\\nthis inside the array points to the current object in javasctipt.\\n\\n\\nThis function will work as a inbuilt method like other methods\\n\\nso here in the solution we are checking and getting the last element from the array if it is null or not \\nIn case of null if the array is empty or not\\nthese kind of checks we are doing.\\n\\nonce after all the checks \\nas per the condition we are returning the response\\nif their is a value we are returning value\\notherwise returning -1 as per the description.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n\\nWay 1: Beats 84.96%of users with JavaScript\\n\\nArray.prototype.last = function() {\\n    // return this.nums[this.nums - 1 ];\\n  if(this[this.length-1]!=undefined){\\n      return (this[this.length-1])\\n  }\\n   else if(this[this.length-1]==null && this.length!=0){\\n        return null\\n   }\\n   return -1\\n}\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\\n```\\nWay2: One Line || Beats 94% of users \\nArray.prototype.last = function() {\\n        return this.length? (this[this.length-1]):-1\\n}\\n\\n```\\n```\\n================================\\nRuntime\\nDetails\\n43ms\\nBeats 89.99%of users with JavaScript\\n======================================\\nMemory\\nDetails\\n41.37MB\\nBeats 84.96%of users with JavaScript\\n```\\n```\\nPlease UPVOTE if you like the solution. :-)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nWay 1: Beats 84.96%of users with JavaScript\\n\\nArray.prototype.last = function() {\\n    // return this.nums[this.nums - 1 ];\\n  if(this[this.length-1]!=undefined){\\n      return (this[this.length-1])\\n  }\\n   else if(this[this.length-1]==null && this.length!=0){\\n        return null\\n   }\\n   return -1\\n}\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\n```\\nWay2: One Line || Beats 94% of users \\nArray.prototype.last = function() {\\n        return this.length? (this[this.length-1]):-1\\n}\\n\\n```\n```\\n================================\\nRuntime\\nDetails\\n43ms\\nBeats 89.99%of users with JavaScript\\n======================================\\nMemory\\nDetails\\n41.37MB\\nBeats 84.96%of users with JavaScript\\n```\n```\\nPlease UPVOTE if you like the solution. :-)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070390,
                "title": "sol1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n        return -1;\\n    }else{\\n        let val = this[this.length-1];\\n        return val;\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n        return -1;\\n    }else{\\n        let val = this[this.length-1];\\n        return val;\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070088,
                "title": "play-with-array-length",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069910,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nArray.prototype.last = function() {\\n  if (this.length) return this[this.length -1];\\n  else return -1;\\n};\\n\\n\\n/**\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nArray.prototype.last = function() {\\n  if (this.length) return this[this.length -1];\\n  else return -1;\\n};\\n\\n\\n/**\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069673,
                "title": "js-easy-solution-in-oneliner",
                "content": "# Intuition\\nso this is a class based object so we access the array as this  \\n\\n# Approach\\nusing this.lengh we get the length of the array \\nand by using ternary operator \\n\\nreturn this.lengh?this[this.length-1]:-1\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   return this.length?this[this.length-1]:-1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   return this.length?this[this.length-1]:-1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067788,
                "title": "check-empty-then-get-last-element",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (this[0] === undefined) {\\n        return -1;\\n    }\\n\\n    return this[this.length -1]\\n};\\n\\n const arr = [1, 2, 3];\\n console.log(arr.last()) // 3\\n\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (this[0] === undefined) {\\n        return -1;\\n    }\\n\\n    return this[this.length -1]\\n};\\n\\n const arr = [1, 2, 3];\\n console.log(arr.last()) // 3\\n\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067497,
                "title": "customizing-javascript-arrays-for-easy-last-element-access-with-the-last-method",
                "content": "# Intuition\\nThe intuition behind this solution is to enhance the built-in JavaScript Array object by adding a custom last() method. This method should check the length of the array and return the last element if the array is not empty, or return -1 if the array is empty. This customization allows us to conveniently access the last element of any array using the .last() method.\\n\\nApproach:\\n\\n# Approach\\nI extend the Array.prototype object by defining a new method called last().\\n\\nInside the last() method:\\n\\nI check if the length of the array (accessed with this.length) is greater than 0.\\nIf the length is greater than 0, I return the last element of the array using this[this.length - 1], which accesses the last element.\\nIf the length is 0 (indicating an empty array), I return -1 as required.\\nBy adding this custom method to Array.prototype, I make it available on all arrays, allowing us to call .last() on any array and obtain the desired result.\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length > 0) {\\n    return this[this.length - 1];\\n  }\\n  return -1;\\n};\\n\\n\\nconst arr = [];\\nconsole.log(arr.last());\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length > 0) {\\n    return this[this.length - 1];\\n  }\\n  return -1;\\n};\\n\\n\\nconst arr = [];\\nconsole.log(arr.last());\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067083,
                "title": "array-prototype-last-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n      return -1\\n    }else{\\n      return this[this.length-1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n      return -1\\n    }else{\\n      return this[this.length-1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063187,
                "title": "enhancing-array-last-function-with-all-arrays",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length> 0? this[this.length -1 ] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length> 0? this[this.length -1 ] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057078,
                "title": "yep",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length) {\\n        return this[this.length - 1]\\n    }\\n    \\n    return -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length) {\\n        return this[this.length - 1]\\n    }\\n    \\n    return -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056316,
                "title": "array-prototype-last-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n      return -1\\n    }else{\\n      return this[this.length-1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n      return -1\\n    }else{\\n      return this[this.length-1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055066,
                "title": "simple-solution",
                "content": "\\n\\n# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length -1 ] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length -1 ] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054093,
                "title": "easiest-solution-for-find-last-element-in-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   const valueField = this;\\n   return valueField?.length ? valueField?.[valueField?.length -1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   const valueField = this;\\n   return valueField?.length ? valueField?.[valueField?.length -1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053596,
                "title": "first-solved",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  return this.length > 0 ? this[this.length - 1] : -1\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  return this.length > 0 ? this[this.length - 1] : -1\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053069,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n        return -1\\n    } \\n        return this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length === 0){\\n        return -1\\n    } \\n        return this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053051,
                "title": "js-solution-1-liner",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4052345,
                "title": "this-was-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   if (this.length === 0) return -1; \\n   return this[this.length - 1] \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   if (this.length === 0) return -1; \\n   return this[this.length - 1] \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051998,
                "title": "best-of-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    }\\n    else{\\n        return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    }\\n    else{\\n        return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051661,
                "title": "a",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\nif(this.length>0){\\n return this[this.length -1]\\n}else{\\nreturn -1 \\n}}\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\nif(this.length>0){\\n return this[this.length -1]\\n}else{\\nreturn -1 \\n}}\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049708,
                "title": "pop-with-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length? this.pop(-1) : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length? this.pop(-1) : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048358,
                "title": "first-one-down",
                "content": "# Intuition\\n    You have three output cases null, -1, and the last element, brought on by 5 cases: non compliant numbers, null elements, empty arrays, non interger elements\\n\\n# Approach\\nFirst handle the null cases, one can grab the last element and test for null values, and since it returns a null i chose to keep it as a standalone if block. secondly check for numbers within constrants 0-1000. handed this an if with an and statement, if the element is non-compliant, it is a -1. Next i tested for an empty array(this should probably be one the first things i check...) if it was not empty return the last element. anything else return -1;\\n\\n# Complexity\\n- Time complexity:\\nO(1), constant time complexity, since it has no loops, it will theoretically take the same amount of time, no matter the size of the input\\n\\n- Space complexity:\\nO(1) since there are no loops, and i only access the parameter no new memory allocations are generated\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this[this.length -1] === null)\\n    {\\n        return null;\\n    }\\n    if (0 <= this.length && this.length <= 1000) {\\n        if (this.length === 0 ) {\\n            return -1;\\n        } else {\\n            return this[this.length -1];\\n        }\\n    }\\n    return -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this[this.length -1] === null)\\n    {\\n        return null;\\n    }\\n    if (0 <= this.length && this.length <= 1000) {\\n        if (this.length === 0 ) {\\n            return -1;\\n        } else {\\n            return this[this.length -1];\\n        }\\n    }\\n    return -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047186,
                "title": "a",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n return this.length !== 0 ? this[this.length - 1] : -1\\n// return Array.length!==0?Array[length-1]:-1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n return this.length !== 0 ? this[this.length - 1] : -1\\n// return Array.length!==0?Array[length-1]:-1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046681,
                "title": "java-script-solution",
                "content": "\\n\\n```\\nArray.prototype.last = function() {\\n      return this.length == 0 ? -1 :  this[this.length- 1] \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n      return this.length == 0 ? -1 :  this[this.length- 1] \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043869,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1;\\n};\\n\\n// /**\\n//  * const arr = [1, 2, 3];\\n//  * arr.last(); // 3\\n//  */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1;\\n};\\n\\n// /**\\n//  * const arr = [1, 2, 3];\\n//  * arr.last(); // 3\\n//  */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043849,
                "title": "clean-solution-with-explanation",
                "content": "# Explanation\\n**Note**: `prototype` allows you to add new properties and methods to arrays.\\n\\n`this` refers to the `arr` from the example below for instance. (It can be any array)\\n\\n# Logic\\nIf the last element of the array is undefined or it doesnt exist, return -1 or else retrun whatever the value is \\n\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   const lastArrEl = this[this.length-1]\\n    if(lastArrEl === undefined) return -1;\\n    return lastArrEl;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   const lastArrEl = this[this.length-1]\\n    if(lastArrEl === undefined) return -1;\\n    return lastArrEl;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043747,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    let l = this.length;\\n    if(l==0) return -1;\\n    else return this[l-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    let l = this.length;\\n    if(l==0) return -1;\\n    else return this[l-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043528,
                "title": "2619-array-prototype-last-solution-on-ts",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this.length === 0? -1 : this[this.length - 1]\\n};\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this.length === 0? -1 : this[this.length - 1]\\n};\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043504,
                "title": "solved-2619-array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n        if(!this.length){\\n             return -1;\\n        }\\n             return this[this.length - 1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n        if(!this.length){\\n             return -1;\\n        }\\n             return this[this.length - 1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042660,
                "title": "one-of-the-easiest-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length ==0){\\n        return -1\\n    }\\n    else{\\n        return this[this.length-1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length ==0){\\n        return -1\\n    }\\n    else{\\n        return this[this.length-1]\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042527,
                "title": "beats-95-31-of-users-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this.pop()\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this.pop()\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041353,
                "title": "javascript-1-liner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this?.length ? this[this?.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this?.length ? this[this?.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040942,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038005,
                "title": "one-line-code-using-ternary-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   return this.length? this[this.length -1] : -1;\\n\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   return this.length? this[this.length -1] : -1;\\n\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035627,
                "title": "array-last-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n\\n    return this.length < 1 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n\\n    return this.length < 1 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032742,
                "title": "array-prototype-last",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n   let result =(this.length>=1)?this[this.length-1]:-1;\\n    return result;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   let result =(this.length>=1)?this[this.length-1]:-1;\\n    return result;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4029922,
                "title": "simple-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n   if(this.length== 0){\\n       return -1;\\n   }\\n   else{\\n     \\n       return this[this.length-1];\\n   }\\n};\\n\\n\\n const arr = [1, 2, 3];\\n arr.last(); // 3\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n   if(this.length== 0){\\n       return -1;\\n   }\\n   else{\\n     \\n       return this[this.length-1];\\n   }\\n};\\n\\n\\n const arr = [1, 2, 3];\\n arr.last(); // 3\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027535,
                "title": "typescript-solution-for-beginners",
                "content": "# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1\\n    return this[this.length - 1]\\n};\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1\\n    return this[this.length - 1]\\n};\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025476,
                "title": "easy-ts-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis Keyword\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing This Keyword\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function(){\\n   return this.length > 0 ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function(){\\n   return this.length > 0 ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020249,
                "title": "i-made-it",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nArray.prototype.last = function() {\\n        if (this.length){\\n            return this[this.length-1]\\n        }\\n        else{\\n            return -1\\n        }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nArray.prototype.last = function() {\\n        if (this.length){\\n            return this[this.length-1]\\n        }\\n        else{\\n            return -1\\n        }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4019741,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this[this.length - 1];\\n    }\\n};\\n\\nconst nums = [1, 2, 3];\\nconst lastElement = nums.last();\\nconsole.log(lastElement);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this[this.length - 1];\\n    }\\n};\\n\\nconst nums = [1, 2, 3];\\nconst lastElement = nums.last();\\nconsole.log(lastElement);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012719,
                "title": "farhad-zada-one-line-javascript",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length === 0? -1 : this[this.length -1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length === 0? -1 : this[this.length -1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012327,
                "title": "array-prototype-last-in-js-o-1",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4009964,
                "title": "one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4009350,
                "title": "the-10x-approach-know-that-arrays-are-already-saved-with-length",
                "content": "# Intuition\\n\\nThe goal is to extend the native JavaScript Array prototype to include a method called `last` that returns the last element of the array. If the array is empty, it should return `-1`.\\n\\n# Approach\\n\\n1. Declare a global interface for the Array type to include the new method `last`.\\n2. Implement the `last` method on the `Array.prototype`.\\n3. If the array length is 0, return `-1`.\\n4. Otherwise, return the last element of the array.\\n\\n# Complexity\\n\\n- **Time complexity**: \\\\(O(1)\\\\)\\n  - Accessing the length of an array and its last element are constant time operations.\\n\\n- **Space complexity**: \\\\(O(1)\\\\)\\n  - No additional space is used regardless of the size of the input array.\\n\\n# Code\\n\\n```typescript\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "# Intuition\\n\\nThe goal is to extend the native JavaScript Array prototype to include a method called `last` that returns the last element of the array. If the array is empty, it should return `-1`.\\n\\n# Approach\\n\\n1. Declare a global interface for the Array type to include the new method `last`.\\n2. Implement the `last` method on the `Array.prototype`.\\n3. If the array length is 0, return `-1`.\\n4. Otherwise, return the last element of the array.\\n\\n# Complexity\\n\\n- **Time complexity**: \\\\(O(1)\\\\)\\n  - Accessing the length of an array and its last element are constant time operations.\\n\\n- **Space complexity**: \\\\(O(1)\\\\)\\n  - No additional space is used regardless of the size of the input array.\\n\\n# Code\\n\\n```typescript\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4004583,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003968,
                "title": "single-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last=function(){return 0===this.length?-1:this[this.length-1]};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last=function(){return 0===this.length?-1:this[this.length-1]};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002737,
                "title": "array-prototype-last-with-array-prototype-at",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this.at(-1) : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this.at(-1) : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002072,
                "title": "my-first-leetcode-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length) return this[this.length - 1];\\n    return -1\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length) return this[this.length - 1];\\n    return -1\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001716,
                "title": "difficult-for-me",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0){\\n        return -1;\\n    }\\n    else return this[this.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0){\\n        return -1;\\n    }\\n    else return this[this.length-1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997526,
                "title": "using-this-dot",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length >0){\\n        return (this[this.length -1]);\\n        \\n    }else{\\n        return (-1);\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length >0){\\n        return (this[this.length -1]);\\n        \\n    }else{\\n        return (-1);\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996148,
                "title": "array-return-last-element",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3993158,
                "title": "beats-96-28-of-users-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3993117,
                "title": "basic-last-method-for-javascript-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    arr_length = this.length;\\n    \\n    if (arr_length < 1){\\n        return -1;\\n    }\\n    else{\\n        return this[arr_length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    arr_length = this.length;\\n    \\n    if (arr_length < 1){\\n        return -1;\\n    }\\n    else{\\n        return this[arr_length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3991998,
                "title": "simple-one-liner",
                "content": "# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989623,
                "title": "javascript-1-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs you know **this** keyword refers to the [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) inside of the function scope and here I get an access to that object, we know as Array, by **this** keyword. \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*There is 1 things to pre-check whether the Array has elements using* **this.length > 0** *and if yes, return the last element of it by* **this[this.length-1]** as you usually get the last element of array or return **-1** if not\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length-1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3987345,
                "title": "javascript-simple-solution",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length === 0) {\\n    return -1;\\n  } else {\\n    return this[this.length - 1];\\n  }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985494,
                "title": "10-short-and-powerful-javascript-one-liners",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n    // return this.length ? this.slice(-1)[0] : -1;\\n    // return this.length ? this.at(-1) : -1;\\n    // return this.length ? this.findLast(x => true) : -1;\\n    // return this.length ? [...this].reverse()[0] : -1;\\n    // return this.length ? this.slice().reverse()[0] : -1;   \\n    // return this.length ? this.pop() : -1; \\n    // return this.length ? this.splice(-1,1)[0] : -1; \\n    // return this.length ? [...this].pop() : -1; \\n    // return this.length ? this.find((_,i,a)=>a.length==i+1) : -1; \\n}\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n    // return this.length ? this.slice(-1)[0] : -1;\\n    // return this.length ? this.at(-1) : -1;\\n    // return this.length ? this.findLast(x => true) : -1;\\n    // return this.length ? [...this].reverse()[0] : -1;\\n    // return this.length ? this.slice().reverse()[0] : -1;   \\n    // return this.length ? this.pop() : -1; \\n    // return this.length ? this.splice(-1,1)[0] : -1; \\n    // return this.length ? [...this].pop() : -1; \\n    // return this.length ? this.find((_,i,a)=>a.length==i+1) : -1; \\n}\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984728,
                "title": "o-1-solution",
                "content": "# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$ (assuming a sparse array)\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1\\n    else return this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1\\n    else return this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984646,
                "title": "array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function()\\n{\\n    if(this.length < 1)\\n    {\\n        return -1\\n    }\\n\\n    return this[this.length -1]\\n}\\n\\nconst nums =[];\\nnums.last()\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function()\\n{\\n    if(this.length < 1)\\n    {\\n        return -1\\n    }\\n\\n    return this[this.length -1]\\n}\\n\\nconst nums =[];\\nnums.last()\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982032,
                "title": "array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 44 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 41.2 MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    const lengthArr = this.length;\\n    return !lengthArr ? -1 : this[lengthArr - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    const lengthArr = this.length;\\n    return !lengthArr ? -1 : this[lengthArr - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981336,
                "title": "solution-using-ternary-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3980616,
                "title": "1-line-of-code-used-this-keyword-ternary-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse an if/else statement to check length of the array and return the value at the last position. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. check the length of the array\\n2. find the last position\\n\\nUsed a ternary operator because the if statement was simple and it provided a clear, compact line of code\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978718,
                "title": "using-if-else-statement-and-this-keyword",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length >= 1) {\\n        return this[this.length - 1];\\n    } else {\\n        return -1;\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length >= 1) {\\n        return this[this.length - 1];\\n    } else {\\n        return -1;\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976418,
                "title": "clean-js-typescript-one-liner",
                "content": "# Javascript Code\\n```\\nArray.prototype.last = function() {\\n     return this.length !== 0 ? this[this.length - 1] : -1\\n};\\n\\n```\\n\\n# Typescript Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function () {\\n    return this.length !== 0 ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport { };\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n     return this.length !== 0 ? this[this.length - 1] : -1\\n};\\n\\n```\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function () {\\n    return this.length !== 0 ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport { };\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976047,
                "title": "js-concise-solution-by-using-this-keyword",
                "content": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    }\\n    return this[this.length - 1];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    }\\n    return this[this.length - 1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976026,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3974894,
                "title": "simple-javascript-solotion",
                "content": "\\n```\\nArray.prototype.last = function() {\\nif(this.length == 0){\\n    return -1;\\n}\\nelse{\\n    return this[this.length-1]\\n}\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\nif(this.length == 0){\\n    return -1;\\n}\\nelse{\\n    return this[this.length-1]\\n}\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3960738,
                "title": "simple-1-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length !== 0 ? this[this.length - 1] :  -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length !== 0 ? this[this.length - 1] :  -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3958195,
                "title": "simple-ts-solution",
                "content": "Simple TS solution with low memory usage.\\n\\n# Code\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (!this.length) return -1;\\n\\n    return this.at(-1);\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    if (!this.length) return -1;\\n\\n    return this.at(-1);\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3953872,
                "title": "2619-array-prototype-last",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (!this.length) return -1;\\n    return this[this.length - 1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (!this.length) return -1;\\n    return this[this.length - 1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950352,
                "title": "one-line-compare",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length == 0 ? -1 : this[this.length - 1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3949645,
                "title": "oneliner-ternary",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946063,
                "title": "my-solution-maybe-there-s-a-quicker-way",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length === 0) return -1;\\n\\n    return this[this.length - 1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length === 0) return -1;\\n\\n    return this[this.length - 1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944926,
                "title": "simple-1-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length > 0 ? this[this.length - 1] : -1\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944391,
                "title": "return-last-item-using-array-length",
                "content": "# Intuition\\n<!-- Use array.length to return last index. -->\\n\\n# Approach\\n<!-- Return array[array.length-1]. -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n  if (this.length > 0) return this[this.length - 1];\\n  return -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n  if (this.length > 0) return this[this.length - 1];\\n  return -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3940868,
                "title": "simple-solution-using-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Simply find the length of object if it is 0 then return -1 otherwise return last element of object\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length == 0)\\n    return -1\\n    else\\n    return this[this.length -1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length == 0)\\n    return -1\\n    else\\n    return this[this.length -1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3939987,
                "title": "js-solution",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length -1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length -1]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938409,
                "title": "at",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this.at(-1);\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) {\\n        return -1;\\n    } else {\\n        return this.at(-1);\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938104,
                "title": "js",
                "content": "<!-- # Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n<!-- this is prototype function -->\\nArray.prototype.last = function() {\\n <!-- if array.length is eqal to 0 then -1 -->\\n<!-- here this.lenth cause its an prototype funtion -->\\n\\n    if (this.length === 0) {\\n        return -1;\\n    }\\n\\n    return this[this.length-1];\\n};\\n\\n\\n<!-- Below one is input Array -->\\n\\n// Test the new method\\n// const arr1 = [1, 2, 3, 4, 5];\\n// const arr2 = [];\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n<!-- this is prototype function -->\\nArray.prototype.last = function() {\\n <!-- if array.length is eqal to 0 then -1 -->\\n<!-- here this.lenth cause its an prototype funtion -->\\n\\n    if (this.length === 0) {\\n        return -1;\\n    }\\n\\n    return this[this.length-1];\\n};\\n\\n\\n<!-- Below one is input Array -->\\n\\n// Test the new method\\n// const arr1 = [1, 2, 3, 4, 5];\\n// const arr2 = [];\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938038,
                "title": "incorrect-accepted-answear",
                "content": "\\n```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this[this.length - 1] !== undefined ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ndeclare global {\\n    interface Array<T> {\\n        last(): T | -1;\\n    }\\n}\\n\\nArray.prototype.last = function() {\\n    return this[this.length - 1] !== undefined ? this[this.length - 1] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\nexport {};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937504,
                "title": "using-function-constructor-and-ternary-operator-used-to-solve-this-problem",
                "content": "# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1]  : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length-1]  : -1;\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3933075,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n Array.prototype.last = function() {\\n    if(!this.length){\\n    return -1\\n} else{\\n    return this[this.length - 1]\\n    \\n    }\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\n Array.prototype.last = function() {\\n    if(!this.length){\\n    return -1\\n} else{\\n    return this[this.length - 1]\\n    \\n    }\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3932151,
                "title": "2619-array-prototype-last",
                "content": "\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1;\\n\\n    return this[this.length -1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length === 0) return -1;\\n\\n    return this[this.length -1];\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931260,
                "title": "best-solution-with-explanation",
                "content": "`code`# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function(nums) {\\n    if (this.length === 0) { // here this is get value from arr\\n      return -1;\\n    } else {\\n      return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function(nums) {\\n    if (this.length === 0) { // here this is get value from arr\\n      return -1;\\n    } else {\\n      return this[this.length - 1];\\n    }\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3930874,
                "title": "1-string-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this.at(-1);\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length === 0 ? -1 : this.at(-1);\\n};\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3930279,
                "title": "easy-one-liner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCheck if array has any elements \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGet length of array and use ternary operator to return desired output\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    let result = this.length ? this[this.length - 1] : -1\\n    return result; \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    let result = this.length ? this[this.length - 1] : -1\\n    return result; \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3928850,
                "title": "used-pop-just-a-different-and-probably-ineficient-way-but-there-it-is",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs a beginner, I had difficult to remember that when we are creating prototype methods we have to use the this keyword, but I knew I could use the method Pop to find the last number. I already saw that most people uses the index for displaying the last number, but since I did it differently I am posting.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI started by testing if the length was a falsy number by using (!this.length), and if it is, just return the -1, then added the pop function otherwise. The code could be more clean if I just used it as a ternary operator.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nI still don\\'t know how to do it.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nNeither this sorry.\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(!this.length) { \\n    return -1;\\n    } else {\\n        return this.pop();\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(!this.length) { \\n    return -1;\\n    } else {\\n        return this.pop();\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3926828,
                "title": "one-line-solution",
                "content": "# Code\\n```\\nArray.prototype.last = function () {\\n    return this.length === 0 ? -1 : this.slice(-1)[0]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function () {\\n    return this.length === 0 ? -1 : this.slice(-1)[0]\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3925365,
                "title": "at",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n        if (this.length === 0) {\\n      return -1\\n    }\\n    else {\\n      return this.at(-1)\\n    }\\n};\\n\\nconst arr = [1, 2, 3];\\narr.last(); // 3\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n        if (this.length === 0) {\\n      return -1\\n    }\\n    else {\\n      return this.at(-1)\\n    }\\n};\\n\\nconst arr = [1, 2, 3];\\narr.last(); // 3\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3925302,
                "title": "very-esgy-solution-2-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if(this.length===0){\\n        return -1;\\n    }\\n    else{\\n        return this[this.length-1];\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if(this.length===0){\\n        return -1;\\n    }\\n    else{\\n        return this[this.length-1];\\n    }\\n    \\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3924384,
                "title": "easy-simple-javascript-solution-beats-over-95",
                "content": "# Intuition\\nIf there is an element in the function, return the length of the array. Else, return -1.\\n\\n# Approach\\nIf the length of the function does not equal 0, return the last element by finding the position of the element by length of the array - 1. Else return -1.\\n\\n# Complexity\\nTime complexity:\\nRuntime 43 ms Beats 95.35%\\n\\nSpace complexity:\\nMemory 40.9 MB Beats 98.16%\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    if (this.length != 0) {\\n        return (this[this.length - 1])\\n        }\\n    else {\\n        return (-1)\\n        }\\n    }\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    if (this.length != 0) {\\n        return (this[this.length - 1])\\n        }\\n    else {\\n        return (-1)\\n        }\\n    }\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923822,
                "title": "hehe",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    let x = this.length;\\n    return  x ? this[ x - 1 ] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    let x = this.length;\\n    return  x ? this[ x - 1 ] : -1\\n};\\n\\n/**\\n * const arr = [1, 2, 3];\\n * arr.last(); // 3\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3921504,
                "title": "js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nArray.prototype.last = function() {\\n    return this.length ? this[this.length - 1] : -1\\n};\\n\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1861008,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1861988,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1906958,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1863952,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2053181,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1862247,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2060720,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2023097,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1906876,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1995731,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1861008,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1861988,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1906958,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1863952,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2053181,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1862247,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2060720,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2023097,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1906876,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 1995731,
                "content": [
                    {
                        "username": "eliot36",
                        "content": "If you are not familiar with prototype same as I did, you can access Array using \"this\" in last method."
                    },
                    {
                        "username": "PhilippovDev",
                        "content": "Thank you mate! Valuable."
                    },
                    {
                        "username": "Sakhil335",
                        "content": "can u tell me any other way to access array without using this keyword"
                    },
                    {
                        "username": "cgnquixotic123",
                        "content": "Array.prototype.last = function() {\\n    if(this.length === 0) {\\n        return -1\\n    }else {\\n        return this[this.length - 1]\\n    }\\n};\\nconst arr = [1, 2, 3];\\narr.last();\\nconst emtyarr = [];\\nemtyarr.last();"
                    },
                    {
                        "username": "Bharat_makvana",
                        "content": "Array.prototype.last = function(nums) {\\n    nums= [1,2,3]\\n  return nums.length > 0 ? nums[nums.length - 1] : -1;  \\n};\\n\\ni have completed task but in cases ither 1 true ither 2nd true \\n"
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` is a method, not a normal function. It is usually called on an object, like `nums.last()`, and should not accept any arguments. Within the method code, the object can be accessed through `this` variable (keyword, technically, but whatever).\n\nYou should not declare `nums = …` in your code; the test cases are supplied automatically by LeetCode's testing system. Instead, you should assume that `this` variable is already set to the necessary value and work with that."
                    },
                    {
                        "username": "Nidhi_Gadge",
                        "content": "Same here. The empty array condition is failing in the test. \\uD83D\\uDE15"
                    },
                    {
                        "username": "Panda_2397",
                        "content": "finally a question that I can do by myself as a beginner.."
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "recursion questions were tough..."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "in prototype , we can use this to refer to the array "
                    },
                    {
                        "username": "simblap_3p-o",
                        "content": "Guys, I am glad this is easy for you but for me this is a mystery lol"
                    },
                    {
                        "username": "mohitrakh01",
                        "content": "same lol\\n"
                    },
                    {
                        "username": "akshayvjain",
                        "content": "should the element be removed from the array?\\n\\nbecause I see some posting solutions, in which they use .pop(), instead of this[this.length -1]"
                    },
                    {
                        "username": "joelpamphyl",
                        "content": "Since the question needs us to return the last element in the array, when you use pop(), it removes the last element from the array and returns it (the removed element)"
                    },
                    {
                        "username": "Dzenly",
                        "content": "Imagine that you write some library for colleagues. Will they be happy to see that their array is changed by your function?\nAlso there is task description which does not contain a word about last element removing. So IMHO, using pop is a step to fail the job interview."
                    },
                    {
                        "username": "ryu9827",
                        "content": "Don\\'t use arrow function to define your last() function, because \"this\" is empty object in arrow function."
                    },
                    {
                        "username": "kaksozdatnik",
                        "content": "return this[this.length - 1] !== undefined ? this[this.length - 1] : -1 is accepted but not right "
                    },
                    {
                        "username": "gautam1168",
                        "content": "the `Array.at()` method has already shipped and supports negative indices. This question should be changed to not have that weird -1 requirement, to return `undefined` instead so that its at the very least compliant with what is the spec."
                    },
                    {
                        "username": "tifv",
                        "content": "Why would a programming exercise need to conform to some particular spec? The purpose of the problem is to force participants to implement a certain feature; ability to trivially delegate to an existing method would only detract from the value of the problem."
                    },
                    {
                        "username": "Alihaider0315",
                        "content": "here is the solution of this code \\n\\nif (!Array.prototype.last) {\\n  Object.defineProperty(Array.prototype, \\'last\\', {\\n    value: function () {\\n      if (this.length === 0) {\\n        return -1;\\n      }\\n      return this[this.length - 1];\\n    },\\n    enumerable: false,\\n    configurable: true,\\n    writable: true\\n  });\\n}\\n\\n// Example 1\\nconst nums1 = [null, {}, 3];\\nconsole.log(nums1.last()); // Output: 3\\n\\n// Example 2\\nconst nums2 = [];\\nconsole.log(nums2.last()); // Output: -1\\n"
                    }
                ]
            },
            {
                "id": 2069579,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 2053604,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1973055,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1956331,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1948210,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1906961,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1906665,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1895087,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1883966,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            },
            {
                "id": 1878304,
                "content": [
                    {
                        "username": "tyl2018",
                        "content": "I'm new to prototype. Why doesn't an arrow function work?\nEven when I write the exact same line in the funciton, the outcome is different from the version with a normal function. Seems like `this` cannot be referenced properly in an arrow function."
                    },
                    {
                        "username": "Imad-El-Jabouri",
                        "content": "Array.prototype.last = function() {\\n    return this.length === 0 ? -1 : this[this.length-1]\\n};\\n\\nthis keyword refers to Array.prototype\\n\\nthis works !"
                    },
                    {
                        "username": "puss1",
                        "content": "Is there any way i can do this without using \\'this\\'?"
                    },
                    {
                        "username": "puss1",
                        "content": "[@tifv](/tifv) no there\\'s no particular problem, since i just began learning javascript im unfamiliar to the concept of \\'this\\'. \\nAnd as i wasn\\'t able to crack down the null array\\'s output and wandered into the solution section, i saw everybody using \\'this\\' so it was only natural for me wonder if there was another way out. but anyway thank you!"
                    },
                    {
                        "username": "tifv",
                        "content": "`this` is the most natural way to access the array for which the method is called. Unless you invent some other contrived way to retrieve this array\\u2014probably not.\\n\\nWhat is the problem with `this`, anyway?"
                    },
                    {
                        "username": "kuldeep_gupta",
                        "content": "I am not getting how exactly I need to type the solution"
                    },
                    {
                        "username": "SalemDev0",
                        "content": "me too\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day23 : Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n\\nTry using this keyword"
                    },
                    {
                        "username": "TheGElCOgecko",
                        "content": "I was worried the last part of the 30 Day Challenge would be mostly hard problems, glad Leetcode has turned down the heat on the difficulty"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i had same feelings :D"
                    },
                    {
                        "username": "nobrayn",
                        "content": "How are the `nums` from both examples getting plugged into this code, exactly? I guess I\\'d just like to see the whole code."
                    },
                    {
                        "username": "tifv",
                        "content": "`.last()` will be called as a method, as in `nums.last()`. The method should take no arguments; however, within the code of the method the value on which it was called can be accessed via `this` variable."
                    },
                    {
                        "username": "srilasya02",
                        "content": "I am new to JavaScript.  What does Array.prototype.last mean here? Can someone please explain?"
                    },
                    {
                        "username": "Courage2003",
                        "content": "do its using this pointer\\n"
                    },
                    {
                        "username": "sid_py",
                        "content": "\\'prototype\\' allows us to add new properties or methods to objects. So if we use Array.prototype, we can define a new function/method for our array objects. And the \\'last\\' is the name of our function, which we can call like arr.last()."
                    },
                    {
                        "username": "Pranjal_Pathak",
                        "content": "Array.prototype.last = function() {\\n    let x=-1\\n   \\n       if(this.length ===0){\\n           return x\\n       }else {\\n           return  this.push();\\n           \\n       }\\n   }\\n   please someone point out my mistake"
                    },
                    {
                        "username": "DenilAny",
                        "content": "this.push() method is used to append a number or string to an array, instead you should use this.pop(), which returns the poped value at the end of an array"
                    },
                    {
                        "username": "tifv",
                        "content": "`this.push()` appends items to the array and returns the new length of the array. This is probably not what you wanted here."
                    }
                ]
            }
        ]
    }
]