[
    {
        "title": "Difference Between Element Sum and Digit Sum of an Array",
        "question_content": "You are given a positive integer array nums.\n\n\tThe element sum is the sum of all the elements in nums.\n\tThe digit sum is the sum of all the digits (not necessarily distinct) that appear in nums.\n\nReturn the absolute difference between the element sum and digit sum of nums.\nNote that the absolute difference between two integers x and y is defined as |x - y|.\n&nbsp;\nExample 1:\n\nInput: nums = [1,15,6,3]\nOutput: 9\nExplanation: \nThe element sum of nums is 1 + 15 + 6 + 3 = 25.\nThe digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\nThe absolute difference between the element sum and digit sum is |25 - 16| = 9.\n\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: 0\nExplanation:\nThe element sum of nums is 1 + 2 + 3 + 4 = 10.\nThe digit sum of nums is 1 + 2 + 3 + 4 = 10.\nThe absolute difference between the element sum and digit sum is |10 - 10| = 0.\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 2000\n\t1 <= nums[i] <= 2000",
        "solutions": [
            {
                "id": 3052751,
                "title": "very-simple-and-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int dsum = 0, esum = 0;\\n        for(auto n: nums){\\n            esum += n;\\n            while(n > 0){\\n                dsum += n%10;\\n                n = n/10;\\n            }\\n        }\\n        return abs(esum - dsum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int dsum = 0, esum = 0;\\n        for(auto n: nums){\\n            esum += n;\\n            while(n > 0){\\n                dsum += n%10;\\n                n = n/10;\\n            }\\n        }\\n        return abs(esum - dsum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3053953,
                "title": "python-3-2-lines-strings-t-m-89-67",
                "content": "The absolute value condition is a red herring. The sum of digits (`digitSum`) is always no greater than `sum(nums)`.\\n\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n\\n        digitSum = sum((map(int,list(\\'\\'.join(map(str,nums))))))\\n\\n        return sum(nums) - digitSum\\n```\\n[https://leetcode.com/problems/difference-between-element-sum-and-digit-sum-of-an-array/submissions/878430819/]()",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n\\n        digitSum = sum((map(int,list(\\'\\'.join(map(str,nums))))))\\n\\n        return sum(nums) - digitSum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140386,
                "title": "java-fast-3-lines-solution",
                "content": "# Intuition\\nresult += (number - sum-of-digits)\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int result = 0;\\n        for(int v : nums) result += v - (v / 1000 + v / 100 % 10 + v % 100 / 10 + v % 10);\\n        return Math.abs(result);\\n    }\\n}\\n```\\n![Screenshot 2023-02-03 at 19.57.18.png](https://assets.leetcode.com/users/images/a4c09c2c-e34a-47de-b022-36dc1c3db3a1_1675507776.4204366.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int result = 0;\\n        for(int v : nums) result += v - (v / 1000 + v / 100 % 10 + v % 100 / 10 + v % 10);\\n        return Math.abs(result);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052817,
                "title": "very-easy-to-understand-c-for-beginners",
                "content": "\\nNot the most optimal, yet very easy to understand\\nTime Complexity - O(n)\\n\\n(Feel free to correct me if I have made any mistakes, thanks!)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int eleSum = 0;\\n        int digSum = 0;\\n        for(int i=0; i<nums.size(); i++) {\\n            // add the ith number to the eleSum\\n            eleSum = eleSum + nums[i];\\n            if(nums[i]>9) {\\n                // if the ith number is double digit, \\n                // split the digits and add to digSum     \\n                int n = nums[i];\\n                while(n>0) {\\n                    int digit = n%10;\\n                    digSum = digSum + digit;\\n                    n=n/10;\\n                }\\n            } else if (nums[i]<=9) {\\n                // if the ith number is single digit, \\n                // simply add to digSum\\n                digSum = digSum + nums[i];\\n            }\\n        }\\n        int res = eleSum - digSum;\\n        if(res<0) {\\n            // if the result is negative, \\n            // make it positive by multiplying it with -1\\n            res = res * -1;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int eleSum = 0;\\n        int digSum = 0;\\n        for(int i=0; i<nums.size(); i++) {\\n            // add the ith number to the eleSum\\n            eleSum = eleSum + nums[i];\\n            if(nums[i]>9) {\\n                // if the ith number is double digit, \\n                // split the digits and add to digSum     \\n                int n = nums[i];\\n                while(n>0) {\\n                    int digit = n%10;\\n                    digSum = digSum + digit;\\n                    n=n/10;\\n                }\\n            } else if (nums[i]<=9) {\\n                // if the ith number is single digit, \\n                // simply add to digSum\\n                digSum = digSum + nums[i];\\n            }\\n        }\\n        int res = eleSum - digSum;\\n        if(res<0) {\\n            // if the result is negative, \\n            // make it positive by multiplying it with -1\\n            res = res * -1;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052795,
                "title": "c-straight-forward-o-n",
                "content": "**Approach:** \\n\\n1. Initialize two variables, \"`ele`\" and \"`dig`\", to 0. \"`ele`\" will be used to keep track of the sum of the elements in the input vector, and \"`dig`\" will be used to keep track of the sum of the digits of the elements in the input vector.\\n2. Iterate through each element, \"`num`\", in the input vector \"`nums`\".\\n3. For each iteration, add the current element to the \"`ele`\" variable and the sum of the digits of the current element to the \"`dig`\" variable.\\n4. Return the absolute value of the difference between \"`ele`\" and \"`dig`\".\\n\\n**Time complexity:** `O(n)` where `n` is the number of elements in the input vector, as we iterate through each element in the vector once.\\n**Space complexity:** `O(1)` as we are using only a constant amount of extra memory to store the variables \"`ele`\" and \"`dig`\".\\n\\n----\\n**C++:**\\n```\\nclass Solution {\\npublic:\\n    int digitSum(int num){\\n        int sum = 0;\\n        while(num > 0){\\n            sum += num % 10;\\n            num /= 10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int ele = 0, dig = 0;\\n        for(int num : nums){\\n            ele += num;\\n            dig += digitSum(num);\\n        }\\n        return abs(ele - dig);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int digitSum(int num){\\n        int sum = 0;\\n        while(num > 0){\\n            sum += num % 10;\\n            num /= 10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int ele = 0, dig = 0;\\n        for(int num : nums){\\n            ele += num;\\n            dig += digitSum(num);\\n        }\\n        return abs(ele - dig);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052761,
                "title": "short-clean-java",
                "content": "\\n```java []\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int esum=0, dsum = 0;\\n        for(int i=0; i<nums.length; i++){\\n            esum += nums[i];\\n            while(nums[i] != 0){\\n                dsum += nums[i]%10;\\n                nums[i] /= 10;\\n            }\\n        }\\n        return Math.abs(dsum-esum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int esum=0, dsum = 0;\\n        for(int i=0; i<nums.length; i++){\\n            esum += nums[i];\\n            while(nums[i] != 0){\\n                dsum += nums[i]%10;\\n                nums[i] /= 10;\\n            }\\n        }\\n        return Math.abs(dsum-esum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3602465,
                "title": "explained-simple-and-clear-python3-code",
                "content": "# Intuition\\nThe problem requires finding the absolute difference between the sum of the elements in the \\'nums\\' array and the sum of all the digits present in those elements. To achieve this, we need to compute both sums and then calculate their absolute difference.\\n\\n\\n# Approach\\nTo solve this problem, we can adopt the following approach:\\n\\na. Initialize a variable \\'es\\' to 0, which will store the element sum.\\nb. Iterate through each element \\'x\\' in the \\'nums\\' array and add it to \\'es\\' to calculate the element sum.\\nc. Initialize a variable \\'dg\\' to 0, which will store the digit sum.\\nd. For each element \\'x\\' in the \\'nums\\' array:\\n- Enter a while loop to extract each digit from \\'x\\'.\\n- In each iteration, calculate the remainder of \\'x\\' divided by 10 to obtain the last digit, and add it to \\'dg\\'.\\n- Update \\'x\\' by dividing it by 10, effectively removing the last digit.\\n- Repeat the process until \\'x\\' becomes 0, indicating that all digits have been extracted.\\n\\ne. Compute the absolute difference between \\'es\\' and \\'dg\\' using the abs() function.\\nf. Return the absolute difference as the result.\\n\\n# Complexity\\n- Time complexity:\\n\\nCalculating the element sum requires iterating through all elements of \\'nums\\', which takes O(n) time, where \\'n\\' is the length of the array.\\nFor computing the digit sum, we need to iterate through each digit of each element in \\'nums\\'. The number of digits in each element is proportional to the logarithm of the element\\'s value. Therefore, this step has a time complexity of O(log m), where \\'m\\' is the maximum value in \\'nums\\'.\\nOverall, the time complexity is dominated by the step with the highest complexity, which is O(n log m).\\n\\n- Space complexity:\\n\\nThe algorithm uses a constant amount of extra space for the variables \\'es\\' and \\'dg\\', so the space complexity is O(1), or constant.\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        es = sum(nums)\\n        dg=0\\n        for x in nums:\\n            while x>0:\\n                dg+=(x%10)\\n                x=x//10\\n        return abs(es-dg)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        es = sum(nums)\\n        dg=0\\n        for x in nums:\\n            while x>0:\\n                dg+=(x%10)\\n                x=x//10\\n        return abs(es-dg)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3177832,
                "title": "accumulate",
                "content": "**C++**\\n```cpp\\nint dsum(int v) {\\n    return v == 0 ? 0 : v % 10 + dsum(v / 10);\\n}\\nint differenceOfSum(vector<int>& n) {\\n    return abs(accumulate(begin(n), end(n), 0) - \\n        accumulate(begin(n), end(n), 0, [&](int s, int v){ return s + dsum(v); }));\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint dsum(int v) {\\n    return v == 0 ? 0 : v % 10 + dsum(v / 10);\\n}\\nint differenceOfSum(vector<int>& n) {\\n    return abs(accumulate(begin(n), end(n), 0) - \\n        accumulate(begin(n), end(n), 0, [&](int s, int v){ return s + dsum(v); }));\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3132198,
                "title": "python3-simple-beginner-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        dig_sum = 0\\n        for i in nums:\\n            for j in str(i):\\n                dig_sum+=int(j)\\n        return sum(nums) - dig_sum\\n```\\n# I request you guys to pls upvote if you find it helpful.\\uD83E\\uDEF6\\uD83E\\uDEF6",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        dig_sum = 0\\n        for i in nums:\\n            for j in str(i):\\n                dig_sum+=int(j)\\n        return sum(nums) - dig_sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3512556,
                "title": "my-getdigitsum",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nfunction getDigitSum(num) {\\n\\tlet sum = 0;\\n\\twhile (num !== 0) {\\n\\t\\tsum += num % 10;\\n\\t\\tnum = Math.floor(num / 10);\\n\\t}\\n\\treturn sum;\\n}\\n\\nvar differenceOfSum = function (nums) {\\n\\tlet eSum = nums.reduce((acc, val) => acc + val, 0);\\n\\tlet dSum = nums.reduce((acc, val) => acc + getDigitSum(val), 0);\\n\\treturn Math.abs(eSum - dSum);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nfunction getDigitSum(num) {\\n\\tlet sum = 0;\\n\\twhile (num !== 0) {\\n\\t\\tsum += num % 10;\\n\\t\\tnum = Math.floor(num / 10);\\n\\t}\\n\\treturn sum;\\n}\\n\\nvar differenceOfSum = function (nums) {\\n\\tlet eSum = nums.reduce((acc, val) => acc + val, 0);\\n\\tlet dSum = nums.reduce((acc, val) => acc + getDigitSum(val), 0);\\n\\treturn Math.abs(eSum - dSum);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3116088,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        element_sum = sum(nums)\\n        digit_sum = 0\\n        all_digits  = \"\".join([str(digit) for digit in nums])\\n        for digit in all_digits:\\n            digit_sum += int(digit)\\n        return abs(element_sum-digit_sum)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        element_sum = sum(nums)\\n        digit_sum = 0\\n        all_digits  = \"\".join([str(digit) for digit in nums])\\n        for digit in all_digits:\\n            digit_sum += int(digit)\\n        return abs(element_sum-digit_sum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3055142,
                "title": "python-one-liner",
                "content": "# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return sum(nums) - sum(sum(int(x) for x in str(num)) for num in nums)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return sum(nums) - sum(sum(int(x) for x in str(num)) for num in nums)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054767,
                "title": "leetcode-the-hard-way-explained-line-by-line",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\uD83D\\uDD35 Check out [YouTube Channel](https://www.youtube.com/@leetcodethehardway) if you are interested.\\n\\n---\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int f(int x) {\\n        int res = 0;\\n        while (x) {\\n            // get the last digit\\n            res += x % 10;\\n            // divide by 10 to remove the last digit\\n            x /= 10;\\n        }\\n        return res;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int es = 0, ds = 0;\\n        for (auto x : nums) {\\n            // calculate element sum\\n            es += x;\\n            // calculate digit sum\\n            ds += f(x);\\n        }\\n        // return the absolute difference between the element sum and digit sum of nums.\\n        return abs(es - ds);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int f(int x) {\\n        int res = 0;\\n        while (x) {\\n            // get the last digit\\n            res += x % 10;\\n            // divide by 10 to remove the last digit\\n            x /= 10;\\n        }\\n        return res;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int es = 0, ds = 0;\\n        for (auto x : nums) {\\n            // calculate element sum\\n            es += x;\\n            // calculate digit sum\\n            ds += f(x);\\n        }\\n        // return the absolute difference between the element sum and digit sum of nums.\\n        return abs(es - ds);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3053967,
                "title": "c-straight-forward-problem",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int differenceOfSum(vector<int>& nums) \\n    {\\n        int sum1=0, sum2=0;\\n        for(auto it:nums)\\n        {\\n            sum1 += it;\\n            while(it)\\n            {\\n                sum2 += it%10;\\n                it /= 10;\\n            }\\n            \\n        }\\n        return abs(sum1 - sum2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int differenceOfSum(vector<int>& nums) \\n    {\\n        int sum1=0, sum2=0;\\n        for(auto it:nums)\\n        {\\n            sum1 += it;\\n            while(it)\\n            {\\n                sum2 += it%10;\\n                it /= 10;\\n            }\\n            \\n        }\\n        return abs(sum1 - sum2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052786,
                "title": "c-very-easy-to-understand-heavily-commented",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int n=nums.size();\\n        \\n        //initialize two variables to store sum of digits and sum of numbers\\n        long long s1=0,s2=0;\\n        //iterate through the vector\\n        for(int i=0; i<n; i++){\\n            int N=nums[i];\\n            //add current element to s1\\n            s1 += N;\\n            //iterate through the digits\\n            while(N > 0){\\n                //find the last digit\\n                int r = N%10;\\n                //add the digit to s2\\n                s2 += r;\\n                //remove the last digit\\n                N /= 10;\\n            }\\n        }\\n        //return difference of sum of digits and sum of numbers\\n        return abs(s1-s2);\\n    }\\n};\\n```\\n# Please Upvote if you liked the solution.\\uD83D\\uDE80\\uD83D\\uDE80\\n",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int n=nums.size();\\n        \\n        //initialize two variables to store sum of digits and sum of numbers\\n        long long s1=0,s2=0;\\n        //iterate through the vector\\n        for(int i=0; i<n; i++){\\n            int N=nums[i];\\n            //add current element to s1\\n            s1 += N;\\n            //iterate through the digits\\n            while(N > 0){\\n                //find the last digit\\n                int r = N%10;\\n                //add the digit to s2\\n                s2 += r;\\n                //remove the last digit\\n                N /= 10;\\n            }\\n        }\\n        //return difference of sum of digits and sum of numbers\\n        return abs(s1-s2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052590,
                "title": "js-one-line",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nvar differenceOfSum = function (nums) {\\n  return Math.abs(nums.reduce((p, v) => p + v) - nums.join(\"\").split(\"\").reduce((p, v) => +p + +v));\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar differenceOfSum = function (nums) {\\n  return Math.abs(nums.reduce((p, v) => p + v) - nums.join(\"\").split(\"\").reduce((p, v) => +p + +v));\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3055671,
                "title": "python-easy-solution-100-beats",
                "content": "\\n\\n# Code\\n```\\nclass Solution(object):\\n    def differenceOfSum(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        digit_sum =0\\n        for i in nums:\\n            if i >9:\\n                while i!=0:\\n                    rem = i%10\\n                    digit_sum += rem\\n                    i = i//10\\n            else:\\n                digit_sum += i\\n        return abs(sum(nums)-digit_sum)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def differenceOfSum(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        digit_sum =0\\n        for i in nums:\\n            if i >9:\\n                while i!=0:\\n                    rem = i%10\\n                    digit_sum += rem\\n                    i = i//10\\n            else:\\n                digit_sum += i\\n        return abs(sum(nums)-digit_sum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052846,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int x=0, y=0;\\n        for(int i:nums)\\n        x+=i;\\n        for(int i:nums)\\n        {\\n            while(i)\\n            {\\n                y+=i%10;\\n                i/=10;\\n            }\\n        }\\n        return abs(x-y);\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int x=0, y=0;\\n        for(int i:nums)\\n        x+=i;\\n        for(int i:nums)\\n        {\\n            while(i)\\n            {\\n                y+=i%10;\\n                i/=10;\\n            }\\n        }\\n        return abs(x-y);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052806,
                "title": "c-easy-beginner-friendly-code-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/f6864804-69f3-46d0-81ec-29cc5fbf906f_1673757227.5116322.png)\\n\\n**T->O(n * avg number of digits ) && S->O(1)**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint f(int num){\\n\\t\\t\\tint sum=0;\\n\\t\\t\\twhile(num){\\n\\t\\t\\t\\tsum+=num%10;\\n\\t\\t\\t\\tnum/=10;\\n\\t\\t\\t}\\n\\t\\t\\treturn sum;\\n\\t\\t}\\n\\n\\n\\t\\tint differenceOfSum(vector<int>& nums) {\\n\\t\\t\\tint n= nums.size();\\n\\t\\t\\tint dsum=0;\\n\\t\\t\\tint sum=0;\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\tsum+=nums[i];\\n\\t\\t\\t\\tdsum+=f(nums[i]);\\n\\t\\t\\t}\\n\\t\\t\\treturn abs(sum-dsum);\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint f(int num){\\n\\t\\t\\tint sum=0;\\n\\t\\t\\twhile(num){\\n\\t\\t\\t\\tsum+=num%10;\\n\\t\\t\\t\\tnum/=10;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3383957,
                "title": "python-python3-easy-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n * log10(nums[i]))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        el_sum = d_sum = 0\\n        for i in nums:\\n            el_sum += i\\n            d_sum += self.digit_sum(i)\\n        return abs(el_sum - d_sum)\\n    \\n    def digit_sum(self, n: int) -> int:\\n        sum = 0\\n        while n:\\n            sum += int(n % 10)\\n            n //= 10\\n        return sum\\n        \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        el_sum = d_sum = 0\\n        for i in nums:\\n            el_sum += i\\n            d_sum += self.digit_sum(i)\\n        return abs(el_sum - d_sum)\\n    \\n    def digit_sum(self, n: int) -> int:\\n        sum = 0\\n        while n:\\n            sum += int(n % 10)\\n            n //= 10\\n        return sum\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3323879,
                "title": "java-solution-beats-99-65",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int tSum = 0;\\n        int eSum = 0;\\n        for(int nb : nums){\\n            tSum+=nb;\\n            while(nb>9){\\n                eSum += nb%10;\\n                nb = nb/10;\\n            }\\n            eSum += nb;\\n        }\\n        return Math.abs(tSum-eSum);\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int tSum = 0;\\n        int eSum = 0;\\n        for(int nb : nums){\\n            tSum+=nb;\\n            while(nb>9){\\n                eSum += nb%10;\\n                nb = nb/10;\\n            }\\n            eSum += nb;\\n        }\\n        return Math.abs(tSum-eSum);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233036,
                "title": "easiest-solution-ever-find-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        x=sum(nums)\\n        m=list(map(int,list(\\'\\'.join(str(x) for x in nums))))\\n        z=sum(m)\\n        return abs(x-z)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        x=sum(nums)\\n        m=list(map(int,list(\\'\\'.join(str(x) for x in nums))))\\n        z=sum(m)\\n        return abs(x-z)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3066339,
                "title": "easy-java-solution-3ms-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n = nums.length, rem = 0;\\n        int eleSum = 0, digitSum = 0;\\n        for(int i = 0; i < n; i++){\\n            eleSum += nums[i];\\n            if(nums[i] < 10)\\n                digitSum += nums[i];\\n            else{\\n                while(nums[i] != 0){\\n                    rem = nums[i] % 10;\\n                    digitSum += rem;\\n                    nums[i] /= 10;\\n                }\\n            }\\n        }\\n        return Math.abs(eleSum - digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n = nums.length, rem = 0;\\n        int eleSum = 0, digitSum = 0;\\n        for(int i = 0; i < n; i++){\\n            eleSum += nums[i];\\n            if(nums[i] < 10)\\n                digitSum += nums[i];\\n            else{\\n                while(nums[i] != 0){\\n                    rem = nums[i] % 10;\\n                    digitSum += rem;\\n                    nums[i] /= 10;\\n                }\\n            }\\n        }\\n        return Math.abs(eleSum - digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052929,
                "title": "c-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        \\n        int esum = 0;\\n        int dsum = 0;\\n        for(int i=0;i<nums.size();i++){\\n            esum+=nums[i];\\n            while(nums[i] > 0){\\n                int num = nums[i]%10;\\n                nums[i]/=10;\\n                dsum+=num;\\n            }\\n        }\\n        return esum-dsum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        \\n        int esum = 0;\\n        int dsum = 0;\\n        for(int i=0;i<nums.size();i++){\\n            esum+=nums[i];\\n            while(nums[i] > 0){\\n                int num = nums[i]%10;\\n                nums[i]/=10;\\n                dsum+=num;\\n            }\\n        }\\n        return esum-dsum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052895,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return sum(map(lambda n: n - sum(map(int, str(n))), nums))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return sum(map(lambda n: n - sum(map(int, str(n))), nums))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052775,
                "title": "cpp-easy-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,dsum=0;\\n        for(auto& num:nums){\\n            sum+=num;\\n            while(num>0){\\n                dsum+=num%10;\\n                num=num/10;\\n            }\\n        }\\n        return abs(dsum-sum);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,dsum=0;\\n        for(auto& num:nums){\\n            sum+=num;\\n            while(num>0){\\n                dsum+=num%10;\\n                num=num/10;\\n            }\\n        }\\n        return abs(dsum-sum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052732,
                "title": "straight-forward-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int es = 0, ds = 0;\\n        for(int i : nums) {\\n            es += i;\\n            while(i) ds += i % 10, i /= 10;\\n        }\\n        return es - ds;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int es = 0, ds = 0;\\n        for(int i : nums) {\\n            es += i;\\n            while(i) ds += i % 10, i /= 10;\\n        }\\n        return es - ds;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052727,
                "title": "java-easy-solution",
                "content": "\\n# Please Upvote \\uD83D\\uDE07\\n``` \\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int eleSum = 0, digitSum = 0;\\n        for (int i : nums) {\\n            eleSum += i;\\n            digitSum += (i > 9)? help(i) : i;\\n        }\\n        \\n        return Math.abs(digitSum - eleSum);\\n    }\\n    \\n    // if element if of more than 1 digit, this ethod will be called\\n    private int help(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            sum += n % 10;\\n            n /= 10;\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```\\n##### Time complexity: $$O(n)$$ \\n##### Space complexity: $$O(1)$$\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` \\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int eleSum = 0, digitSum = 0;\\n        for (int i : nums) {\\n            eleSum += i;\\n            digitSum += (i > 9)? help(i) : i;\\n        }\\n        \\n        return Math.abs(digitSum - eleSum);\\n    }\\n    \\n    // if element if of more than 1 digit, this ethod will be called\\n    private int help(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            sum += n % 10;\\n            n /= 10;\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052617,
                "title": "2535-difference-between-element-sum-and-digit-sum-of-an-array-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n       int elementSum = 0;\\n    int digitSum = 0;\\n    for (int num : nums) {\\n        elementSum += num;\\n        String numString = Integer.toString(num);\\n        for (int i = 0; i < numString.length(); i++) {\\n            digitSum += numString.charAt(i) - \\'0\\';\\n        }\\n    }\\n    return Math.abs(elementSum - digitSum);   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n       int elementSum = 0;\\n    int digitSum = 0;\\n    for (int num : nums) {\\n        elementSum += num;\\n        String numString = Integer.toString(num);\\n        for (int i = 0; i < numString.length(); i++) {\\n            digitSum += numString.charAt(i) - \\'0\\';\\n        }\\n    }\\n    return Math.abs(elementSum - digitSum);   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052553,
                "title": "brute-force",
                "content": "```\\n    int differenceOfSum(vector<int>& nums) {\\n        int n=nums.size();\\n        int k,sum=0,sum1=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        \\n        for(int j=0;j<n;j++)\\n         {\\n        while(nums[j] > 0)\\n         {\\n            k = nums[j] % 10;\\n            sum1 = sum1 + k;\\n            nums[j] = nums[j] / 10;\\n        }\\n         }\\n        return abs(sum-sum1);\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    int differenceOfSum(vector<int>& nums) {\\n        int n=nums.size();\\n        int k,sum=0,sum1=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        \\n        for(int j=0;j<n;j++)\\n         {\\n        while(nums[j] > 0)\\n         {\\n            k = nums[j] % 10;\\n            sum1 = sum1 + k;\\n            nums[j] = nums[j] / 10;\\n        }\\n         }\\n        return abs(sum-sum1);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050719,
                "title": "c-python-brute-force-approach-too-easy-fully-explained",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. `digiSum(int num)`:\\n   - This function calculates the sum of the digits of an integer `num`.\\n   - It initializes a variable `sum` to 0.\\n   - It enters a `while` loop that continues as long as `num` is not equal to 0.\\n   - In each iteration, it calculates the remainder of `num` divided by 10 (`num % 10`) to get the last digit of `num` and adds it to the `sum`.\\n   - It then updates `num` by dividing it by 10 (`num /= 10`) to move to the next digit.\\n   - Finally, it returns the computed `sum`, which represents the sum of the digits of `num`.\\n\\n2. `arSum(vector<int>& nums)`:\\n   - This function calculates the sum of elements in a vector of integers `nums`.\\n   - It initializes a variable `sum` to 0.\\n   - It uses a `for` loop to iterate through the elements of the `nums` vector and adds each element to the `sum`.\\n   - After iterating through all elements, it returns the computed `sum`, which represents the sum of the elements in `nums`.\\n\\n3. `differenceOfSum(vector<int>& nums)`:\\n   - This function calculates the difference between the sum of elements in a vector `nums` and the sum of the digits of each element in the vector using the previously defined functions.\\n   - It initializes a variable `diSum` to 0 to store the sum of digits.\\n   - It uses a `for` loop to iterate through the elements of the `nums` vector.\\n   - In each iteration, it calculates the sum of digits for the current element using the `digiSum` function and adds it to `diSum`.\\n   - Finally, it returns the difference between the sum of elements in `nums` (computed using `arSum(nums)`) and `diSum`.\\n\\n# Complexity\\n- Time complexity:$$O(n * log(nums))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    int digiSum(int num){\\n        int sum = 0; \\n        while(num != 0){\\n            sum += num % 10;\\n            num /= 10;\\n        }\\n    return sum;\\n    }\\n    int arSum(vector<int>& nums){\\n        int sum = 0;\\n        for(int i = 0; i < nums.size(); i++){\\n            sum += nums[i];\\n        }\\n    return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int diSum = 0;\\n        for(int i = 0; i < nums.size(); i++){\\n            diSum += digiSum(nums[i]);\\n        }\\n        return arSum(nums) - diSum;\\n    }\\n};\\n```\\n``` Python []\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        dSum = 0\\n        aSum = 0\\n        for i in nums:\\n            aSum += i\\n            while(i != 0):\\n                dSum += i % 10\\n                i = i // 10\\n        return aSum - dSum\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    int digiSum(int num){\\n        int sum = 0; \\n        while(num != 0){\\n            sum += num % 10;\\n            num /= 10;\\n        }\\n    return sum;\\n    }\\n    int arSum(vector<int>& nums){\\n        int sum = 0;\\n        for(int i = 0; i < nums.size(); i++){\\n            sum += nums[i];\\n        }\\n    return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int diSum = 0;\\n        for(int i = 0; i < nums.size(); i++){\\n            diSum += digiSum(nums[i]);\\n        }\\n        return arSum(nums) - diSum;\\n    }\\n};\\n```\n``` Python []\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        dSum = 0\\n        aSum = 0\\n        for i in nums:\\n            aSum += i\\n            while(i != 0):\\n                dSum += i % 10\\n                i = i // 10\\n        return aSum - dSum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3966504,
                "title": "java-beats-99-easiest-solution-for-beginners",
                "content": "# PLEASE UPVOTE\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int esum=0;\\n        int dsum=0;\\n        for(int i=0;i<nums.length;i++){\\n            esum+=nums[i];\\n            int count=nums[i];\\n            while(count>0){\\n                dsum+=count%10;\\n                count=count/10;\\n            }\\n        }\\n        return esum-dsum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int esum=0;\\n        int dsum=0;\\n        for(int i=0;i<nums.length;i++){\\n            esum+=nums[i];\\n            int count=nums[i];\\n            while(count>0){\\n                dsum+=count%10;\\n                count=count/10;\\n            }\\n        }\\n        return esum-dsum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3596642,
                "title": "easy-c-solution",
                "content": "class Solution {\\npublic:\\n\\n    int differenceOfSum(vector<int>& nums) {\\n\\t\\n        int sum1 =0;\\n        int sum2 =0;\\n        for(int i=0 ; i<nums.size() ; i++){\\n            sum1 = sum1 + nums[i];\\n            while(nums[i]>0){\\n             int z = nums[i]%10;\\n                sum2 += z ; \\n               nums[i]=nums[i]/10; \\n            }\\n        }\\n        return abs(sum1-sum2);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int differenceOfSum(vector<int>& nums) {\\n\\t\\n        int sum1 =0;\\n        int sum2 =0;\\n        for(int i=0 ; i<nums.size() ; i++){\\n            sum1 = sum1 + nums[i];\\n            while(nums[i]>0){\\n             int z = nums[i]%10;\\n                sum2 += z ; \\n               nums[i]=nums[i]/10; \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3430145,
                "title": "beginner-friendly-c",
                "content": "# Intuition\\nSelf Explanatory Solution (With added comments)\\n\\n# Approach\\nI have addded comments for better understanding.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\nExplaination\\nO(n * 4) ==> O(n) as 4 is constant\\n*4 because max length of nums[i] is 4 ans max element present in nums is 2000. \\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int n = nums.size(), sum = 0, sumDigits = 0;\\n        for(int i = 0; i < n; i++){\\n            sum += nums[i]; // calculating sum of elements in nums\\n            int digits = nums[i]; \\n            while(digits){\\n                sumDigits += digits%10; // getting the last digit at index i and adding it to sumDigits \\n                digits = digits/10; // removing last digit\\n            }\\n        }\\n        return abs(sum-sumDigits);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int n = nums.size(), sum = 0, sumDigits = 0;\\n        for(int i = 0; i < n; i++){\\n            sum += nums[i]; // calculating sum of elements in nums\\n            int digits = nums[i]; \\n            while(digits){\\n                sumDigits += digits%10; // getting the last digit at index i and adding it to sumDigits \\n                digits = digits/10; // removing last digit\\n            }\\n        }\\n        return abs(sum-sumDigits);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3365138,
                "title": "map-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        a = map(int, list(\\'\\'.join(map(str, nums))))\\n        return abs(sum(nums) - sum(a))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        a = map(int, list(\\'\\'.join(map(str, nums))))\\n        return abs(sum(nums) - sum(a))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362876,
                "title": "java-solution-100-beat-in-o-n-d-complexity",
                "content": "# Approach\\n1. Initialize the elementSum and digitSum variables to zero.\\n2. Iterate through each element of the input array using a for-each loop\\n3. Add the current element to the elementSum variable.\\n4. Extract the digits of the current element and add them to the digitSum variable.\\n5. Return the absolute difference between the elementSum and digitSum variables.\\n\\n# Complexity\\n- Time complexity: O(N * D)\\nThe time complexity of this code is O(N * D), where N is the length of the input array and D is the maximum number of digits in any element of the array. The outer loop runs N times, and the inner loop that extracts the digits of each element runs D times for each element. Therefore, the overall time complexity is O(N * D).\\n\\n- Space complexity: O(1)\\nThe space complexity of this code is O(1) because it uses a constant amount of extra space regardless of the input size.\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        // Initialize the elementSum and digitSum variables to zero\\n        int elementSum = 0;\\n        int digitSum = 0;\\n\\n        // Iterate through each element of the input array using a for-each loop\\n        for(int n : nums){\\n            // Add the current element to the elementSum variable\\n            elementSum += n; \\n            // Extract the digits of the current element and add them to the digitSum variable\\n            while(n != 0){\\n                // Get the last digit of the current number\\n                int rem = n%10;\\n                // Add the last digit to the digitSum variable\\n                digitSum += rem;\\n                // Remove the last digit from the current number\\n                n = n/10;\\n            }\\n        }\\n\\n        // Remove the last digit from the current number\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        // Initialize the elementSum and digitSum variables to zero\\n        int elementSum = 0;\\n        int digitSum = 0;\\n\\n        // Iterate through each element of the input array using a for-each loop\\n        for(int n : nums){\\n            // Add the current element to the elementSum variable\\n            elementSum += n; \\n            // Extract the digits of the current element and add them to the digitSum variable\\n            while(n != 0){\\n                // Get the last digit of the current number\\n                int rem = n%10;\\n                // Add the last digit to the digitSum variable\\n                digitSum += rem;\\n                // Remove the last digit from the current number\\n                n = n/10;\\n            }\\n        }\\n\\n        // Remove the last digit from the current number\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3328238,
                "title": "one-line-python-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def differenceOfSum(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        return abs(sum(nums)-sum(int(j) for j in\\'\\'.join(str(i) for i in nums)))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def differenceOfSum(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        return abs(sum(nums)-sum(int(j) for j in\\'\\'.join(str(i) for i in nums)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3283923,
                "title": "python-solution-beats-99-7",
                "content": "# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum1=0\\n        digit,dup=0,0\\n        for i in nums:\\n            sum1=sum1+i\\n            dup=i\\n            while(dup!=0):\\n                digit=digit+(dup%10)\\n                dup=dup//10\\n        return abs(sum1-digit)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum1=0\\n        digit,dup=0,0\\n        for i in nums:\\n            sum1=sum1+i\\n            dup=i\\n            while(dup!=0):\\n                digit=digit+(dup%10)\\n                dup=dup//10\\n        return abs(sum1-digit)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238755,
                "title": "difference-of-sum-easy-javascript-solution-beats-97-71",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    const sum1 = nums.reduce((prev, curr) => prev + curr);\\n    const sum2 = nums.join(\\'\\').split(\\'\\').reduce((prev, curr) => parseInt(prev) + parseInt(curr));\\n  return sum1 - sum2;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Math"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    const sum1 = nums.reduce((prev, curr) => prev + curr);\\n    const sum2 = nums.join(\\'\\').split(\\'\\').reduce((prev, curr) => parseInt(prev) + parseInt(curr));\\n  return sum1 - sum2;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3188165,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,elesum=0;\\n        int n=nums.size();\\n        for(int i=0; i<n; i++)\\n        {\\n            elesum+=nums[i];\\n            for(int j=nums[i]; j>0; j/=10){\\n                sum+=j%10;\\n            }\\n        }\\n        return elesum>sum?elesum-sum:sum-elesum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,elesum=0;\\n        int n=nums.size();\\n        for(int i=0; i<n; i++)\\n        {\\n            elesum+=nums[i];\\n            for(int j=nums[i]; j>0; j/=10){\\n                sum+=j%10;\\n            }\\n        }\\n        return elesum>sum?elesum-sum:sum-elesum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3121756,
                "title": "java-99-87-faster-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int lSum = 0, dSum = 0;\\n        for (int n : nums) {\\n            lSum += n;\\n            while (n > 0) {\\n                dSum += n % 10;\\n                n /= 10;\\n            }\\n        }\\n        return Math.abs(lSum - dSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int lSum = 0, dSum = 0;\\n        for (int n : nums) {\\n            lSum += n;\\n            while (n > 0) {\\n                dSum += n % 10;\\n                n /= 10;\\n            }\\n        }\\n        return Math.abs(lSum - dSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3106693,
                "title": "time-complexity-o-n-very-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elesum=0;\\n        for(int i=0;i<nums.length;i++){\\n            elesum+=nums[i];\\n        }\\n        int digitsum=0;\\n        int j=0;\\n        while(j<nums.length){\\n            if(nums[j]==0){\\n                j++;\\n                continue;\\n            }\\n            digitsum +=nums[j]%10;\\n            // int y=nums[j]/10;\\n            nums[j]=nums[j]/10;\\n\\n\\n        }\\n\\n        return Math.abs(elesum-digitsum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elesum=0;\\n        for(int i=0;i<nums.length;i++){\\n            elesum+=nums[i];\\n        }\\n        int digitsum=0;\\n        int j=0;\\n        while(j<nums.length){\\n            if(nums[j]==0){\\n                j++;\\n                continue;\\n            }\\n            digitsum +=nums[j]%10;\\n            // int y=nums[j]/10;\\n            nums[j]=nums[j]/10;\\n\\n\\n        }\\n\\n        return Math.abs(elesum-digitsum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3072387,
                "title": "ompact-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    const elementsSum = nums.reduce((acc, val) => acc += val, 0);\\n    const digitsSum = nums.join(\\'\\').split(\\'\\').reduce((acc, val) => acc += +val, 0);\\n\\n    return elementsSum - digitsSum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    const elementsSum = nums.reduce((acc, val) => acc += val, 0);\\n    const digitsSum = nums.join(\\'\\').split(\\'\\').reduce((acc, val) => acc += +val, 0);\\n\\n    return elementsSum - digitsSum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3068454,
                "title": "brute-force-python-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst half is easy, we can directly find the sum of elements of the list. But second half is a bit tricky , we have to first split the numbers into to different numbers which are greater than 10.\\n\\nHere is the simple brute force code without any inbuild function and easily understandable.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum1 = sum(nums)\\n        sum2= 0 \\n        for i in nums:\\n            if i<10:\\n                sum2=sum2+i\\n            else:\\n                while(i>0):\\n                    sum2 =sum2 + (i%10)\\n                    i=i//10\\n        return sum1-sum2\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum1 = sum(nums)\\n        sum2= 0 \\n        for i in nums:\\n            if i<10:\\n                sum2=sum2+i\\n            else:\\n                while(i>0):\\n                    sum2 =sum2 + (i%10)\\n                    i=i//10\\n        return sum1-sum2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3065681,
                "title": "simple-math-solution",
                "content": "```\\nfunction differenceOfSum(nums: number[]): number {\\n    let totalSum = 0;\\n    let digitSum = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        let num = nums[i];\\n\\n        totalSum += num;\\n\\n        while (num > 0) {\\n            digitSum += num % 10;\\n            num = Math.floor(num / 10);\\n        }\\n    }\\n\\n    return Math.abs(digitSum - totalSum);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction differenceOfSum(nums: number[]): number {\\n    let totalSum = 0;\\n    let digitSum = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        let num = nums[i];\\n\\n        totalSum += num;\\n\\n        while (num > 0) {\\n            digitSum += num % 10;\\n            num = Math.floor(num / 10);\\n        }\\n    }\\n\\n    return Math.abs(digitSum - totalSum);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3062158,
                "title": "simple-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int digisum(int a)\\n    {\\n        int sum=0;\\n        while(a>0)\\n        {\\n            sum+=a%10;\\n            a/=10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum1=0,sum2=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum1+=nums[i];\\n            sum2+=digisum(nums[i]);\\n        }\\n        return abs(sum1-sum2);\\n        \\n        \\n    }\\n};\\n```\\n---\\n\\n**please upvote**",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int digisum(int a)\\n    {\\n        int sum=0;\\n        while(a>0)\\n        {\\n            sum+=a%10;\\n            a/=10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum1=0,sum2=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum1+=nums[i];\\n            sum2+=digisum(nums[i]);\\n        }\\n        return abs(sum1-sum2);\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3060875,
                "title": "easiest-solution-in-java-function-call",
                "content": "If you like the solution please upvote\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor digits sum we will call an another function\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    int digitsum(int num)\\n    {\\n        int sum=0;\\n        while(num>0)\\n        {\\n            sum=sum+num%10;\\n            num=num/10;\\n        }\\n        return sum;\\n    }\\n    public int differenceOfSum(int[] nums) {\\n        int ElemSum=0;\\n        int DigitSum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            ElemSum=ElemSum+nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]<=9)\\n            {\\n                DigitSum=DigitSum+nums[i];\\n            }\\n            else\\n            {\\n                DigitSum=DigitSum+digitsum(nums[i]);\\n            }\\n        }\\n        return Math.abs(ElemSum-DigitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    int digitsum(int num)\\n    {\\n        int sum=0;\\n        while(num>0)\\n        {\\n            sum=sum+num%10;\\n            num=num/10;\\n        }\\n        return sum;\\n    }\\n    public int differenceOfSum(int[] nums) {\\n        int ElemSum=0;\\n        int DigitSum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            ElemSum=ElemSum+nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]<=9)\\n            {\\n                DigitSum=DigitSum+nums[i];\\n            }\\n            else\\n            {\\n                DigitSum=DigitSum+digitsum(nums[i]);\\n            }\\n        }\\n        return Math.abs(ElemSum-DigitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3057813,
                "title": "easy-c-solution",
                "content": "**Result**\\n****\\n<img src=\"https://assets.leetcode.com/users/images/8f1c6103-a837-42f0-895c-54cb11966ab6_1673856536.3176672.png\" alt=\"drawing\" style=\"width:500px;\"/>\\n\\n****\\n**Solution**\\n```\\nint differenceOfSum(int* nums, int numsSize){\\n\\n    int ans = 0;\\n   \\n    for(int i = 0; i < numsSize; ++i)\\n    {\\n        int val = nums[i];\\n        ans += val;\\n        \\n        while(val)\\n        {\\n            ans -= val%10;\\n            val = val/10;\\n        }\\n    }\\n    return ans;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint differenceOfSum(int* nums, int numsSize){\\n\\n    int ans = 0;\\n   \\n    for(int i = 0; i < numsSize; ++i)\\n    {\\n        int val = nums[i];\\n        ans += val;\\n        \\n        while(val)\\n        {\\n            ans -= val%10;\\n            val = val/10;\\n        }\\n    }\\n    return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3056373,
                "title": "simple-kotlin-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n2)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nimport kotlin.math.*\\nclass Solution {\\n    fun differenceOfSum(nums: IntArray): Int {\\n        var sum=0 //for number sum\\n        var bitsum = 0 //for digit sum\\n        for(i in nums){\\n            sum+=i\\n            var x=i\\n            while(x>0){\\n                bitsum+=(x%10)\\n                x=x/10\\n            }\\n        }\\n        return abs(bitsum-sum)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nimport kotlin.math.*\\nclass Solution {\\n    fun differenceOfSum(nums: IntArray): Int {\\n        var sum=0 //for number sum\\n        var bitsum = 0 //for digit sum\\n        for(i in nums){\\n            sum+=i\\n            var x=i\\n            while(x>0){\\n                bitsum+=(x%10)\\n                x=x/10\\n            }\\n        }\\n        return abs(bitsum-sum)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054870,
                "title": "javascript",
                "content": "\\n```\\nvar differenceOfSum = function (nums) {\\n    function sumOfDigits(num) {\\n        let sum = 0;\\n        while (num) {\\n            sum += num % 10;\\n            num = Math.floor(num / 10);\\n        }\\n        return sum;\\n    }\\n\\n    let digitSum = 0,\\n        elementSum = 0;\\n\\n    for (let num of nums) {\\n        digitSum += sumOfDigits(num);\\n        elementSum += num;\\n    }\\n\\n    return Math.abs(digitSum - elementSum);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar differenceOfSum = function (nums) {\\n    function sumOfDigits(num) {\\n        let sum = 0;\\n        while (num) {\\n            sum += num % 10;\\n            num = Math.floor(num / 10);\\n        }\\n        return sum;\\n    }\\n\\n    let digitSum = 0,\\n        elementSum = 0;\\n\\n    for (let num of nums) {\\n        digitSum += sumOfDigits(num);\\n        elementSum += num;\\n    }\\n\\n    return Math.abs(digitSum - elementSum);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3054108,
                "title": "c-solution-easytounderstand",
                "content": "Runtime: 20 ms, faster than 72.73% of C++ online submissions for Difference Between Element Sum and Digit Sum of an Array.\\nMemory Usage: 15.7 MB, less than 81.82% of C++ online submissions for Difference Between Element Sum and Digit Sum of an Array.\\n\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int eSum=0;\\n        int dSum=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            eSum += nums[i];\\n            int temp = nums[i];\\n            while(temp>0){\\n                int rem = temp%10;\\n                dSum += rem;\\n                temp /= 10;\\n            }\\n        }\\n        return abs(eSum-dSum);\\n        \\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int eSum=0;\\n        int dSum=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            eSum += nums[i];\\n            int temp = nums[i];\\n            while(temp>0){\\n                int rem = temp%10;\\n                dSum += rem;\\n                temp /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3053810,
                "title": "easy-to-understand-c-solution",
                "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int x = 0, y = 0,z;\\n        for(auto i: nums){\\n            x += i;\\n            while(i){\\n                y += (i%10);\\n                i = i / 10;\\n            }\\n        }\\n        return abs(x-y);\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int x = 0, y = 0,z;\\n        for(auto i: nums){\\n            x += i;\\n            while(i){\\n                y += (i%10);\\n                i = i / 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3053193,
                "title": "fastest-c-solution",
                "content": "\\n\\n\\nclass Solution{\\n\\npublic:\\n\\t\\n\\t//Function for adding the digits in the number\\n    int digits_sum(int num){\\n\\t\\tint ans=0;\\n        while(num){\\n            ans += num%10;\\n            num /= 10;\\n        }\\n        return ans;\\n    }\\n    \\n\\tint differenceOfSum(vector<int>& nums) {\\n        \\n\\t\\tint sum1 = 0,sum2=0;\\n\\t\\t\\n        for(int i=0;i < nums.size();i++){\\n\\t\\t\\t\\n\\t\\t\\t//Adding numbers\\n            sum1 += nums[i];\\n\\t\\t\\t\\n\\t\\t\\t//Adding the digits of the number\\n            sum2 += digits_sum(nums[i]);\\n        }\\n        return abs(sum1 - sum2);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "class Solution{\\n\\npublic:\\n\\t\\n\\t//Function for adding the digits in the number\\n    int digits_sum(int num){\\n\\t\\tint ans=0;\\n        while(num){\\n            ans += num%10;\\n            num /= 10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3052967,
                "title": "easy-and-simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int element = 0;\\n        int digit = 0;\\n        for(int num : nums) {\\n            element += num;\\n            while(num > 0) {\\n                digit += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return Math.abs(element - digit);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int element = 0;\\n        int digit = 0;\\n        for(int num : nums) {\\n            element += num;\\n            while(num > 0) {\\n                digit += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return Math.abs(element - digit);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052934,
                "title": "rust-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n\\nimpl Solution {\\n    pub fn difference_of_sum(nums: Vec<i32>) -> i32 {\\n        let sum = nums.iter().sum::<i32>();\\n        let mut digits = 0;\\n        \\n        for mut a in nums {\\n            while a > 0 {\\n                digits += a % 10;\\n                a /= 10;\\n            }\\n        }\\n        \\n        i32::abs(sum - digits)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\n\\n\\nimpl Solution {\\n    pub fn difference_of_sum(nums: Vec<i32>) -> i32 {\\n        let sum = nums.iter().sum::<i32>();\\n        let mut digits = 0;\\n        \\n        for mut a in nums {\\n            while a > 0 {\\n                digits += a % 10;\\n                a /= 10;\\n            }\\n        }\\n        \\n        i32::abs(sum - digits)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070021,
                "title": "solution-of-difference-between-element-sum-and-digit-sum-of-an-array-problem",
                "content": "\\n# Approach\\n- Solved using loop\\n- Add each number to el_sum and add each of its digits to dig_sum\\n- P.S: No need to use abs because a number is always >= the sum of its digits\\n\\n# Complexity\\n- Time complexity:\\n$$O(m*n)$$ - as we are iterating over m digits from n elements.\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        el_num, dig_num = 0, 0\\n        for number in nums:\\n            el_num += number\\n            while number != 0:\\n                dig_num += number % 10\\n                number //= 10\\n        return el_num - dig_num\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        el_num, dig_num = 0, 0\\n        for number in nums:\\n            el_num += number\\n            while number != 0:\\n                dig_num += number % 10\\n                number //= 10\\n        return el_num - dig_num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3714046,
                "title": "c-very-easy-to-understand-solution-modular-code-o-n",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countSum(int n)\\n    {\\n        int sum = 0;\\n        while(n>0)\\n        {\\n            sum += n%10;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int elemSum = accumulate(nums.begin(),nums.end(),0);\\n        int digitSum = 0;\\n        for(int i : nums)\\n        {\\n            digitSum += countSum(i);\\n        }\\n        return abs(elemSum-digitSum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countSum(int n)\\n    {\\n        int sum = 0;\\n        while(n>0)\\n        {\\n            sum += n%10;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int elemSum = accumulate(nums.begin(),nums.end(),0);\\n        int digitSum = 0;\\n        for(int i : nums)\\n        {\\n            digitSum += countSum(i);\\n        }\\n        return abs(elemSum-digitSum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3707470,
                "title": "easiest-solution-with-very-simple-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static int digiSum(int num)\\n    {\\n        int sum = 0;\\n        while(num>0)\\n        {\\n            int rem = num%10;\\n            sum = sum+rem;\\n            num=num/10;\\n        }\\n        return sum;\\n    }\\n    public int differenceOfSum(int[] nums) {\\n        int eleSum =0, digitSum=0;\\n\\n        for(int i=0;i<nums.length;i++)\\n        {   \\n            int num = nums[i];\\n            eleSum += nums[i]; \\n            digitSum+=Solution.digiSum(num);\\n        }\\n        return Math.abs(eleSum-digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static int digiSum(int num)\\n    {\\n        int sum = 0;\\n        while(num>0)\\n        {\\n            int rem = num%10;\\n            sum = sum+rem;\\n            num=num/10;\\n        }\\n        return sum;\\n    }\\n    public int differenceOfSum(int[] nums) {\\n        int eleSum =0, digitSum=0;\\n\\n        for(int i=0;i<nums.length;i++)\\n        {   \\n            int num = nums[i];\\n            eleSum += nums[i]; \\n            digitSum+=Solution.digiSum(num);\\n        }\\n        return Math.abs(eleSum-digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668554,
                "title": "python3-solution-for-beginners",
                "content": "PLEASE UPVOTE :)\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum1 = sum(nums)\\n        sum2 = 0\\n        for i in nums:\\n            for j in str(i):\\n                sum2 += int(j)\\n        return abs(sum1 - sum2)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum1 = sum(nums)\\n        sum2 = 0\\n        for i in nums:\\n            for j in str(i):\\n                sum2 += int(j)\\n        return abs(sum1 - sum2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3664957,
                "title": "difference-between-element-sum-and-digit-sum-of-an-array-100-easy-java-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int element_sum = 0;\\n        int digit_sum = 0;\\n        for(int i=0;i<nums.length;i++){\\n            element_sum+=nums[i];\\n\\n            int val = nums[i];\\n            int x;\\n            \\n            while(val>0){\\n                x = val%10;\\n                digit_sum +=x;\\n                val = val/10;\\n            }\\n        }\\n        return Math.abs(element_sum - digit_sum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int element_sum = 0;\\n        int digit_sum = 0;\\n        for(int i=0;i<nums.length;i++){\\n            element_sum+=nums[i];\\n\\n            int val = nums[i];\\n            int x;\\n            \\n            while(val>0){\\n                x = val%10;\\n                digit_sum +=x;\\n                val = val/10;\\n            }\\n        }\\n        return Math.abs(element_sum - digit_sum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3641657,
                "title": "99-beats-easy-java-solution-for-beginners-and-others-too",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum = 0;\\n        int digitSum = 0;\\n        for(int i : nums) {\\n            sum += i;\\n            while(i > 0) {\\n                digitSum += i % 10;\\n                i = i / 10;\\n            }\\n        }\\n        return Math.abs(sum - digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum = 0;\\n        int digitSum = 0;\\n        for(int i : nums) {\\n            sum += i;\\n            while(i > 0) {\\n                digitSum += i % 10;\\n                i = i / 10;\\n            }\\n        }\\n        return Math.abs(sum - digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3549097,
                "title": "clean-ts-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction differenceOfSum(nums: number[]): number {\\n    let elemSumOfNums = nums.reduce((acc,val) => acc + val, 0)\\n    let digitSumOfNums = nums.reduce((acc, val) => acc+ val, \\'\\').split(\\'\\').reduce((acc, val) => acc + Number(val), 0)\\n    return elemSumOfNums - digitSumOfNums;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction differenceOfSum(nums: number[]): number {\\n    let elemSumOfNums = nums.reduce((acc,val) => acc + val, 0)\\n    let digitSumOfNums = nums.reduce((acc, val) => acc+ val, \\'\\').split(\\'\\').reduce((acc, val) => acc + Number(val), 0)\\n    return elemSumOfNums - digitSumOfNums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3516526,
                "title": "beginners-friendly-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n*k) and for second code O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1) and for second code O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        \\n        int sum=0;\\n        int digitSum=0;\\n\\n        for(int num:nums){\\n            sum+=num;\\n\\n            while(num>0){\\n                int digit=num%10;\\n                digitSum+=digit;\\n                num/=10;\\n            }\\n\\n        }\\n\\n        return sum-digitSum;\\n    }\\n}\\n```\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n\\n        // sum the all element \\n        String digit=\"\";\\n        int sum=0;\\n        for(int num: nums) {\\n            sum+=num;\\n            digit+=num;\\n        \\n        }\\n\\n        int digitSum=0;\\n        for(int i=0;i<digit.length();i++){\\n            digitSum+=digit.charAt(i)-\\'0\\';\\n        }\\nreturn sum-digitSum;\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        \\n        int sum=0;\\n        int digitSum=0;\\n\\n        for(int num:nums){\\n            sum+=num;\\n\\n            while(num>0){\\n                int digit=num%10;\\n                digitSum+=digit;\\n                num/=10;\\n            }\\n\\n        }\\n\\n        return sum-digitSum;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n\\n        // sum the all element \\n        String digit=\"\";\\n        int sum=0;\\n        for(int num: nums) {\\n            sum+=num;\\n            digit+=num;\\n        \\n        }\\n\\n        int digitSum=0;\\n        for(int i=0;i<digit.length();i++){\\n            digitSum+=digit.charAt(i)-\\'0\\';\\n        }\\nreturn sum-digitSum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490352,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for(int x : nums) {\\n            elementSum += x;\\n            while(x != 0) {\\n                digitSum += x % 10;\\n                x /= 10;\\n            }\\n        }\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for(int x : nums) {\\n            elementSum += x;\\n            while(x != 0) {\\n                digitSum += x % 10;\\n                x /= 10;\\n            }\\n        }\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490332,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        for(int x : nums) {\\n            elementSum += x;\\n        }\\n        \\n        int digitSum = 0;\\n        for(int x : nums) {\\n            while(x != 0) {\\n                digitSum += x % 10;\\n                x /= 10;\\n            }\\n        }\\n\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        for(int x : nums) {\\n            elementSum += x;\\n        }\\n        \\n        int digitSum = 0;\\n        for(int x : nums) {\\n            while(x != 0) {\\n                digitSum += x % 10;\\n                x /= 10;\\n            }\\n        }\\n\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483761,
                "title": "javascript-solution-using-reduce-and-for-loop",
                "content": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let digitSum = 0;\\n    let total = nums.reduce((total, curr)=> {\\n        let currToStr = curr;\\n        for(let i=0; i<curr.toString().length; i++) {\\n            digitSum += currToStr%10;\\n            currToStr = Math.floor(currToStr/10);\\n        }\\n        return total + curr;\\n    }, 0)\\n    return Math.abs(total - digitSum);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let digitSum = 0;\\n    let total = nums.reduce((total, curr)=> {\\n        let currToStr = curr;\\n        for(let i=0; i<curr.toString().length; i++) {\\n            digitSum += currToStr%10;\\n            currToStr = Math.floor(currToStr/10);\\n        }\\n        return total + curr;\\n    }, 0)\\n    return Math.abs(total - digitSum);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3456872,
                "title": "java-solution-easy-steps",
                "content": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n       int numsSum=0;\\n       int digitSum=0;\\n       for(int i=0;i<nums.length;i++) {\\n          numsSum+=nums[i] ;\\n          int num=nums[i];\\n          if(num>=10){\\n              while(num>0){\\n                digitSum+=num%10;\\n                num=num/10;\\n              }\\n          }\\n           else{\\n               digitSum+=num;\\n           }\\n       }\\n      return Math.abs(numsSum-digitSum) ;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n       int numsSum=0;\\n       int digitSum=0;\\n       for(int i=0;i<nums.length;i++) {\\n          numsSum+=nums[i] ;\\n          int num=nums[i];\\n          if(num>=10){\\n              while(num>0){\\n                digitSum+=num%10;\\n                num=num/10;\\n              }\\n          }\\n           else{\\n               digitSum+=num;\\n           }\\n       }\\n      return Math.abs(numsSum-digitSum) ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3385909,
                "title": "simple-and-easy-c-solution-brute-force-greedy-clear-and-understandable-approach",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;\\n        for(auto ok:nums){\\n            sum += ok;\\n        }\\n        int sum1=0;\\n        for(auto ok: nums){\\n            while(ok>0){\\n                sum1 += (ok%10);\\n                ok /= 10;\\n            }\\n        }\\n        return abs(sum1-sum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;\\n        for(auto ok:nums){\\n            sum += ok;\\n        }\\n        int sum1=0;\\n        for(auto ok: nums){\\n            while(ok>0){\\n                sum1 += (ok%10);\\n                ok /= 10;\\n            }\\n        }\\n        return abs(sum1-sum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3372286,
                "title": "using-java-beats-75-with-3ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum=0;\\n         int digitSum=0;\\n        for(int x:nums)\\n            {\\n                elementSum+=x;\\n                while(x>0)\\n                {\\n                    int dig=x%10;\\n                    digitSum+=dig;\\n                    x=x/10;\\n                }\\n            }\\n       return Math.abs(elementSum-digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum=0;\\n         int digitSum=0;\\n        for(int x:nums)\\n            {\\n                elementSum+=x;\\n                while(x>0)\\n                {\\n                    int dig=x%10;\\n                    digitSum+=dig;\\n                    x=x/10;\\n                }\\n            }\\n       return Math.abs(elementSum-digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3352516,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int es=0,ds=0;\\n        for(auto i:nums){\\n            es+=i;\\n            while(i){\\n                ds+=i%10;\\n                i/=10;\\n            }\\n        }\\n        return abs(es-ds);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int es=0,ds=0;\\n        for(auto i:nums){\\n            es+=i;\\n            while(i){\\n                ds+=i%10;\\n                i/=10;\\n            }\\n        }\\n        return abs(es-ds);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329053,
                "title": "java-easy-soln-99-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n// Online Java Compiler\\n// Use this editor to write, compile and run your Java code online\\nclass Solution {\\n    public static int differenceOfSum(int[] nums) {\\n        int esum=0;\\n        int dsum=0;\\n        // String str=\" \";\\n        for(int e:nums){\\n            esum+=e;\\n            // str+=Integer.toString(e);\\n            while(e>9){\\n                dsum+=e%10;\\n                e=e/10;\\n                \\n            }\\n            dsum+=e;\\n        }\\n        // for(int i=0;i<str.length();i++){\\n        //     char s=str.charAt(i);\\n        //     dsum+=Character.getNumericValue(s);\\n        // }\\n        return (esum-dsum);\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Online Java Compiler\\n// Use this editor to write, compile and run your Java code online\\nclass Solution {\\n    public static int differenceOfSum(int[] nums) {\\n        int esum=0;\\n        int dsum=0;\\n        // String str=\" \";\\n        for(int e:nums){\\n            esum+=e;\\n            // str+=Integer.toString(e);\\n            while(e>9){\\n                dsum+=e%10;\\n                e=e/10;\\n                \\n            }\\n            dsum+=e;\\n        }\\n        // for(int i=0;i<str.length();i++){\\n        //     char s=str.charAt(i);\\n        //     dsum+=Character.getNumericValue(s);\\n        // }\\n        return (esum-dsum);\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3310327,
                "title": "most-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n=nums.length;\\n        int k,sum=0,sum1=0;\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int j=0;j<n;j++){\\n            while(nums[j] > 0){\\n                k = nums[j] % 10;\\n                sum1 = sum1 + k;\\n                nums[j] = nums[j] / 10;\\n            }\\n        }\\n        return Math.abs(sum-sum1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n=nums.length;\\n        int k,sum=0,sum1=0;\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int j=0;j<n;j++){\\n            while(nums[j] > 0){\\n                k = nums[j] % 10;\\n                sum1 = sum1 + k;\\n                nums[j] = nums[j] / 10;\\n            }\\n        }\\n        return Math.abs(sum-sum1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3275850,
                "title": "java-brute-force-easy-solution",
                "content": "# Intuition\\n   By using iteration method we can sum the digits and we can find the difference  \\n\\n# Approach\\nBrute force\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n,sum=0,add=0;\\n        for(int i=0;i<nums.length;i++){\\n            add+=nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            for(int j=0;j<nums.length;j++){\\n                while(nums[j]>0){\\n                    n=nums[j]%10;\\n                    sum=sum+n;\\n                    nums[j]=nums[j]/10;\\n                }\\n            }\\n        }\\n         int ans=add-sum;\\n        if(ans<0)\\n          return -1*ans;\\n          return ans;\\n        // int ans=abs(add-sum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n,sum=0,add=0;\\n        for(int i=0;i<nums.length;i++){\\n            add+=nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            for(int j=0;j<nums.length;j++){\\n                while(nums[j]>0){\\n                    n=nums[j]%10;\\n                    sum=sum+n;\\n                    nums[j]=nums[j]/10;\\n                }\\n            }\\n        }\\n         int ans=add-sum;\\n        if(ans<0)\\n          return -1*ans;\\n          return ans;\\n        // int ans=abs(add-sum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3270015,
                "title": "java-very-easy-solution-runtime-3ms-beats-70-58",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(N*M)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n=nums.length;\\n        int k,sum=0,sum1=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        \\n        for(int j=0;j<n;j++)\\n        {\\n            while(nums[j] > 0)\\n            {\\n                k = nums[j] % 10;\\n                sum1 = sum1 + k;\\n                nums[j] = nums[j] / 10;\\n            }\\n        }\\n        return Math.abs(sum-sum1);\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n=nums.length;\\n        int k,sum=0,sum1=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        \\n        for(int j=0;j<n;j++)\\n        {\\n            while(nums[j] > 0)\\n            {\\n                k = nums[j] % 10;\\n                sum1 = sum1 + k;\\n                nums[j] = nums[j] / 10;\\n            }\\n        }\\n        return Math.abs(sum-sum1);\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3263693,
                "title": "easy-to-understand-the-c-code-in-soft-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int esum=0,dsum=0,ans=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int n=nums[i];\\n            esum+=n;\\n            while(n!=0)\\n            {\\n                dsum+=n%10;\\n                n=n/10;\\n            }\\n        }\\n        if(esum>dsum)\\n        {\\n            ans=esum-dsum;\\n        }\\n        else\\n        {\\n            ans=dsum-esum;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int esum=0,dsum=0,ans=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int n=nums[i];\\n            esum+=n;\\n            while(n!=0)\\n            {\\n                dsum+=n%10;\\n                n=n/10;\\n            }\\n        }\\n        if(esum>dsum)\\n        {\\n            ans=esum-dsum;\\n        }\\n        else\\n        {\\n            ans=dsum-esum;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3236403,
                "title": "easy-way-to-solve-this-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfind the sum of elements\\nfind the sum of elements untill it is ==0 \\nand finally we substract the sum-sum2;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n       int sum=0;\\n       int sum2=0;\\n       \\n       for(int i=0;i<nums.size();i++){\\n           sum+=nums[i];\\n       } \\n       for(int i=0;i<nums.size();i++){\\n           int temp=nums[i];\\n           int r=0;\\n           while(temp>0){\\n               r=temp%10;\\n               sum2+=r;\\n               temp/=10;\\n           }\\n       }\\n       int finalsum=sum-sum2;;\\n       return finalsum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n       int sum=0;\\n       int sum2=0;\\n       \\n       for(int i=0;i<nums.size();i++){\\n           sum+=nums[i];\\n       } \\n       for(int i=0;i<nums.size();i++){\\n           int temp=nums[i];\\n           int r=0;\\n           while(temp>0){\\n               r=temp%10;\\n               sum2+=r;\\n               temp/=10;\\n           }\\n       }\\n       int finalsum=sum-sum2;;\\n       return finalsum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233583,
                "title": "javascript-1-linear-readable-with-explanation-code",
                "content": "# Readable Code\\n```\\n// Calculates the difference between the sum of the array and the sum of its digits\\nvar differenceOfSum = function(nums) {\\n  // Calculate the sum of the array using reduce()\\n  // The initial value of the accumulator is 0\\n  const sumOfArray = nums.reduce((sum, cur) => sum + cur, 0);\\n  \\n  // Join the array into a string and split it into an array of digits\\n  // Calculate the sum of the digits using reduce()\\n  // The initial value of the accumulator is 0\\n  const sumOfDigits = nums.join(\\'\\').split(\\'\\').reduce((sum, cur) => sum + parseInt(cur), 0);\\n  \\n  // Return the difference between the sum of the array and the sum of its digits\\n  return sumOfArray - sumOfDigits;\\n};\\n\\n```\\n\\n# One Linear \\n\\n```\\nvar differenceOfSum = function(nums) {\\n    return (nums.reduce((sum, cur) => sum + cur,0) - nums.join(\\'\\').split(\\'\\').reduce((sum, cur) => sum + parseInt(cur),0)) \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Calculates the difference between the sum of the array and the sum of its digits\\nvar differenceOfSum = function(nums) {\\n  // Calculate the sum of the array using reduce()\\n  // The initial value of the accumulator is 0\\n  const sumOfArray = nums.reduce((sum, cur) => sum + cur, 0);\\n  \\n  // Join the array into a string and split it into an array of digits\\n  // Calculate the sum of the digits using reduce()\\n  // The initial value of the accumulator is 0\\n  const sumOfDigits = nums.join(\\'\\').split(\\'\\').reduce((sum, cur) => sum + parseInt(cur), 0);\\n  \\n  // Return the difference between the sum of the array and the sum of its digits\\n  return sumOfArray - sumOfDigits;\\n};\\n\\n```\n```\\nvar differenceOfSum = function(nums) {\\n    return (nums.reduce((sum, cur) => sum + cur,0) - nums.join(\\'\\').split(\\'\\').reduce((sum, cur) => sum + parseInt(cur),0)) \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3219534,
                "title": "easy-to-understand-java-solution-simple-approach",
                "content": "# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum2=0,sum=0;\\n        for(int i=0;i<nums.length;i++){\\n            sum2+=nums[i];\\n            int num=nums[i];\\n            while(num>0){\\n                sum=sum+(num%10);\\n                num=num/10;\\n            }\\n        }\\n        if(sum2-sum<0){\\n            return (sum2-sum)*-1;\\n        }\\n        return sum2-sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum2=0,sum=0;\\n        for(int i=0;i<nums.length;i++){\\n            sum2+=nums[i];\\n            int num=nums[i];\\n            while(num>0){\\n                sum=sum+(num%10);\\n                num=num/10;\\n            }\\n        }\\n        if(sum2-sum<0){\\n            return (sum2-sum)*-1;\\n        }\\n        return sum2-sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3200617,
                "title": "nice-simple-solution",
                "content": "# My solution\\n**Element sum is always >= digit sum**\\n# Code\\n```\\nfunc differenceOfSum(nums []int) int {\\n    res := 0\\n    for _, v := range nums {\\n        res += v\\n        for v > 0 {\\n            res -= v % 10\\n            v = v/10\\n        }\\n    }\\n\\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc differenceOfSum(nums []int) int {\\n    res := 0\\n    for _, v := range nums {\\n        res += v\\n        for v > 0 {\\n            res -= v % 10\\n            v = v/10\\n        }\\n    }\\n\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3187748,
                "title": "java-c-best-solution-simple-solution",
                "content": "# Intuition\\n![078cc82b-d80b-4aef-ae08-ce75ef6c698d_1676176908.0916324.jpeg](https://assets.leetcode.com/users/images/97718ae7-a4d5-4a63-8474-7623adea35a8_1676439965.0989964.jpeg)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum=0;\\n        int absum=0;\\n        for(int i=0;i<nums.length;i++){\\n            sum=sum+nums[i];\\n            if(nums[i]<9){\\n                absum=absum+nums[i];\\n            }\\n            else{\\n                int p=nums[i];\\n                while(p!=0){\\n                   int m=p%10;\\n                   absum=absum+m;\\n                   p=p/10; \\n                }\\n            }\\n        }\\n        int b=sum-absum;\\n        return b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum=0;\\n        int absum=0;\\n        for(int i=0;i<nums.length;i++){\\n            sum=sum+nums[i];\\n            if(nums[i]<9){\\n                absum=absum+nums[i];\\n            }\\n            else{\\n                int p=nums[i];\\n                while(p!=0){\\n                   int m=p%10;\\n                   absum=absum+m;\\n                   p=p/10; \\n                }\\n            }\\n        }\\n        int b=sum-absum;\\n        return b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3171395,
                "title": "c-simple-solution-bruteforce-faster-than-63-less-than-74",
                "content": "![image.png](https://assets.leetcode.com/users/images/15f38449-bace-4d35-aecc-9b2ce30cdfaa_1676109433.2307158.png)\\n\\n**Don\\'t hesitate to suggest or ask bellow about something that you don\\'t understand**\\n\\n```\\npublic class Solution {\\n    public int DifferenceOfSum(int[] nums) {\\n        int sum = 0;\\n        int sum2 = 0;\\n        foreach (var n in nums)\\n            sum += n;\\n        foreach (var n in nums)\\n        {\\n            int k = n;\\n            while (k > 0)\\n            {\\n                int j = k % 10;\\n                k /= 10;\\n                sum2 += j;\\n            }\\n        }\\n        return sum - sum2;\\n    }\\n}\\n```\\n\\nIf you like it don\\'t forget to **upvote!**",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DifferenceOfSum(int[] nums) {\\n        int sum = 0;\\n        int sum2 = 0;\\n        foreach (var n in nums)\\n            sum += n;\\n        foreach (var n in nums)\\n        {\\n            int k = n;\\n            while (k > 0)\\n            {\\n                int j = k % 10;\\n                k /= 10;\\n                sum2 += j;\\n            }\\n        }\\n        return sum - sum2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3168343,
                "title": "difference-between-element-sum-and-digit-sum-of-an-array-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFind the element sums first and then the digit sum and get the absolute difference.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Element sum: Calculate the elements sum using a for loop and store in a variable sum1\\n- Digits sum: If nums[i]>9, then find the individual digits and keep summing it in the sum2 variable.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int i, sum1=0, sum2=0;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            sum1 += nums[i];\\n            if(nums[i]>9)\\n            {\\n                while(nums[i]>0)\\n                {\\n                    sum2 += nums[i]%10;\\n                    nums[i] = nums[i]/10;\\n                }\\n            }\\n            else\\n            {\\n                sum2 += nums[i];\\n            }\\n        }\\n        return abs(sum1-sum2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int i, sum1=0, sum2=0;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            sum1 += nums[i];\\n            if(nums[i]>9)\\n            {\\n                while(nums[i]>0)\\n                {\\n                    sum2 += nums[i]%10;\\n                    nums[i] = nums[i]/10;\\n                }\\n            }\\n            else\\n            {\\n                sum2 += nums[i];\\n            }\\n        }\\n        return abs(sum1-sum2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3163686,
                "title": "simple-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def differenceOfSum(self, nums):\\n        summing=sum(nums)\\n        string=\"\"\\n        number=0\\n        for i in nums:\\n            string+=str(i)\\n        for j in string:\\n            number+=int(j)\\n        return abs(number-summing)\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def differenceOfSum(self, nums):\\n        summing=sum(nums)\\n        string=\"\"\\n        number=0\\n        for i in nums:\\n            string+=str(i)\\n        for j in string:\\n            number+=int(j)\\n        return abs(number-summing)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142393,
                "title": "swift-3-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nfunc differenceOfSum(_ nums: [Int]) -> Int {\\n    let sumArr = nums.reduce(0, +)\\n    let sumArr1 = nums.description.compactMap { Int(String($0))}.reduce(0, +)\\n    return sumArr - sumArr1\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\nfunc differenceOfSum(_ nums: [Int]) -> Int {\\n    let sumArr = nums.reduce(0, +)\\n    let sumArr1 = nums.description.compactMap { Int(String($0))}.reduce(0, +)\\n    return sumArr - sumArr1\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3127519,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n\\n        \\n            int element_sum=0;\\n            int digit_sum=0;\\n            int n=nums.size();\\n            for(int  i=0;i<n;i++ )\\n            {\\n                element_sum+=nums[i];\\n                int temp=nums[i];\\n                while(temp>0)\\n                {\\n                    digit_sum+=temp%10;\\n                    temp=temp/10;\\n                }\\n            }\\n            int diff=element_sum-digit_sum;\\n            if(diff<0)\\n            {\\n                return -1*diff;\\n            }\\n            else\\n            return diff;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n\\n        \\n            int element_sum=0;\\n            int digit_sum=0;\\n            int n=nums.size();\\n            for(int  i=0;i<n;i++ )\\n            {\\n                element_sum+=nums[i];\\n                int temp=nums[i];\\n                while(temp>0)\\n                {\\n                    digit_sum+=temp%10;\\n                    temp=temp/10;\\n                }\\n            }\\n            int diff=element_sum-digit_sum;\\n            if(diff<0)\\n            {\\n                return -1*diff;\\n            }\\n            else\\n            return diff;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3099394,
                "title": "c-solution-simpleapproach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int x=0,y=0;\\n        for(int i=0;i<nums.size();++i)\\n        {\\n            x+=nums[i];\\n            while(nums[i]>0)\\n            {\\n                y+=nums[i]%10;\\n                nums[i]/=10;\\n            }\\n        }\\n        return abs(x-y);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int x=0,y=0;\\n        for(int i=0;i<nums.size();++i)\\n        {\\n            x+=nums[i];\\n            while(nums[i]>0)\\n            {\\n                y+=nums[i]%10;\\n                nums[i]/=10;\\n            }\\n        }\\n        return abs(x-y);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3094710,
                "title": "solution-in-java",
                "content": ">\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int resultSumElements = 0;\\n        int resultSumAbsolute = 0;\\n        int finalRes;\\n\\n        for (int i : nums) {\\n            resultSumElements += i;\\n            while (i != 0) {\\n                resultSumAbsolute += i % 10;\\n                i /= 10;\\n            }\\n        }\\n        finalRes = Math.abs(resultSumElements - resultSumAbsolute);\\n\\n        return finalRes;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int resultSumElements = 0;\\n        int resultSumAbsolute = 0;\\n        int finalRes;\\n\\n        for (int i : nums) {\\n            resultSumElements += i;\\n            while (i != 0) {\\n                resultSumAbsolute += i % 10;\\n                i /= 10;\\n            }\\n        }\\n        finalRes = Math.abs(resultSumElements - resultSumAbsolute);\\n\\n        return finalRes;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3093610,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int s1=0, s2=0;\\n        for(int i=0; i<nums.size(); i++){\\n            s1+=nums[i];\\n            int l=nums[i];\\n            while(l){\\n                s2+=l%10;\\n                l/=10;\\n            }\\n        }\\n        return abs(s1-s2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int s1=0, s2=0;\\n        for(int i=0; i<nums.size(); i++){\\n            s1+=nums[i];\\n            int l=nums[i];\\n            while(l){\\n                s2+=l%10;\\n                l/=10;\\n            }\\n        }\\n        return abs(s1-s2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3088803,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.lang.Math;\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n=0,es=0,ds=0,r=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            es=es+nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            n=nums[i];\\n            while(n>0)\\n            {\\n                r=n%10;\\n                ds=ds+r;\\n                n=n/10;\\n            }\\n        }\\n        int re = Math.abs(es-ds);\\n    return re;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.lang.Math;\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int n=0,es=0,ds=0,r=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            es=es+nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            n=nums[i];\\n            while(n>0)\\n            {\\n                r=n%10;\\n                ds=ds+r;\\n                n=n/10;\\n            }\\n        }\\n        int re = Math.abs(es-ds);\\n    return re;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086334,
                "title": "simple-cpp-datta-bayo",
                "content": "simple Approach No explanation required\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int ele_sum = accumulate(nums.begin(),nums.end(),0);\\n        int dig_sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int num = nums[i];\\n            while(num!=0)\\n            {\\n                dig_sum=dig_sum+(num%10);\\n                num = num/10;\\n\\n            }\\n        }\\n        return abs(ele_sum-dig_sum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int ele_sum = accumulate(nums.begin(),nums.end(),0);\\n        int dig_sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int num = nums[i];\\n            while(num!=0)\\n            {\\n                dig_sum=dig_sum+(num%10);\\n                num = num/10;\\n\\n            }\\n        }\\n        return abs(ele_sum-dig_sum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084861,
                "title": "c-easy-solution-memory-beats-87-66",
                "content": "``````\\nclass Solution {\\npublic:\\nint result(int x){\\n    if(x<10 and x>0)\\n    return x;\\n    int s=0;\\n    while(x!=0){\\n        s+=x%10;\\n        x=x/10;\\n    }\\n    return s;\\n}\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum1=0,sum2=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum1+=nums[i];\\n            sum2+=result(nums[i]);\\n        }\\n        int a=sum1-sum2;\\n    if(a<0)\\n    a=-a;\\n    return a;\\n    }\\n    //please vote if you find the solution is helpfull\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "``````",
                "codeTag": "Unknown"
            },
            {
                "id": 3077962,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint differenceOfSum(int* nums, int numsSize){\\nint elementSum = 0, digitSum = 0;\\nfor(int i = 0; i < numsSize; i++){\\nelementSum += nums[i]; // add the current element to the element sum\\nint currentNum = nums[i]; // store the current element in a variable for easier manipulation\\nwhile(currentNum > 0){\\ndigitSum += currentNum % 10; // add the last digit of the current element to the digit sum\\ncurrentNum /= 10; // remove the last digit of the current element\\n}\\n}\\nreturn abs(elementSum - digitSum); // return the absolute difference between the element sum and digit sum\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint differenceOfSum(int* nums, int numsSize){\\nint elementSum = 0, digitSum = 0;\\nfor(int i = 0; i < numsSize; i++){\\nelementSum += nums[i]; // add the current element to the element sum\\nint currentNum = nums[i]; // store the current element in a variable for easier manipulation\\nwhile(currentNum > 0){\\ndigitSum += currentNum % 10; // add the last digit of the current element to the digit sum\\ncurrentNum /= 10; // remove the last digit of the current element\\n}\\n}\\nreturn abs(elementSum - digitSum); // return the absolute difference between the element sum and digit sum\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3074149,
                "title": "python3-for-beginner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n\\n        elemsum = sum(nums)\\n\\n        digitsum = 0\\n\\n        for num in nums:\\n            lis = [int(x) for x in str(num)]\\n            digitsum += sum(lis)\\n\\n        return abs(elemsum-digitsum)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n\\n        elemsum = sum(nums)\\n\\n        digitsum = 0\\n\\n        for num in nums:\\n            lis = [int(x) for x in str(num)]\\n            digitsum += sum(lis)\\n\\n        return abs(elemsum-digitsum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3068966,
                "title": "c-solution-o-n-time-and-o-1-space",
                "content": "# Intuition\\nWe need to sum all $$n$$ elements in two different ways. The one is trivial and the other is also trivial in base case, e.g. $$n < 10$$. The non-trivial case is when $$n >= 10$$, in which case we need to break the number down and keep adding either the least significant digit or most significant digit and subtract this from the number, until we reach base case.\\n\\nReturn value is the absolute difference between the two sums.\\n\\n# Approach\\n- Travers all `n` elements\\n- For each element add value to `elementSum`\\n- For each element with a value above `nums[i] > 9` return the least significant digit and \\'remove\\' this from the number (first by taking modolu and then dividing). This non-trivial cases will happen for thousands, hundreds and tens.\\n- For each element belows tens, add value to `digitalSum`\\n- Take absolute value of both sum with `abs()` and return\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$, best and worst case. Computational complixity is constant higher for a list only with digits `n >= 1000` and vice versa with digits only of `n < 10`. \\n\\n- Space complexity:\\n$$O(1)$$, no auxiliary space.\\n\\n# Code\\n```\\nint differenceOfSum(int* nums, int numsSize) {\\n    register unsigned int elementSum = 0, digitalSum = 0;\\n    register unsigned short i;\\n\\tfor(i = 0; i < numsSize; i++) {\\n\\t\\telementSum += nums[i];\\n\\t\\twhile(nums[i] > 9) {\\n\\t\\t\\tdigitalSum += nums[i] % 10;\\n\\t\\t\\tnums[i] = nums[i] / 10;\\n\\t\\t}\\n\\t\\tdigitalSum += nums[i];\\n\\t}\\n\\treturn abs(elementSum - digitalSum);\\n}\\n```\\n\\n# Misc\\n- A faster solutions could be obtained with [Bit Twiddling Hacks](https://graphics.stanford.edu/~seander/bithacks.html).",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint differenceOfSum(int* nums, int numsSize) {\\n    register unsigned int elementSum = 0, digitalSum = 0;\\n    register unsigned short i;\\n\\tfor(i = 0; i < numsSize; i++) {\\n\\t\\telementSum += nums[i];\\n\\t\\twhile(nums[i] > 9) {\\n\\t\\t\\tdigitalSum += nums[i] % 10;\\n\\t\\t\\tnums[i] = nums[i] / 10;\\n\\t\\t}\\n\\t\\tdigitalSum += nums[i];\\n\\t}\\n\\treturn abs(elementSum - digitalSum);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3067538,
                "title": "c-easy-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = accumulate(nums.begin(),nums.end(),0); //total sum\\n        int sumDigit = 0;\\n        for(auto num : nums){\\n            if(num >= 10) {\\n                while(num != 0){\\n                    sumDigit += (num % 10);\\n                    num = num /10;\\n                }\\n            }\\n            else{\\n                sumDigit += num;\\n            }\\n        }\\n        return sum - sumDigit;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = accumulate(nums.begin(),nums.end(),0); //total sum\\n        int sumDigit = 0;\\n        for(auto num : nums){\\n            if(num >= 10) {\\n                while(num != 0){\\n                    sumDigit += (num % 10);\\n                    num = num /10;\\n                }\\n            }\\n            else{\\n                sumDigit += num;\\n            }\\n        }\\n        return sum - sumDigit;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3065720,
                "title": "ruby-one-liner",
                "content": "```\\n# @param {Integer[]} nums\\n# @return {Integer}\\ndef difference_of_sum(nums)\\n  nums.sum - nums.flat_map(&:digits).sum\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer[]} nums\\n# @return {Integer}\\ndef difference_of_sum(nums)\\n  nums.sum - nums.flat_map(&:digits).sum\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3064527,
                "title": "c-solution-of-difference-between-element-sum-and-digit-sum-of-an-array",
                "content": "Runtime: 12 ms, faster than 87.26% of C++ online submissions for Difference Between Element Sum and Digit Sum of an Array.\\nMemory Usage: 15.6 MB, less than 87.74% of C++ online submissions for Difference Between Element Sum and Digit Sum of an Array.\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int p=nums.size();\\n        int sum1=0;\\n        for(int i=0;i<p;i++){\\n            sum1=sum1+nums[i];\\n        }\\n        int sum2=0;\\n        for(int i=0;i<p;i++){\\n            int q=nums[i];\\n            while(q!=0){\\n                int n=q%10;\\n                sum2=sum2+n;\\n                q=q/10;\\n            }\\n        }\\n        int ans=abs(sum1-sum2);\\n        return ans;\\n    }\\n};\\n\\n",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int p=nums.size();\\n        int sum1=0;\\n        for(int i=0;i<p;i++){\\n            sum1=sum1+nums[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3061995,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int s=0,a=0;\\n        for(auto x:nums){\\n            s=s+x;\\n            while(x>0){\\n                a=a+x%10;\\n                x=x/10;\\n            }\\n        }\\n        return s-a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int s=0,a=0;\\n        for(auto x:nums){\\n            s=s+x;\\n            while(x>0){\\n                a=a+x%10;\\n                x=x/10;\\n            }\\n        }\\n        return s-a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3059283,
                "title": "one-pass-simple-solution-explained-90-faster-c",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHelp function will be used to calculate sum of digits for a given loop.\\n\\nUsing help function and two int variables to maintain current sum of element sum and digit sum, we will get our answer in ONE pass.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int help(int num){\\n        int sum=0; \\n        while(num>0){\\n            int digit=num%10;\\n            sum+=digit;\\n            num/=10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int digsum=0;int totsum=0;\\n        for(auto it:nums){\\n            totsum+=it;\\n            digsum+=help(it);\\n        }\\n        return abs(totsum-digsum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int help(int num){\\n        int sum=0; \\n        while(num>0){\\n            int digit=num%10;\\n            sum+=digit;\\n            num/=10;\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int digsum=0;int totsum=0;\\n        for(auto it:nums){\\n            totsum+=it;\\n            digsum+=help(it);\\n        }\\n        return abs(totsum-digsum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3056274,
                "title": "easy-to-understand-solution",
                "content": "# Code\\n```\\nvar differenceOfSum = function(nums) {\\n    let arrSum = nums.reduce((a,b) => a + b)\\n    let digitsSum = []\\n    for(let i = 0; i < nums.length; i++){\\n        digitsSum.push(...(\"\"+nums[i]).split(\"\").map(Number))\\n    }\\n    console.log(digitsSum)\\n    return Math.abs(arrSum - digitsSum.reduce((a,b) => a + b))\\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar differenceOfSum = function(nums) {\\n    let arrSum = nums.reduce((a,b) => a + b)\\n    let digitsSum = []\\n    for(let i = 0; i < nums.length; i++){\\n        digitsSum.push(...(\"\"+nums[i]).split(\"\").map(Number))\\n    }\\n    console.log(digitsSum)\\n    return Math.abs(arrSum - digitsSum.reduce((a,b) => a + b))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3054847,
                "title": "rust-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn difference_of_sum(nums: Vec<i32>) -> i32 {\\n        let sum_dig = |mut x: i32| {\\n            let mut res = 0;\\n            while x > 0 {\\n                res += x % 10;\\n                x /= 10;\\n            }\\n            res\\n        };\\n        nums.into_iter().map(|x| (x - sum_dig(x)).abs()).sum()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Math",
                    "Iterator"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn difference_of_sum(nums: Vec<i32>) -> i32 {\\n        let sum_dig = |mut x: i32| {\\n            let mut res = 0;\\n            while x > 0 {\\n                res += x % 10;\\n                x /= 10;\\n            }\\n            res\\n        };\\n        nums.into_iter().map(|x| (x - sum_dig(x)).abs()).sum()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3054387,
                "title": "2535-java-1-approach",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 2 ms\\n- Beats : 100%\\n- Memory : 42.4 MB\\n- Beats : 90%\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum = 0 , dig = 0;\\n        for(int i : nums){\\n            sum += i;\\n            while(i != 0){\\n                dig += i % 10;\\n                i /= 10;\\n            }\\n        }\\n        return sum - dig;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum = 0 , dig = 0;\\n        for(int i : nums){\\n            sum += i;\\n            while(i != 0){\\n                dig += i % 10;\\n                i /= 10;\\n            }\\n        }\\n        return sum - dig;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3053957,
                "title": "scala-2-loc",
                "content": "# Code\\n```\\nobject Solution {\\n  def differenceOfSum(nums: Array[Int]): Int = {\\n    val digits = nums.flatMap(_.toString).map(_ - \\'0\\')\\n    math.abs(nums.sum - digits.sum)\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n  def differenceOfSum(nums: Array[Int]): Int = {\\n    val digits = nums.flatMap(_.toString).map(_ - \\'0\\')\\n    math.abs(nums.sum - digits.sum)\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3053681,
                "title": "c-easy",
                "content": "\\n\\n# Complexity\\n- Time complexity:  O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n\\n        int sum = 0;\\n        int dig_sum = 0;\\n\\n        for(int i = 0; i < nums.size(); i ++) {\\n            sum = sum + nums[i];\\n            while(nums[i] != 0) {\\n                dig_sum = dig_sum + nums[i]%10;\\n                nums[i] = nums[i]/10;\\n            }\\n        }\\n\\n        int diff = abs(sum - dig_sum);\\n\\n        return diff;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n\\n        int sum = 0;\\n        int dig_sum = 0;\\n\\n        for(int i = 0; i < nums.size(); i ++) {\\n            sum = sum + nums[i];\\n            while(nums[i] != 0) {\\n                dig_sum = dig_sum + nums[i]%10;\\n                nums[i] = nums[i]/10;\\n            }\\n        }\\n\\n        int diff = abs(sum - dig_sum);\\n\\n        return diff;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3053552,
                "title": "c-straight-forward-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;\\n        int dsum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum +=nums[i];\\n            while(nums[i]>0)\\n            {\\n                dsum +=nums[i]%10;\\n                nums[i]=nums[i]/10;\\n            }\\n        }\\n        sum=abs(sum-dsum);\\n        return sum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;\\n        int dsum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum +=nums[i];\\n            while(nums[i]>0)\\n            {\\n                dsum +=nums[i]%10;\\n                nums[i]=nums[i]/10;\\n            }\\n        }\\n        sum=abs(sum-dsum);\\n        return sum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052845,
                "title": "java-c-python-detailed-explanation",
                "content": "```\\n# intuition\\n```\\nThe problem is asking to calculate the difference between the sum of all the elements in a given list and the sum of all the digits of those elements. The intuition behind this problem is to understand the difference between the sum of the elements and the sum of the digits of those elements.\\n\\nThe element sum is simply the sum of all the elements in the list and can be easily calculated by iterating through the list and adding all the elements. The digit sum, on the other hand, is the sum of all the digits of all the elements in the list. This can be calculated by iterating through the list, and for each element, breaking it down into its digits and adding all the digits together.\\n\\nFinally, the problem asks to return the absolute difference between the element sum and digit sum. The absolute difference is used because it does not matter if the element sum is greater or smaller than the digit sum, the question wants to know just the difference between the two values.\\n\\n```\\n# Approach\\n```\\n\\nThere are several ways to approach this problem, but one common approach is to:\\n\\n* Initialize two variables, elementSum and digitSum, to keep track of the element sum and digit sum of the input array.\\n\\n* Iterate through the array using a loop, and for each element in the array:\\n\\n* * Add the element to the elementSum.\\n* * Break down the element into its digits, and add each digit to the digitSum.\\n* Return the absolute difference between elementSum and digitSum by using the abs() function.\\n\\nAnother approach could be to convert the number into string and then iterate through the string and add each digit to digit sum.\\n\\n**`Both the approaches have time complexity of O(n) and space complexity of O(1)`**\\n\\n**Java**\\n\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for (int num : nums) {\\n            elementSum += num;\\n            while (num > 0) {\\n                digitSum += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```\\n\\n**C++**\\n\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for (int num : nums) {\\n            elementSum += num;\\n            while (num > 0) {\\n                digitSum += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return abs(elementSum - digitSum);\\n    }\\n};\\n```\\n\\n**Python**\\n\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        element_sum = 0\\n        digit_sum = 0\\n        for num in nums:\\n            element_sum += num\\n            while num > 0:\\n                digit_sum += num % 10\\n                num = num // 10\\n        return abs(element_sum - digit_sum)\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\n# intuition\\n```\n```\\n# Approach\\n```\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for (int num : nums) {\\n            elementSum += num;\\n            while (num > 0) {\\n                digitSum += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for (int num : nums) {\\n            elementSum += num;\\n            while (num > 0) {\\n                digitSum += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return abs(elementSum - digitSum);\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        element_sum = 0\\n        digit_sum = 0\\n        for num in nums:\\n            element_sum += num\\n            while num > 0:\\n                digit_sum += num % 10\\n                num = num // 10\\n        return abs(element_sum - digit_sum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052789,
                "title": "c-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int es = 0, ds = 0;\\n        for (int num: nums) {\\n            es += num;\\n            while (num) {\\n                ds += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return abs(es - ds);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int es = 0, ds = 0;\\n        for (int num: nums) {\\n            es += num;\\n            while (num) {\\n                ds += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return abs(es - ds);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052705,
                "title": "python-one-liner",
                "content": "# Complexity\\n- Time complexity: O(n<sup>2</sup>)\\n- Space complexity: O(n)\\n\\n# Code (one liner)\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return abs(sum(nums) - sum([sum([int(j) for j in list(str(i))]) for i in nums]))\\n```\\n# Code (expanded)\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        s = sum(nums)\\n        ds = 0\\n        for i in nums:\\n            ds += sum([int(j) for j in list(str(i))])\\n        return abs(s-ds)\\n```\\n\\n---------------\\n**Upvote the post if you find it helpful.\\nHappy coding.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return abs(sum(nums) - sum([sum([int(j) for j in list(str(i))]) for i in nums]))\\n```\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        s = sum(nums)\\n        ds = 0\\n        for i in nums:\\n            ds += sum([int(j) for j in list(str(i))])\\n        return abs(s-ds)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052679,
                "title": "python3-1-line",
                "content": "\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return sum(x-sum(map(int, str(x))) for x in nums)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return sum(x-sum(map(int, str(x))) for x in nums)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052664,
                "title": "c-easy-faster-than100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        \\n        int elementSum = 0, digitSum = 0;\\n        \\n        // The element sum is the sum of all the elements in nums.\\n        for(auto i:nums) elementSum += i;\\n        \\n        // The digit sum is the sum of all the digits (not necessarily distinct)\\n        for(int i=0; i<nums.size(); i++) {\\n            while(nums[i]) {\\n                int remainder = nums[i]%10;\\n                digitSum += remainder;\\n                nums[i] = nums[i]/10;\\n            }\\n        }\\n        \\n        // Return the absolute difference\\n        return abs(elementSum - digitSum);\\n    }\\n};\\n```\\n\\n### ***If you find this helpful, Please Upvote \\uD83D\\uDD3C , Thank You !***",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        \\n        int elementSum = 0, digitSum = 0;\\n        \\n        // The element sum is the sum of all the elements in nums.\\n        for(auto i:nums) elementSum += i;\\n        \\n        // The digit sum is the sum of all the digits (not necessarily distinct)\\n        for(int i=0; i<nums.size(); i++) {\\n            while(nums[i]) {\\n                int remainder = nums[i]%10;\\n                digitSum += remainder;\\n                nums[i] = nums[i]/10;\\n            }\\n        }\\n        \\n        // Return the absolute difference\\n        return abs(elementSum - digitSum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052602,
                "title": "2535-difference-between-element-sum-and-digit-sum-of-an-array-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n       int elementSum = 0;\\n    int digitSum = 0;\\n    for (int num : nums) {\\n        elementSum += num;\\n        String numString = Integer.toString(num);\\n        for (int i = 0; i < numString.length(); i++) {\\n            digitSum += numString.charAt(i) - \\'0\\';\\n        }\\n    }\\n    return Math.abs(elementSum - digitSum);   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n       int elementSum = 0;\\n    int digitSum = 0;\\n    for (int num : nums) {\\n        elementSum += num;\\n        String numString = Integer.toString(num);\\n        for (int i = 0; i < numString.length(); i++) {\\n            digitSum += numString.charAt(i) - \\'0\\';\\n        }\\n    }\\n    return Math.abs(elementSum - digitSum);   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052560,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\n    typedef long long ll;\\npublic:\\n    ll getDigits(ll n){\\n        ll ans=0;\\n        while(n>0){\\n            ans+=n%10;\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n    int differenceOfSum(vector<int>&v) {\\n        ll sum=0, digits=0;\\n        for(ll it:v){\\n            sum+=it, digits+=getDigits(it);\\n        }\\n        return abs(sum-digits);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    typedef long long ll;\\npublic:\\n    ll getDigits(ll n){\\n        ll ans=0;\\n        while(n>0){\\n            ans+=n%10;\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n    int differenceOfSum(vector<int>&v) {\\n        ll sum=0, digits=0;\\n        for(ll it:v){\\n            sum+=it, digits+=getDigits(it);\\n        }\\n        return abs(sum-digits);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4098993,
                "title": "easiest-c-solution-something-new-to-learn",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n**I guess the code speaks for itself.**\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int totalSum = accumulate(nums.begin(), nums.end(), 0);\\n        int digitSum = 0;\\n\\n        for(int i=0; i<nums.size(); i++){\\n            while(nums[i] != 0){\\n                digitSum = digitSum + nums[i]%10;\\n                nums[i] /= 10;\\n            }\\n        }\\n        return abs(totalSum - digitSum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int totalSum = accumulate(nums.begin(), nums.end(), 0);\\n        int digitSum = 0;\\n\\n        for(int i=0; i<nums.size(); i++){\\n            while(nums[i] != 0){\\n                digitSum = digitSum + nums[i]%10;\\n                nums[i] /= 10;\\n            }\\n        }\\n        return abs(totalSum - digitSum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4098040,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return abs(sum(nums) - sum(sum(map(int, str(num))) for num in nums))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        return abs(sum(nums) - sum(sum(map(int, str(num))) for num in nums))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097216,
                "title": "simplest-cpp-solution-for-begineers-keep-coding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int dig=0;\\n        int num=0;\\n        int sum=0;\\n       \\n        for(int i=0;i<nums.size();i++){\\n            sum=sum+nums[i];\\n            int num=nums[i];\\n            while(num>0){\\n            dig=dig+num%10;\\n            num=num/10;\\n        }\\n        }\\n        \\n         return abs(sum-dig);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int dig=0;\\n        int num=0;\\n        int sum=0;\\n       \\n        for(int i=0;i<nums.size();i++){\\n            sum=sum+nums[i];\\n            int num=nums[i];\\n            while(num>0){\\n            dig=dig+num%10;\\n            num=num/10;\\n        }\\n        }\\n        \\n         return abs(sum-dig);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4095972,
                "title": "c-4ms-solution-beats-98",
                "content": "# Intuition\\nUnits digit can be safely neglected.\\n# Complexity\\n- Time complexity: O(nk), where k is the number of digits in the largest number.\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) \\n    {\\n        int result = 0;\\n        for(int i {0}; i < nums.size(); i++)\\n        {\\n            if(nums[i] >= 10)\\n            {\\n                nums[i] /= 10;\\n                int p = 10;\\n                while(nums[i] != 0)\\n                {\\n                    result += (nums[i] % 10) * (p - 1);\\n                    nums[i] /= 10;\\n                    p *= 10;\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) \\n    {\\n        int result = 0;\\n        for(int i {0}; i < nums.size(); i++)\\n        {\\n            if(nums[i] >= 10)\\n            {\\n                nums[i] /= 10;\\n                int p = 10;\\n                while(nums[i] != 0)\\n                {\\n                    result += (nums[i] % 10) * (p - 1);\\n                    nums[i] /= 10;\\n                    p *= 10;\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4095778,
                "title": "very-easy-way-to-solve-in-java-and-100-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n         int eleSum=0,digitSum=0;\\n        for(int num:nums){\\n            eleSum+=num;\\n        \\n    while(num>0){\\n        digitSum+=num%10;\\n        num/=10;\\n    }\\n        }\\n    return eleSum - digitSum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n         int eleSum=0,digitSum=0;\\n        for(int num:nums){\\n            eleSum+=num;\\n        \\n    while(num>0){\\n        digitSum+=num%10;\\n        num/=10;\\n    }\\n        }\\n    return eleSum - digitSum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4094649,
                "title": "easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let element = nums.reduce( (sum , num )=> sum+=num )\\n    let digit = nums.join(\\'\\').split(\\'\\').reduce( (sum , num)=> sum + parseInt(num) ,0  )\\n\\n    let result = Math.abs( element - digit );\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let element = nums.reduce( (sum , num )=> sum+=num )\\n    let digit = nums.join(\\'\\').split(\\'\\').reduce( (sum , num)=> sum + parseInt(num) ,0  )\\n\\n    let result = Math.abs( element - digit );\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093266,
                "title": "best-java-solution-beats-98-35",
                "content": "# Intuition\\n\\n**ElementSum:**\\n  1)Initialze 2 variables to store sum of elements and sum of digits\\n  2) Use Enchanced for loop to iterate over each element in array.\\n  3) add those elements to elementSum variable\\n \\n**DigitSum:**\\n  1)Use enchanced for loop to iterate over each element in array \\n  2) Declare while loop to minimize each number. \\n  3) Use modulo operator to retrieve last element present in the number\\n4)Perform addition operation to store in digitsum\\n5) num = num/10; It removes last digit from the number. It will continue till it reaches last number in array.\\n\\nResult: \\n   Perform substraction between elementSum and digitSum to get desired output.\\n\\nIf you finds it helpful. I appreciate each upvote.\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for(int i : nums){\\n            elementSum += i;\\n        }\\n        for(int num:nums){\\n            while(num>0){\\n                int rem = num%10;\\n                digitSum += rem;\\n                num = num/10;\\n            }\\n        }\\n        return elementSum - digitSum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int elementSum = 0;\\n        int digitSum = 0;\\n        for(int i : nums){\\n            elementSum += i;\\n        }\\n        for(int num:nums){\\n            while(num>0){\\n                int rem = num%10;\\n                digitSum += rem;\\n                num = num/10;\\n            }\\n        }\\n        return elementSum - digitSum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091054,
                "title": "c-easy-and-fast-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int digital_sum(vector<int>& nums) {\\n        int sum = 0;\\n        for (int num : nums) {\\n            while (num > 0) {\\n                sum += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int a = accumulate(nums.begin(), nums.end(), 0);\\n        int b = digital_sum(nums);\\n\\n        return abs(a-b);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int digital_sum(vector<int>& nums) {\\n        int sum = 0;\\n        for (int num : nums) {\\n            while (num > 0) {\\n                sum += num % 10;\\n                num /= 10;\\n            }\\n        }\\n        return sum;\\n    }\\n    int differenceOfSum(vector<int>& nums) {\\n        int a = accumulate(nums.begin(), nums.end(), 0);\\n        int b = digital_sum(nums);\\n\\n        return abs(a-b);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4088722,
                "title": "easiest-solution",
                "content": "arr\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int eleSum=0;\\n        int digSum=0;\\n\\n        for(int n : nums)\\n        {\\n            eleSum+=n;\\n            if(n<10){\\n                digSum+=n;\\n            }\\n            else{\\n                while(n>0){\\n                    digSum+=n%10;\\n                    n/=10;\\n                }\\n            }\\n        }\\n        return Math.abs(digSum-eleSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int eleSum=0;\\n        int digSum=0;\\n\\n        for(int n : nums)\\n        {\\n            eleSum+=n;\\n            if(n<10){\\n                digSum+=n;\\n            }\\n            else{\\n                while(n>0){\\n                    digSum+=n%10;\\n                    n/=10;\\n                }\\n            }\\n        }\\n        return Math.abs(digSum-eleSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084979,
                "title": "simple-java-solution-for-beginners-beats-98-4",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n      int sum=0;\\n      int ele_sum=0;\\n      for(int i:nums)\\n      sum+=i;\\n      for(int i:nums)\\n      {\\n          if(i<10)\\n          ele_sum+=i;\\n          else\\n          ele_sum+=digit_sum(i);\\n      } \\n      return Math.abs(sum-ele_sum);\\n    }\\n    public int digit_sum(int n)\\n    {\\n        int sum=0;\\n        while(n>0)\\n        {\\n            int rem=n%10;\\n            sum+=rem;\\n            n=n/10;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n      int sum=0;\\n      int ele_sum=0;\\n      for(int i:nums)\\n      sum+=i;\\n      for(int i:nums)\\n      {\\n          if(i<10)\\n          ele_sum+=i;\\n          else\\n          ele_sum+=digit_sum(i);\\n      } \\n      return Math.abs(sum-ele_sum);\\n    }\\n    public int digit_sum(int n)\\n    {\\n        int sum=0;\\n        while(n>0)\\n        {\\n            int rem=n%10;\\n            sum+=rem;\\n            n=n/10;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084869,
                "title": "easy-c-program",
                "content": "# Code\\n```\\nint differenceOfSum(int* nums, int numsSize){\\n    int total_sum = 0;\\n\\n    for(int i=0;i<numsSize;i++){\\n        total_sum += nums[i];\\n    }\\n\\n    int seperate_sum = 0;\\n    for(int i=0;i<numsSize;i++){\\n       if(nums[i]<=9){\\n           seperate_sum += nums[i];\\n       }\\n       else{\\n           int a;\\n           while(nums[i] > 0){\\n              a = nums[i] % 10;\\n              seperate_sum += a;\\n              nums[i] /= 10;\\n           }\\n       }\\n    }\\n\\n    return abs(total_sum-seperate_sum);\\n\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint differenceOfSum(int* nums, int numsSize){\\n    int total_sum = 0;\\n\\n    for(int i=0;i<numsSize;i++){\\n        total_sum += nums[i];\\n    }\\n\\n    int seperate_sum = 0;\\n    for(int i=0;i<numsSize;i++){\\n       if(nums[i]<=9){\\n           seperate_sum += nums[i];\\n       }\\n       else{\\n           int a;\\n           while(nums[i] > 0){\\n              a = nums[i] % 10;\\n              seperate_sum += a;\\n              nums[i] /= 10;\\n           }\\n       }\\n    }\\n\\n    return abs(total_sum-seperate_sum);\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080923,
                "title": "raja-python-tutorial",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        res=0\\n        for i in range(len(nums)):\\n            res+=nums[i]\\n        sum=0\\n        for i in range(len(nums)):\\n            if nums[i]>9:\\n                k=str(nums[i])\\n                for j in range(len(k)):\\n                    sum=sum+int(k[j])\\n            else:\\n                sum+=nums[i]\\n        z=res-sum\\n        return abs(z)\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        res=0\\n        for i in range(len(nums)):\\n            res+=nums[i]\\n        sum=0\\n        for i in range(len(nums)):\\n            if nums[i]>9:\\n                k=str(nums[i])\\n                for j in range(len(k)):\\n                    sum=sum+int(k[j])\\n            else:\\n                sum+=nums[i]\\n        z=res-sum\\n        return abs(z)\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078756,
                "title": "no-need-to-wander-it-s-python",
                "content": "# No need to wander\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        elesum = 0\\n        digsum = 0\\n        for i in nums:\\n            elesum += i\\n            digsum += sum([int(x) for x in str(i)]) \\n        return abs(elesum-digsum)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        elesum = 0\\n        digsum = 0\\n        for i in nums:\\n            elesum += i\\n            digsum += sum([int(x) for x in str(i)]) \\n        return abs(elesum-digsum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077855,
                "title": "c-easiest-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;int ans=0; int sdgt=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n            int n=nums[i];\\n            while (n!=0){\\n                \\n                int r=n%10;\\n                n=n/10;\\n                sdgt+=r;\\n\\n            }\\n        }\\n        ans=abs(sum-sdgt);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;int ans=0; int sdgt=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n            int n=nums[i];\\n            while (n!=0){\\n                \\n                int r=n%10;\\n                n=n/10;\\n                sdgt+=r;\\n\\n            }\\n        }\\n        ans=abs(sum-sdgt);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077852,
                "title": "c-easiest-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;int ans=0; int sdgt=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n            int n=nums[i];\\n            while (n!=0){\\n                \\n                int r=n%10;\\n                n=n/10;\\n                sdgt+=r;\\n\\n            }\\n        }\\n        ans=abs(sum-sdgt);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0;int ans=0; int sdgt=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n            int n=nums[i];\\n            while (n!=0){\\n                \\n                int r=n%10;\\n                n=n/10;\\n                sdgt+=r;\\n\\n            }\\n        }\\n        ans=abs(sum-sdgt);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076611,
                "title": "kotlin-1-line-solution-beats-82",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\nfun differenceOfSum(nums: IntArray): Int = nums.sumOf{ number ->\\n         abs( number - number.toString().sumOf { it - \\'0\\' })\\n}\\n\\n\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n\\nfun differenceOfSum(nums: IntArray): Int = nums.sumOf{ number ->\\n         abs( number - number.toString().sumOf { it - \\'0\\' })\\n}\\n\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075865,
                "title": "2535-difference-between-element-sum-and-digit-sum-of-an-array",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1=0;\\n        int sum2=0;\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            int a=nums[i];\\n            while(a>0)\\n            {\\n                int rem=a%10;\\n                sum2+=rem;\\n                a=a/10;\\n            }\\n           sum1+=nums[i];\\n        }\\n        return sum1-sum2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1=0;\\n        int sum2=0;\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            int a=nums[i];\\n            while(a>0)\\n            {\\n                int rem=a%10;\\n                sum2+=rem;\\n                a=a/10;\\n            }\\n           sum1+=nums[i];\\n        }\\n        return sum1-sum2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075229,
                "title": "c-easy-solution-easy-to-understand",
                "content": "# Intuition\\n Adding and cheaking Conditions.\\n# Approach\\nFirst add element sum and then cheak for condition \\nfor digit sum. Then absolute difference of two variables.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int element_sum=0,digit_sum=0,abs_diff=0,r=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            element_sum+=nums[i];\\n        }\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            while(nums[i]!=0)\\n            {\\n                r=nums[i]%10;\\n                digit_sum+=r;\\n                nums[i]/=10;\\n            } \\n        }\\n        return abs(element_sum)-abs(digit_sum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int element_sum=0,digit_sum=0,abs_diff=0,r=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            element_sum+=nums[i];\\n        }\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            while(nums[i]!=0)\\n            {\\n                r=nums[i]%10;\\n                digit_sum+=r;\\n                nums[i]/=10;\\n            } \\n        }\\n        return abs(element_sum)-abs(digit_sum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071999,
                "title": "best-method-c-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N*(nums.length))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    void digitsum(int a,int & digit){\\n        int c=0;\\n        while(a>0){\\n            int r=a%10;\\n            c+=r;\\n            a/=10;\\n        }\\n        digit+=c;\\n    }\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int digit=0;\\n        int sum=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n            digitsum(nums[i],digit);\\n        }\\n        return abs(sum-digit);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    void digitsum(int a,int & digit){\\n        int c=0;\\n        while(a>0){\\n            int r=a%10;\\n            c+=r;\\n            a/=10;\\n        }\\n        digit+=c;\\n    }\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int digit=0;\\n        int sum=0;\\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n            digitsum(nums[i],digit);\\n        }\\n        return abs(sum-digit);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068298,
                "title": "2535-difference-between-element-sum-and-digit-sum-of-an-array-javascript",
                "content": "\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let a=nums;\\nlet sum=0;\\nlet numCount=0;\\nlet b;\\nfor(let i=0;i<a.length;i++){\\n    \\n    sum=sum+a[i];\\nb=(a[i]+\"\").split(\"\");\\n    for(let j=0;j<b.length;j++){\\n        numCount+=(+b[j]);\\n    }\\n}\\n\\n    return sum>numCount? sum-numCount: numCount-sum;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let a=nums;\\nlet sum=0;\\nlet numCount=0;\\nlet b;\\nfor(let i=0;i<a.length;i++){\\n    \\n    sum=sum+a[i];\\nb=(a[i]+\"\").split(\"\");\\n    for(let j=0;j<b.length;j++){\\n        numCount+=(+b[j]);\\n    }\\n}\\n\\n    return sum>numCount? sum-numCount: numCount-sum;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068069,
                "title": "simple-c-solution",
                "content": "# Intuition\\n\\n\\n# Approach\\nTo calculate element sum we simply need to add elements of the given array which can be done using a simple for loop.\\nTo calculate digit sum we have used % and then divide the number by 10\\n\\n# Complexity\\n- Time complexity:\\nO(logn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    int sumOfDigits(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            sum += n % 10;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n\\n    int differenceOfSum(vector<int>& nums) {\\n        int element_sum = 0;\\n        int digit_sum = 0;\\n\\n        for (int i = 0; i < nums.size(); i++) {\\n            element_sum += nums[i];\\n            digit_sum += sumOfDigits(nums[i]);\\n        }\\n\\n        return element_sum - digit_sum;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    int sumOfDigits(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            sum += n % 10;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n\\n    int differenceOfSum(vector<int>& nums) {\\n        int element_sum = 0;\\n        int digit_sum = 0;\\n\\n        for (int i = 0; i < nums.size(); i++) {\\n            element_sum += nums[i];\\n            digit_sum += sumOfDigits(nums[i]);\\n        }\\n\\n        return element_sum - digit_sum;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068066,
                "title": "easiest-possible-way",
                "content": "\\n\\n# Approach\\n- We need to calculate the sum of all the digits in the array and the sum of all the elements in the same array.\\n- Next, we should subtract them.\\n1. We need to create two variables `x=0` and `y=0`.\\n2. Simultaneously calculate x and y using for/ while loop.\\n3. \\n    ```\\n    for(int i =0; i< nums.length; i++)\\n        {\\n            x += nums[i];\\n            y += findDigitSum(nums[i]);\\n        }\\n    ```\\n4. Inside the loop, we have used the `findDigitSum(int n)` function, which returns the digit sum of a particular digit.\\n5. At last return x-y using Math.abs().\\n6. More info about Math.abs() -->[ https://www.geeksforgeeks.org/java-math-abs-method-examples/]( https://www.geeksforgeeks.org/java-math-abs-method-examples/)\\n\\n# Complexity\\n- Time complexity:is O(n * log10(max(nums)))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findDigitSum(int n){\\n        int z =0;\\n        while(n !=0)\\n        {\\n        z += n%10;\\n        n /=10;\\n        }\\n        return z;\\n    }\\n    public int differenceOfSum(int[] nums) {\\n        int x =0;\\n        int y =0;\\n        for(int i =0; i< nums.length; i++)\\n        {\\n            x += nums[i];\\n            y += findDigitSum(nums[i]);\\n        }\\n        return Math.abs(x-y);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    for(int i =0; i< nums.length; i++)\\n        {\\n            x += nums[i];\\n            y += findDigitSum(nums[i]);\\n        }\\n    ```\n```\\nclass Solution {\\n    public int findDigitSum(int n){\\n        int z =0;\\n        while(n !=0)\\n        {\\n        z += n%10;\\n        n /=10;\\n        }\\n        return z;\\n    }\\n    public int differenceOfSum(int[] nums) {\\n        int x =0;\\n        int y =0;\\n        for(int i =0; i< nums.length; i++)\\n        {\\n            x += nums[i];\\n            y += findDigitSum(nums[i]);\\n        }\\n        return Math.abs(x-y);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065901,
                "title": "easy-to-understand-c-sol",
                "content": "\\n\\n# Approach\\nsimple brute force easy approach\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int n=nums.size();\\n        int sum=0;\\n        int dig=0;\\n        for(int i=0; i<n; i++){\\n            sum+=nums[i];\\n            while(nums[i]>0){\\n                dig+=nums[i]%10;\\n                nums[i]=nums[i]/10;\\n            }\\n        }\\n        return(abs(sum-dig));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int n=nums.size();\\n        int sum=0;\\n        int dig=0;\\n        for(int i=0; i<n; i++){\\n            sum+=nums[i];\\n            while(nums[i]>0){\\n                dig+=nums[i]%10;\\n                nums[i]=nums[i]/10;\\n            }\\n        }\\n        return(abs(sum-dig));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065571,
                "title": "python-very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        x=0\\n        y=0\\n        for i in range(len(nums)):\\n            x=x+nums[i]\\n            while nums[i]>0:\\n                digit=nums[i]%10\\n                y=y+digit\\n                nums[i]=nums[i]//10\\n        return x-y\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        x=0\\n        y=0\\n        for i in range(len(nums)):\\n            x=x+nums[i]\\n            while nums[i]>0:\\n                digit=nums[i]%10\\n                y=y+digit\\n                nums[i]=nums[i]//10\\n        return x-y\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065508,
                "title": "easy-way-to-solve-this-problem",
                "content": "\\n```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function differenceOfSum($nums) {\\n      $sumOfTheArray = array_sum($nums);\\n\\n      $split = str_split(implode(\"\",$nums));\\n\\n      $splitArraySum = array_sum($split);\\n      return $sumOfTheArray - $splitArraySum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function differenceOfSum($nums) {\\n      $sumOfTheArray = array_sum($nums);\\n\\n      $split = str_split(implode(\"\",$nums));\\n\\n      $splitArraySum = array_sum($split);\\n      return $sumOfTheArray - $splitArraySum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065472,
                "title": "simple-and-easy-bruteforce-c-c-beats-93-00-users",
                "content": "# Intuition\\n-> Sum all the elements present in tha array.\\n-> Sum of every digit present in the Array.\\n- Return the differnce\\n\\n# Approach\\nBruteForce\\n\\n# Complexity\\n- Time complexity:\\nO(max(n,digit))\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int sum(int n){\\n        int sum =0;\\n        while(n>0)\\n        {\\n            int digit = n%10;\\n            sum+=digit;\\n            n/=10;\\n        }\\n        return sum;\\n    }\\n\\n    int differenceOfSum(vector<int>& nums) {\\n        int esum = 0;\\n        int dsum = 0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]<10)\\n            {\\n                esum+=nums[i];\\n                dsum+=nums[i];\\n            }\\n            else\\n            {\\n                esum+=nums[i];\\n                dsum+=sum(nums[i]);\\n            }\\n        }\\n        if(esum==dsum) return 0;\\n        if(esum>dsum) return esum-dsum;\\n        else return dsum-esum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Math",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int sum(int n){\\n        int sum =0;\\n        while(n>0)\\n        {\\n            int digit = n%10;\\n            sum+=digit;\\n            n/=10;\\n        }\\n        return sum;\\n    }\\n\\n    int differenceOfSum(vector<int>& nums) {\\n        int esum = 0;\\n        int dsum = 0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]<10)\\n            {\\n                esum+=nums[i];\\n                dsum+=nums[i];\\n            }\\n            else\\n            {\\n                esum+=nums[i];\\n                dsum+=sum(nums[i]);\\n            }\\n        }\\n        if(esum==dsum) return 0;\\n        if(esum>dsum) return esum-dsum;\\n        else return dsum-esum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065453,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        const int elementSum = accumulate(nums.begin(), nums.end(), 0);\\n        const int digitSum = getDigitSum(nums);\\n        return abs(elementSum - digitSum);\\n    }\\nprivate:\\n    int getDigitSum(const vector<int>& nums) {\\n        int digitSum = 0;\\n        for (int num : nums) {\\n            int sum = 0;\\n            while(num > 0) {\\n                sum += num % 10;\\n                num /= 10;\\n            }\\n            digitSum += sum;\\n        }\\n        return digitSum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        const int elementSum = accumulate(nums.begin(), nums.end(), 0);\\n        const int digitSum = getDigitSum(nums);\\n        return abs(elementSum - digitSum);\\n    }\\nprivate:\\n    int getDigitSum(const vector<int>& nums) {\\n        int digitSum = 0;\\n        for (int num : nums) {\\n            int sum = 0;\\n            while(num > 0) {\\n                sum += num % 10;\\n                num /= 10;\\n            }\\n            digitSum += sum;\\n        }\\n        return digitSum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065108,
                "title": "python3-no-conversion-to-string-beats-71-70",
                "content": "# Intuition\\nI did not want to convert the array elements to strings so i wrote a helper function.\\n\\n# Approach\\nUsing inbuilt `sum()` and `abs()` we can the sums of the array.\\n\\n# Complexity\\n- Time complexity:\\ntime complexity is O(M * N)\\n\\n- Space complexity:\\nSpace complexity is O(n) as we are creating another array which will hold the sum of digits.\\n\\n# Code\\n```\\nclass Solution:\\n    def sod(self, num):\\n        sum = 0\\n        while num != 0:\\n            sum += num % 10\\n            num = num // 10\\n        return sum\\n\\n\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n\\n        return abs(\\n            sum(nums) - sum([self.sod(x) for x in nums])\\n            )\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sod(self, num):\\n        sum = 0\\n        while num != 0:\\n            sum += num % 10\\n            num = num // 10\\n        return sum\\n\\n\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n\\n        return abs(\\n            sum(nums) - sum([self.sod(x) for x in nums])\\n            )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063675,
                "title": "java-simple-solution-with-recursion-beats-100",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int numberSum = 0, digitSum = 0;\\n        for (int num : nums) {\\n            numberSum += num;\\n            digitSum += getDigitSum(num, 0);\\n        }\\n        return Math.abs(numberSum - digitSum);\\n    }\\n\\n    private int getDigitSum(int num, int sum) {\\n        return num == 0 ? sum : getDigitSum(num / 10, sum + num % 10);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int numberSum = 0, digitSum = 0;\\n        for (int num : nums) {\\n            numberSum += num;\\n            digitSum += getDigitSum(num, 0);\\n        }\\n        return Math.abs(numberSum - digitSum);\\n    }\\n\\n    private int getDigitSum(int num, int sum) {\\n        return num == 0 ? sum : getDigitSum(num / 10, sum + num % 10);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063572,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let elementSum = 0;\\n    let digitSum = 0;\\n    for(let i = 0; i < nums.length; i++){\\n        elementSum += nums[i];\\n        nums[i] = nums[i].toString();\\n        for(let j = 0; j < nums[i].length; j++){\\n            digitSum += +nums[i][j];\\n        }\\n    }\\n    return Math.abs(digitSum - elementSum);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n    let elementSum = 0;\\n    let digitSum = 0;\\n    for(let i = 0; i < nums.length; i++){\\n        elementSum += nums[i];\\n        nums[i] = nums[i].toString();\\n        for(let j = 0; j < nums[i].length; j++){\\n            digitSum += +nums[i][j];\\n        }\\n    }\\n    return Math.abs(digitSum - elementSum);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062355,
                "title": "easy-and-beginner-level-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        x=\\'\\'.join(map(str,nums))\\n        arr=[]\\n        print(x)\\n        for i in range(len(x)):\\n            arr.append(int(x[i]))\\n        x=sum(nums)\\n        #print(x)\\n        y=sum(arr)\\n        #print(y)\\n        return x-y\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        x=\\'\\'.join(map(str,nums))\\n        arr=[]\\n        print(x)\\n        for i in range(len(x)):\\n            arr.append(int(x[i]))\\n        x=sum(nums)\\n        #print(x)\\n        y=sum(arr)\\n        #print(y)\\n        return x-y\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4060225,
                "title": "2-ms-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum=0;\\n        int dsum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            int n=nums[i];\\n            sum+=nums[i];\\n            while(n>0)\\n            {\\n                int temp=n%10;\\n                dsum+=temp;\\n                n/=10;\\n            }\\n        }\\n\\n        return Math.abs(sum-dsum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum=0;\\n        int dsum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            int n=nums[i];\\n            sum+=nums[i];\\n            while(n>0)\\n            {\\n                int temp=n%10;\\n                dsum+=temp;\\n                n/=10;\\n            }\\n        }\\n\\n        return Math.abs(sum-dsum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059834,
                "title": "java-differenceofsum",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:Beats 98.69%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Beats 78.43%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int digiSum = 0;\\n        int eleSum = 0;\\n\\n        for(int n: nums){\\n            eleSum += n;\\n            while(n > 0){\\n                digiSum += n % 10;\\n                n = n / 10;\\n            }\\n        }\\n        return Math.abs(digiSum - eleSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int digiSum = 0;\\n        int eleSum = 0;\\n\\n        for(int n: nums){\\n            eleSum += n;\\n            while(n > 0){\\n                digiSum += n % 10;\\n                n = n / 10;\\n            }\\n        }\\n        return Math.abs(digiSum - eleSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057721,
                "title": "python-o-n-log-max-nums-time-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum_digits = 0\\n        sum_arr = 0\\n        for i in nums:\\n            sum_arr += i\\n            while i:\\n                x = i % 10\\n                sum_digits += x\\n                i = i // 10\\n                \\n        return abs(sum_arr - sum_digits)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        sum_digits = 0\\n        sum_arr = 0\\n        for i in nums:\\n            sum_arr += i\\n            while i:\\n                x = i % 10\\n                sum_digits += x\\n                i = i // 10\\n                \\n        return abs(sum_arr - sum_digits)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056239,
                "title": "simple-logical-answer-in-javascript-very-useful",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n\\n    let totalSum =0\\n    let digitSum=0\\n    \\n      for(let i =0; i < nums.length; i++){\\n           totalSum += nums[i]\\n\\n             let num = nums[i]\\n               \\n               while(num >0){\\n\\n                     digitSum+= num%10\\n                     num = Math.floor(num/10)\\n               }\\n\\n           \\n      }\\n    return Math.abs(totalSum - digitSum);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar differenceOfSum = function(nums) {\\n\\n    let totalSum =0\\n    let digitSum=0\\n    \\n      for(let i =0; i < nums.length; i++){\\n           totalSum += nums[i]\\n\\n             let num = nums[i]\\n               \\n               while(num >0){\\n\\n                     digitSum+= num%10\\n                     num = Math.floor(num/10)\\n               }\\n\\n           \\n      }\\n    return Math.abs(totalSum - digitSum);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056229,
                "title": "beats-99-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n+m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n\\n       int elementSum = 0;\\n       int digitSum = 0;\\n\\n       for(int num : nums){\\n\\n           elementSum += num;\\n\\n           while(num > 0){\\n               int temp = num%10;\\n               num = num/10;\\n               digitSum += temp;\\n               \\n           }\\n\\n       } \\n\\n       return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n\\n       int elementSum = 0;\\n       int digitSum = 0;\\n\\n       for(int num : nums){\\n\\n           elementSum += num;\\n\\n           while(num > 0){\\n               int temp = num%10;\\n               num = num/10;\\n               digitSum += temp;\\n               \\n           }\\n\\n       } \\n\\n       return Math.abs(elementSum - digitSum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056026,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        s=\\'\\'\\n        for i in nums:\\n            s=s+str(i)\\n        l=list(s)\\n        d=0\\n        for j in l:\\n            d=d+int(j)\\n        e=0\\n        for k in nums:\\n            e=e+k\\n        m=abs(d-e)\\n        return m\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        s=\\'\\'\\n        for i in nums:\\n            s=s+str(i)\\n        l=list(s)\\n        d=0\\n        for j in l:\\n            d=d+int(j)\\n        e=0\\n        for k in nums:\\n            e=e+k\\n        m=abs(d-e)\\n        return m\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054075,
                "title": "don-t-use-math-abs-beats-97-7",
                "content": "Sum of elements always bigger than sum of digits.\\n\\n# Code\\n```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int res = 0;\\n\\n        for(int e : nums) {\\n            res += e;\\n\\n            while(e > 0){\\n                res -= e % 10;\\n                e /= 10;\\n            } \\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int res = 0;\\n\\n        for(int e : nums) {\\n            res += e;\\n\\n            while(e > 0){\\n                res -= e % 10;\\n                e /= 10;\\n            } \\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1811535,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1767881,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1914729,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1759346,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1842500,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1831188,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1780336,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1778438,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1777370,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1765272,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1811535,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1767881,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1914729,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1759346,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1842500,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1831188,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1780336,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1778438,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1777370,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            },
            {
                "id": 1765272,
                "content": [
                    {
                        "username": "Yusufjon722",
                        "content": "Guys this is discussion section, please share your answer in solutions section. I am just trying to solve the problem"
                    },
                    {
                        "username": "s_u_khan",
                        "content": " `FACT:  \"element sum\"  is always >= \"digit sum\"\\n             Hence , NO NEED OF \"ABSOLUTE VALUE\"`"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "People are smart enough to solve this but not to read the discussion rules."
                    },
                    {
                        "username": "nikhilsh20",
                        "content": "Another digit question"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "    def differenceOfSum(self, nums: List[int]) -> int:\\n        t = 0\\n        total = sum(nums)\\n        for i in nums:\\n            for j in str(i):\\n                t+=int(j)\\n        if total > t:\\n            return total-t\\n        else:\\n            return t-total\\n     "
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum=0,digsum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            if(nums[i]>=10){\\n                int x=nums[i],p=0;\\n                while(x!=0){\\n                    p=x%10;\\n                    digsum+=p;\\n                    x/=10;\\n                }\\n            }\\n            else {\\n                digsum+=nums[i];\\n            }\\n        }\\n        return abs(sum-digsum);\\n    }\\n};"
                    },
                    {
                        "username": "nafisne1377",
                        "content": "`A simple python solution using a nested for-while loop combined with the remainder and divisor operators [T/M: 85/74]`\n\n```\nclass Solution(object):\n    def differenceOfSum(self, nums):\n        element_sum = sum(nums)\n        digit_sum = 0\n        for num in nums:\n            while num > 0:\n                digit_sum += num % 10\n                num = num // 10\n        return abs(element_sum - digit_sum)\n\n```"
                    },
                    {
                        "username": "Yuvrajithape",
                        "content": "iterative solution \\n\\nclass Solution {\\npublic:\\n    int differenceOfSum(vector<int>& nums) {\\n        int sum = 0 ;\\n        for(int i : nums) sum+=i;\\n        int digitsum = 0 ;\\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i] != 0 && nums[i] >= 10)\\n            {\\n                 digitsum +=  nums[i]%10;\\n                 nums[i] /=10;\\n            }\\n            digitsum +=  nums[i];\\n        }\\n       return  sum - digitsum;\\n         \\n    }\\n};"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Process only double digit numbers.\\nclass Solution {\\n    public int differenceOfSum(int[] nums) {\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 9) {\\n                sum1 += nums[i];\\n                while (nums[i] > 0) {\\n                    sum2 += nums[i] % 10;\\n                    nums[i] /= 10;\\n                }\\n                sum1 -= sum2;\\n                sum2 = 0;\\n            }\\n        }\\n        return sum1 < 0 ? sum1 * -1 : sum1;\\n    }\\n}"
                    },
                    {
                        "username": "shreyashgupta68",
                        "content": "class Solution:\\n    def differenceOfSum(self, nums: List[int]) -> int:\\n        single_digit = []\\n        for i in nums:\\n            if i >= 1 and i < 9:\\n                single_digit.append(i)\\n            else:\\n                temp = i\\n                last_digit = temp % 10\\n                l = temp // 10\\n                #single_digit.append(last_digit)\\n                single_digit.extend([last_digit, l])\\n        a = sum(single_digit)\\n        return abs(sum(nums) - a)\\n\\n\\nhelp me"
                    }
                ]
            }
        ]
    }
]