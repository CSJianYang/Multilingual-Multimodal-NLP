[
    {
        "title": "Graph Valid Tree",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1722763,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            },
            {
                "id": 1569295,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            },
            {
                "id": 1714210,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            },
            {
                "id": 1569604,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            },
            {
                "id": 1990299,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            },
            {
                "id": 1572891,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            },
            {
                "id": 2070010,
                "content": [
                    {
                        "username": "RohitSgh",
                        "content": "**Theorem** \\n> A connected graph on $n$ nodes is a tree if and only if it has $n\\u22121$ edges. \\n\\nFor [Further Reading ](http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%204.PDF). In other words\\n> Any connected graph with $n$ nodes and $n\\u22121$ edges is a tree.\\n\\nThus, we should return `true` if **both** of these are `true`.\\n- Given `n`, number of `edges` should be `n-1`\\n- All `n` nodes should be connected. In other words, there should be only 1 [Connected Component](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)."
                    },
                    {
                        "username": "user0252t",
                        "content": "The common definition is a Directed Acyclic Graph (DAG) where each node has only 1 parent.\\n\\nBut this question talks about an undirected graph, therefore is not a DAG (therefore not a tree).\\n\\nAlso, how can you even ask \"how many parents does this node have\" if the edges are not directed?"
                    },
                    {
                        "username": "kettlebot",
                        "content": "no need to ask how many parents this node has - if there is no cycle, you can arrange the nodes starting from any node such that it generates a tree. idk how better to explain; but try drawing any acyclic connected graph, then pick a node, and try to rearrange the nodes into a tree. you can do it for all of them. \\n\\nif there is a cycle, then this is no longer true (i.e. not a tree). again try drawing it out and arranging as a tree; its impossible.\\n\\nby \"is it a tree\" they mean \"can it be arranged as a tree.\" its not technically a tree because theres no direction, but if they had direction then the question would be too easy."
                    },
                    {
                        "username": "user2957XF",
                        "content": "It matters a lot that the question doesn't state whether the graph is directed or not. "
                    },
                    {
                        "username": "Nintja",
                        "content": "Can anyone tell me why with one node and no edges the answer expected is true?\\n\\nedgeCount = 1, edges = [], expected: True"
                    },
                    {
                        "username": "mandrake",
                        "content": "If there is one and only one node i.e. there are no edges; then that graph is a connected graph and therefore a tree. \\nWhen you say edgecount == 1; this means there exists an edge.\\nIf there exists an edge there has to be two nodes and not one."
                    },
                    {
                        "username": "namhlahade1",
                        "content": "Can we assume that if it is a tree, the root would be the zero node?"
                    },
                    {
                        "username": "cfabri6",
                        "content": "the test is\\n\\n4\\n[[2,3],[1,2],[1,3]]\\n\\nThe test currently wants a False - presumably b/c the number of nodes 4 is not equal to the number of nodes visited (1,2,3).\\n\\nHowever, I see 3 valid nodes (1,2,3)...and 3 edges -  so, indeed there is a cycle since there is one too many edges and indeed the graph is connected - so per the vaguely implied criteria for \\'validity\\', this graph is valid eg true.\\n\\nthe test should return True and not False and the node count should be 3, not 4."
                    },
                    {
                        "username": "jliu5021",
                        "content": "there is a missing constraint: \\'0\\' has to be the root, or else BFS is not working"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Not really. We can assume any (valid) node to be root node, [@Jeffrey Liu](/jliu5021). \n- Here is [your submission](https://leetcode.com/submissions/detail/1057487111/) where we are assuming 0 to be root node. \n- Same code, where we are assuming last node to be root node. It also gets [submitted](https://leetcode.com/problems/graph-valid-tree/submissions/1057508053/)\n\n```python3\nfrom collections import defaultdict\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        # if it has n - 1 edges\n        # either there is a cycle + not fully connected\n        # fully connected Tree\n        if len(edges) != n - 1:\n            return False\n        \n        # construct adjancy list to run bfs/dfs\n        neighbors = defaultdict(list)\n        for a, b in edges:\n            neighbors[a].append(b)\n            neighbors[b].append(a)\n        \n        # prevent going back\n        seen = set()\n        \n        def dfs(node):\n            seen.add(node)\n            for neighbor in neighbors[node]:\n                if neighbor not in seen:\n                    dfs(neighbor)\n        \n        dfs(n-1)\n    \n        return len(seen) == n\n```    "
                    }
                ]
            }
        ]
    }
]