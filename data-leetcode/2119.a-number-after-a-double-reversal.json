[
    {
        "title": "A Number After a Double Reversal",
        "question_content": "Reversing an integer means to reverse all its digits.\n\n\tFor example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.\n\nGiven an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.\n&nbsp;\nExample 1:\n\nInput: num = 526\nOutput: true\nExplanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.\n\nExample 2:\n\nInput: num = 1800\nOutput: false\nExplanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.\n\nExample 3:\n\nInput: num = 0\nOutput: true\nExplanation: Reverse num to get 0, then reverse 0 to get 0, which equals num.\n\n&nbsp;\nConstraints:\n\n\t0 <= num <= 106",
        "solutions": [
            {
                "id": 1647533,
                "title": "check-for-num-10",
                "content": "**C++**\\n```cpp\\nbool isSameAfterReversals(int num) {\\n    return num == 0 || num % 10;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nbool isSameAfterReversals(int num) {\\n    return num == 0 || num % 10;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1647570,
                "title": "python-java-c-1-liner-num-0-or-num-10-explained",
                "content": "**PLEASE UPVOTE if you like** \\uD83D\\uDE01 **If you have any question, feel free to ask.** \\n\\n* All you have to do is check the Trailing zeros\\n\\t* input num as a valid number should not have leading zeros\\n\\t* the trailing zeros will become leading zeros after the **First Reversal**\\n\\t\\t* So after **Double Reversal**, they will be removed.\\n\\n**Python**\\n```\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n\\t\\t# All you have to do is check the Trailing zeros\\n        return num == 0 or num % 10  # num % 10 means num % 10 != 0\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 > 0; // All you have to do is check the Trailing zeros\\n    }\\n};\\n```\\n**Java**\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 > 0; // All you have to do is check the Trailing zeros\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n\\t\\t# All you have to do is check the Trailing zeros\\n        return num == 0 or num % 10  # num % 10 means num % 10 != 0\\n```\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 > 0; // All you have to do is check the Trailing zeros\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 > 0; // All you have to do is check the Trailing zeros\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1648940,
                "title": "python3-1-liner-o-1-time-and-space-short-and-clean-explanation",
                "content": "1. The logic here is simple: The only time reversing a number twice is different from the original number is when you have a `0` at the end of the number (except for the case when `num==0`)\\n2. Here, `num % 10` is used to retrive the last number\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return not num or num % 10\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return not num or num % 10\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1675986,
                "title": "python-two-simle-one-line-solutions",
                "content": "**Python :**\\n\\n```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n\\treturn str(num) == str(num)[::-1].lstrip(\\'0\\')[::-1] or num == 0\\n```\\n\\nand one more simple solution :\\n\\n```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n\\treturn num == 0 or num % 10\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n\\treturn str(num) == str(num)[::-1].lstrip(\\'0\\')[::-1] or num == 0\\n```\n```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n\\treturn num == 0 or num % 10\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3656517,
                "title": "easy-o-1-time-space-complexity-in-c",
                "content": "# Intuition\\nIf no. is divisible by 10 only then it will be false.\\n\\n# Approach\\nCheck if no. is divisible by 10\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)  return true;\\n        if(num%10==0)   return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)  return true;\\n        if(num%10==0)   return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2459818,
                "title": "python-easy-solution",
                "content": "```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        return (num == 0) or (num % 10 != 0)\\n        \"\"\"\\n        When num = 526, second condition will be true => (526 % 10) = 6 \\n        When num = 1800, first and second condition are false => (1800 != 0) or (1800 % 10) = 0 \\n        When num = 0, first condition will be true => 0 == 0\\n        \"\"\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        return (num == 0) or (num % 10 != 0)\\n        \"\"\"\\n        When num = 526, second condition will be true => (526 % 10) = 6 \\n        When num = 1800, first and second condition are false => (1800 != 0) or (1800 % 10) = 0 \\n        When num = 0, first condition will be true => 0 == 0\\n        \"\"\"\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1648984,
                "title": "java-one-line-check-last-character",
                "content": "if you like please upvote\\n\\nJAVA\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return ((num%10) > 0 || num == 0) ? true : false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return ((num%10) > 0 || num == 0) ? true : false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2673556,
                "title": "c-solution-a-number-after-a-double-reversal-o-1-100-faster",
                "content": "**Using Math**\\n* Time Complexity - O( 1 )\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num == 0){  //Edge Case \\n            return true;\\n        }\\n        if( num % 10 == 0){  // number should not contain 0 at ones place\\n            return false;\\n        }\\n        else{\\n            return true;\\n        }\\n    }\\n};\\n```\\n\\n**Please Upvote If you liked the solution : )**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num == 0){  //Edge Case \\n            return true;\\n        }\\n        if( num % 10 == 0){  // number should not contain 0 at ones place\\n            return false;\\n        }\\n        else{\\n            return true;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1858320,
                "title": "java-solution-0ms-easy-to-understand",
                "content": "```\\n\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n      \\n        int num1=reverseNum(num);\\n        int num2=reverseNum(num1);\\n        \\n        return num==num2 ? true : false;\\n\\n    }\\n    \\n    public int reverseNum(int x){\\n        int result =0;\\n        int pop;\\n        \\n        while(x!=0){\\n            pop=x%10;\\n            x/=10;\\n            \\n            result=(result*10)+pop;\\n        }\\n        \\n        return result;\\n    }\\n    \\n}\\n\\n```\\n\\nThis is quite an intuitive approach. Reverse the first number. Then, re-reverse the number that is obtained and simply check if the two numbers are equal or not.\\n\\n",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n      \\n        int num1=reverseNum(num);\\n        int num2=reverseNum(num1);\\n        \\n        return num==num2 ? true : false;\\n\\n    }\\n    \\n    public int reverseNum(int x){\\n        int result =0;\\n        int pop;\\n        \\n        while(x!=0){\\n            pop=x%10;\\n            x/=10;\\n            \\n            result=(result*10)+pop;\\n        }\\n        \\n        return result;\\n    }\\n    \\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1706407,
                "title": "beginner-friendly-short-javascript-solution",
                "content": "**Time Complexity : O(1)**\\n\\n**Approach 1 :**\\n```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    if(num == 0)    return true;\\n    if(num % 10 == 0)   return false;\\n    return true;\\n};\\n```\\n\\n\\n**Approach 2 :**\\n```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    return num == 0 || num % 10 != 0;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    if(num == 0)    return true;\\n    if(num % 10 == 0)   return false;\\n    return true;\\n};\\n```\n```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    return num == 0 || num % 10 != 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3170304,
                "title": "simple-c-solution-0ms-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nbool isSameAfterReversals(int num){\\n    if(num==0)return true;\\n  return !(num%10==0);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int num){\\n    if(num==0)return true;\\n  return !(num%10==0);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2980937,
                "title": "c-easiest-solution-o-1-time-and-o-1-space-complexity",
                "content": "# Upvote if it helps :)\\n# Intuition\\nIf we think about the brute force approach i.e. reverse the word twice and then check if it matches with the given integer but this solution will through TLE. \\n\\n# Approach\\n So, its a simple catch here that only the number having \\'0\\' as its last digit will be changed after reversing and for all other numbers the program will run fine.\\nSo we can simply solve the problem by just checking the last digit is \\'0\\' or not.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0) return 1;\\n        else if(num%10==0) return 0;\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0) return 1;\\n        else if(num%10==0) return 0;\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1647699,
                "title": "easy-quick-approach-to-string-num",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string num1=to_string(num);\\n        if(num1==\"0\"){\\n            return true;\\n        }\\n        if(num1[num1.length()-1]==\\'0\\'){\\n            return false;\\n        }\\n        return true;\\n    }\\n};```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string num1=to_string(num);\\n        if(num1==\"0\"){\\n            return true;\\n        }\\n        if(num1[num1.length()-1]==\\'0\\'){\\n            return false;\\n        }\\n        return true;\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 2799194,
                "title": "js-one-line-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    return !num || num%10;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    return !num || num%10;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2755244,
                "title": "java-1-line-beats-100-0ms",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num==0 || num%10!=0;\\n    }\\n}\\n// upvote Please\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num==0 || num%10!=0;\\n    }\\n}\\n// upvote Please\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2105425,
                "title": "0-ms-100-faster-java-soln",
                "content": "\\n       if(num == 0)\\n        {\\n            return true;\\n        }\\n        if(num%10 == 0)\\n        {\\n            return false;\\n        }\\n        return true;",
                "solutionTags": [],
                "code": "\\n       if(num == 0)\\n        {\\n            return true;\\n        }\\n        if(num%10 == 0)\\n        {\\n            return false;\\n        }\\n        return true;",
                "codeTag": "Unknown"
            },
            {
                "id": 1755149,
                "title": "0-ms-100-faster-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n        int temp=num;\\n        int rev=0;\\n        while(temp>0){\\n            rev=rev*10+temp%10;\\n            temp/=10;\\n        }\\n        int temp2=rev;\\n        int rev2=0;\\n        while(temp2>0){\\n            rev2=rev2*10+temp2%10;\\n            temp2/=10;\\n        }\\n        return (rev2==num);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n        int temp=num;\\n        int rev=0;\\n        while(temp>0){\\n            rev=rev*10+temp%10;\\n            temp/=10;\\n        }\\n        int temp2=rev;\\n        int rev2=0;\\n        while(temp2>0){\\n            rev2=rev2*10+temp2%10;\\n            temp2/=10;\\n        }\\n        return (rev2==num);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1689551,
                "title": "c-1-linear",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num == 0 ? true : num % 10;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num == 0 ? true : num % 10;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3713578,
                "title": "a-number-after-a-double-reversal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        def reverse(number):\\n            result = 0\\n            while number:\\n                result = result * 10 + number % 10\\n                number //= 10\\n            return result\\n\\n        return reverse(reverse(num)) == num \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        def reverse(number):\\n            result = 0\\n            while number:\\n                result = result * 10 + number % 10\\n                number //= 10\\n            return result\\n\\n        return reverse(reverse(num)) == num \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548250,
                "title": "need-java-1-liner",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num%10 ==0 && num!=0) return false;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num%10 ==0 && num!=0) return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380106,
                "title": "python3-easiest-solution-99-6-beats",
                "content": "# Intuition\\nif the number is not ends with zero \\'0\\' then it will came same as after double reversing number except 0\\n\\n# Code\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if num%10==0 and num!=0:\\n            return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if num%10==0 and num!=0:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3060424,
                "title": "3-line-code-c-100-easiest-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num%10==0 and num!=0)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num%10==0 and num!=0)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3018379,
                "title": "c-easy-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA number is not equal to itself after two reversals only if it\\'s unit digit is zero.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo check whether a number\\'s unit digit is zero or not we check if the number is divisible by 10 or not.\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        //\\n        if(num==0) return true;\\n        else if(num%10==0) return false;\\n        else return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        //\\n        if(num==0) return true;\\n        else if(num%10==0) return false;\\n        else return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2644942,
                "title": "easy-python-solution-with-explanation",
                "content": "Here\\'s my take : \\n\\n**Please upvote it you like it. **\\n\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n\\t    # False cases are those if last the digit of any 2(+) digit number = 0 \\n        if len(str(num)) > 1 and str(num)[-1] == \"0\":\\n            return False\\n        else:\\n\\t\\t# Else, every integer is true\\n            return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n\\t    # False cases are those if last the digit of any 2(+) digit number = 0 \\n        if len(str(num)) > 1 and str(num)[-1] == \"0\":\\n            return False\\n        else:\\n\\t\\t# Else, every integer is true\\n            return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2469228,
                "title": "go-simple-hehe",
                "content": "```\\nfunc isSameAfterReversals(num int) bool {\\n    return num == 0 || num%10 != 0\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc isSameAfterReversals(num int) bool {\\n    return num == 0 || num%10 != 0\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2423103,
                "title": "easy-one-liner-python-solution-o-n-time-p",
                "content": "```\\nreturn num == int(str(int(str(num)[::-1]))[::-1])",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nreturn num == int(str(int(str(num)[::-1]))[::-1])",
                "codeTag": "Unknown"
            },
            {
                "id": 1801560,
                "title": "java-simple-one-liner-beats-100-explained",
                "content": "We just check if there are zeros in the end in the original number, else it will always be the same number after double reversal. Gotcha here is that number shouldn\\'t be zero. \\n\\n```\\nif(num % 10 == 0 && num != 0) return false;\\n        return true;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nif(num % 10 == 0 && num != 0) return false;\\n        return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1651019,
                "title": "one-line-c-solution-with-explanation",
                "content": "First, any number would remain on double reversal unless it loses any zeroes at the last during first reversal.\\n\\nSo, any number with trailing zeroes (one or more) would be changed on double reversal.\\nException would be *0* as it won\\'t lose the only single zero it has during reversal.\\n\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num != 0 && num%10 == 0){\\n            return false;\\n        }else return true;\\n};\\n```\\n\\n\\n\\nOne Liner solution would be:\\n\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return !(num != 0 && num%10 == 0);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num != 0 && num%10 == 0){\\n            return false;\\n        }else return true;\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return !(num != 0 && num%10 == 0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1648518,
                "title": "js-solution-faster-than-100",
                "content": "```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    if (num===0) return true\\n    let str = String(num);\\n    if (str[str.length-1]===\"0\") return false;\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n */\\nvar isSameAfterReversals = function(num) {\\n    if (num===0) return true\\n    let str = String(num);\\n    if (str[str.length-1]===\"0\") return false;\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3737761,
                "title": "one-liner-solution-0ms-runtime-java-c-python",
                "content": "# Code\\n```Java []\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n}\\n```\\n```Python []\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n        return (num%10!=0 or num<10)\\n        \\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Math"
                ],
                "code": "```Java []\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n}\\n```\n```Python []\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n        return (num%10!=0 or num<10)\\n        \\n```\n```C++ []\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381489,
                "title": "1-line-solution-0ms-100-faster",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3328850,
                "title": "easy-solution-java-python",
                "content": "# Java\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(String.valueOf(num).length() == 1) {\\n            return true;\\n        }\\n        if(num % 10 == 0) {\\n            return false;  \\n        }  \\n        return true;\\n    }\\n}\\n```\\n# Python\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if len(str(num)) == 1:\\n            return True\\n        if str(num)[-1] == \\'0\\':\\n            return False\\n        return True\\n```\\nDo upvote if you like the Solution :)",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(String.valueOf(num).length() == 1) {\\n            return true;\\n        }\\n        if(num % 10 == 0) {\\n            return false;  \\n        }  \\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if len(str(num)) == 1:\\n            return True\\n        if str(num)[-1] == \\'0\\':\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3272461,
                "title": "easy-python-solution",
                "content": "\\n\\n# Approach\\n- Storing the original number in dup\\n- Reversing the number(dup) - (1st while loop)\\n- Reversing the reversed number(rev) - (2nd while loop)\\n- Checking the double reversal number with the original number\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        dup=num\\n        rev=0\\n        while(dup!=0):\\n            d=dup%10\\n            rev=rev*10+d\\n            dup=dup//10\\n        while(rev!=0):\\n            d=rev%10\\n            dup=dup*10+d\\n            rev=rev//10\\n        if dup==num:\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        dup=num\\n        rev=0\\n        while(dup!=0):\\n            d=dup%10\\n            rev=rev*10+d\\n            dup=dup//10\\n        while(rev!=0):\\n            d=rev%10\\n            dup=dup*10+d\\n            rev=rev//10\\n        if dup==num:\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3269277,
                "title": "2119-java",
                "content": "# Approach 1\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 0 ms\\n- Beats : 100%\\n- Memory : 39.5 MB\\n- Beats : 28.1%\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return(num == 0 || num % 10 != 0)? true : false;\\n    }\\n}\\n```\\n# Approach 2\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 0 ms\\n- Beats : 100%\\n- Memory : 39.7 MB\\n- Beats : 18.70%\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num == 0 || num % 10 != 0) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return(num == 0 || num % 10 != 0)? true : false;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num == 0 || num % 10 != 0) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3149866,
                "title": "solution-without-reversing-the-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ni wanted to eleminate the reversal process\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThinking of worst cases i identified one statement  where the value is false  when num % 10 ==0 return false in other cases it is true.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity is constant O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace Complexity is O(1)\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n * YEL-59\\n * https://github.com/YEL-59\\n */\\n\\nvar isSameAfterReversals = function(num) {\\n     if(num == 0) return true;\\n    if(num % 10 == 0) return false;\\n     return true\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {boolean}\\n * YEL-59\\n * https://github.com/YEL-59\\n */\\n\\nvar isSameAfterReversals = function(num) {\\n     if(num == 0) return true;\\n    if(num % 10 == 0) return false;\\n     return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3131997,
                "title": "best-c-code-100-runtime-beginner-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        {\\n            return true;\\n\\n        }\\n        else if(num%10==0)\\n        {\\n            return false;\\n        }\\n        else\\n        {\\n   return true;\\n        }\\n    }\\n};\\n```\\nIF FOUND USEFULL DO UPVOTE",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        {\\n            return true;\\n\\n        }\\n        else if(num%10==0)\\n        {\\n            return false;\\n        }\\n        else\\n        {\\n   return true;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3045848,
                "title": "does-you-think-that-approach-o-1-time-complexity",
                "content": "# Intuition\\nCheck only last bit.\\n\\n# Approach\\nIf last bit is 0 then on reversing the number get changed.So return false.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n        if(num%10==0){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Python"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n        if(num%10==0){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3012024,
                "title": "simple-c-solution-using-to-string-and-stoi-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string ans=to_string(num);\\n        reverse(ans.begin(), ans.end());\\n        int ab=stoi(ans);\\n        string ans2=to_string(ab);\\n        reverse(ans2.begin(), ans2.end());\\n        int ba=stoi(ans2);\\n        if(ba==num) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string ans=to_string(num);\\n        reverse(ans.begin(), ans.end());\\n        int ab=stoi(ans);\\n        string ans2=to_string(ab);\\n        reverse(ans2.begin(), ans2.end());\\n        int ba=stoi(ans2);\\n        if(ba==num) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2964521,
                "title": "100-0ms-1-line-o-1-time-2-ways-proof",
                "content": "# upvote pls\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n![image.png](https://assets.leetcode.com/users/images/db97e396-7458-4707-9fce-2345ef8649dd_1672254943.2003605.png)\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n    public boolean isSameAfterReversals(int num) {\\n        return num==0 ||num%10!=0; //1st\\n        return num==rev(rev(num)); //2nd\\n    }\\n    private int rev(int d){\\n        int a=0;\\n        while(d>0){\\n            a=a*10+d%10;\\n            d/=10;\\n        }return a;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    public boolean isSameAfterReversals(int num) {\\n        return num==0 ||num%10!=0; //1st\\n        return num==rev(rev(num)); //2nd\\n    }\\n    private int rev(int d){\\n        int a=0;\\n        while(d>0){\\n            a=a*10+d%10;\\n            d/=10;\\n        }return a;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2932930,
                "title": "easy-solution-with-0ms-runtime-tc-o-1-beats-100",
                "content": "**If you found it easy to understand, Please do upvote :)\\nThankyou!!**\\n**--------------------------------------------------------------------------------------------------**\\n![Today Leetcode Pic.JPG](https://assets.leetcode.com/users/images/f36658f0-b274-41da-8103-27ac983e3339_1671554441.3385358.jpeg)\\n**--------------------------------------------------------------------------------------------------**\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        return num == 0 || num%10 != 0;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution \\n{\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        return num == 0 || num%10 != 0;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2872400,
                "title": "one-liner-c-java-solution",
                "content": "# \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nApproach 1: ONE LINER\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num%10 == 0 && num!=0)   return false;\\n        return true;\\n    }\\n}\\n```\\n\\nApproach 2: THE BRUTE FORCE\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num%10 == 0 && num!=0)   return false;\\n        return true;\\n         int r1=reverse(num);\\n         return reverse(r1)==num;\\n    }\\n     public static int reverse(int n)\\n     {\\n         int ans=0;\\n         while(n!=0)\\n         {\\n             int r=n%10;\\n             ans=ans*10+r;\\n             n/=10;\\n         }\\n         return ans;\\n     }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num%10 == 0 && num!=0)   return false;\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num%10 == 0 && num!=0)   return false;\\n        return true;\\n         int r1=reverse(num);\\n         return reverse(r1)==num;\\n    }\\n     public static int reverse(int n)\\n     {\\n         int ans=0;\\n         while(n!=0)\\n         {\\n             int r=n%10;\\n             ans=ans*10+r;\\n             n/=10;\\n         }\\n         return ans;\\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807834,
                "title": "c-easy-to-understand-0ms",
                "content": "# Upvote if its help\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num%10 || num==0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num%10 || num==0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2724581,
                "title": "best-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nbool isSameAfterReversals(int num)\\n{\\n    int temp=num;\\n    int reverse1=0;\\n    int reverse2=0;\\n    while(temp!=0){\\n    reverse1=reverse1*10+temp%10;\\n    temp/=10;\\n    }\\n    while(reverse1!=0)\\n    {\\n        reverse2=reverse2*10+reverse1%10;\\n        reverse1/=10;\\n    }\\n    if(num==reverse2)\\n      return 1;\\n    else\\n       return 0;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int num)\\n{\\n    int temp=num;\\n    int reverse1=0;\\n    int reverse2=0;\\n    while(temp!=0){\\n    reverse1=reverse1*10+temp%10;\\n    temp/=10;\\n    }\\n    while(reverse1!=0)\\n    {\\n        reverse2=reverse2*10+reverse1%10;\\n        reverse1/=10;\\n    }\\n    if(num==reverse2)\\n      return 1;\\n    else\\n       return 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2713902,
                "title": "java-easiest-solution-0ms-runtime-faster-than-100-online-submission-beginner-friendly",
                "content": "```\\nclass Solution {\\n    public long reverser_int(long number){\\n        long reverse = 0;  \\n        while(number != 0)   \\n        {  \\n            long remainder = number % 10;  \\n            reverse = reverse * 10 + remainder;  \\n            number = number/10;  \\n        }  \\n        return reverse;\\n    }\\n        \\n        \\n    public boolean isSameAfterReversals(int num) {\\n        return num==reverser_int(reverser_int(num))?true:false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long reverser_int(long number){\\n        long reverse = 0;  \\n        while(number != 0)   \\n        {  \\n            long remainder = number % 10;  \\n            reverse = reverse * 10 + remainder;  \\n            number = number/10;  \\n        }  \\n        return reverse;\\n    }\\n        \\n        \\n    public boolean isSameAfterReversals(int num) {\\n        return num==reverser_int(reverser_int(num))?true:false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2484447,
                "title": "runtime-0-ms-faster-than-100-00-of-c-online-submissions",
                "content": "```\\n\\n/***  2119. A Number After a Double Reversal - CPP17 ***/\\n\\nclass Solution {\\npublic:\\n    int rev(int num){\\n        int ans =0;\\n        while(num>0){\\n            int last_number=num%10;\\n            ans=ans*10+last_number;\\n            num/=10;\\n        }\\n        return ans;\\n    }\\n    \\n    bool isSameAfterReversals(int num) {\\n        //base case\\n        if(num<10){\\n            return true;\\n        }\\n            int rev1=rev(num);\\n            int rev2=rev(rev1);\\n            if(rev2==num) return true;\\n            else return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\n\\n/***  2119. A Number After a Double Reversal - CPP17 ***/\\n\\nclass Solution {\\npublic:\\n    int rev(int num){\\n        int ans =0;\\n        while(num>0){\\n            int last_number=num%10;\\n            ans=ans*10+last_number;\\n            num/=10;\\n        }\\n        return ans;\\n    }\\n    \\n    bool isSameAfterReversals(int num) {\\n        //base case\\n        if(num<10){\\n            return true;\\n        }\\n            int rev1=rev(num);\\n            int rev2=rev(rev1);\\n            if(rev2==num) return true;\\n            else return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2484405,
                "title": "runtime-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n        if(num%10!=0){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n        if(num%10!=0){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437178,
                "title": "c-0ms-solution",
                "content": "```\\nbool isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n        int n = num;\\n        int rev = 0;\\n        while(n > 0)\\n        {\\n            rev = rev*10 + n%10;\\n            n /= 10;\\n        }\\n        \\n        int n2 = rev;\\n        int rev2 = 0;\\n        while(n2 > 0)\\n        {\\n            rev2 = rev2*10 + n2%10;\\n            n2/=10;\\n        }\\n        return rev2==num;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n        int n = num;\\n        int rev = 0;\\n        while(n > 0)\\n        {\\n            rev = rev*10 + n%10;\\n            n /= 10;\\n        }\\n        \\n        int n2 = rev;\\n        int rev2 = 0;\\n        while(n2 > 0)\\n        {\\n            rev2 = rev2*10 + n2%10;\\n            n2/=10;\\n        }\\n        return rev2==num;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2430772,
                "title": "python-one-liner-with-detailed-explanation",
                "content": "Observe that the only chance to make double-reversed different from the original is that the original has one or more trailing zeros. The reversed will never have any trailing zeros. The easy way to check existence of trailing zeros is modulo 10. ```num = 0``` is the edge condition so do check that.\\n\\n\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return num % 10 != 0 or num == 0\\n```        \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```num = 0```\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return num % 10 != 0 or num == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2242655,
                "title": "0-ms-3-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if (num == 0)\\n            return true;\\n        return num % 10;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if (num == 0)\\n            return true;\\n        return num % 10;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2220147,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n\\n        return num==0||num%10!=0;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n\\n        return num==0||num%10!=0;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2151956,
                "title": "simple-math-python-solution-faster-than-97-4",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        \\n        return False if num%10 == 0 and num > 0 else True\\n```",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        \\n        return False if num%10 == 0 and num > 0 else True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2144681,
                "title": "python3-easy-understanding",
                "content": "\\t\\tn = str(num)\\n        n = [i for i in n]\\n        n.reverse()\\n        n = \"\".join(n)\\n        \\n        n = int(n)\\n        n = str(n)\\n        n = [i for i in n]\\n        n.reverse()\\n        n = \"\".join(n)\\n        \\n        return int(n) == num",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\t\\tn = str(num)\\n        n = [i for i in n]\\n        n.reverse()\\n        n = \"\".join(n)\\n        \\n        n = int(n)\\n        n = str(n)\\n        n = [i for i in n]\\n        n.reverse()\\n        n = \"\".join(n)\\n        \\n        return int(n) == num",
                "codeTag": "Unknown"
            },
            {
                "id": 1951240,
                "title": "shortest-and-the-most-simple-solution-using-c-o-1-time-and-space",
                "content": "Here is my solution in c++, If you have any questions let me know.\\n```\\nbool isSameAfterReversals(int num) {\\n        if(num > 0)\\n        {\\n            if(num % 10 == 0)\\n                return false;\\n        }\\n        return true;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "Here is my solution in c++, If you have any questions let me know.\\n```\\nbool isSameAfterReversals(int num) {\\n        if(num > 0)\\n        {\\n            if(num % 10 == 0)\\n                return false;\\n        }\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1863777,
                "title": "simple-solution",
                "content": "```\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n        return False if num != 0 and num % 10 == 0 else True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n        return False if num != 0 and num % 10 == 0 else True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1809400,
                "title": "c-reversing-using-function",
                "content": "Kindly **upvote** if you find it helpful **: )**\\n```\\nclass Solution {\\npublic:\\n    int reverse(int num){\\n        int ans = 0;\\n        while(num!=0){\\n            int r = num%10;\\n            ans = ans*10 + r;\\n            num = num/10;\\n        }\\n        return ans;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int reversed1 = reverse(num);\\n        int reversed2 = reverse(reversed1);\\n        if(num == reversed2)\\n            return true;\\n        else\\n            return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int num){\\n        int ans = 0;\\n        while(num!=0){\\n            int r = num%10;\\n            ans = ans*10 + r;\\n            num = num/10;\\n        }\\n        return ans;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int reversed1 = reverse(num);\\n        int reversed2 = reverse(reversed1);\\n        if(num == reversed2)\\n            return true;\\n        else\\n            return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1808601,
                "title": "runtime-0-ms-faster-than-100-00-of-c-online-submissions-for-a-number-after-a-double-reversal",
                "content": "**PLEASE UPVOTE IT , IF THE SOLUTION IS HELPFUL FOR YOU**\\n\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        \\n        \\n        int n = num ;\\n        int num1 = 0 , num2 = 0 ;\\n        \\n        //reversing integer for first time \\n        while(num != 0 ){\\n            int t = num % 10 ;\\n            num1 = num1 * 10 + t ;\\n            num = num/10 ;\\n        }\\n        //reversing the integer second time \\n        while(num1 != 0 ){\\n            int t = num1 % 10 ;\\n            num2 = num2 * 10 + t ;\\n            num1 = num1/10 ;\\n        }\\n        // checking it after reversing two times \\n        if( num2 == n ){\\n            return true ;\\n        }\\n        else{\\n            return false ;\\n        }\\n        \\n    }\\n};\\n```\\n\\n**Runtime: 0 ms, faster than 100.00% of C++ online submissions for A Number After a Double Reversal.\\nMemory Usage: 5.9 MB, less than 68.05% of C++ online submissions for A Number After a Double Reversal.**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        \\n        \\n        int n = num ;\\n        int num1 = 0 , num2 = 0 ;\\n        \\n        //reversing integer for first time \\n        while(num != 0 ){\\n            int t = num % 10 ;\\n            num1 = num1 * 10 + t ;\\n            num = num/10 ;\\n        }\\n        //reversing the integer second time \\n        while(num1 != 0 ){\\n            int t = num1 % 10 ;\\n            num2 = num2 * 10 + t ;\\n            num1 = num1/10 ;\\n        }\\n        // checking it after reversing two times \\n        if( num2 == n ){\\n            return true ;\\n        }\\n        else{\\n            return false ;\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1683508,
                "title": "4-lines-python-solution",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if num==0:return True\\n        string=str(num)\\n        rev=\"\".join(list(\"\".join(list(string)[::-1]).lstrip(\"0\"))[::-1])\\n        return True if string==rev else False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if num==0:return True\\n        string=str(num)\\n        rev=\"\".join(list(\"\".join(list(string)[::-1]).lstrip(\"0\"))[::-1])\\n        return True if string==rev else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1658472,
                "title": "swift-one-line",
                "content": "```\\nclass Solution {\\n    func isSameAfterReversals(_ num: Int) -> Bool {\\n       return num % 10 != 0 || num == 0 \\n    }\\n}\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    func isSameAfterReversals(_ num: Int) -> Bool {\\n       return num % 10 != 0 || num == 0 \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1655660,
                "title": "java-very-easy-solution",
                "content": "Very straight forward. I don\\'t think this solution requires an explanation :)\\n\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1650560,
                "title": "one-line-solution",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num == 0) || (num%10 != 0);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num == 0) || (num%10 != 0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1650195,
                "title": "easy-python-1-line-solution",
                "content": "```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        return num%10!=0 if num>0 else True\\n```\\nor for beginners:\\n```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        c,s=0,0\\n        temp=num\\n        while temp>0:\\n            c=c*10+temp%10\\n            temp//=10\\n        while c>0:\\n            s=s*10+c%10\\n            c//=10\\n        return num==s\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        return num%10!=0 if num>0 else True\\n```\n```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        c,s=0,0\\n        temp=num\\n        while temp>0:\\n            c=c*10+temp%10\\n            temp//=10\\n        while c>0:\\n            s=s*10+c%10\\n            c//=10\\n        return num==s\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1648658,
                "title": "python",
                "content": "Python Solution\\n```def isSameAfterReversals(self, num: int) -> bool:\\n        return num == 0 or num % 10 != 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "Python Solution\\n```def isSameAfterReversals(self, num: int) -> bool:\\n        return num == 0 or num % 10 != 0",
                "codeTag": "Python3"
            },
            {
                "id": 1648307,
                "title": "python-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        reversed1 = int(str(num)[::-1])\\n        reversed2 = int(str(reversed1)[::-1])\\n        if reversed2 == num:\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        reversed1 = int(str(num)[::-1])\\n        reversed2 = int(str(reversed1)[::-1])\\n        if reversed2 == num:\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1647728,
                "title": "one-line-js",
                "content": "``` js\\nfunction isSameAfterReversals(num: number): boolean {\\n  return num === 0 || num % 10 > 0;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Math"
                ],
                "code": "``` js\\nfunction isSameAfterReversals(num: number): boolean {\\n  return num === 0 || num % 10 > 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1647687,
                "title": "python-space-and-time-o-1-solution-with-approach",
                "content": "There will be two cases:\\n<b><b>1.Only if last element is 0,we will return  false else we will return True.\\n2.If the only element is 0 we return true</b></b>\\n<b>Approach 1:</b>\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        nums = list(map(int,str(num)))\\n        if(num == 0):\\n            return True\\n        elif(nums[(len(nums))-1] == 0):\\n            return False\\n        else:\\n            return True\\n```\\nBut instead of using list,we can solve in O(1) space complexity.Thus above solution can be optimised\\n\\n<b>Approach 2:</b>\\nWe can do that by finding modulo of number with 10.\\nIf number % 10 is 0 then number has 0 as last element so we return false.\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if(num == 0):\\n            return True\\n        elif(num % 10 == 0):\\n            return False\\n        else:\\n            return True\\n```\\nOr even shorter form\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if(num == 0 or num % 10 != 0):\\n            return True\\n        else:\\n            return False\\n```\\nThus both Time and Space complexities are O(1)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        nums = list(map(int,str(num)))\\n        if(num == 0):\\n            return True\\n        elif(nums[(len(nums))-1] == 0):\\n            return False\\n        else:\\n            return True\\n```\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if(num == 0):\\n            return True\\n        elif(num % 10 == 0):\\n            return False\\n        else:\\n            return True\\n```\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if(num == 0 or num % 10 != 0):\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1647629,
                "title": "c-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num==0?1:(num%10!=0);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num==0?1:(num%10!=0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1647590,
                "title": "c-easy-to-understand-1-line-100-0ms",
                "content": "```\\nbool isSameAfterReversals(int num) {\\n        //the only numbers we have to check are the ones with trailing 0\\'s\\n        if(num%10==0 && num!=0) return false;\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int num) {\\n        //the only numbers we have to check are the ones with trailing 0\\'s\\n        if(num%10==0 && num!=0) return false;\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1647479,
                "title": "c-easy-and-short",
                "content": "```\\n\\tbool isSameAfterReversals(int num) {\\n        string s = to_string(num);\\n        if(s.size()==1) return true;\\n        else if(s[s.length()-1]!=\\'0\\') return true;\\n        return false;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tbool isSameAfterReversals(int num) {\\n        string s = to_string(num);\\n        if(s.size()==1) return true;\\n        else if(s[s.length()-1]!=\\'0\\') return true;\\n        return false;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1647458,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution\\n{\\n    public boolean isSameAfterReversals(int num)\\n    {\\n        if(num == 0 || num % 10 != 0) // If there\\'s a trailing 0, it will be lost upon reversal hence, it will differ\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public boolean isSameAfterReversals(int num)\\n    {\\n        if(num == 0 || num % 10 != 0) // If there\\'s a trailing 0, it will be lost upon reversal hence, it will differ\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942639,
                "title": "convert-to-string",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, n: int) -> bool:\\n        a = \"\".join(reversed(str(n)))\\n        b = int(a)\\n        c = \"\".join(reversed(str(b)))\\n        d = int(c)\\n        return n==d\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, n: int) -> bool:\\n        a = \"\".join(reversed(str(n)))\\n        b = int(a)\\n        c = \"\".join(reversed(str(b)))\\n        d = int(c)\\n        return n==d\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3737753,
                "title": "simple-and-easy-solution-in-java-c-and-python-beats-100-runtime",
                "content": "```Java []\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n};\\n```\\n```Python []\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n        return (num%10!=0 or num<10)\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Number Theory"
                ],
                "code": "```Java []\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return (num%10!=0||num<10);\\n    }\\n};\\n```\n```Python []\\nclass Solution(object):\\n    def isSameAfterReversals(self, num):\\n        return (num%10!=0 or num<10)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3704346,
                "title": "a-number-after-a-double-reversal-java-solution-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        int num1 = num;\\n        int res = 0;\\n\\n        while(num1 > 0){\\n            int r = num1 % 10;\\n            res = res * 10 + r;\\n            num1 = num1 / 10;\\n        }\\n        \\n        while(res > 0){\\n            int r = res % 10;\\n            num1 = num1 * 10 + r;\\n            res = res / 10;\\n        }\\n\\n        if(num1 == num){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        int num1 = num;\\n        int res = 0;\\n\\n        while(num1 > 0){\\n            int r = num1 % 10;\\n            res = res * 10 + r;\\n            num1 = num1 / 10;\\n        }\\n        \\n        while(res > 0){\\n            int r = res % 10;\\n            num1 = num1 * 10 + r;\\n            res = res / 10;\\n        }\\n\\n        if(num1 == num){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675379,
                "title": "fall-in-solution",
                "content": "- ##### *****Intuition*****\\n\\n---\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n```javascript []\\n```\\nconsole.log(\\'Hello world!\\')\\n```javascript []\\n``$$$$$$$$$$$$$$$$$$console.log(\\'Hello world!\\')$$$$$$$$$$$$$$$$$$``\\n![79ea34485b47f0cec63ff558e8f15642.jpg](https://assets.leetcode.com/users/images/0a2cdedf-b04d-4b21-8fa1-5397fd3274fb_1687573361.158422.jpeg)\\n```\\n```python []\\nprint(\\'Hello world!\\')\\n```\\n```ruby []\\nputs \\'Hello world!\\'\\n```\\n```\\n```\\n```python []\\nprint(\\'Hello world!\\')\\n```\\n```ruby []\\nputs \\'Hello world!\\'\\n```\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        a = str(num)\\n        b = a[::-1]\\n        c = int(b)\\n        x = str(c)\\n        if str(num) == x[::-1]:\\n            return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```javascript []\\n```\n```javascript []\\n``$$$$$$$$$$$$$$$$$$console.log(\\'Hello world!\\')$$$$$$$$$$$$$$$$$$``\\n![79ea34485b47f0cec63ff558e8f15642.jpg](https://assets.leetcode.com/users/images/0a2cdedf-b04d-4b21-8fa1-5397fd3274fb_1687573361.158422.jpeg)\\n```\n```python []\\nprint(\\'Hello world!\\')\\n```\n```ruby []\\nputs \\'Hello world!\\'\\n```\n```\\n```\n```python []\\nprint(\\'Hello world!\\')\\n```\n```ruby []\\nputs \\'Hello world!\\'\\n```\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        a = str(num)\\n        b = a[::-1]\\n        c = int(b)\\n        x = str(c)\\n        if str(num) == x[::-1]:\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3648949,
                "title": "100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        return true;\\n        int zero=num%10;\\n        if(zero==0)\\n        return false;\\n        else\\n        return true;\\n        \\n        \\n           \\n        \\n\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        return true;\\n        int zero=num%10;\\n        if(zero==0)\\n        return false;\\n        else\\n        return true;\\n        \\n        \\n           \\n        \\n\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3647060,
                "title": "java-easy-understandable-0ms-beats-100-beginners",
                "content": "# Intuition\\nStep 1: Reverse the number and store it in a variable.\\nStep 2: Take the two integers and convert it into String.\\nStep 3: Check whether both of the string length is equal or not.\\nStep 4: If it is equal return true, else return false.\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        int n=num,ans=0;\\n        while(n!=0)\\n        {\\n            int l=n%10;\\n            ans=(ans*10)+l;\\n            n=n/10;\\n        } \\n        String s1=Integer.toString(num);\\n        String s2=Integer.toString(ans);\\n        if(s1.length()==s2.length())  return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        int n=num,ans=0;\\n        while(n!=0)\\n        {\\n            int l=n%10;\\n            ans=(ans*10)+l;\\n            n=n/10;\\n        } \\n        String s1=Integer.toString(num);\\n        String s2=Integer.toString(ans);\\n        if(s1.length()==s2.length())  return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3646479,
                "title": "simplest-c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n        else if(num%10==0 ){\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }\\n        else if(num%10==0 ){\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3646461,
                "title": "beginner-friendly-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) \\n    {\\n        int act_num=num;\\n        int reverse1=0;\\n        while(num!=0)\\n        {\\n            int digit=num%10;\\n            reverse1=reverse1*10+digit;\\n            num=num/10;\\n        }\\n\\n        int reverse2=0;\\n        while(reverse1!=0)\\n        {\\n            int digit=reverse1%10;\\n            reverse2=reverse2*10+digit;\\n            reverse1=reverse1/10;\\n        }\\n        if(act_num==reverse2)\\n        {\\n            return true;\\n        }\\n        return false;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) \\n    {\\n        int act_num=num;\\n        int reverse1=0;\\n        while(num!=0)\\n        {\\n            int digit=num%10;\\n            reverse1=reverse1*10+digit;\\n            num=num/10;\\n        }\\n\\n        int reverse2=0;\\n        while(reverse1!=0)\\n        {\\n            int digit=reverse1%10;\\n            reverse2=reverse2*10+digit;\\n            reverse1=reverse1/10;\\n        }\\n        if(act_num==reverse2)\\n        {\\n            return true;\\n        }\\n        return false;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3585716,
                "title": "string-convert-and-then-convert-it-to-integer-again",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        s = str(num)\\n        s1 = int(s[::-1])\\n        s2 = str(s1)\\n        print(s2[::-1])\\n        return int(s2[::-1])==int(s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        s = str(num)\\n        s1 = int(s[::-1])\\n        s2 = str(s1)\\n        print(s2[::-1])\\n        return int(s2[::-1])==int(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3543684,
                "title": "simplest-efficient-c-code-time-o-logx-space-o-1",
                "content": "# Intuition\\nThe code appears to be checking whether a given integer x remains the same after reversing its digits twice. The function isSameAfterReversals takes an integer x as input and returns a boolean value indicating whether x is the same after reversing its digits twice.\\n\\n# Approach\\n1. The code first checks if x is negative. If it is, the function returns false.\\n2. The code then uses two while loops to reverse the digits of x.\\n    - In the first while loop, the variable x1 is used to store the absolute value of x. Inside the loop, the last digit of x1 is extracted using the modulus operator % and stored in the variable a. The digits of x1 are reversed by multiplying r1 by 10 and adding a. The value of x1 is updated by dividing it by 10.\\n    - In the second while loop, the same process is repeated to reverse the digits of r1 and store the result in r2.\\n3. Finally, the code compares r2 with the original value of x and returns true if they are equal, indicating that x remains the same after reversing its digits twice. Otherwise, it returns false.\\n\\n# Complexity\\n- Time complexity: The time complexity of the code is determined by the number of digits in x, which is roughly logarithmic in x. Therefore, the time complexity can be considered as $O(log(x))$.\\n\\n- Space complexity: The code uses a constant amount of additional space to store variables a, r1, r2, and x1. Hence, the space complexity is $O(1)$.\\n\\n# Code\\n```\\nbool isSameAfterReversals(int x)\\n{\\n    long int a,r1=0,r2=0,x1=x;\\n    if(x<0)\\n    return false;\\n    while(x1!= 0)\\n    {\\n        a = x1%10;\\n        r1 = r1*10 + a;\\n        x1 = x1/10;\\n    }\\n    while(r1!= 0)\\n    {\\n        a = r1%10;\\n        r2 = r2*10 + a;\\n        r1 = r1/10;\\n    }\\n    if(r2==x)\\n    return true;\\n    else\\n    return false;\\n}\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int x)\\n{\\n    long int a,r1=0,r2=0,x1=x;\\n    if(x<0)\\n    return false;\\n    while(x1!= 0)\\n    {\\n        a = x1%10;\\n        r1 = r1*10 + a;\\n        x1 = x1/10;\\n    }\\n    while(r1!= 0)\\n    {\\n        a = r1%10;\\n        r2 = r2*10 + a;\\n        r1 = r1/10;\\n    }\\n    if(r2==x)\\n    return true;\\n    else\\n    return false;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3535203,
                "title": "easy-2-line-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        return true;\\n        if(num%10==0)\\n        return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        return true;\\n        if(num%10==0)\\n        return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3314448,
                "title": "simple-python-solution",
                "content": "```\\n\\n#if the number if 0\\n        if num==0:\\n            return True\\n        #if the num ends with 0\\n        if num%10==0:\\n            return False\\n        #other conditions\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\n\\n#if the number if 0\\n        if num==0:\\n            return True\\n        #if the num ends with 0\\n        if num%10==0:\\n            return False\\n        #other conditions\\n        return True\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3196825,
                "title": "easy-java-solution-100-faster-0-ms",
                "content": "\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        int n=num;\\n        int reverse=0;\\n        while(num!=0)\\n        {\\n            int l=num%10;\\n            num/=10;\\n            reverse*=10;\\n            reverse+=l;\\n        }\\n        int reverse1=0;\\n        while(reverse!=0)\\n        {\\n            int ll=reverse%10;\\n            reverse/=10;\\n            reverse1*=10;\\n             reverse1+=ll;\\n        }\\n        if(reverse1==n)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        int n=num;\\n        int reverse=0;\\n        while(num!=0)\\n        {\\n            int l=num%10;\\n            num/=10;\\n            reverse*=10;\\n            reverse+=l;\\n        }\\n        int reverse1=0;\\n        while(reverse!=0)\\n        {\\n            int ll=reverse%10;\\n            reverse/=10;\\n            reverse1*=10;\\n             reverse1+=ll;\\n        }\\n        if(reverse1==n)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3192028,
                "title": "a-number-after-a-double-reversal-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\njust check whether the unit\\'s digit is 0 or not \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- if num>0 and unit\\'s digit is 0, then return false\\n- else return true\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num%10==0 && num!=0)\\n        {\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num%10==0 && num!=0)\\n        {\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137234,
                "title": "very-easy-basic-math-question",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n//Please Upvote if you like the appraoch \\n    bool isSameAfterReversals(int num) {\\n        int temp1=num;\\n        int sum=0;\\n        while(temp1!=0){\\n          sum=sum*10+(temp1%10);\\n            temp1=temp1/10;\\n        }\\n        //sum will be our reverse 1;\\n        int temp2=0;\\n        while(sum!=0){\\n            temp2=temp2*10+(sum%10);\\n            sum=sum/10;\\n        }\\n        if(num==temp2){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n//Please Upvote if you like the appraoch \\n    bool isSameAfterReversals(int num) {\\n        int temp1=num;\\n        int sum=0;\\n        while(temp1!=0){\\n          sum=sum*10+(temp1%10);\\n            temp1=temp1/10;\\n        }\\n        //sum will be our reverse 1;\\n        int temp2=0;\\n        while(sum!=0){\\n            temp2=temp2*10+(sum%10);\\n            sum=sum/10;\\n        }\\n        if(num==temp2){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3132392,
                "title": "beats-93-42-a-number-after-a-double-reversal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        original=num\\n        reverse1=0\\n        while num!=0:\\n            reverse1=(num%10)+reverse1*10\\n            num//=10\\n        reverse2=0\\n        while reverse1!=0:\\n            reverse2=(reverse1%10)+reverse2*10\\n            reverse1//=10\\n        if(reverse2==original):\\n            return True\\n        else:\\n            return False\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        original=num\\n        reverse1=0\\n        while num!=0:\\n            reverse1=(num%10)+reverse1*10\\n            num//=10\\n        reverse2=0\\n        while reverse1!=0:\\n            reverse2=(reverse1%10)+reverse2*10\\n            reverse1//=10\\n        if(reverse2==original):\\n            return True\\n        else:\\n            return False\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3131867,
                "title": "very-simple-and-short-solution-in-c-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nReturns 0 if num is 0 , then finds if first digit of num is 0 or not and returns false if it is and returns true otherwise....\\n\\n\\n# Complexity\\nRuntime : Beats 100%\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }else if(num%10==0){\\n            return false;\\n        }else{\\n            return true;\\n        }\\n    }\\n};\\n```\\nHope you like the code implementation, make sure to upvote \\u270C\\nGood day, keep coding .....",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0){\\n            return true;\\n        }else if(num%10==0){\\n            return false;\\n        }else{\\n            return true;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3045555,
                "title": "easiest-fastest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nbool isSameAfterReversals(int num){\\n\\nif(num==0)\\n    return true;\\nelse if(num%10==0)\\n    return false;\\n    else\\n        return true;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int num){\\n\\nif(num==0)\\n    return true;\\nelse if(num%10==0)\\n    return false;\\n    else\\n        return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3042240,
                "title": "java-beats-100-tc-1-sc-1-one-liner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA nummber will lose its value if has trailing zeroes and is not equal to zero. Based on that we find the remainder and compare with the original number and return it.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O (1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O (1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int nums) {\\n        return !(nums%10 == 0 && nums != 0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int nums) {\\n        return !(nums%10 == 0 && nums != 0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3030227,
                "title": "easiest-fastest-c-solution-0ms-runtime-beats-100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int revFunc(int n){\\n        int rev=0;\\n        while(n>0){\\n            int t=n%10;\\n            rev= rev*10+t;\\n            n/=10;\\n        }\\n        return rev;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int org=num;\\n        int reverse1=revFunc(num);\\n        int reverse2=revFunc(reverse1);\\n        return reverse2==num;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int revFunc(int n){\\n        int rev=0;\\n        while(n>0){\\n            int t=n%10;\\n            rev= rev*10+t;\\n            n/=10;\\n        }\\n        return rev;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int org=num;\\n        int reverse1=revFunc(num);\\n        int reverse2=revFunc(reverse1);\\n        return reverse2==num;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2980373,
                "title": "easy-and-well-understandable-c-beats-100-efficient-using-only-if-statement",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if (num==0)\\n            return true;\\n        if(num%10==0)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if (num==0)\\n            return true;\\n        if(num%10==0)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977900,
                "title": "easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num == 0) return true;\\n        bool ans;\\n        ans = num % 10 ? true : false;\\n        return ans;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num == 0) return true;\\n        bool ans;\\n        ans = num % 10 ? true : false;\\n        return ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2968616,
                "title": "very-easy-to-understand-java-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num==0)\\n        return true;\\n        else if(num%10==0)\\n        return false;\\n        else\\n        return true;\\n    }\\n}\\n//the logic is only when a no is multiple of 10 will it\\'s ans be different on reversing them second time.\\n//the only exception would be zero because on dividing it with 10 remainder will be zero but, the resultant reversed no will be 0 i.e. same as given num even if it is reversed n no of times.\\n//thus, a special condition for it is applied \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num==0)\\n        return true;\\n        else if(num%10==0)\\n        return false;\\n        else\\n        return true;\\n    }\\n}\\n//the logic is only when a no is multiple of 10 will it\\'s ans be different on reversing them second time.\\n//the only exception would be zero because on dividing it with 10 remainder will be zero but, the resultant reversed no will be 0 i.e. same as given num even if it is reversed n no of times.\\n//thus, a special condition for it is applied \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2934640,
                "title": "easy-java-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Solved using Strings Imagine the possible ways the number can come. -->\\n\\n# Approach\\n<!-- Its better to be Greedy.  -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Time complexity: $O(1) -->\\n\\n- Space complexity:\\n<!-- Space complexity: $O(1) -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static boolean isSameAfterReversals(int x) {\\n        String s = String.valueOf(x);\\n        if(x==0)\\n            return true;\\n        if(s.charAt(s.length()-1)==\\'0\\'){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static boolean isSameAfterReversals(int x) {\\n        String s = String.valueOf(x);\\n        if(x==0)\\n            return true;\\n        if(s.charAt(s.length()-1)==\\'0\\'){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2860284,
                "title": "one-line-java-solution-100-faster",
                "content": "![image](https://assets.leetcode.com/users/images/4054aad5-6d22-4d91-b12a-7c2f05f0ae52_1669740377.7010653.png)\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n       return num==0?(true):(num%10==0?false:true);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n       return num==0?(true):(num%10==0?false:true);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826877,
                "title": "easiest-solution-c-plus-plus-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int rev(int n){\\n        int reversed_number = 0, remainder=0;\\n        while(n != 0) {\\n            remainder = n % 10;\\n            reversed_number = reversed_number * 10 + remainder;\\n            n /= 10;\\n        }\\n        return reversed_number;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int a = rev(num);\\n        int b = rev(a);\\n        // cout<<a<<b<<endl;\\n        return num==b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int rev(int n){\\n        int reversed_number = 0, remainder=0;\\n        while(n != 0) {\\n            remainder = n % 10;\\n            reversed_number = reversed_number * 10 + remainder;\\n            n /= 10;\\n        }\\n        return reversed_number;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int a = rev(num);\\n        int b = rev(a);\\n        // cout<<a<<b<<endl;\\n        return num==b;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2677238,
                "title": "0ms-solution-java",
                "content": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n    else if(num%10==0)\\n         return false;\\n        \\n        else\\n            return true;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n    else if(num%10==0)\\n         return false;\\n        \\n        else\\n            return true;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2605835,
                "title": "easy-c-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num == 0)\\n            return true;\\n        \\n        if(num % 10 == 0)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num == 0)\\n            return true;\\n        \\n        if(num % 10 == 0)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2603289,
                "title": "one-line-solution-fastest",
                "content": "// only numbers which have 0 in ones place are not reversable\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num%10!=0;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num%10!=0;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2593704,
                "title": "java-easiest-approach-beginnners-friendly",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if( num == 0 ){\\n            return true;\\n        }\\n        if(num % 10 == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if( num == 0 ){\\n            return true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2559056,
                "title": "100-faster-solution-in-java",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        \\n        if( num % 10 == 0 && num != 0){\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        \\n        if( num % 10 == 0 && num != 0){\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2546445,
                "title": "java-best-solution",
                "content": "int rem=0,sum=0,rev1,rev2,newRem=0,newSum=0;\\n        rev1=num;\\n        while(num>0){\\n            rem=num%10;\\n            sum=sum*10+rem;\\n            num/=10;\\n        }\\n         rev2=sum;\\n        while(sum>0){\\n            newRem=sum%10;\\n            newSum=newSum*10+newRem;\\n            sum/=10;\\n        }\\n        if(rev1==newSum)\\n            return true;\\n        else\\n            return false;",
                "solutionTags": [],
                "code": "int rem=0,sum=0,rev1,rev2,newRem=0,newSum=0;\\n        rev1=num;\\n        while(num>0){\\n            rem=num%10;\\n            sum=sum*10+rem;\\n            num/=10;\\n        }\\n         rev2=sum;\\n        while(sum>0){\\n            newRem=sum%10;\\n            newSum=newSum*10+newRem;\\n            sum/=10;\\n        }\\n        if(rev1==newSum)\\n            return true;\\n        else\\n            return false;",
                "codeTag": "Unknown"
            },
            {
                "id": 2540365,
                "title": "c-constant-time-and-space",
                "content": "**Just check if the right most digit is zero.**\\n```\\nbool isSameAfterReversals(int num) {\\n    if(num < 10)\\n        return true;\\n\\treturn num % 10 != 0;\\n}\\n```\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isSameAfterReversals(int num) {\\n    if(num < 10)\\n        return true;\\n\\treturn num % 10 != 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2523730,
                "title": "c-o-1-one-line",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isSameAfterReversals(int num) {\\n\\t\\t\\treturn num== 0 or num%10!=0;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isSameAfterReversals(int num) {\\n\\t\\t\\treturn num== 0 or num%10!=0;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2476753,
                "title": "simple-java-solution-0ms-faster-than-100",
                "content": "```\\n\\n public boolean isSameAfterReversals(int num)\\n    {\\n       if(num % 10 == 0 && num != 0)\\n           return false;\\n        \\n        else        \\n        return true;\\n    }\\n\\t\\n\\t```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\n\\n public boolean isSameAfterReversals(int num)\\n    {\\n       if(num % 10 == 0 && num != 0)\\n           return false;\\n        \\n        else        \\n        return true;\\n    }\\n\\t\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 2447848,
                "title": "java-solution-1ms-runtime-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int n) {\\n        int num = reverse(n);\\n        num = reverse(num);\\n        return num == n;\\n    }\\n\\n    private static int reverse(int n) {\\n        int add = 0;\\n        for (int i = n; i != 0; i /= 10) {\\n            add = add * 10 + (i % 10);\\n        }\\n        return add;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int n) {\\n        int num = reverse(n);\\n        num = reverse(num);\\n        return num == n;\\n    }\\n\\n    private static int reverse(int n) {\\n        int add = 0;\\n        for (int i = n; i != 0; i /= 10) {\\n            add = add * 10 + (i % 10);\\n        }\\n        return add;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2447821,
                "title": "java-solution-4-lines-of-code-string-builder-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int n) {\\n        StringBuilder s1 = new StringBuilder(String.valueOf(n));\\n        int i = Integer.parseInt(String.valueOf(s1.reverse()));\\n        s1 = new StringBuilder(String.valueOf(i)).reverse();\\n        return s1.toString().equals(String.valueOf(n));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int n) {\\n        StringBuilder s1 = new StringBuilder(String.valueOf(n));\\n        int i = Integer.parseInt(String.valueOf(s1.reverse()));\\n        s1 = new StringBuilder(String.valueOf(i)).reverse();\\n        return s1.toString().equals(String.valueOf(n));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2410178,
                "title": "easy-to-understand-num-10-approach",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num == 0 || num%10 != 0) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num == 0 || num%10 != 0) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2389114,
                "title": "c-o-1-0ms-100-faster-approach",
                "content": "For the number to be equal after double reversal, it is like roating an object at 360 degree, it would appear to be exactly the same. \\nThe only condition a number will not be equal to its double reverted state will be if it contains leading zereos, because on reversing the number, they will not be retained.\\n\\nSolution:\\n\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals (int num) {\\n        if (num == 0) return true;\\n        if (num % 10 == 0) return false;\\n        return true;\\n    }\\n};\\n```\\n\\nIf it helped you, please upvote \\uD83D\\uDE0A",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals (int num) {\\n        if (num == 0) return true;\\n        if (num % 10 == 0) return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2386431,
                "title": "java-very-simple-solution-1-line",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2338285,
                "title": "java-0ms-code",
                "content": "\\tpublic boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }",
                "solutionTags": [],
                "code": "\\tpublic boolean isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2330486,
                "title": "a-very-simple-one-liner-in-java",
                "content": "The solution is super simple and straightforward. All numbers that donot have trailing zeros can be retained by double reversal.\\n\\nIf any number has one or more trailing zeros, then it can\\'t be retained using double reversal, except Zero.\\n\\nSo, \\nif the given number is 0,  return true, \\nelse if the number has a trailing zero,  return false,\\nelse return true;\\n\\nCode:\\n```\\npublic boolean isSameAfterReversals(int num) {\\n\\n        return ((num==0)?true:(num%10 != 0));\\n\\t\\t\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\npublic boolean isSameAfterReversals(int num) {\\n\\n        return ((num==0)?true:(num%10 != 0));\\n\\t\\t\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2296724,
                "title": "easiest-java-approach-100-faster",
                "content": "if u find the code elevant then upvote it.\\n\\t\\t\\n\\t\\t\\n\\tclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n         if(num<=9)\\n            return true;\\n        if(num>9 && num%10==0){\\n            return false;\\n        }\\n        else\\n            return true;\\n    }\\n }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n         if(num<=9)\\n            return true;\\n        if(num>9 && num%10==0){\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2287511,
                "title": "python-best-few-lines-solution",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        \\n        num1=int(str(\"\".join(list(str(int(\"\".join((list(str(num))[::-1])))))[::-1])))\\n        \\n        return num1==num\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        \\n        num1=int(str(\"\".join(list(str(int(\"\".join((list(str(num))[::-1])))))[::-1])))\\n        \\n        return num1==num\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2257828,
                "title": "java-solution-0-runtime-try-once",
                "content": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num == 0)\\n            return true;\\n        int temp = num;\\n        num = reverse(num);\\n        num = reverse(num);\\n        return temp ==num ? true:false;\\n    }\\n    \\n    static int  reverse(int num){\\n        int s =0, r =0;\\n        while(num > 0){\\n            r = num%10;\\n            s = (s*10) + r;\\n            num = num/10;\\n        }\\n        return s;\\n    } \\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num == 0)\\n            return true;\\n        int temp = num;\\n        num = reverse(num);\\n        num = reverse(num);\\n        return temp ==num ? true:false;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2242065,
                "title": "java-solution-1-using-recursion-2-one-line-solution",
                "content": "**1. Using recursion** Runtime ~ 0ms\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n\\t\\n\\t\\t//1. find reverse of the number \\n        int reversed1 = reversed(num);\\n\\t\\t\\n\\t\\t//2. find reverse of the reversed number\\n        int reversed2 = reversed(reversed1);\\n\\t\\t\\n\\t\\t//3. check if reversed2 is equal to original\\n        if (reversed2 == num)\\n            return true;\\n        else\\n            return false;\\n    }\\n    private int reversed(int num){\\n\\t\\n\\t\\t//1. set reversed value to zero\\n        int reversed = 0;\\n\\t\\t//2. while loop \\n        while (num > 0){\\n\\t\\t\\n\\t\\t\\t//2.1 find the last digit\\n            int last = num%10;\\n\\t\\t\\t\\n\\t\\t\\t//2.2 add last digit to reversed\\n            reversed = (reversed*10) + last;\\n\\t\\t\\t\\n\\t\\t\\t//2.3 remove the last digit from the number after adding to reversed\\n            num = num/10;\\n        }\\n\\t\\t\\n\\t\\t//3. return reversed number\\n        return reversed;\\n    }\\n}\\n```\\n**2. One - line easy solution** Runtime ~ 0 ms\\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num == 0 || num % 10 != 0);\\n\\t\\t// a twice reversed number shall be same unless it is a number divisible by 10\\n\\t\\t// eg 300 : reversed: 003 ~ 3 reversed again = 3 not same\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n\\t\\n\\t\\t//1. find reverse of the number \\n        int reversed1 = reversed(num);\\n\\t\\t\\n\\t\\t//2. find reverse of the reversed number\\n        int reversed2 = reversed(reversed1);\\n\\t\\t\\n\\t\\t//3. check if reversed2 is equal to original\\n        if (reversed2 == num)\\n            return true;\\n        else\\n            return false;\\n    }\\n    private int reversed(int num){\\n\\t\\n\\t\\t//1. set reversed value to zero\\n        int reversed = 0;\\n\\t\\t//2. while loop \\n        while (num > 0){\\n\\t\\t\\n\\t\\t\\t//2.1 find the last digit\\n            int last = num%10;\\n\\t\\t\\t\\n\\t\\t\\t//2.2 add last digit to reversed\\n            reversed = (reversed*10) + last;\\n\\t\\t\\t\\n\\t\\t\\t//2.3 remove the last digit from the number after adding to reversed\\n            num = num/10;\\n        }\\n\\t\\t\\n\\t\\t//3. return reversed number\\n        return reversed;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num == 0 || num % 10 != 0);\\n\\t\\t// a twice reversed number shall be same unless it is a number divisible by 10\\n\\t\\t// eg 300 : reversed: 003 ~ 3 reversed again = 3 not same\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2235019,
                "title": "simple-easy-java-solution",
                "content": "```\\nif(num == 0){\\n            return true;\\n        }\\n        if(num%10 == 0){\\n            return false;\\n        }\\n        return true;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nif(num == 0){\\n            return true;\\n        }\\n        if(num%10 == 0){\\n            return false;\\n        }\\n        return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2206198,
                "title": "omg-100-faster",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        int n=num;\\n        int sum=helper(num);\\n        int s=helper(sum);\\n        if(n==s)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    int helper(int num)\\n    {\\n        int s=0;\\n        while(num!=0)\\n        {\\n            s=s*10+num%10;\\n            num=num/10;\\n        }\\n        return s;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) \\n    {\\n        int n=num;\\n        int sum=helper(num);\\n        int s=helper(sum);\\n        if(n==s)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    int helper(int num)\\n    {\\n        int s=0;\\n        while(num!=0)\\n        {\\n            s=s*10+num%10;\\n            num=num/10;\\n        }\\n        return s;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2152097,
                "title": "one-line-easy-solution-java-with-explanation-faster-than-100",
                "content": "**Easy One LIne Solution ** --Best Solution O(1)\\n\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num==0 || num%10!=0);\\n    }\\n}\\n\\nExplanation :\\n\\n1) reverse(reverse(num))=original number(always returns true) , except when there is zero present \\n2) there are basically two conditons : either number is zero or last digit is nor zero only then the number returns true\\n3) otherwise in all conditons returns , it is best/optimal solution",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "class Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return (num==0 || num%10!=0);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2132100,
                "title": "easiest-question-on-lc-python",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return num==0 or num%10\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return num==0 or num%10\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2127266,
                "title": "c-3-line-code-easy-approach",
                "content": "```\\n=> IF THE SOLUTION WAS USEFUL, THEN DO NOT FORGET TO UPVOTE!! \\u2714\\n\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n       \\n        if(num==0)            //if number is 0 directly return 0\\n            return 1;\\n\\n        int num1=num%10;      //If number is divisible by 10 that means it contains zero at the end\\n\\n        return num1;          //(remainter 0 )if it is divisible by 10 ,then return false otherwise return true\\n        \\n    }\\n};\\n\\n=> IF THE SOLUTION WAS USEFUL, THEN DO NOT FORGET TO UPVOTE!! \\u2714\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n=> IF THE SOLUTION WAS USEFUL, THEN DO NOT FORGET TO UPVOTE!! \\u2714\\n\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n       \\n        if(num==0)            //if number is 0 directly return 0\\n            return 1;\\n\\n        int num1=num%10;      //If number is divisible by 10 that means it contains zero at the end\\n\\n        return num1;          //(remainter 0 )if it is divisible by 10 ,then return false otherwise return true\\n        \\n    }\\n};\\n\\n=> IF THE SOLUTION WAS USEFUL, THEN DO NOT FORGET TO UPVOTE!! \\u2714\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2095373,
                "title": "c-simple-1-line-solution-tc-o-1-sc-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n\\t    //double reversal will yield a different result when compared to the initial number,\\n\\t\\t// only when there are trailing zeros (except for the number 0 itself)\\n        return (num != 0 && num % 10 == 0) ? false : true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n\\t    //double reversal will yield a different result when compared to the initial number,\\n\\t\\t// only when there are trailing zeros (except for the number 0 itself)\\n        return (num != 0 && num % 10 == 0) ? false : true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2095350,
                "title": "python3-solution",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if(num==0):\\n            return True\\n        if(num%10==0):\\n            return False \\n        return True\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if(num==0):\\n            return True\\n        if(num%10==0):\\n            return False \\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2065635,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return int(str(int(str(num)[::-1]))[::-1])==num\\n```\\n**UPVOTE IF YOU FIND IT HEPLFUL**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return int(str(int(str(num)[::-1]))[::-1])==num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2010191,
                "title": "1-line-python-code",
                "content": "class Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n\\t\\n        return num == int(str(int(str(num)[::-1]))[::-1])",
                "solutionTags": [],
                "code": "class Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n\\t\\n        return num == int(str(int(str(num)[::-1]))[::-1])",
                "codeTag": "Java"
            },
            {
                "id": 2005366,
                "title": "easy-java-4-line-code-0ms-fastest-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num >0 && num % 10 == 0){\\n            return false;\\n        }\\n        \\n        return true;  //all the numbers which doesn\\'t have 0 in the last are true.\\n    }\\n}\\n```\\n\\nplease upvote if you find this helpful.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num >0 && num % 10 == 0){\\n            return false;\\n        }\\n        \\n        return true;  //all the numbers which doesn\\'t have 0 in the last are true.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1988231,
                "title": "python3-one-line-solution",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return (num == 0) or (num % 10)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        return (num == 0) or (num % 10)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1905964,
                "title": "c-soln-100-faster-no-need-to-reverse",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string s=to_string(num);\\n        int n=s.length();\\n        if(num==0) return 1;\\n        if(s[n-1]==\\'0\\') return 0;\\n        else return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string s=to_string(num);\\n        int n=s.length();\\n        if(num==0) return 1;\\n        if(s[n-1]==\\'0\\') return 0;\\n        else return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1896647,
                "title": "c-100-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(!num){\\n            return true;\\n        }\\n        if(num%10 == 0){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(!num){\\n            return true;\\n        }\\n        if(num%10 == 0){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1882334,
                "title": "perfect-no-100-faster",
                "content": "class Solution {\\npublic:\\n\\n    int rev(int num){\\n        int n = num;\\n        int res=0;\\n        while(num){\\n            int r= num%10;\\n            res= res*10+r;\\n            num/=10;\\n        }\\n        return res;\\n    }\\n    bool isSameAfterReversals(int num) {\\n        int t = rev(num);\\n        int res=rev(t);\\n        if(res==num) return true;\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int rev(int num){\\n        int n = num;\\n        int res=0;\\n        while(num){\\n            int r= num%10;\\n            res= res*10+r;\\n            num/=10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1854983,
                "title": "c-and-c-easy-solution-100-fast-easy-to-understand",
                "content": "\\n# C SOLUTION\\n\\n\\n    int reverse(int n)\\n    {\\n        int sum=0;\\n        while(n!=0)\\n        {\\n            int temp=n%10;\\n            sum=sum*10+temp;\\n            n=n/10;\\n        }\\n        return sum;\\n    }\\n    \\n    bool isSameAfterReversals(int num) {\\n        int x=reverse(num);\\n        int y=reverse(x);\\n        if(num==y)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\n# C++ SOLUTION\\n\\n    class Solution {\\n    public:\\n        \\n        int reverse(int n)\\n        {\\n            int sum=0;\\n            while(n!=0)\\n            {\\n                int temp=n%10;\\n                sum=sum*10+temp;\\n                n=n/10;\\n            }\\n            return sum;\\n        }\\n        \\n        bool isSameAfterReversals(int num) {\\n            int x=reverse(num);\\n            int y=reverse(x);\\n            if(num==y)\\n            {\\n                return true;\\n            }\\n            return false;\\n        }\\n       };\\n\\t   \\n***IF U FIND IT USEFUL PLEASE UPVOTE***",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n    public:\\n        \\n        int reverse(int n)\\n        {\\n            int sum=0;\\n            while(n!=0)\\n            {\\n                int temp=n%10;\\n                sum=sum*10+temp;\\n                n=n/10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1814872,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        int i,j,k=0,l;\\n        l=num;\\n        vector<int>y;\\n        vector<int >o;\\n        while(num!=0)\\n        {\\n            j=num%10;\\n            y.push_back(j);\\n            num/=10;\\n        }\\n        int p=0;\\n        for(i=0;i<y.size();i++)\\n        {\\n            if(y[i]==0 && p==0)\\n                ;\\n            else\\n            {\\n                p++;\\n                o.push_back(y[i]);\\n            }\\n        }\\n        p=1;\\n        for(i=o.size()-1;i>=0;i--)\\n        {\\n           k=k+o[i]*(pow(10,i));\\n        }\\n   \\n        if(k==l)\\n            return true;\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        int i,j,k=0,l;\\n        l=num;\\n        vector<int>y;\\n        vector<int >o;\\n        while(num!=0)\\n        {\\n            j=num%10;\\n            y.push_back(j);\\n            num/=10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1803695,
                "title": "c-one-line-solution-two-operations",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return num == 0 || num % 10 != 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1776769,
                "title": "100-faster-soln-simple-approach",
                "content": "class Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        \\n        if(num==0)\\n        {\\n            return true;\\n        }\\n        \\n        string s=to_string(num);\\n        \\n        if(s[s.size()-1]==\\'0\\')\\n        {\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n};",
                "solutionTags": [
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        \\n        if(num==0)\\n        {\\n            return true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1768007,
                "title": "python-3-simple-solution-o-1-88-lesser-memory",
                "content": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        if num % 10 == 0:\\n            return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isSameAfterReversals(self, num: int) -> bool:\\n        if num == 0:\\n            return True\\n        if num % 10 == 0:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1760480,
                "title": "c-beginner-friendly-easy-maths-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if( num == 0 ) return true;\\n        if( num% 10  == 0 ) return false;\\n        return true;\\n    }\\n};\\n```\\n```\\nRuntime: 0 ms, faster than 100.00% of C++ online submissions for A Number After a Double Reversal.\\nMemory Usage: 6 MB, less than 21.16% of C++ online submissions for A Number After a Double Reversal.\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if( num == 0 ) return true;\\n        if( num% 10  == 0 ) return false;\\n        return true;\\n    }\\n};\\n```\n```\\nRuntime: 0 ms, faster than 100.00% of C++ online submissions for A Number After a Double Reversal.\\nMemory Usage: 6 MB, less than 21.16% of C++ online submissions for A Number After a Double Reversal.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1758746,
                "title": "java-2-lines-of-code-super-easy-100-fast",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num<9) return true;\\n        if(num % 10 == 0)return false; //if the num has 0 at the end then it will not be same after reversals.\\n        return true;\\n    }\\n}\\n```\\nPlease **UPVOTE** if you find this solution helpful.\\nThanks : )",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        if(num<9) return true;\\n        if(num % 10 == 0)return false; //if the num has 0 at the end then it will not be same after reversals.\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1758025,
                "title": "javascript-solution",
                "content": "```\\nconst isSameAfterReversals = (num) => {\\n  return num.toString().length === 1 || num % 10 !== 0\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nconst isSameAfterReversals = (num) => {\\n  return num.toString().length === 1 || num % 10 !== 0\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1757938,
                "title": "java100-0ms-easy-solution",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        int temp=0;\\n        int temp2 = num;\\n        while(num>0){\\n            temp = temp*10+num%10;\\n            num/=10;\\n        }\\n\\n        while (temp>0){\\n            num = num*10+temp%10;\\n            temp/=10;\\n        }\\n\\n        return temp2==num;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        int temp=0;\\n        int temp2 = num;\\n        while(num>0){\\n            temp = temp*10+num%10;\\n            num/=10;\\n        }\\n\\n        while (temp>0){\\n            num = num*10+temp%10;\\n            temp/=10;\\n        }\\n\\n        return temp2==num;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1741006,
                "title": "o-1-solution-lol",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if (num == 0) {\\n            return true;\\n        }\\n        if (num % 10 != 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if (num == 0) {\\n            return true;\\n        }\\n        if (num % 10 != 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1738956,
                "title": "java-easy-solution-using-logical-operator",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        \\n        return num==0 || num%10!=0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        \\n        return num==0 || num%10!=0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1729128,
                "title": "easy-c-solution",
                "content": "bool isSameAfterReversals(int num) {\\n        \\n       \\n        \\n        //if last digit is zero then only we will get false \\n        \\n        if(num%10==0 and num!=0)return false;\\n        return true;\\n        \\n        \\n    }",
                "solutionTags": [],
                "code": "bool isSameAfterReversals(int num) {\\n        \\n       \\n        \\n        //if last digit is zero then only we will get false \\n        \\n        if(num%10==0 and num!=0)return false;\\n        return true;\\n        \\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1726751,
                "title": "python3-o-1-one-liner-solution-easy-to-understand-runtime-32-ms-memory-13-8-mb",
                "content": "Other than the number 0 itself, any number that ends with 0 would lose some digits permanently when reversed.\\n\\n```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        return num % 10 != 0 or num == 0     \\n        \\n# Time: O(1)\\n# Space: O(1)\\n```\\n\\n![image](https://assets.leetcode.com/users/images/0205b584-c66a-48b9-b46e-1fc634386c8c_1643387243.4980116.png)\\n\\n------\\n------\\n\\nFind this solution and many others on my Github: *https://github.com/dimon41k2010/LeetCodeTasks/tree/main/2119-a-number-after-a-double-reversal*\\n\\n**Please upvote if it makes sence and helpful. Let\\'s stay motivated! Peace.**\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```\\ndef isSameAfterReversals(self, num: int) -> bool:\\n        return num % 10 != 0 or num == 0     \\n        \\n# Time: O(1)\\n# Space: O(1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1718538,
                "title": "easy-and-self-explanatory-for-newbies",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        {\\n            return true;\\n        }\\n        if(num%10==0)\\n        {\\n            return false;\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n        {\\n            return true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1714623,
                "title": "0-ms-100-faster-1-line-code-c",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        return (num == 0) || (num%10 !=0);\\n    }\\n};\\n\\nfeel free to ask your doubts :)\\nand pls upvote if it was helpful :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1705528,
                "title": "c-solution-100-faster-than-all-submission",
                "content": "**Please upvote me in quest of documenting all Leetcode solutions. :)**\\n```\\nThe logic to this problem is simple and easy, first check certain condition to prevent corner cases and save time.\\n1). If no is \\' 0 \\' return true, \\n2). If end digit of number before and after first reversal is 0 return false, becoz 0 is terminated as per question demand.\\n\\nAnd if not, then do simple reversal of no and check if after 2 reversal it matches with original no.\\n```\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        if(num==0)\\n            return true;\\n        if(num%10==0)\\n            return false;\\n        int rev1=0,rev2=0;\\n        int s1=num;\\n        \\n        while(s1!=0){                                              // First Reversal\\n            rev1=rev1*10+s1%10;\\n            s1/=10;\\n        }\\n       \\n        if(rev1%10==0)                                         // If last digit is 0 return false\\n            return false;\\n        \\n        while(rev1!=0){                                        // Second Reversal\\n            rev2=rev2*10+rev1%10;\\n            rev1/=10;\\n        }\\n        \\n        return rev2==num;\\n    }\\n};\\n\\nEasy peasy, Happy Coding :)",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nThe logic to this problem is simple and easy, first check certain condition to prevent corner cases and save time.\\n1). If no is \\' 0 \\' return true, \\n2). If end digit of number before and after first reversal is 0 return false, becoz 0 is terminated as per question demand.\\n\\nAnd if not, then do simple reversal of no and check if after 2 reversal it matches with original no.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1703183,
                "title": "c-faster-than-100-00",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    bool isSameAfterReversals(int num)\\n    {\\n        string str = to_string(num);\\n\\n        if (str.size() == 1)\\n            return true;\\n\\n        if (str[str.size() - 1] == \\'0\\')\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    bool isSameAfterReversals(int num)\\n    {\\n        string str = to_string(num);\\n\\n        if (str.size() == 1)\\n            return true;\\n\\n        if (str[str.size() - 1] == \\'0\\')\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1691593,
                "title": "c-o-1-time-and-space",
                "content": "```\\n  bool isSameAfterReversals(int num) {\\n         return (num%10!=0 || num==0);\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n  bool isSameAfterReversals(int num) {\\n         return (num%10!=0 || num==0);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1680738,
                "title": "java-solution-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "```\\nclass Solution {\\n   public boolean isSameAfterReversals(int num)\\n   {\\n        boolean p = true;\\n        int k = num;\\n        int reverse1 = reverse(k);\\n        int reveres2 = reverse(reverse1);\\n        if(reveres2 != num)\\n\\t\\t{      \\n        \\tp = false;\\n        }\\n      return p;\\n     }\\n     public static int reverse(int k)\\n\\t {\\n    \\t int pow = 1;\\n    \\t int digit = 0;\\n    \\t while(k > 0)\\n\\t\\t {\\n        \\t  int temp = k % 10;\\n       \\t\\t  digit = (digit* 10) + temp;\\n       \\t\\t  pow *= 10;\\n       \\t\\t  k = k / 10;\\n         }\\n    \\t return digit;\\n     }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n   public boolean isSameAfterReversals(int num)\\n   {\\n        boolean p = true;\\n        int k = num;\\n        int reverse1 = reverse(k);\\n        int reveres2 = reverse(reverse1);\\n        if(reveres2 != num)\\n\\t\\t{      \\n        \\tp = false;\\n        }\\n      return p;\\n     }\\n     public static int reverse(int k)\\n\\t {\\n    \\t int pow = 1;\\n    \\t int digit = 0;\\n    \\t while(k > 0)\\n\\t\\t {\\n        \\t  int temp = k % 10;\\n       \\t\\t  digit = (digit* 10) + temp;\\n       \\t\\t  pow *= 10;\\n       \\t\\t  k = k / 10;\\n         }\\n    \\t return digit;\\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1664393,
                "title": "java-using-stringbuilder",
                "content": "```\\npublic boolean isSameAfterReversals(int num) \\n{\\n        StringBuilder stringBuilder = new StringBuilder(String.valueOf(num)).reverse();\\n        int reversed = Integer.parseInt(stringBuilder.toString());\\n\\n        stringBuilder = new StringBuilder(String.valueOf(reversed)).reverse();\\n        reversed = Integer.parseInt(stringBuilder.toString());\\n\\n        return reversed == num;\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\npublic boolean isSameAfterReversals(int num) \\n{\\n        StringBuilder stringBuilder = new StringBuilder(String.valueOf(num)).reverse();\\n        int reversed = Integer.parseInt(stringBuilder.toString());\\n\\n        stringBuilder = new StringBuilder(String.valueOf(reversed)).reverse();\\n        reversed = Integer.parseInt(stringBuilder.toString());\\n\\n        return reversed == num;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1655613,
                "title": "java-1-line-answer",
                "content": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num==0 || num%10 != 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isSameAfterReversals(int num) {\\n        return num==0 || num%10 != 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1952140,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1567093,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1722724,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 2067621,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 2026611,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 2023723,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1852417,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1848157,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1840807,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1775577,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1952140,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1567093,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1722724,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 2067621,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 2026611,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 2023723,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1852417,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1848157,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1840807,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            },
            {
                "id": 1775577,
                "content": [
                    {
                        "username": "slade13",
                        "content": "It\\'s really easy and can be done without any reversing, pure mathematics.\\n\\nWhen the value has 0 at the end like value 1240:\\n1240 -> 421 -> 124\\n\\nThis means we need to check if rest of dividing by 10 is equal to 0 and if it is, we should return false. Only one edge case is 0 so in this case we have to check it first, and then return true. \\n\\n `num == 0 || !(num % 10 == 0)`"
                    },
                    {
                        "username": "Xayrulloh",
                        "content": "let isSameAfterReversals = (num) => {if (num === 0) return true; return num % 10 ? true : false}"
                    },
                    {
                        "username": "cdutton",
                        "content": "Why not simply the following? `let isSameAfterReversals = (num) => { return num === 0 || num % 10 != 0 }`"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "`The value of a number will decrease while reversing only if it has trailing zeroes.\\n\\nFor example 1, number = 100, reversedNum = 1.\\n\\nFor example 2, number = 101, reversed number = 101.\\xA0`"
                    },
                    {
                        "username": "athulshibu",
                        "content": "Is this a joke question?"
                    },
                    {
                        "username": "sourendulodh",
                        "content": "x=str(num)[::-1]\\ny=str(int(x))[::-1] . "
                    },
                    {
                        "username": "TwilightXD",
                        "content": "return True if num % 10 or not num else False"
                    },
                    {
                        "username": "abhranilpaul00",
                        "content": "Easy Monday! :)"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "Java 1 Line\\nreturn String.valueOf(num).length() == 1 || num % 10 != 0;"
                    },
                    {
                        "username": "sk_aayush",
                        "content": "C++ SOLN. | BEATS 100% | EASY APPROACH\\n\\nclass Solution {\\npublic:\\n\\nint rev(int x)\\n{\\n    int sum=0;\\n    \\n    while(x>0)\\n    {  int r=x%10;\\n        sum=sum*10 +r;\\n        x=x/10;\\n    }\\n\\n    return sum;\\n}\\n    bool isSameAfterReversals(int num) {\\n        int n= num;\\n        int ans = rev(n);\\n        int ans2 = rev(ans);\\n        if(ans2 == num)\\n        return true;\\n        else\\n        return false;\\n    }\\n};\\n"
                    },
                    {
                        "username": "rajarshiban13",
                        "content": "python one liner\\n```python\\n def isSameAfterReversals(self, num: int) -> bool: return len(str(num)) == len(str(num).strip(\\'0\\')) or num==0\\n```"
                    }
                ]
            }
        ]
    }
]