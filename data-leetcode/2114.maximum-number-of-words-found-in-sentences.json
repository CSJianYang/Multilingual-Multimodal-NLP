[
    {
        "title": "Maximum Number of Words Found in Sentences",
        "question_content": "A sentence is a list of words that are separated by a single space&nbsp;with no leading or trailing spaces.\nYou are given an array of strings sentences, where each sentences[i] represents a single sentence.\nReturn the maximum number of words that appear in a single sentence.\n&nbsp;\nExample 1:\n\nInput: sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]\nOutput: 6\nExplanation: \n- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n- The second sentence, \"i think so too\", has 4 words in total.\n- The third sentence, \"this is great thanks very much\", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.\n\nExample 2:\n\nInput: sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]\nOutput: 3\nExplanation: It is possible that multiple sentences contain the same number of words. \nIn this example, the second and third sentences (underlined) have the same number of words.\n\n&nbsp;\nConstraints:\n\n\t1 <= sentences.length <= 100\n\t1 <= sentences[i].length <= 100\n\tsentences[i] consists only of lowercase English letters and ' ' only.\n\tsentences[i] does not have leading or trailing spaces.\n\tAll the words in sentences[i] are separated by a single space.",
        "solutions": [
            {
                "id": 1662598,
                "title": "2ms-99-easy-explanation-java",
                "content": "This one is the same but slightly readable **(UPDATED)**\\n\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxLen = 0;\\n\\t\\t\\n        for (String currSent : sentences) {\\n            int currLen = currSent.split(\" \").length;\\n            if (maxLen < currLen)\\n                maxLen = currLen;\\n        }\\n        return maxLen;\\n    }\\n}\\n```\\n\\n**Old Code**\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        for(int i=0; i<sentences.length; i++) {\\n            max = Math.max(max,(sentences[i].split(\" \")).length);\\n        }\\n        return max;\\n    }\\n}\\n```\\n\\n\\nSo, first of all I initialized **int max = 0**. (It stores the **max words** in each sentences)\\nNow, we run a for loop which takes the **max between max and the words in that sentence.**\\n\\n*Let\\'s break it down!*\\n**sentences[i]** is nothing but the sentence at **\\'i\\' th index** of the String array.\\nWe are **splitting up** all the whitespaces present in it to **calculate number of words.**\\n**Logic:** If you remove all the whitespaces of that sentence, you get number of words, right?\\nnow we use **.length** method to find the number of words.\\n\\n**Lets rewind at Math.max:**\\nHere max is initially 0, and we check **max vs number of words of the sentence present at index of the array.**\\n\\nHere you get the max number of word, just **return it**!\\n\\nIf my solution and explanation was helpful then\\n**PLEASE UPVOTE**\\n\\nThank you :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxLen = 0;\\n\\t\\t\\n        for (String currSent : sentences) {\\n            int currLen = currSent.split(\" \").length;\\n            if (maxLen < currLen)\\n                maxLen = currLen;\\n        }\\n        return maxLen;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        for(int i=0; i<sentences.length; i++) {\\n            max = Math.max(max,(sentences[i].split(\" \")).length);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646786,
                "title": "count-spaces",
                "content": "Count spaces in each sentence, and return `max + 1`. The benefit (comparing to a split method) is that we do not create temporary strings.\\n\\n**Python 3**\\n```python\\nclass Solution:\\n    def mostWordsFound(self, ss: List[str]) -> int:\\n        return max(s.count(\" \") for s in ss) + 1\\n```\\n\\n**C++**\\n```cpp\\nint mostWordsFound(vector<string>& s) {\\n    return 1 + accumulate(begin(s), end(s), 0, [](int res, const auto &s) {\\n        return max(res, (int)count(begin(s), end(s), \\' \\')); });\\n}\\n```\\n\\n**Java**\\n```java\\npublic int mostWordsFound(String[] sentences) {\\n    return 1 + Stream.of(sentences).mapToInt(s -> (int)s.chars().filter(ch -> ch == \\' \\').count()).max().getAsInt();\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C"
                ],
                "code": "```python\\nclass Solution:\\n    def mostWordsFound(self, ss: List[str]) -> int:\\n        return max(s.count(\" \") for s in ss) + 1\\n```\n```cpp\\nint mostWordsFound(vector<string>& s) {\\n    return 1 + accumulate(begin(s), end(s), 0, [](int res, const auto &s) {\\n        return max(res, (int)count(begin(s), end(s), \\' \\')); });\\n}\\n```\n```java\\npublic int mostWordsFound(String[] sentences) {\\n    return 1 + Stream.of(sentences).mapToInt(s -> (int)s.chars().filter(ch -> ch == \\' \\').count()).max().getAsInt();\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1676023,
                "title": "python-simple-one-line-solution",
                "content": "**Python :**\\n\\n```\\ndef mostWordsFound(self, sentences: List[str]) -> int:\\n\\treturn max(len(word.split()) for word in sentences)\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef mostWordsFound(self, sentences: List[str]) -> int:\\n\\treturn max(len(word.split()) for word in sentences)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1656664,
                "title": "c-very-easy-to-understand-faster-than-80",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=sentences.size();\\n        int counter, ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int k=sentences[i].length();\\n            counter=1;\\n            for(int j=0;j<k;j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    counter++;\\n                }\\n            }\\n            ans=max(counter, ans);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**PLEASE UPVOTE IF YOU LIKE IT!**\\n\\n![image](https://assets.leetcode.com/users/images/d2d9fe50-6c47-449a-a4e4-cc66c246a359_1656159188.6665483.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=sentences.size();\\n        int counter, ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int k=sentences[i].length();\\n            counter=1;\\n            for(int j=0;j<k;j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    counter++;\\n                }\\n            }\\n            ans=max(counter, ans);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1650078,
                "title": "c-using-stl-std-count",
                "content": "**\\u2714\\uFE0F Solution 1: Count spaces**\\n\\n**Idea:** \\n- If `n = number of spaces in sentence i` => `n + 1 = number of words in sentence i`.\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int res = 0;\\n        for (auto const &s: sentences) {\\n            int n = count(s.begin(), s.end(), \\' \\');\\n            res = max(res, n + 1);\\n        }\\n        return res;\\n    }\\n};\\n```\\n**Complexity:**\\n- Time: `O(M * N)`\\n- Space: `O(1)`",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int res = 0;\\n        for (auto const &s: sentences) {\\n            int n = count(s.begin(), s.end(), \\' \\');\\n            res = max(res, n + 1);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3300077,
                "title": "only-solution-which-use-a-single-loop-without-count-method",
                "content": "I am sharing 3 solutions for this problem :\\n   1. Using a nested loop.\\n   2. Using the count method of C++ STL\\n   3. Using single Loop and with out count method.\\n\\n**SOLUTION 1**\\n```\\nint mostWordsFound(vector<string>& sentences) {\\n        \\n        int max_length=0;\\n        int i=0;\\n        while(i<sentences.size())\\n        {\\n            int length=0;\\n            for(int j=0;j<sentences[i].size();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                   length++;\\n            }\\n            length+=1; // to include to last word of sentences[i]. U can also initialise length=1 to avoid this increment at end.\\n            max_length = max(max_length,length);\\n            i++;\\n        }\\n        return max_length;\\n    }\\n```\\n**SOLUTION 2**\\n```\\nint mostWordsFound(vector<string>& sentences) {\\n        int max_length=0;\\n        for(const auto &s : sentences)\\n        {\\n            int length = count(s.begin(),s.end(),\\' \\');\\n            max_length = max(max_length,length+1);  // length+1 to include the last word of s\\n        }\\n        return max_length;\\n    }\\n```\\nSOLUTION 3\\n```\\nint mostWordsFound(vector<string>& sentences) {\\n        int len = sentences.size();\\n        int max_length=0,length=0;\\n        int i=0,j=0;\\n        while(i<len)\\n        {\\n            if(sentences[i][j]==\\' \\')\\n            {\\n               length++;\\n               j++;\\n            }\\n            else if(sentences[i][j]==\\'\\\\0\\')\\n            {\\n                i++; j=0;\\n                max_length = max(max_length,length+1);\\n                length=0;\\n            }\\n            else\\n               j++;\\n        }\\n        return max_length;\\n    }\\n```\\nIf you found these solutions helpful, please **upvote** the solution.\\n**THANK YOU**\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint mostWordsFound(vector<string>& sentences) {\\n        \\n        int max_length=0;\\n        int i=0;\\n        while(i<sentences.size())\\n        {\\n            int length=0;\\n            for(int j=0;j<sentences[i].size();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                   length++;\\n            }\\n            length+=1; // to include to last word of sentences[i]. U can also initialise length=1 to avoid this increment at end.\\n            max_length = max(max_length,length);\\n            i++;\\n        }\\n        return max_length;\\n    }\\n```\n```\\nint mostWordsFound(vector<string>& sentences) {\\n        int max_length=0;\\n        for(const auto &s : sentences)\\n        {\\n            int length = count(s.begin(),s.end(),\\' \\');\\n            max_length = max(max_length,length+1);  // length+1 to include the last word of s\\n        }\\n        return max_length;\\n    }\\n```\n```\\nint mostWordsFound(vector<string>& sentences) {\\n        int len = sentences.size();\\n        int max_length=0,length=0;\\n        int i=0,j=0;\\n        while(i<len)\\n        {\\n            if(sentences[i][j]==\\' \\')\\n            {\\n               length++;\\n               j++;\\n            }\\n            else if(sentences[i][j]==\\'\\\\0\\')\\n            {\\n                i++; j=0;\\n                max_length = max(max_length,length+1);\\n                length=0;\\n            }\\n            else\\n               j++;\\n        }\\n        return max_length;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2652438,
                "title": "easy-c-solution-explained-line-by-line",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    //------------ Code By Harsh Pandey -------------\\n    // Do upvote if you find it helpful \\npublic:\\n    int mostWordsFound(vector<string>& sentences) \\n    {\\n        int count=0;\\n        int d= INT_MIN; // value of int_min is -2^(8*2), i have taken it so that lower value than this is not possible and therefore can be used to find max in max funtion\\n        cout<<d<<endl;     // you can check the value of d here\\n\\n        // for loop\\n        for(int i=0; i< sentences.size();i++)\\n        {\\n            for(int j=0; j<sentences[i].size();j++)\\n            {\\n                if(sentences[i][j]==\\' \\') // here if any gap is found in between the words it will count it... so any gap between the words gets counted\\n\\n                {\\n                    count++;     //counter\\n                }\\n            }\\n\\n            d=max(count+1,d);   // checks each time if the value of counter in each sentence is greater than the previous value ,,, counter+1 is added because {{ (number of gaps +1)= total words\\n\\n            count=0;         // resets the value of counter for next iteration\\n        }\\n        return d;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    //------------ Code By Harsh Pandey -------------\\n    // Do upvote if you find it helpful \\npublic:\\n    int mostWordsFound(vector<string>& sentences) \\n    {\\n        int count=0;\\n        int d= INT_MIN; // value of int_min is -2^(8*2), i have taken it so that lower value than this is not possible and therefore can be used to find max in max funtion\\n        cout<<d<<endl;     // you can check the value of d here\\n\\n        // for loop\\n        for(int i=0; i< sentences.size();i++)\\n        {\\n            for(int j=0; j<sentences[i].size();j++)\\n            {\\n                if(sentences[i][j]==\\' \\') // here if any gap is found in between the words it will count it... so any gap between the words gets counted\\n\\n                {\\n                    count++;     //counter\\n                }\\n            }\\n\\n            d=max(count+1,d);   // checks each time if the value of counter in each sentence is greater than the previous value ,,, counter+1 is added because {{ (number of gaps +1)= total words\\n\\n            count=0;         // resets the value of counter for next iteration\\n        }\\n        return d;\\n\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2586455,
                "title": "java-string-array-simple-solution",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=-1;\\n        for(int i=0;i<sentences.length;i++){\\n            String arr[] = sentences[i].split(\" \");\\n            if(arr.length>max)\\n                max=arr.length;\\n        }\\n        return max;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=-1;\\n        for(int i=0;i<sentences.length;i++){\\n            String arr[] = sentences[i].split(\" \");\\n            if(arr.length>max)\\n                max=arr.length;\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1690539,
                "title": "99-67-easy-one-liner-solution",
                "content": "```\\nSuccess\\nDetails \\nRuntime: 28 ms, faster than 99.67% of Python3 online submissions for Maximum Number of Words Found in Sentences.\\nMemory Usage: 14.3 MB, less than 69.33% of Python3 online submissions for Maximum Number of Words Found in Sentences.\\n```\\n\\n**Solution:**\\n`return max(s.count(\" \") for s in sentences) + 1`",
                "solutionTags": [
                    "Python",
                    "Array"
                ],
                "code": "```\\nSuccess\\nDetails \\nRuntime: 28 ms, faster than 99.67% of Python3 online submissions for Maximum Number of Words Found in Sentences.\\nMemory Usage: 14.3 MB, less than 69.33% of Python3 online submissions for Maximum Number of Words Found in Sentences.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3101514,
                "title": "java-0ms100-faster-stringtokenizer-two-lines-simple-solution",
                "content": "# Code\\n```\\nimport java.util.*;\\nclass Solution {\\n    public int mostWordsFound(String[] sen) {\\n        int max = 0;\\n        for(String s :sen)\\n            max = Math.max(max, new StringTokenizer(s).countTokens());\\n\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.*;\\nclass Solution {\\n    public int mostWordsFound(String[] sen) {\\n        int max = 0;\\n        for(String s :sen)\\n            max = Math.max(max, new StringTokenizer(s).countTokens());\\n\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1659644,
                "title": "beginner-friendly-just-count-no-of-spaces",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans = -1;\\n        for(int i = 0 ; i < s.size() ; i++){\\n            int cnt = 1 ;\\n            for(int j = 0 ; j < s[i].size() ; j++){\\n                if(s[i][j]==\\' \\')cnt++;\\n            }\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans = -1;\\n        for(int i = 0 ; i < s.size() ; i++){\\n            int cnt = 1 ;\\n            for(int j = 0 ; j < s[i].size() ; j++){\\n                if(s[i][j]==\\' \\')cnt++;\\n            }\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1648530,
                "title": "easy-python-solution",
                "content": "```\\ndef mostWordsFound(self, sentences: List[str]) -> int:\\n        m=0\\n        for i in sentences:\\n            m=max(m,i.count(\" \")+1)\\n        return m\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef mostWordsFound(self, sentences: List[str]) -> int:\\n        m=0\\n        for i in sentences:\\n            m=max(m,i.count(\" \")+1)\\n        return m\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1768537,
                "title": "c-easy-to-understand-beginner-friendly",
                "content": "**AN UPVOTE WOULD BE HIGHLY APPRECIATED**\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans=INT_MIN;\\n        for(int i=0;i<sentences.size();i++){\\n            int count=1;\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    count++;\\n                }\\n            }ans=max(ans,count);\\n        }return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans=INT_MIN;\\n        for(int i=0;i<sentences.size();i++){\\n            int count=1;\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    count++;\\n                }\\n            }ans=max(ans,count);\\n        }return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1683428,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function(sentences) {\\n    let max = 0;\\n    let temp = 0;\\n    for (let i = 0; i < sentences.length; i++) {\\n        temp = sentences[i].split(\" \").length;\\n        if (temp > max) {\\n            max = temp;\\n        }\\n    }\\n    \\n    return max;\\n};\\n```\\n\\nMy first post and contribution to the Discuss section, wanted to do so for an easy question!\\nNot the fastest solution but the Memory Usage: 40 MB, less than 96.16% of JavaScript online submissions.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function(sentences) {\\n    let max = 0;\\n    let temp = 0;\\n    for (let i = 0; i < sentences.length; i++) {\\n        temp = sentences[i].split(\" \").length;\\n        if (temp > max) {\\n            max = temp;\\n        }\\n    }\\n    \\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646609,
                "title": "java-python-3-1-liners",
                "content": "```java\\n    public int mostWordsFound(String[] sentences) {\\n        return Stream.of(sentences).mapToInt(s -> s.split(\" \").length).max().getAsInt();\\n    }\\n```\\n```python\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(s.split()) for s in sentences)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n    public int mostWordsFound(String[] sentences) {\\n        return Stream.of(sentences).mapToInt(s -> s.split(\" \").length).max().getAsInt();\\n    }\\n```\n```python\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(s.split()) for s in sentences)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2685919,
                "title": "java-basic-approach",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 1, maxWords = 0;\\n        for(String str : sentences){\\n            for(int i = 0; i < str.length(); i++){\\n                if(str.charAt(i) == \\' \\'){\\n                    max++;\\n                }\\n            }\\n            maxWords = Math.max(maxWords, max);\\n            max = 1;\\n        }\\n        return maxWords;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 1, maxWords = 0;\\n        for(String str : sentences){\\n            for(int i = 0; i < str.length(); i++){\\n                if(str.charAt(i) == \\' \\'){\\n                    max++;\\n                }\\n            }\\n            maxWords = Math.max(maxWords, max);\\n            max = 1;\\n        }\\n        return maxWords;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2716894,
                "title": "python-code",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        ans=0\\n        for i in sentences:\\n            ans=max(ans,i.count(\\' \\'))\\n        return ans+1\\n```\\n**Don\\'t forget to upvote, if you find it helpful**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        ans=0\\n        for i in sentences:\\n            ans=max(ans,i.count(\\' \\'))\\n        return ans+1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1896320,
                "title": "1-line",
                "content": "```\\nvar mostWordsFound = function(sentences) {\\n    return Math.max(...sentences.map(item=>item.split(\" \").length))\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mostWordsFound = function(sentences) {\\n    return Math.max(...sentences.map(item=>item.split(\" \").length))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2802005,
                "title": "python3-99-faster-o-1-space",
                "content": "![image](https://assets.leetcode.com/users/images/c08033ef-0b79-4737-82e1-d65418a448c0_1668135082.4099498.png)\\n```\\nclass Solution:\\n    def mostWordsFound(self, s: List[str]) -> int:\\n        # TC: O(N) || SC: O(1)\\n        ans = 0\\n        for i in range(len(s)):\\n            s[i] = s[i].count(\\' \\') + 1\\n            ans = max(ans, s[i])\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, s: List[str]) -> int:\\n        # TC: O(N) || SC: O(1)\\n        ans = 0\\n        for i in range(len(s)):\\n            s[i] = s[i].count(\\' \\') + 1\\n            ans = max(ans, s[i])\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2100554,
                "title": "beginner-friendly-solutions",
                "content": "**java**\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String str : sentences){\\n            String[] s = str.split(\" \");\\n            max = Math.max(max, s.length);\\n        }\\n        return max;\\n    }\\n}\\n```\\n**javascript**\\n```\\nvar mostWordsFound = function(sentences) {\\n    let max = 0;\\n    for (let sentence of sentences) {\\n        let words = sentence.split(\\' \\');\\n        max = Math.max(max, words.length)\\n    }\\n    return max;  \\n};\\n```\\n**python**\\n```\\nclass Solution(object):\\n    def mostWordsFound(self, sentences):\\n        mx = 0\\n        for strg in sentences:\\n            s = strg.split(\\' \\')\\n            mx = max(mx, len(s))\\n        return mx\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String str : sentences){\\n            String[] s = str.split(\" \");\\n            max = Math.max(max, s.length);\\n        }\\n        return max;\\n    }\\n}\\n```\n```\\nvar mostWordsFound = function(sentences) {\\n    let max = 0;\\n    for (let sentence of sentences) {\\n        let words = sentence.split(\\' \\');\\n        max = Math.max(max, words.length)\\n    }\\n    return max;  \\n};\\n```\n```\\nclass Solution(object):\\n    def mostWordsFound(self, sentences):\\n        mx = 0\\n        for strg in sentences:\\n            s = strg.split(\\' \\')\\n            mx = max(mx, len(s))\\n        return mx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1895474,
                "title": "java-1-ms-faster-than-100-00",
                "content": "```\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for (String s : sentences) {\\n            int x = s.indexOf(\" \"), count = 1;\\n            while (x != -1) {\\n                count++;\\n                x = s.indexOf(\" \", x + 1);\\n            }\\n            max = Math.max(count, max);\\n        }\\n        return max; \\n    }\\n\\t",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for (String s : sentences) {\\n            int x = s.indexOf(\" \"), count = 1;\\n            while (x != -1) {\\n                count++;\\n                x = s.indexOf(\" \", x + 1);\\n            }\\n            max = Math.max(count, max);\\n        }\\n        return max; \\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 2669446,
                "title": "javascript-solution-in-one-line",
                "content": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = sentences => sentences.map(item => item.split(\\' \\')).sort((a,b) => b.length - a.length)[0].length\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = sentences => sentences.map(item => item.split(\\' \\')).sort((a,b) => b.length - a.length)[0].length\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1675906,
                "title": "one-line-kotlin-solution",
                "content": "One liner\\n\\n```\\nclass Solution {\\n    fun mostWordsFound(sentences: Array<String>): Int = sentences.map { it.split(\" \").size }.max() ?: 0\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun mostWordsFound(sentences: Array<String>): Int = sentences.map { it.split(\" \").size }.max() ?: 0\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1655537,
                "title": "ruby-solution",
                "content": "Because the description guarantees `sentences[i]` does not have leading or trailing spaces and all the words in `sentences[i]` are separated by a single space, we can simply count the spaces and add 1 to find the number of words in each sentence.\\n```ruby\\ndef most_words_found(sentences)\\n    sentences.map {|sen| sen.count(\\' \\') + 1}.max\\nend\\n```\\n\\nWe can actually move the +1 outside the loop too.\\n```ruby\\ndef most_words_found(sentences)\\n    sentences.map {|sen| sen.count(\\' \\')}.max + 1\\nend\\n```\\nThis dropped the runtime from about 113 ms to 40 ms.",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef most_words_found(sentences)\\n    sentences.map {|sen| sen.count(\\' \\') + 1}.max\\nend\\n```\n```ruby\\ndef most_words_found(sentences)\\n    sentences.map {|sen| sen.count(\\' \\')}.max + 1\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1646692,
                "title": "python3-one-liner-and-simple-and-easy-2-solutions",
                "content": "**Split-String Python3**\\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        mx=0\\n        for i in sentences:\\n            c=i.split()\\n            if len(c)>mx:\\n                mx=len(c)\\n        return mx\\n\\t\\t\\n```\\n\\n**One-Liner Python3**\\n\\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max([len(i.split()) for i in sentences])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        mx=0\\n        for i in sentences:\\n            c=i.split()\\n            if len(c)>mx:\\n                mx=len(c)\\n        return mx\\n\\t\\t\\n```\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max([len(i.split()) for i in sentences])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646607,
                "title": "java-easy-solution",
                "content": "```\\npublic int mostWordsFound(String[] sentences) {\\n        int max = 1;\\n        for(int i = 0; i < sentences.length; i++){\\n            String[] arr = sentences[i].split(\" \");\\n            max = Math.max(max,arr.length);\\n        }\\n        return max;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\npublic int mostWordsFound(String[] sentences) {\\n        int max = 1;\\n        for(int i = 0; i < sentences.length; i++){\\n            String[] arr = sentences[i].split(\" \");\\n            max = Math.max(max,arr.length);\\n        }\\n        return max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3413351,
                "title": "easy-beginner-friendly-solution-in-java",
                "content": "class Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxWords = 0;\\n        //For loop is used for traversing the array\\n        for(String sentence : sentences)\\n        {\\n            //words is working as a splitting total no of words\\n            String[] words = sentence.split(\" \");\\n            \\n            //numWords is calculating total no. of words\\n            int numWords = words.length;\\n            \\n            //if part of Ex 1\\n            // numWords > maxWords     5 > 0  update maxWords = numWords  max = 5\\n            // 4 > 5 condition not true\\n            // 6 > 5 condition true 5 is replacing with 6\\n            \\n            if(numWords > maxWords){\\n                maxWords = numWords;\\n            }\\n        }\\n        \\n        //Then returning maxWords = 6\\n        return maxWords;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxWords = 0;\\n        //For loop is used for traversing the array\\n        for(String sentence : sentences)\\n        {\\n            //words is working as a splitting total no of words\\n            String[] words = sentence.split(\" \");\\n            \\n            //numWords is calculating total no. of words\\n            int numWords = words.length;\\n            \\n            //if part of Ex 1\\n            // numWords > maxWords     5 > 0  update maxWords = numWords  max = 5\\n            // 4 > 5 condition not true\\n            // 6 > 5 condition true 5 is replacing with 6\\n            \\n            if(numWords > maxWords){\\n                maxWords = numWords;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2669459,
                "title": "java-different-approach-easy-solution",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int spaces = 0;\\n        for(String s : sentences){\\n            int count = 1;\\n            for(int i = 0; i < s.length() ; i++){\\n                if(s.charAt(i)==\\' \\'){\\n                    count++;\\n                }\\n            }\\n            if(count > spaces){\\n                spaces = count;\\n            }\\n        }\\n        return spaces;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int spaces = 0;\\n        for(String s : sentences){\\n            int count = 1;\\n            for(int i = 0; i < s.length() ; i++){\\n                if(s.charAt(i)==\\' \\'){\\n                    count++;\\n                }\\n            }\\n            if(count > spaces){\\n                spaces = count;\\n            }\\n        }\\n        return spaces;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2060780,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        a=[]\\n        for i in sentences:\\n            count=0\\n            for j in i:\\n                if(j==\" \"):\\n                    count+=1\\n            count+=1\\n            a.append(count)\\n        return (max(a))\\n            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        a=[]\\n        for i in sentences:\\n            count=0\\n            for j in i:\\n                if(j==\" \"):\\n                    count+=1\\n            count+=1\\n            a.append(count)\\n        return (max(a))\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1698228,
                "title": "c-not-the-best-and-fancy-solution-but-it-s-works-20ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        size_t totalWords = 0;\\n        \\n        for (int i = 0; i < s.size(); i++) {\\n            size_t n = std::count(s[i].begin(), s[i].end(), \\' \\');            \\n            totalWords = max(totalWords, n+1);\\n        }\\n\\t\\t// Convert size_t to int\\n        return static_cast<int>(totalWords);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        size_t totalWords = 0;\\n        \\n        for (int i = 0; i < s.size(); i++) {\\n            size_t n = std::count(s[i].begin(), s[i].end(), \\' \\');            \\n            totalWords = max(totalWords, n+1);\\n        }\\n\\t\\t// Convert size_t to int\\n        return static_cast<int>(totalWords);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1672313,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    // This function gives the number of words in a sentence\\n    int wordCount(string &s)\\n    {\\n        int i=0,count=0;\\n        while(i<s.length())\\n        {\\n            bool found=false;\\n            while(i<s.length() && s[i]!=\\' \\')\\n            {\\n                found=true;\\n                i++;\\n            }\\n            if(found)\\n            {\\n                count++;\\n            }\\n            i++;\\n        }\\n        return count;\\n    }\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans=0;\\n        for(auto it:sentences)\\n        {\\n            ans=max(ans,wordCount(it));\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Please upvote if you have got any help from my code. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    // This function gives the number of words in a sentence\\n    int wordCount(string &s)\\n    {\\n        int i=0,count=0;\\n        while(i<s.length())\\n        {\\n            bool found=false;\\n            while(i<s.length() && s[i]!=\\' \\')\\n            {\\n                found=true;\\n                i++;\\n            }\\n            if(found)\\n            {\\n                count++;\\n            }\\n            i++;\\n        }\\n        return count;\\n    }\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans=0;\\n        for(auto it:sentences)\\n        {\\n            ans=max(ans,wordCount(it));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297214,
                "title": "simple-and-easy-to-understand-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function(sentences) {\\n    let max = 0;\\n    for(let i=0; i<sentences.length; i++){\\n        let words = sentences[i].split(\" \").length;\\n        if(words > max){\\n            max = words;\\n        }\\n    }\\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function(sentences) {\\n    let max = 0;\\n    for(let i=0; i<sentences.length; i++){\\n        let words = sentences[i].split(\" \").length;\\n        if(words > max){\\n            max = words;\\n        }\\n    }\\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2808233,
                "title": "python-99-58-faster",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        count=0\\n        for i in sentences:\\n            x=i.count(\\' \\')+1\\n            if x>count:\\n                count=x\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        count=0\\n        for i in sentences:\\n            x=i.count(\\' \\')+1\\n            if x>count:\\n                count=x\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2254941,
                "title": "one-line-js-reduce",
                "content": "\\n```\\nconst mostWordsFound =  (sentences) => sentences.reduce((a,e)=> e.split(\\' \\').length > a ? e.split(\\' \\').length : a ,0)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst mostWordsFound =  (sentences) => sentences.reduce((a,e)=> e.split(\\' \\').length > a ? e.split(\\' \\').length : a ,0)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2060686,
                "title": "python-easy-solution-beats-93-21",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        arr = []\\n        for i in sentences:\\n            a = i.split(\" \")\\n            arr.append(len(a))\\n        return max(arr)\\n```\\nThe split() method splits a string into an array of substrings. If (\" \") is used as separator, the string is split between words.\\nThe max() function returns the item with the highest value, or the item with the highest value in an iterable.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        arr = []\\n        for i in sentences:\\n            a = i.split(\" \")\\n            arr.append(len(a))\\n        return max(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1732531,
                "title": "short-and-simple-javascript-solution",
                "content": "```\\nvar mostWordsFound = function(sentences) {\\n    let count = 0;\\n    // compare count value with length of strings in array;\\n    for(let i of sentences) {\\n        if(i.split(\\' \\').length > count) count = i.split(\\' \\').length;\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar mostWordsFound = function(sentences) {\\n    let count = 0;\\n    // compare count value with length of strings in array;\\n    for(let i of sentences) {\\n        if(i.split(\\' \\').length > count) count = i.split(\\' \\').length;\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646602,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution\\n{\\n    public int mostWordsFound(String[] sentences)\\n    {\\n        int max = 0;\\n        for(String sent :sentences)\\n            max = Math.max(max,sent.split(\" \").length);\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int mostWordsFound(String[] sentences)\\n    {\\n        int max = 0;\\n        for(String sent :sentences)\\n            max = Math.max(max,sent.split(\" \").length);\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820629,
                "title": "javascript-multiple-solutions-using-array-reduce-foreach-loop-for-of-ternary-operator",
                "content": "**Feel free to ask Q\\'s...**\\n*#happytohelpu*\\n\\n***Do upvote if you find this solution useful. Happy Coding!***\\n\\n*Solution 1 : Using Array reduce method*\\n\\n```\\nconst mostWordsFound = sentences => sentences.reduce((prev, string) => string.split(\" \").length > prev ? string.split(\" \").length : prev, 0)\\n\\n```\\n\\n*Solution 2 : Using Array forEach method*\\n\\n```\\nconst mostWordsFound = (sentences, maxLength = 0) => {\\n    \\n    sentences.forEach(sentence => {\\n        maxLength = sentence.split(\" \").length > maxLength ? sentence.split(\" \").length : maxLength;\\n    })\\n    return maxLength;\\n};\\n```\\n\\n*Solution 3 : Using Array for of method*\\n\\n```\\nconst mostWordsFound = (sentences, maxLength = 0) => {\\n\\n    for (let sentence of sentences) {\\n        maxLength = sentence.split(\" \").length > maxLength ? sentence.split(\" \").length : maxLength;\\n    }\\n    return maxLength;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "String"
                ],
                "code": "```\\nconst mostWordsFound = sentences => sentences.reduce((prev, string) => string.split(\" \").length > prev ? string.split(\" \").length : prev, 0)\\n\\n```\n```\\nconst mostWordsFound = (sentences, maxLength = 0) => {\\n    \\n    sentences.forEach(sentence => {\\n        maxLength = sentence.split(\" \").length > maxLength ? sentence.split(\" \").length : maxLength;\\n    })\\n    return maxLength;\\n};\\n```\n```\\nconst mostWordsFound = (sentences, maxLength = 0) => {\\n\\n    for (let sentence of sentences) {\\n        maxLength = sentence.split(\" \").length > maxLength ? sentence.split(\" \").length : maxLength;\\n    }\\n    return maxLength;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579622,
                "title": "easy-c-solution-using-arrays",
                "content": "class Solution {\\npublic:\\n\\n    int mostWordsFound(vector<string>& sentences) {\\n\\t\\n        int count = 0 ;\\n        int max=0;\\n        for(int i=0 ; i<sentences.size() ;i++ ){\\n            for(int j=0;j<sentences[i].size() ;j++){\\n                char ch = sentences[i][j];\\n                if(ch==\\' \\'){count++;}\\n            }\\n         if(count>max){ max =count; \\n                       count=0;\\n        }else count=0;\\n        }\\n        return max+1;\\n    }  \\n};",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int mostWordsFound(vector<string>& sentences) {\\n\\t\\n        int count = 0 ;\\n        int max=0;\\n        for(int i=0 ; i<sentences.size() ;i++ ){\\n            for(int j=0;j<sentences[i].size() ;j++){\\n                char ch = sentences[i][j];\\n                if(ch==\\' \\'){count++;}",
                "codeTag": "Java"
            },
            {
                "id": 3520933,
                "title": "easy-c-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(sentences.size()*sentences[i].length())\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n      int maxi=INT_MIN;\\n      for(int i=0;i<sentences.size();i++){\\n          int cnt=1;\\n          int j=0;\\n            while(j<sentences[i].length()){\\n              if(sentences[i][j]==\\' \\'){\\n                  cnt++;\\n              }\\n              j++;\\n            }\\n            maxi=max(maxi,cnt);\\n      }\\n\\n      return maxi;  \\n}\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n      int maxi=INT_MIN;\\n      for(int i=0;i<sentences.size();i++){\\n          int cnt=1;\\n          int j=0;\\n            while(j<sentences[i].length()){\\n              if(sentences[i][j]==\\' \\'){\\n                  cnt++;\\n              }\\n              j++;\\n            }\\n            maxi=max(maxi,cnt);\\n      }\\n\\n      return maxi;  \\n}\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3452599,
                "title": "easy-to-understand-c-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n      int i,j,y=0;\\n    for(i=0;i<s.size();i++){\\n        string t=s[i];\\n        int j=0;\\n        int z=0;\\n        while(j<t.size()){\\n          if(t[j]==\\' \\'){\\n              z++;\\n              j++;\\n          }\\n          j++;\\n        }\\n        if(z>y){\\n            y=z;\\n        }\\n        }\\n    \\n  return y+1;  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n      int i,j,y=0;\\n    for(i=0;i<s.size();i++){\\n        string t=s[i];\\n        int j=0;\\n        int z=0;\\n        while(j<t.size()){\\n          if(t[j]==\\' \\'){\\n              z++;\\n              j++;\\n          }\\n          j++;\\n        }\\n        if(z>y){\\n            y=z;\\n        }\\n        }\\n    \\n  return y+1;  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3438552,
                "title": "mymostwordsfound",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function (sentences) {\\n  let max = 0;\\n\\n  for (const i of sentences) {\\n    let len = i.split(\" \").length;\\n    max = max > len ? max : len;\\n  }\\n  \\n  return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function (sentences) {\\n  let max = 0;\\n\\n  for (const i of sentences) {\\n    let len = i.split(\" \").length;\\n    max = max > len ? max : len;\\n  }\\n  \\n  return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3386565,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=INT_MIN;\\n        for(int i=0;i<sentences.size();i++){\\n            int sum=1;\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    sum+=1;\\n                }\\n                else\\n                    continue;\\n            }\\n            n=max(n,sum);\\n        }\\n        return n;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=INT_MIN;\\n        for(int i=0;i<sentences.size();i++){\\n            int sum=1;\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    sum+=1;\\n                }\\n                else\\n                    continue;\\n            }\\n            n=max(n,sum);\\n        }\\n        return n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3210352,
                "title": "java-solution-using-split",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Iterate through the array of string\\n2. ```sentence.split(\"\\\\\\\\s+\")``` will return the string array. ```\"\\\\\\\\s+\"``` is the regular expression which splits the string on whitespaces.\\n3. Calculate the length of words return from above statement.\\n4. Compare the calculated length with the maxLength\\n5. Return the maxLength \\n\\nNote : ```\\\\s``` is a character class to detect space including tabs.\\nsince \\\\ needs to be escaped in Java, it becomes ```\\\\\\\\s```\\n```\\\\\\\\s+``` denotes one or more spaces.\\n\\n# Complexity\\n- Time complexity: O(n) // Assuming split() method with constant. \\nIn actual split() method is of O(n) complexity which makes the provided algorithm with O(n*m)\\nwhere n : length of array.\\nm : length of each sentence.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxwords = 0;\\n        for(String sentence:sentences){\\n            int words = sentence.split(\"\\\\\\\\s+\").length;\\n            if(words > maxwords){\\n                maxwords = words;\\n            }\\n        }\\n        return maxwords;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```sentence.split(\"\\\\\\\\s+\")```\n```\"\\\\\\\\s+\"```\n```\\\\s```\n```\\\\\\\\s```\n```\\\\\\\\s+```\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxwords = 0;\\n        for(String sentence:sentences){\\n            int words = sentence.split(\"\\\\\\\\s+\").length;\\n            if(words > maxwords){\\n                maxwords = words;\\n            }\\n        }\\n        return maxwords;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3110219,
                "title": "beats-92-42-maximum-number-of-words-found-in-sentences",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        count=0\\n        for i in sentences:\\n            c=len(i.split())\\n            if c>count:\\n                count=c\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        count=0\\n        for i in sentences:\\n            c=len(i.split())\\n            if c>count:\\n                count=c\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3060635,
                "title": "c-iteration",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int MostWordsFound(string[] sentences) {\\n        int maxWords = 0;\\n\\n        foreach(var sentence in sentences)\\n        {\\n            maxWords = Math.Max(maxWords, sentence.Split(\\' \\').Count());\\n        }\\n        return maxWords;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MostWordsFound(string[] sentences) {\\n        int maxWords = 0;\\n\\n        foreach(var sentence in sentences)\\n        {\\n            maxWords = Math.Max(maxWords, sentence.Split(\\' \\').Count());\\n        }\\n        return maxWords;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2976181,
                "title": "swift-one-line-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func mostWordsFound(_ sentences: [String]) -> Int {\\n        sentences.map { $0.components(separatedBy: \" \") }.map { $0.count }.max() ?? 0\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func mostWordsFound(_ sentences: [String]) -> Int {\\n        sentences.map { $0.components(separatedBy: \" \") }.map { $0.count }.max() ?? 0\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2928725,
                "title": "java-easy-soln-96-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int count=0;\\n       for(String s:sentences){\\n           int len=s.split(\" \").length;\\n           count=Math.max(count,len);\\n       }\\n       return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int count=0;\\n       for(String s:sentences){\\n           int len=s.split(\" \").length;\\n           count=Math.max(count,len);\\n       }\\n       return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2845431,
                "title": "c-code-easy-to-understand-simple-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maximum=INT_MIN,count=0;\\n        for(int i=0;i<sentences.size();i++){\\n            stringstream str(sentences[i]);\\n            string word;\\n            while(str>>word)\\n                count++;\\n            maximum=max(maximum,count);\\n            count=0;\\n        }\\n        return maximum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maximum=INT_MIN,count=0;\\n        for(int i=0;i<sentences.size();i++){\\n            stringstream str(sentences[i]);\\n            string word;\\n            while(str>>word)\\n                count++;\\n            maximum=max(maximum,count);\\n            count=0;\\n        }\\n        return maximum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682897,
                "title": "c-very-easy-85-faster",
                "content": "\\n       int res = 0;\\n        for (auto &s: sentences) {\\n            int n = count(s.begin(), s.end(), \\' \\');\\n            res = max(res, n + 1);\\n        }\\n        return res;\\n        \\n",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n       int res = 0;\\n        for (auto &s: sentences) {\\n            int n = count(s.begin(), s.end(), \\' \\');\\n            res = max(res, n + 1);\\n        }\\n        return res;\\n        \\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2659030,
                "title": "python3-solution-clean-code-with-comments-98-69-run-time-82-79-space",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        \\n        # Description state that the words are separated only by \\'space\\'.\\n        SPACE = \\' \\'\\n        \\n        max_words = 0\\n        \\n        list_of_words = []\\n        \\n        for string in sentences:\\n            \\n            # We will take each sentence and split it into words.\\n            word_counter = string.split(SPACE)\\n            \\n            # Then we place the words into a list.\\n            list_of_words += word_counter\\n            \\n            # Now we will check the length of the list against the current max_words.\\n            max_words = max(max_words, len(list_of_words))\\n            \\n            # After that, we clear the list for the next iteration.\\n            list_of_words.clear()\\n            \\n        return max_words   \\n    \\n  #  Runtime: 37 ms, faster than 98.69% of Python3 online submissions \\n  #  for Maximum Number of Words Found in Sentences.\\n\\n  #  Memory Usage: 13.9 MB, less than 82.79% of Python3 online submissions\\n  #  for Maximum Number  of Words Found in Sentences.\\n    \\n  # If you like my solution, then I\\'ll appreciate\\n  # a like. It\\'s helping me make more solutions. \\n  ```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        \\n        # Description state that the words are separated only by \\'space\\'.\\n        SPACE = \\' \\'\\n        \\n        max_words = 0\\n        \\n        list_of_words = []\\n        \\n        for string in sentences:\\n            \\n            # We will take each sentence and split it into words.\\n            word_counter = string.split(SPACE)\\n            \\n            # Then we place the words into a list.\\n            list_of_words += word_counter\\n            \\n            # Now we will check the length of the list against the current max_words.\\n            max_words = max(max_words, len(list_of_words))\\n            \\n            # After that, we clear the list for the next iteration.\\n            list_of_words.clear()\\n            \\n        return max_words   \\n    \\n  #  Runtime: 37 ms, faster than 98.69% of Python3 online submissions \\n  #  for Maximum Number of Words Found in Sentences.\\n\\n  #  Memory Usage: 13.9 MB, less than 82.79% of Python3 online submissions\\n  #  for Maximum Number  of Words Found in Sentences.\\n    \\n  # If you like my solution, then I\\'ll appreciate\\n  # a like. It\\'s helping me make more solutions. \\n  ```",
                "codeTag": "Java"
            },
            {
                "id": 2588416,
                "title": "just-count-spaces-in-python",
                "content": "```return max([i.count(\" \") for i in sentences])+1```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```return max([i.count(\" \") for i in sentences])+1```",
                "codeTag": "Unknown"
            },
            {
                "id": 2440118,
                "title": "java-easy-5-liner-string-class-use",
                "content": "# Please Upvote\\n\\n```\\nint count = 0;\\n        for(String str : sentences){\\n            String[] arr = str.split(\" \");\\n            count = Math.max(count, arr.length);}\\n        return count;\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nint count = 0;\\n        for(String str : sentences){\\n            String[] arr = str.split(\" \");\\n            count = Math.max(count, arr.length);}\\n        return count;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2415854,
                "title": "c-solution-easy-and-simple",
                "content": "class Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n\\t\\n        int ans=0;\\n        for(int i=0; i<sentences.size(); ++i)\\n        {\\n            int count=0;\\n            string temp=sentences[i];\\n            for(int j=0; j<temp.size(); ++j)\\n            {\\n                if(temp[j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n            ans=max(ans,count+1);\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n\\t\\n        int ans=0;\\n        for(int i=0; i<sentences.size(); ++i)\\n        {\\n            int count=0;\\n            string temp=sentences[i];\\n            for(int j=0; j<temp.size(); ++j)\\n            {\\n                if(temp[j]==\\' \\')\\n                {\\n                    count++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2391637,
                "title": "easy-c-solution-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int words = 0, max = 0, i =0,j =0;\\n        for(i =0 ; i<sentences.size(); i++){\\n            words = 0;\\n            for(j = 0; j<sentences[i].size(); j++){\\n                if(sentences[i][j] == \\' \\') words++;\\n            }\\n            words += 1;\\n            if(words>max) max = words;\\n        }\\n        return max;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int words = 0, max = 0, i =0,j =0;\\n        for(i =0 ; i<sentences.size(); i++){\\n            words = 0;\\n            for(j = 0; j<sentences[i].size(); j++){\\n                if(sentences[i][j] == \\' \\') words++;\\n            }\\n            words += 1;\\n            if(words>max) max = words;\\n        }\\n        return max;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2366833,
                "title": "java-2ms-99-faster-easy-explanation",
                "content": "```\\n\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxi = Integer.MIN_VALUE;\\n        \\n\\t\\t// iterating each string in list\\n        for(String s: sentences){\\n\\t\\t\\t\\n\\t\\t\\t// Splitting the string using \" \" blank space regex. //Example : \"My Name is\" \\n\\t\\t\\t// split function will return all the words in an array // [\"My\", \"Name\", \"is\"]\\n\\t\\t\\t// so we call its length and it will return the number of words in that entire string // 3\\n\\n\\t\\t\\t// Max function will return the max value between maxi and current string\\'s length\\n\\t\\t\\tmaxi = Math.max(s.split(\" \").length, maxi); \\n        }\\n        \\n        return maxi;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int maxi = Integer.MIN_VALUE;\\n        \\n\\t\\t// iterating each string in list\\n        for(String s: sentences){\\n\\t\\t\\t\\n\\t\\t\\t// Splitting the string using \" \" blank space regex. //Example : \"My Name is\" \\n\\t\\t\\t// split function will return all the words in an array // [\"My\", \"Name\", \"is\"]\\n\\t\\t\\t// so we call its length and it will return the number of words in that entire string // 3\\n\\n\\t\\t\\t// Max function will return the max value between maxi and current string\\'s length\\n\\t\\t\\tmaxi = Math.max(s.split(\" \").length, maxi); \\n        }\\n        \\n        return maxi;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1796345,
                "title": "java-time-o-nm-space-o-1",
                "content": "\\n```\\nclass Solution {\\n  /**\\n   * Time O(nm)\\n   *   - n, number of sentences in the array\\n   *   - m, max length of the sentence\\n   * Space O(1)\\n   */\\n  public int mostWordsFound(String[] sentences) {\\n    int max = 0;\\n    int sum = 0;\\n    // Time (nm)\\n    for (String s : sentences) {\\n      sum = 0;\\n      for (int i = 0; i < s.length(); i++) {\\n        if (s.charAt(i) - \\' \\' == 0) {\\n          sum++;\\n        }\\n      }\\n      max = Math.max(max, sum);\\n    }\\n    return max + 1;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  /**\\n   * Time O(nm)\\n   *   - n, number of sentences in the array\\n   *   - m, max length of the sentence\\n   * Space O(1)\\n   */\\n  public int mostWordsFound(String[] sentences) {\\n    int max = 0;\\n    int sum = 0;\\n    // Time (nm)\\n    for (String s : sentences) {\\n      sum = 0;\\n      for (int i = 0; i < s.length(); i++) {\\n        if (s.charAt(i) - \\' \\' == 0) {\\n          sum++;\\n        }\\n      }\\n      max = Math.max(max, sum);\\n    }\\n    return max + 1;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1654464,
                "title": "java-2114-maximum-number-of-words-found-in-sentences",
                "content": "Simple Java Code\\n\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(int i = 0;i<sentences.length;i++){\\n             String[] newStr = sentences[i].split(\"\\\\\\\\s+\");\\n             max = Math.max(newStr.length,max);\\n        }\\n        return max;   \\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(int i = 0;i<sentences.length;i++){\\n             String[] newStr = sentences[i].split(\"\\\\\\\\s+\");\\n             max = Math.max(newStr.length,max);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1654170,
                "title": "c-single-statement-solution-using-std-transform-reduce",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n\\t\\treturn 1 + transform_reduce(cbegin(sentences), cend(sentences), string::difference_type{},\\n\\t\\t\\t[](auto maximum, auto count) { return max(maximum, count); },\\n\\t\\t\\t[](auto const& sentence) { return count(cbegin(sentence), cend(sentence), \\' \\'); });\\n    }\\n};\\n```\\nSome explanations starting from the bottom:\\nThe second lambda function\\n```\\n\\t\\t\\t[](auto const& sentence) { return count(cbegin(sentence), cend(sentence), \\' \\'); });\\n```\\n```transform``` a sentence into a number, namely the number of spaces in the sentence.\\nThis number is one less than the number of words in the sentence. We adjust for this by adding one to the result of the ```transform_reduce``` call.\\n\\nThe first lambda function\\n```\\n\\t\\t\\t[](auto maximum, auto count) { return max(maximum, count); },\\n```\\n```reduce``` all these numbers to a single number, namely the maximum of the stream of these numbers.\\n\\n```\\n\\t\\t\\tstring::difference_type{}\\n```\\nis the initialization of the ```maximum``` used in the first lambda function\\n\\nAnd finally\\n```\\n\\t\\t\\tcbegin(sentences), cend(sentences)\\n```\\nspecifies the full range of sentences to apply the transform_reduce to.\\n\\nSo, it is just a compact version of the following code:\\n```\\n\\t\\tauto maximum = string::difference_type{};\\n\\t\\tfor (auto iter = cbegin(sentences); iter != cend(sentences); ++iter)\\n\\t\\t{\\n\\t\\t\\tauto sentence = *iter;\\n\\t\\t\\tauto count = count(cbegin(sentence), cend(sentence), \\' \\');\\n\\t\\t\\tmaximum = max(maximum, count);\\n\\t\\t}\\n\\n\\t\\treturn 1 + maximum;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n\\t\\treturn 1 + transform_reduce(cbegin(sentences), cend(sentences), string::difference_type{},\\n\\t\\t\\t[](auto maximum, auto count) { return max(maximum, count); },\\n\\t\\t\\t[](auto const& sentence) { return count(cbegin(sentence), cend(sentence), \\' \\'); });\\n    }\\n};\\n```\n```\\n\\t\\t\\t[](auto const& sentence) { return count(cbegin(sentence), cend(sentence), \\' \\'); });\\n```\n```transform```\n```transform_reduce```\n```\\n\\t\\t\\t[](auto maximum, auto count) { return max(maximum, count); },\\n```\n```reduce```\n```\\n\\t\\t\\tstring::difference_type{}\\n```\n```maximum```\n```\\n\\t\\t\\tcbegin(sentences), cend(sentences)\\n```\n```\\n\\t\\tauto maximum = string::difference_type{};\\n\\t\\tfor (auto iter = cbegin(sentences); iter != cend(sentences); ++iter)\\n\\t\\t{\\n\\t\\t\\tauto sentence = *iter;\\n\\t\\t\\tauto count = count(cbegin(sentence), cend(sentence), \\' \\');\\n\\t\\t\\tmaximum = max(maximum, count);\\n\\t\\t}\\n\\n\\t\\treturn 1 + maximum;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1650523,
                "title": "c-counting-words-using-stringstream",
                "content": "```\\nclass Solution {\\npublic:\\n    int countWord(string str) {\\n        stringstream s(str);\\n        string word;\\n        int count = 0;\\n        while(s >> word) count++;\\n        return count;\\n    }\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans = INT_MIN;\\n        for(auto str : sentences) {\\n            ans = max(ans, countWord(str));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countWord(string str) {\\n        stringstream s(str);\\n        string word;\\n        int count = 0;\\n        while(s >> word) count++;\\n        return count;\\n    }\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans = INT_MIN;\\n        for(auto str : sentences) {\\n            ans = max(ans, countWord(str));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015027,
                "title": "47-ms-runtime-best-for-beginners-simple-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->My approch is straight forward as words are seperated by spaces count the number of spaces append it to a list and max of that list and add one to it and return it\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->Simple Code refer intuition.If found helpful do UPVOTE\\n\\n# Complexity\\n- Time complexity:O(n) (47ms)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:16.32mb\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        c=[]\\n        for i in sentences:\\n            c.append(i.count(\" \"))\\n        return max(c)+1\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        c=[]\\n        for i in sentences:\\n            c.append(i.count(\" \"))\\n        return max(c)+1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976579,
                "title": "beginner-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        count = 0\\n        for i in sentences:\\n            c = len(i.split())\\n            if(c > count):\\n                count = c\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        count = 0\\n        for i in sentences:\\n            c = len(i.split())\\n            if(c > count):\\n                count = c\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3697010,
                "title": "maximum-number-of-words-found-in-sentences-java-solution-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] str1) {\\n        int temp_count = 0;\\n        int count = 0;\\n\\n\\t    for(int i=0; i<str1.length; i++){\\n\\t        String s = str1[i];\\n\\t        for(int j=0; j<s.length(); j++){\\n\\t        if(s.charAt(j) == \\' \\'){\\n\\t            temp_count++;\\n\\t        }\\n\\t      }\\n\\t      if(temp_count > count){\\n\\t          count = temp_count;\\n\\t      }\\n\\t      temp_count = 0;\\n\\t    }\\n        return count+1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] str1) {\\n        int temp_count = 0;\\n        int count = 0;\\n\\n\\t    for(int i=0; i<str1.length; i++){\\n\\t        String s = str1[i];\\n\\t        for(int j=0; j<s.length(); j++){\\n\\t        if(s.charAt(j) == \\' \\'){\\n\\t            temp_count++;\\n\\t        }\\n\\t      }\\n\\t      if(temp_count > count){\\n\\t          count = temp_count;\\n\\t      }\\n\\t      temp_count = 0;\\n\\t    }\\n        return count+1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3558223,
                "title": "simple-java-solution-for-beginners-3ms-beats-92-29",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int count;\\n        int max = Integer.MIN_VALUE;\\n        for(String s : sentences) {\\n            count = 1;\\n            for(char ch : s.toCharArray()) {\\n                count += ch == \\' \\' ? 1 : 0;\\n            }\\n            max = Integer.max(max, count);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int count;\\n        int max = Integer.MIN_VALUE;\\n        for(String s : sentences) {\\n            count = 1;\\n            for(char ch : s.toCharArray()) {\\n                count += ch == \\' \\' ? 1 : 0;\\n            }\\n            max = Integer.max(max, count);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3493221,
                "title": "very-simple-brute-force",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) \\n    { int i,k,m=0;\\n      for(i=0;i<s.size();i++)\\n      {   int count=0;\\n          string j=s[i];\\n          for(k=0; k<j.size() ;k++)\\n          {\\n              if(j[k]==\\' \\')\\n              count++;   \\n          }\\n          m=max(count,m);\\n      }\\n      return m+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) \\n    { int i,k,m=0;\\n      for(i=0;i<s.size();i++)\\n      {   int count=0;\\n          string j=s[i];\\n          for(k=0; k<j.size() ;k++)\\n          {\\n              if(j[k]==\\' \\')\\n              count++;   \\n          }\\n          m=max(count,m);\\n      }\\n      return m+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483835,
                "title": "beats-91-easy-to-understand-for-beginners-best-luck",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGet Max value\\nIterate array values one by one and then fetch the length of each element then compare it with max value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n        public int mostWordsFound(String[] sentences) {\\n           int max = Integer.MIN_VALUE;\\n        for(int i=0;i<sentences.length;i++){\\n            String arr[] = sentences[i].split(\" \");\\n            if (max<arr.length){\\n                max=arr.length;\\n            }\\n        }\\n        return max;\\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n        public int mostWordsFound(String[] sentences) {\\n           int max = Integer.MIN_VALUE;\\n        for(int i=0;i<sentences.length;i++){\\n            String arr[] = sentences[i].split(\" \");\\n            if (max<arr.length){\\n                max=arr.length;\\n            }\\n        }\\n        return max;\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3451617,
                "title": "straight-solution-through-java-cool-approach",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int temp = 1, max = 0, size = sentences.length;\\n        int[] countWords = new int[size];\\n        \\n\\n        for(int i = 0; i < size; i++){\\n             for(int j = 0; j < sentences[i].length(); j++){\\n                if(sentences[i].charAt(j) == \\' \\'){\\n                    temp++;\\n                }\\n            }\\n            countWords[i] = temp;\\n            temp = 1;\\n        }\\n\\n        for(int i = 0; i < countWords.length; i++){\\n            if(countWords[i] > max){\\n                max = countWords[i];\\n            }\\n        }\\n       return max;\\n    }\\n}\\n```\\n\\nplease upvote me, it encourages me a lot!",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int temp = 1, max = 0, size = sentences.length;\\n        int[] countWords = new int[size];\\n        \\n\\n        for(int i = 0; i < size; i++){\\n             for(int j = 0; j < sentences[i].length(); j++){\\n                if(sentences[i].charAt(j) == \\' \\'){\\n                    temp++;\\n                }\\n            }\\n            countWords[i] = temp;\\n            temp = 1;\\n        }\\n\\n        for(int i = 0; i < countWords.length; i++){\\n            if(countWords[i] > max){\\n                max = countWords[i];\\n            }\\n        }\\n       return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3371907,
                "title": "easy-to-understand-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        long ans=0;\\n        for(int i =0;i<sentences.size();i++){\\n            ans=max(ans,count(sentences[i].begin(),sentences[i].end(),\\' \\'));\\n        }\\n        return ans+1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        long ans=0;\\n        for(int i =0;i<sentences.size();i++){\\n            ans=max(ans,count(sentences[i].begin(),sentences[i].end(),\\' \\'));\\n        }\\n        return ans+1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3357169,
                "title": "python",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        max_count = 0\\n        for i in sentences:\\n            word_count = len(i.split())\\n            max_count = max(max_count,word_count)\\n        return max_count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        max_count = 0\\n        for i in sentences:\\n            word_count = len(i.split())\\n            max_count = max(max_count,word_count)\\n        return max_count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329057,
                "title": "brute-force-solution-c-very-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans=0;\\n        for(int i=0; i<s.size();i++){\\n            string str= s[i];\\n            int  maxi =1;\\n            for(int j=0; j<str.length();j++){\\n                if(str[j]==\\' \\')\\n                    maxi++;\\n            }\\n            ans = max(ans, maxi);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans=0;\\n        for(int i=0; i<s.size();i++){\\n            string str= s[i];\\n            int  maxi =1;\\n            for(int j=0; j<str.length();j++){\\n                if(str[j]==\\' \\')\\n                    maxi++;\\n            }\\n            ans = max(ans, maxi);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3310926,
                "title": "c-easy-and-shorter-solution-100-accepted-intuitive-approach",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(N*M)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        long countr=0;\\n        for(int i=0;i<sentences.size();i++)\\n        {\\n            countr=max(countr,count(sentences[i].begin(),sentences[i].end(),\\' \\'));\\n        }\\n        return countr+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        long countr=0;\\n        for(int i=0;i<sentences.size();i++)\\n        {\\n            countr=max(countr,count(sentences[i].begin(),sentences[i].end(),\\' \\'));\\n        }\\n        return countr+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3291619,
                "title": "checking-for-spaces-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int res=0;\\n        for(int i=0;i<sentences.size();i++){\\n            int ans=0;\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\')\\n                    ans+=1;\\n            }\\n            res=ans>res?ans:res;\\n        }\\n        return res+1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int res=0;\\n        for(int i=0;i<sentences.size();i++){\\n            int ans=0;\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\')\\n                    ans+=1;\\n            }\\n            res=ans>res?ans:res;\\n        }\\n        return res+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3126345,
                "title": "c-solution-brute-force",
                "content": "# Approach : Brute Force\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n*m)\\nn: maximum length of a sentence \\nm: number of sentences in the input vector\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n    int m=sentences.size();\\n    int maximum_word =0;\\n    for(int i=0;i<m;i++)\\n    {\\n        int n=sentences[i].size();\\n        int word=1;    \\n        for(int j=0;j<n;j++)\\n            if(sentences[i][j]==\\' \\')\\n                word ++;\\n        maximum_word=max(word,maximum_word);\\n    }\\n    return maximum_word;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n    int m=sentences.size();\\n    int maximum_word =0;\\n    for(int i=0;i<m;i++)\\n    {\\n        int n=sentences[i].size();\\n        int word=1;    \\n        for(int j=0;j<n;j++)\\n            if(sentences[i][j]==\\' \\')\\n                word ++;\\n        maximum_word=max(word,maximum_word);\\n    }\\n    return maximum_word;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3082437,
                "title": "solution-in-c",
                "content": "# Intuition\\nWe know that in a sentence, each word is after a space. So, by counting the amount of spaces (\\' \\') there are in the sentence, we just have to add 1 to the amount of spaces to obtain the amount of words.\\n\\n# Approach\\nBy approaching this problem through a nested for loop, we can access the array (sentences) index, and each character in the string. So, whenever we come across a space \\' \\' we can +1 to a temporary counter that resets after iterating the index. Then we let the counter equal the integer you are going to return, and if the counter for the next index is greater than the previous index, then you let the integer equal the new counter value. \\n\\n# Code\\n```\\nint mostWordsFound(char ** sentences, int sentencesSize){\\n    int word_count = 0;\\n\\n    for (int i = 0; i < sentencesSize; i++) {\\n        int counter = 0;\\n        for (int count = 0; sentences[i][count] != \\'\\\\0\\'; count++) {\\n            if (sentences[i][count] == \\' \\') {\\n                counter++;\\n            }\\n        }\\n        if (counter > word_count) {\\n            word_count = counter;\\n        }\\n    }\\n\\n    return word_count + 1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint mostWordsFound(char ** sentences, int sentencesSize){\\n    int word_count = 0;\\n\\n    for (int i = 0; i < sentencesSize; i++) {\\n        int counter = 0;\\n        for (int count = 0; sentences[i][count] != \\'\\\\0\\'; count++) {\\n            if (sentences[i][count] == \\' \\') {\\n                counter++;\\n            }\\n        }\\n        if (counter > word_count) {\\n            word_count = counter;\\n        }\\n    }\\n\\n    return word_count + 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3026698,
                "title": "easy-c-solution-for-beginners-two-for-loop-use",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nJust use two for loop \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) \\n    {\\n        int cnt,ans=0;\\n        for(int i=0;i<sentences.size();i++)\\n        {\\n            cnt=0;\\n            for(int j=0;j<sentences[i].size();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    cnt++;\\n                }\\n            }\\n            ans=max(ans,cnt+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) \\n    {\\n        int cnt,ans=0;\\n        for(int i=0;i<sentences.size();i++)\\n        {\\n            cnt=0;\\n            for(int j=0;j<sentences[i].size();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    cnt++;\\n                }\\n            }\\n            ans=max(ans,cnt+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3007639,
                "title": "go-simple-and-concise-solution-without-string-splitting",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSolution using ```Count(s, substr string) int``` func from ```strings``` Go pkg.\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport \"strings\"\\n\\nfunc mostWordsFound(sentences []string) int {\\n\\n    result := 0\\n\\n    for i := range sentences {\\n        numberOfWords := strings.Count(sentences[i], \" \") + 1\\n        \\n        if  numberOfWords > result {\\n            result = numberOfWords\\n        }\\n    }\\n\\n    return result \\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```Count(s, substr string) int```\n```strings```\n```\\nimport \"strings\"\\n\\nfunc mostWordsFound(sentences []string) int {\\n\\n    result := 0\\n\\n    for i := range sentences {\\n        numberOfWords := strings.Count(sentences[i], \" \") + 1\\n        \\n        if  numberOfWords > result {\\n            result = numberOfWords\\n        }\\n    }\\n\\n    return result \\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2945998,
                "title": "easy-c-solution-loop-with-explaination",
                "content": "# Intuition\\nJust find total no. of whitespaces in the sentence.\\n\\n# Approach\\nJust iterate through string vector first.For each iteration , try to count no. of whitespaces.\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n = sentences.size();\\n        int maxwords = 0;\\n        for(int i = 0; i<n; i++){\\n            int cnt = 1;\\n            for(int j = 0; j<sentences[i].length(); j++){\\n                if(sentences[i][j] == \\' \\') cnt++;\\n            }\\n            maxwords = max(cnt,maxwords);\\n        }\\n        return maxwords;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n = sentences.size();\\n        int maxwords = 0;\\n        for(int i = 0; i<n; i++){\\n            int cnt = 1;\\n            for(int j = 0; j<sentences[i].length(); j++){\\n                if(sentences[i][j] == \\' \\') cnt++;\\n            }\\n            maxwords = max(cnt,maxwords);\\n        }\\n        return maxwords;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2853391,
                "title": "c-simple-bruteforce",
                "content": "```\\nclass Solution\\n{\\n    public:\\n        int mostWordsFound(vector<string> &sentences)\\n        {\\n            int maxi = 0;\\n            for (int j = 0; j < sentences.size(); j++)\\n            {\\n                string cand = sentences[j];\\n                int temp = 0;\\n                for (int i = 0; i < cand.length(); i++)\\n                {\\n                    if (cand[i] == \\' \\' && cand[i + 1] != \\' \\')\\n                        temp++;\\n                }\\n                maxi = max(maxi, temp);\\n            }\\n            return maxi + 1;\\n        }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        int mostWordsFound(vector<string> &sentences)\\n        {\\n            int maxi = 0;\\n            for (int j = 0; j < sentences.size(); j++)\\n            {\\n                string cand = sentences[j];\\n                int temp = 0;\\n                for (int i = 0; i < cand.length(); i++)\\n                {\\n                    if (cand[i] == \\' \\' && cand[i + 1] != \\' \\')\\n                        temp++;\\n                }\\n                maxi = max(maxi, temp);\\n            }\\n            return maxi + 1;\\n        }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2774459,
                "title": "c-stl-c",
                "content": "\\n\\t\\tint mostWordsFound(vector<string>& sentences) {\\n\\t\\t\\tint maxi = INT_MIN;\\n\\n\\t\\t\\tfor(auto it: sentences) {\\n\\t\\t\\t\\tint word = count(it.begin(), it.end(), \\' \\') + 1;\\n\\t\\t\\t\\tmaxi = max(maxi, word);\\n\\t\\t\\t}\\n\\t\\t\\treturn maxi;\\n\\t\\t}",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n\\t\\tint mostWordsFound(vector<string>& sentences) {\\n\\t\\t\\tint maxi = INT_MIN;\\n\\n\\t\\t\\tfor(auto it: sentences) {\\n\\t\\t\\t\\tint word = count(it.begin(), it.end(), \\' \\') + 1;\\n\\t\\t\\t\\tmaxi = max(maxi, word);\\n\\t\\t\\t}\\n\\t\\t\\treturn maxi;\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 2723707,
                "title": "c-one-line-linq-solution",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public int MostWordsFound(string[] sentences) {\\n\\t\\treturn sentences.Select(s => s.Count(c => c == \\' \\') + 1).OrderByDescending(n => n).ElementAt(0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MostWordsFound(string[] sentences) {\\n\\t\\treturn sentences.Select(s => s.Count(c => c == \\' \\') + 1).OrderByDescending(n => n).ElementAt(0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2676146,
                "title": "maximum-number-of-words-found-in-sentences",
                "content": "This program is written in C++ and solves the problem of finding the maximum number of words in a single sentence from a given list of sentences.\\n\\nThe program defines a class Solution with a single public method maxWords that takes a vector of strings sentences as input and returns an integer. The input vector sentences contains the sentences, where each sentence is represented by a single string.\\n\\nIn the maxWords method, two integer variables are declared: maxWords to store the maximum number of words found so far and curWords to store the current number of words in a sentence. The method then uses a for loop to iterate through all the sentences in the input vector.\\n\\nFor each sentence, the count function is used to count the number of spaces in the sentence. This gives us the number of words in the sentence, as each word is separated by a single space. We then add 1 to the count to account for the last word in the sentence.\\n\\nThe max function is used to keep track of the maximum number of words found so far and update it if the current number of words is greater than the current maximum. The max function returns the larger of its two inputs, so in this case it returns the larger of maxWords and curWords.\\n\\nFinally, the maxWords method returns the maxWords variable, which is the maximum number of words found in any of the sentences.\\n\\n```\\nclass Solution {\\npublic:\\n    int maxWords(vector<string>& sentences) {\\n        int maxWords = 0;\\n        int curWords = 0;\\n        for (int i = 0; i < sentences.size(); i++) {\\n            curWords = count(sentences[i].begin(), sentences[i].end(), \\' \\') + 1;\\n            maxWords = max(maxWords, curWords);\\n        }\\n        return maxWords;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxWords(vector<string>& sentences) {\\n        int maxWords = 0;\\n        int curWords = 0;\\n        for (int i = 0; i < sentences.size(); i++) {\\n            curWords = count(sentences[i].begin(), sentences[i].end(), \\' \\') + 1;\\n            maxWords = max(maxWords, curWords);\\n        }\\n        return maxWords;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2641186,
                "title": "easy-to-understand-solution-in-java",
                "content": "class Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int arr[]=new int[sentences.length];\\n        for(int i=0;i<sentences.length;i++){\\n            arr[i]=sentences[i].split(\" \").length;\\n        }\\n        Arrays.sort(arr);\\n        return arr[arr.length-1];\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int arr[]=new int[sentences.length];\\n        for(int i=0;i<sentences.length;i++){\\n            arr[i]=sentences[i].split(\" \").length;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2619162,
                "title": "one-liner-python-solution",
                "content": "class Solution:\\n\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(word.split()) for word in sentences)",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(word.split()) for word in sentences)",
                "codeTag": "Java"
            },
            {
                "id": 2593611,
                "title": "java-fastest-solution-2ms-99-42-faster",
                "content": "**Approach 1** - Best Approach **2ms-faster than 99.42%**; 42.7MB-less than 82.61%\\n This code is breaked into two methods. If we put our code in just one method then it affects the time complexity to a great extent. When we put all our code in one method, then the time and space complexity was => 8ms - faster 21.15% ; 44.5MB - less than 55.78;\\n\\n```\\n\\npublic int mostWordsFound(String[] sentences) {        \\n        int wordCount=0,maxWordCount=0;\\n        for(int i=0; i< sentences.length; i++){\\n            \\n            wordCount=wordCountInASentence(sentences[i]);\\n            maxWordCount = Math.max(maxWordCount, wordCount);\\n        }\\n        return maxWordCount;\\n    }\\n    \\n\\n    private int wordCountInASentence(String sentence){\\n        int wordCount=0, index=0;\\n        while(index!=-1){\\n                index=sentence.indexOf(\" \",index+1);\\n                wordCount++;\\n            }\\n        return wordCount;\\n    }\\n```\\n\\n**Approach 2** ->  **3ms - faster than 96.62%** ; 43.1MB - less than 67.83; \\n This code is also breaked into two methods. \\nwhen this code is put in 1 method then => 9ms - faster than 14% ; 43.1MB - less than 72.52;\\n\\n```\\npublic int mostWordsFound(String[] sentences) {\\n\\n\\tint wordCount=0,maxWordCount=0;\\n\\tfor(int i=0; i< sentences.length; i++){\\n\\t\\twordCount=wordCountInASentence_SimpleForLoop(sentences[i]);\\n\\t\\tmaxWordCount = Math.max(maxWordCount, wordCount);\\n\\t}\\n\\treturn maxWordCount;\\n}\\n\\nprivate int wordCountInASentence_SimpleForLoop(String sentence){\\n\\tint wordCount=1;\\n\\tfor(int j=0; j<sentence.length(); j++){\\n\\t\\tif(sentence.charAt(j) == \\' \\'){\\n\\t\\t\\twordCount++;\\n\\t\\t}\\n\\t}\\n\\treturn wordCount;\\n}\\n```\\n\\n**Approach 3** -> **6ms - faster than 56%** ; 43.1MB - less than 58%;\\n   ```\\n public int mostWordsFound(String[] sentences) {\\n           \\n        int oldLen=0,newLen=0,wordCount=0,maxWordCount=0;\\n        for(int i=0; i< sentences.length; i++){\\n            \\n            wordCount=0;\\n            oldLen=sentences[i].length();\\n            newLen=sentences[i].replace(\" \",\"\").length();\\n            wordCount = oldLen - newLen + 1;\\n            maxWordCount = Math.max(maxWordCount, wordCount);\\n        }\\n        return maxWordCount;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\npublic int mostWordsFound(String[] sentences) {        \\n        int wordCount=0,maxWordCount=0;\\n        for(int i=0; i< sentences.length; i++){\\n            \\n            wordCount=wordCountInASentence(sentences[i]);\\n            maxWordCount = Math.max(maxWordCount, wordCount);\\n        }\\n        return maxWordCount;\\n    }\\n    \\n\\n    private int wordCountInASentence(String sentence){\\n        int wordCount=0, index=0;\\n        while(index!=-1){\\n                index=sentence.indexOf(\" \",index+1);\\n                wordCount++;\\n            }\\n        return wordCount;\\n    }\\n```\n```\\npublic int mostWordsFound(String[] sentences) {\\n\\n\\tint wordCount=0,maxWordCount=0;\\n\\tfor(int i=0; i< sentences.length; i++){\\n\\t\\twordCount=wordCountInASentence_SimpleForLoop(sentences[i]);\\n\\t\\tmaxWordCount = Math.max(maxWordCount, wordCount);\\n\\t}\\n\\treturn maxWordCount;\\n}\\n\\nprivate int wordCountInASentence_SimpleForLoop(String sentence){\\n\\tint wordCount=1;\\n\\tfor(int j=0; j<sentence.length(); j++){\\n\\t\\tif(sentence.charAt(j) == \\' \\'){\\n\\t\\t\\twordCount++;\\n\\t\\t}\\n\\t}\\n\\treturn wordCount;\\n}\\n```\n```\\n public int mostWordsFound(String[] sentences) {\\n           \\n        int oldLen=0,newLen=0,wordCount=0,maxWordCount=0;\\n        for(int i=0; i< sentences.length; i++){\\n            \\n            wordCount=0;\\n            oldLen=sentences[i].length();\\n            newLen=sentences[i].replace(\" \",\"\").length();\\n            wordCount = oldLen - newLen + 1;\\n            maxWordCount = Math.max(maxWordCount, wordCount);\\n        }\\n        return maxWordCount;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2438847,
                "title": "simple-logic-python",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        arr=[]\\n        for i in range(len(sentences)):\\n            arr.append(sentences[i].count(\\' \\')+1)\\n        return max(arr)\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        arr=[]\\n        for i in range(len(sentences)):\\n            arr.append(sentences[i].count(\\' \\')+1)\\n        return max(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2378263,
                "title": "c-2-solutions-easy-to-understand-and-2nd-stl-solution",
                "content": "**Solution 1:**\\n\\n**Using two for loop**\\n\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans = -1;\\n        for(int i = 0 ; i < s.size() ; i++){\\n            int cnt = 1 ;\\n            for(int j = 0 ; j < s[i].size() ; j++){\\n                if(s[i][j]==\\' \\')cnt++;\\n            }\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n\\n\\n**Solution 2:**\\n\\n**Using STL**\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n       int res = 0;\\n        for (auto const &s: s) {\\n            int n = count(s.begin(), s.end(), \\' \\');\\n            res = max(res, n + 1);\\n        }\\n        return res;\\n        \\n    }\\n};\\n```\\n\\nIf you like my solution upvote me :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans = -1;\\n        for(int i = 0 ; i < s.size() ; i++){\\n            int cnt = 1 ;\\n            for(int j = 0 ; j < s[i].size() ; j++){\\n                if(s[i][j]==\\' \\')cnt++;\\n            }\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n       int res = 0;\\n        for (auto const &s: s) {\\n            int n = count(s.begin(), s.end(), \\' \\');\\n            res = max(res, n + 1);\\n        }\\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2306665,
                "title": "ruby-one-line",
                "content": "```\\ndef most_words_found(sentences)\\n  sentences.map { |sentence| sentence.split.size }.max\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\ndef most_words_found(sentences)\\n  sentences.map { |sentence| sentence.split.size }.max\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2302656,
                "title": "simple-javascript-solution",
                "content": "simple javascript solution\\n```\\nvar mostWordsFound = function(sentences) {\\n    let ans = 0\\n    for(let i=0; i<sentences.length; i++){\\n        const len = sentences[i].split(\\' \\')\\n        if(len.length > ans) ans = len.length\\n    }\\n    return ans\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar mostWordsFound = function(sentences) {\\n    let ans = 0\\n    for(let i=0; i<sentences.length; i++){\\n        const len = sentences[i].split(\\' \\')\\n        if(len.length > ans) ans = len.length\\n    }\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2119659,
                "title": "5-lines-of-python-code-with-for-loop",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        ma = 0\\n        for i in sentences:\\n            s = i.split()\\n            ma = max(len(s), ma)\\n        return ma\\n            \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        ma = 0\\n        for i in sentences:\\n            s = i.split()\\n            ma = max(len(s), ma)\\n        return ma\\n            \\n",
                "codeTag": "Java"
            },
            {
                "id": 2106973,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String sentence: sentences){\\n            int length = sentence.split(\" \").length;\\n            if(max<length){\\n                max = length;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String sentence: sentences){\\n            int length = sentence.split(\" \").length;\\n            if(max<length){\\n                max = length;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2049898,
                "title": "simple-java-solution-beats-88-67-solution-3ms-runtime",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        for(String sentence:sentences){\\n            String[] words = sentence.split(\" \");\\n            if(words.length>max){\\n                max=words.length;\\n            }\\n        }\\n        \\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        for(String sentence:sentences){\\n            String[] words = sentence.split(\" \");\\n            if(words.length>max){\\n                max=words.length;\\n            }\\n        }\\n        \\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2031015,
                "title": "runtime-4-ms-faster",
                "content": "\\t\\tclass Solution {\\n\\t\\t\\tpublic int mostWordsFound(String[] sentences) {\\n\\t\\t\\t\\tint n=sentences.length;\\n\\t\\t\\t\\tint max=0;\\n\\t\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\t\\tString[] arr=sentences[i].split(\" \");\\n\\t\\t\\t\\t\\tint length=arr.length;\\n\\t\\t\\t\\t\\tif(max<length){\\n\\t\\t\\t\\t\\t\\tmax=length;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn max;\\n\\t\\t\\t}\\n\\t\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\t\\tpublic int mostWordsFound(String[] sentences) {\\n\\t\\t\\t\\tint n=sentences.length;\\n\\t\\t\\t\\tint max=0;\\n\\t\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\t\\tString[] arr=sentences[i].split(\" \");\\n\\t\\t\\t\\t\\tint length=arr.length;\\n\\t\\t\\t\\t\\tif(max<length){\\n\\t\\t\\t\\t\\t\\tmax=length;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2005275,
                "title": "c-easy-soluton-array",
                "content": "~~~\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maxi = INT_MIN;\\n        int c , n = sentences.size();\\n        for(int i=0;i<n;i++){\\n            c=0;\\n            for(int j= 0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                    c++;\\n                else \\n                    continue;\\n            }\\n            c+=1;\\n            maxi = max(maxi,c);\\n        }\\n        return maxi;\\n       \\n    }\\n};\\n~~~",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maxi = INT_MIN;\\n        int c , n = sentences.size();\\n        for(int i=0;i<n;i++){\\n            c=0;\\n            for(int j= 0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                    c++;\\n                else \\n                    continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1989321,
                "title": "java-count-spaces",
                "content": "Runtime: 3 ms, faster than 85.49% of Java online submissions for Maximum Number of Words Found in Sentences.\\nMemory Usage: 41.8 MB, less than 88.55% of Java online submissions for Maximum Number of Words Found in Sentences.\\n```\\nclass Solution {\\n  public int mostWordsFound(String[] sentences) {\\n    int ans = 1;\\n    \\n    for(String s : sentences){\\n      int words = 1; \\n      for(int i = 0; i != s.length(); i++)\\n        if(s.charAt(i) == \\' \\') words++;\\n      ans = Math.max(ans, words);\\n    }\\n      \\n    return ans;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int mostWordsFound(String[] sentences) {\\n    int ans = 1;\\n    \\n    for(String s : sentences){\\n      int words = 1; \\n      for(int i = 0; i != s.length(); i++)\\n        if(s.charAt(i) == \\' \\') words++;\\n      ans = Math.max(ans, words);\\n    }\\n      \\n    return ans;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1986981,
                "title": "java-solution-using-regex",
                "content": "\\n          class Solution{\\n              public int mostWordsFound(String[] sentences) {\\n                      int maxWords = -1, currLength;\\n        \\n                      for(int i=0; i<sentences.length; i++){\\n                          currLength = sentences[i].length() - sentences[i].replace(\" \", \"\").length();\\n                          maxWords = Math.max(maxWords, currLength);\\n                      }        \\n                      return (maxWords+1);\\n              }\\n          }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution{\\n              public int mostWordsFound(String[] sentences) {\\n                      int maxWords = -1, currLength;\\n        \\n                      for(int i=0; i<sentences.length; i++){\\n                          currLength = sentences[i].length() - sentences[i].replace(\" \", \"\").length();\\n                          maxWords = Math.max(maxWords, currLength);\\n                      }",
                "codeTag": "Java"
            },
            {
                "id": 1984380,
                "title": "c-easy-solution-brute-force-easy-to-understand",
                "content": "\\n\\n\\n    class Solution {\\n    public:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int sum=0;\\n        int maxx=INT_MIN;\\n        for(int i=0;i<sentences.size();i++){\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    sum++;\\n                }\\n            }\\n            maxx=max(maxx,sum);\\n            sum=0;\\n        }\\n        return maxx+1;\\n    }\\n   };\\n   \\n   \\n   \\n   \\n**IF U FIND IT USEFUL PLEASE UPVOTE IT**",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n    public:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int sum=0;\\n        int maxx=INT_MIN;\\n        for(int i=0;i<sentences.size();i++){\\n            for(int j=0;j<sentences[i].size();j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    sum++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1941363,
                "title": "newbie-learning-python",
                "content": "```\\n        #this is my array to store word count for each sentence\\n        lens = []\\n        \\n\\t\\t#iterate sentence by sentence\\n        for sentence in sentences:\\n\\t\\t\\t#add the length of the sentence, after splitting it word for word.\\n\\t\\t\\tlens.append(len(sentence.split()))\\n            \\n\\t\\t#return the max length in the array lens\\t\\n        return max(lens)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n        #this is my array to store word count for each sentence\\n        lens = []\\n        \\n\\t\\t#iterate sentence by sentence\\n        for sentence in sentences:\\n\\t\\t\\t#add the length of the sentence, after splitting it word for word.\\n\\t\\t\\tlens.append(len(sentence.split()))\\n            \\n\\t\\t#return the max length in the array lens\\t\\n        return max(lens)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1848989,
                "title": "easy-java-efficient-solution-100-faster-o-1-space-complexity",
                "content": "**Easy solution !!!**\\n\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) \\n    {\\n        int max=sentences[0].split(\" \").length;\\n        \\n        for(int i=1;i<sentences.length;i++)\\n            max=Math.max(max,sentences[i].split(\" \").length);\\n            \\n        return max;\\n    }\\n}\\n```\\n\\n**Comment if You have better Approach & found it helpful !!!**",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) \\n    {\\n        int max=sentences[0].split(\" \").length;\\n        \\n        for(int i=1;i<sentences.length;i++)\\n            max=Math.max(max,sentences[i].split(\" \").length);\\n            \\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1819043,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        for(int i=0;i<sentences.length;i++){\\n            String str=sentences[i];\\n            String[] strArr = str.split(\" \");\\n            max=Math.max(strArr.length,max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        for(int i=0;i<sentences.length;i++){\\n            String str=sentences[i];\\n            String[] strArr = str.split(\" \");\\n            max=Math.max(strArr.length,max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1802340,
                "title": "scala-blank-count",
                "content": "\\n```\\n  def mostWordsFound(sentences: Array[String]): Int = {\\n    sentences.map(s => s.count(_ == \\' \\')).max + 1\\n  }\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\n  def mostWordsFound(sentences: Array[String]): Int = {\\n    sentences.map(s => s.count(_ == \\' \\')).max + 1\\n  }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1797901,
                "title": "java-efficient-solution-o-n-99-faster-than-other-solution",
                "content": "\\n```\\n//  split method in java returns array of strings** \\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(int i = 0; i < sentences.length; i++) { // traversing the sentences array\\n            String s = sentences[i]; // take out ith String\\n            String a[] = s.split(\" \"); // Split it into String array \\n            max = Math.max(max,a.length); // find maximum length in all arrays\\n        }\\n        return max;\\n    }\\n}\\n\\n// If you like the solution please dont forget to hit a star \\uD83D\\uDE0A\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//  split method in java returns array of strings** \\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(int i = 0; i < sentences.length; i++) { // traversing the sentences array\\n            String s = sentences[i]; // take out ith String\\n            String a[] = s.split(\" \"); // Split it into String array \\n            max = Math.max(max,a.length); // find maximum length in all arrays\\n        }\\n        return max;\\n    }\\n}\\n\\n// If you like the solution please dont forget to hit a star \\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1793710,
                "title": "easy-rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn most_words_found(sentences: Vec<String>) -> i32 {\\n        sentences\\n        .iter()\\n        .map(|s| s.split_whitespace().count())\\n        .max()\\n        .unwrap() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn most_words_found(sentences: Vec<String>) -> i32 {\\n        sentences\\n        .iter()\\n        .map(|s| s.split_whitespace().count())\\n        .max()\\n        .unwrap() as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1788033,
                "title": "c-brute-force-easy-explanation-beginner-friendly",
                "content": "**Approach-1 : Space Complexity :- O(N)**\\n1. Traverse each index of a sentences --> for i  0 to sentences.size()\\n2. Then again traverse sentences occurs at each ith index--> for j 0 to sentences != \\'\\\\0\\' and increment j .( this for loop traverse untill we got \\'\\\\0\\' in a sentence at ith index)\\n3. count untill sentences(i,j) ==\" \" (these count spaces of every sentence found at every ith.\\n4. if step 3rd true then ,Increament count by 1.\\n5. and then store count of space of each sentences .\\n6. We can found maximum number of spaces using stl function  *max_element(firstIterator,lastIterator).\\n7. then return maximum word by maximum adding 1 to max space found in step 6.\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int len = sentences.size(), count = 0;\\n        vector<int>vec;\\n        for(int i=0;i<len;i++){\\n            count = 0;\\n            for(int j=0;sentences[i][j] != \\'\\\\0\\';j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    count++;\\n                }\\n            }\\n            vec.push_back(count);\\n        }\\n        int mx = *max_element(vec.begin(),vec.end());\\n        return mx+1;\\n    }\\n};\\n```\\n\\n**Approach-2 : Space Complexity :- O(1)**\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int len = sentences.size(), count = 0;\\n        int maxi=0;\\n        for(int i=0;i<len;i++){\\n            count = 0;\\n            for(int j=0;sentences[i][j] != \\'\\\\0\\';j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    count++;\\n                }\\n            }\\n            if(maxi<count){\\n                maxi = count;\\n            }\\n        }\\n        return maxi+1;\\n    }\\n};\\n```\\n\\n**Please Upvote if you like solution **",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int len = sentences.size(), count = 0;\\n        vector<int>vec;\\n        for(int i=0;i<len;i++){\\n            count = 0;\\n            for(int j=0;sentences[i][j] != \\'\\\\0\\';j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    count++;\\n                }\\n            }\\n            vec.push_back(count);\\n        }\\n        int mx = *max_element(vec.begin(),vec.end());\\n        return mx+1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int len = sentences.size(), count = 0;\\n        int maxi=0;\\n        for(int i=0;i<len;i++){\\n            count = 0;\\n            for(int j=0;sentences[i][j] != \\'\\\\0\\';j++){\\n                if(sentences[i][j]==\\' \\'){\\n                    count++;\\n                }\\n            }\\n            if(maxi<count){\\n                maxi = count;\\n            }\\n        }\\n        return maxi+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1782379,
                "title": "easy-java-solution-using-string-split-funchtion-basic-approach",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(int i = 0; i < sentences.length; i++){\\n            \\n            String[] s = sentences[i].split(\" \");\\n            \\n            if(s.length > max){\\n                max = s.length;\\n            }\\n            \\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(int i = 0; i < sentences.length; i++){\\n            \\n            String[] s = sentences[i].split(\" \");\\n            \\n            if(s.length > max){\\n                max = s.length;\\n            }\\n            \\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1782348,
                "title": "easily-understandable-c-code-of-counting-the-spaces",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ma = 0;\\n        for(int  i = 0; i < sentences.size(); i++){\\n            int count = 0;\\n            for(int j = 0; j < sentences[i].size(); j++){\\n                if(sentences[i][j] == \\' \\'){\\n                    count++;\\n                }\\n            }\\n            ma = max(ma, count);\\n        }\\n        return ma+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ma = 0;\\n        for(int  i = 0; i < sentences.size(); i++){\\n            int count = 0;\\n            for(int j = 0; j < sentences[i].size(); j++){\\n                if(sentences[i][j] == \\' \\'){\\n                    count++;\\n                }\\n            }\\n            ma = max(ma, count);\\n        }\\n        return ma+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749784,
                "title": "java-easy-solution",
                "content": "\\n\\nclass Solution {\\n\\n    public int mostWordsFound(String[] sentences) {\\n\\t\\n        int max = 0;\\n\\t\\t\\n        for(String s : sentences){\\n            int count =1;\\n\\t\\t\\t\\n            for(int i = 0; i<s.length(); i++){\\n\\t\\t\\t\\n                if(s.charAt(i)==\\' \\'){\\n                    count++;\\n                } \\n\\t\\t\\t\\t\\n            }\\n            if(max<count){\\n            max = count;\\n            }\\n        }\\n        return max;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int mostWordsFound(String[] sentences) {\\n\\t\\n        int max = 0;\\n\\t\\t\\n        for(String s : sentences){\\n            int count =1;\\n\\t\\t\\t\\n            for(int i = 0; i<s.length(); i++){\\n\\t\\t\\t\\n                if(s.charAt(i)==\\' \\'){\\n                    count++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1728876,
                "title": "easy-max-no-of-words-solutions",
                "content": "python\\n```\\nclass Solution(object):\\n    def mostWordsFound(self, sentences):\\n      \\n        len_sentence = []\\n        for sentence in sentences:\\n            x = len(sentence.split(\\' \\'))\\n            len_sentence.append(x)\\n        return max(len_sentence)\\n```\\njavaSript\\n```\\nvar mostWordsFound = function(sentences) {\\n    let len = 0;\\n    for (let sentence of sentences) {\\n        if (sentence.split(\\' \\').length > len) {\\n            len = sentence.split(\\' \\').length;\\n        };     \\n    };\\n    return len;\\n};\\n```",
                "solutionTags": [
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution(object):\\n    def mostWordsFound(self, sentences):\\n      \\n        len_sentence = []\\n        for sentence in sentences:\\n            x = len(sentence.split(\\' \\'))\\n            len_sentence.append(x)\\n        return max(len_sentence)\\n```\n```\\nvar mostWordsFound = function(sentences) {\\n    let len = 0;\\n    for (let sentence of sentences) {\\n        if (sentence.split(\\' \\').length > len) {\\n            len = sentence.split(\\' \\').length;\\n        };     \\n    };\\n    return len;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1705040,
                "title": "c-very-easy-4-to-5-line-code-in-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n       int c = 0; vector<int> v;\\n         for(auto i :s){\\n             c = count(begin(i), end(i), \\' \\');\\n             v.push_back(c+1);}\\n        sort(v.begin(),v.end()); return v[(v.size()-1)];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n       int c = 0; vector<int> v;\\n         for(auto i :s){\\n             c = count(begin(i), end(i), \\' \\');\\n             v.push_back(c+1);}\\n        sort(v.begin(),v.end()); return v[(v.size()-1)];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696525,
                "title": "python-solution-99-faster-time-one-liner",
                "content": "```\\ndef mostWordsFound(self, s: List[str]) -> int:\\n        return max([len(x.split()) for x in s])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef mostWordsFound(self, s: List[str]) -> int:\\n        return max([len(x.split()) for x in s])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1694568,
                "title": "python-code",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        c=0\\n        for i in sentences:\\n            c = max(i.count(\" \")+1,c)\\n        return c\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        c=0\\n        for i in sentences:\\n            c = max(i.count(\" \")+1,c)\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1684562,
                "title": "kotlin-beginner",
                "content": "```\\n fun mostWordsFound(sentences: Array<String>): Int {\\n        \\n        var count =0\\n        var result=0\\n        \\n        for (i in sentences) {\\n            \\n            for (sign in i) {\\n                if (sign == \\' \\') count++\\n            } \\n            \\n                if (count>result){\\n                    result=count\\n                }\\n                count=0\\n        }        \\n        return result+1  //In sentence, words are more by one than spaces              \\n    }\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\n fun mostWordsFound(sentences: Array<String>): Int {\\n        \\n        var count =0\\n        var result=0\\n        \\n        for (i in sentences) {\\n            \\n            for (sign in i) {\\n                if (sign == \\' \\') count++\\n            } \\n            \\n                if (count>result){\\n                    result=count\\n                }\\n                count=0\\n        }        \\n        return result+1  //In sentence, words are more by one than spaces              \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1681352,
                "title": "easy-c-solution-maximum-number-of-words-founds-in-sentences-solution",
                "content": "In this problem we have to find number of words.\\nso there are two solution you can **count number of words seperated by space** in sentences or you can **count number of space** in sentences. As you know you are *smart* or lazy , you go for second method.\\nIn below code you will see how we count number of spaces in sentences.\\n\\nBeginner friendly approach:\\n\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n     int n= sentences.size();\\n        int space=0;\\n    \\n        for (int i=0;i<n;i++)\\n        {                                     \\n\\t\\t             //  for i=0  we are at \"alice and bob love leetcode\"\\n            int count=1;\\n           \\n            for(int j=0;j<sentences[i].size();j++)                             \\n            {                  \\n\\t\\t\\t      // for j=0 , start with sentences[0][0]=a ; ( a of alice), now we are in first sentence , so now we will compare with \\' \\' (space)  if we found , then we will increase count. \\n            if (sentences[i][j]==\\' \\')\\n                count++;\\n            }\\n\\t\\t\\t\\n\\t\\t\\t\\n            if(space<count)\\n                space=count;\\n        }\\n        \\n        return space;\\n    }\\n};\\n```\\n\\n\\nSecond Approach:\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=sentences.size();\\n        int maxlen=-1;\\n        for(int i=0;i<n;i++){\\n            maxlen=max(maxlen , int(count(sentences[i].begin() , sentences[i].end() , \\' \\')+1));\\n        }\\n        return maxlen;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n     int n= sentences.size();\\n        int space=0;\\n    \\n        for (int i=0;i<n;i++)\\n        {                                     \\n\\t\\t             //  for i=0  we are at \"alice and bob love leetcode\"\\n            int count=1;\\n           \\n            for(int j=0;j<sentences[i].size();j++)                             \\n            {                  \\n\\t\\t\\t      // for j=0 , start with sentences[0][0]=a ; ( a of alice), now we are in first sentence , so now we will compare with \\' \\' (space)  if we found , then we will increase count. \\n            if (sentences[i][j]==\\' \\')\\n                count++;\\n            }\\n\\t\\t\\t\\n\\t\\t\\t\\n            if(space<count)\\n                space=count;\\n        }\\n        \\n        return space;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=sentences.size();\\n        int maxlen=-1;\\n        for(int i=0;i<n;i++){\\n            maxlen=max(maxlen , int(count(sentences[i].begin() , sentences[i].end() , \\' \\')+1));\\n        }\\n        return maxlen;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1679135,
                "title": "javascript-using-reduce",
                "content": "```\\nvar mostWordsFound = function(sentences) {\\nreturn \\tsentences.reduce((acc, el)=>{\\n\\treturn Math.max(acc, el.split(\\' \\').length)}, 0)\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mostWordsFound = function(sentences) {\\nreturn \\tsentences.reduce((acc, el)=>{\\n\\treturn Math.max(acc, el.split(\\' \\').length)}, 0)\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1670112,
                "title": "pythonic-solution-faster-than-94-8",
                "content": "```\\n\\nreturn max(len(words.split(\" \")) for words in sentences)\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nreturn max(len(words.split(\" \")) for words in sentences)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1656769,
                "title": "golang-simple-solution-o-n-m",
                "content": "```\\n// Time O(N*M)\\n// Space O(1)\\nfunc MostWordsFound(sentences []string) int {\\n  if len(sentences) == 0 { return 0 }\\n\\n  var ans int\\n\\n  for i := range sentences {\\n    sentence := sentences[i]\\n    res := strings.Split(sentence, \" \")\\n    numberOfWords := len(res)\\n    if numberOfWords > ans {\\n      ans = numberOfWords\\n    }\\n  }\\n\\n  return ans\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n// Time O(N*M)\\n// Space O(1)\\nfunc MostWordsFound(sentences []string) int {\\n  if len(sentences) == 0 { return 0 }\\n\\n  var ans int\\n\\n  for i := range sentences {\\n    sentence := sentences[i]\\n    res := strings.Split(sentence, \" \")\\n    numberOfWords := len(res)\\n    if numberOfWords > ans {\\n      ans = numberOfWords\\n    }\\n  }\\n\\n  return ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1653999,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int output = 0;\\n        for(int i =0;i<sentences.length;i++)\\n        {\\n            // converting the current sentence into array on the basis of spaces and finding its length\\n            String current[] = sentences[i].split(\" \");\\n            output = Math.max(output,current.length);\\n        }\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int output = 0;\\n        for(int i =0;i<sentences.length;i++)\\n        {\\n            // converting the current sentence into array on the basis of spaces and finding its length\\n            String current[] = sentences[i].split(\" \");\\n            output = Math.max(output,current.length);\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1653977,
                "title": "c-stl-and-without-stl-and-java-code",
                "content": "**Java Code**\\n\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int ans = 0;\\n        for(String sentence: sentences){\\n           ans = Math.max(ans, sentence.split(\" \").length);\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\n**C++ code without STL**\\n\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maxi = 0;\\n        for(auto &it: sentences){\\n            int cnt = 0;\\n            for(auto &ch: it){\\n                if(ch == \\' \\') cnt++;\\n            }\\n            maxi = max(maxi, cnt + 1);\\n        }\\n        return maxi;\\n    }\\n    \\n};\\n```\\n**C++ code with STL**\\n\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maxi = 0;\\n        for(auto &it: sentences){\\n            \\n            // starting iterator, ending iterator, the char your looking for here its (\\' \\')\\n            int cnt = count(it.begin(), it.end(), \\' \\') + 1;\\n            maxi = max(maxi, cnt);\\n        }\\n        return maxi;\\n    }\\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int ans = 0;\\n        for(String sentence: sentences){\\n           ans = Math.max(ans, sentence.split(\" \").length);\\n        }\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maxi = 0;\\n        for(auto &it: sentences){\\n            int cnt = 0;\\n            for(auto &ch: it){\\n                if(ch == \\' \\') cnt++;\\n            }\\n            maxi = max(maxi, cnt + 1);\\n        }\\n        return maxi;\\n    }\\n    \\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int maxi = 0;\\n        for(auto &it: sentences){\\n            \\n            // starting iterator, ending iterator, the char your looking for here its (\\' \\')\\n            int cnt = count(it.begin(), it.end(), \\' \\') + 1;\\n            maxi = max(maxi, cnt);\\n        }\\n        return maxi;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1647105,
                "title": "javascript-js",
                "content": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function (sentences) {\\n  const result = [];\\n\\n  for (let i = 0; i < sentences.length; i++) {\\n    result.push(sentences[i].split(\" \").length);\\n  }\\n\\n  return Math.max(...result);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} sentences\\n * @return {number}\\n */\\nvar mostWordsFound = function (sentences) {\\n  const result = [];\\n\\n  for (let i = 0; i < sentences.length; i++) {\\n    result.push(sentences[i].split(\" \").length);\\n  }\\n\\n  return Math.max(...result);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646894,
                "title": "javascript-solution-84ms-1-line",
                "content": "- Map the sentences to a new array by length, split each sentence by it\\'s spaces (\" \") to get it\\'s length as a value.\\n\\t- `sentences.map(s => s.split(\" \").length);`\\n- Spread the newly mapped array with the spread operator \"...\"\\n\\t- `(...sentences.map(s => s.split(\" \").length));`\\n- use the Math.max() function to find the greatest value in the newly mapped array.\\n\\t- `Math.max(...sentences.map(s => s.split(\" \").length));`\\n---\\n**Solution**\\n```\\nvar mostWordsFound = (sentences) => Math.max(...sentences.map(s => s.split(\" \").length));\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mostWordsFound = (sentences) => Math.max(...sentences.map(s => s.split(\" \").length));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646846,
                "title": "c-counting-spaces-solution-without-stringstream",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans = INT_MIN;\\n        int n = s.size();\\n        for(int i = 0; i < n; i++){\\n            int words = 0, spaces = 0;\\n            for(int j = 0; j < s[i].size(); j++){\\n                if(s[i][j] == \\' \\')\\n                    spaces++;\\n            }\\n            words = spaces + 1;  // since no of words will be one more than the no of spaces\\n            ans = max(ans, words);  //storing the max no of words in each iteration\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& s) {\\n        int ans = INT_MIN;\\n        int n = s.size();\\n        for(int i = 0; i < n; i++){\\n            int words = 0, spaces = 0;\\n            for(int j = 0; j < s[i].size(); j++){\\n                if(s[i][j] == \\' \\')\\n                    spaces++;\\n            }\\n            words = spaces + 1;  // since no of words will be one more than the no of spaces\\n            ans = max(ans, words);  //storing the max no of words in each iteration\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646836,
                "title": "python3-1-line",
                "content": "\\nPlease check out this [commit](https://github.com/gaosanyong/leetcode/commit/8bba95f803d58a5e571fa13de6635c96f5d1c1ee) for solutions of biweekly 68. \\n```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(x.split()) for x in sentences)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(x.split()) for x in sentences)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646822,
                "title": "python",
                "content": "```\\n        return max(len(s.split()) for s in sentences)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n        return max(len(s.split()) for s in sentences)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646598,
                "title": "simple-solution",
                "content": "```\\npublic int mostWordsFound(String[] sentences) {\\n        int maximum=0;\\n        for(String sentence: sentences)\\n            maximum = Math.max(maximum,sentence.split(\" \").length);\\n        return maximum;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int mostWordsFound(String[] sentences) {\\n        int maximum=0;\\n        for(String sentence: sentences)\\n            maximum = Math.max(maximum,sentence.split(\" \").length);\\n        return maximum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1646593,
                "title": "python-1-liner-2-solutions",
                "content": "```\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(s.split(\" \")) for s in sentences)\\n```\\n\\n* split function will return an array which will take space, so go wtih `count` method.\\n```\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(s.count(\" \") for s in sentences) + 1\\n```",
                "solutionTags": [],
                "code": "```\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(len(s.split(\" \")) for s in sentences)\\n```\n```\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        return max(s.count(\" \") for s in sentences) + 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4068754,
                "title": "solucion-facil",
                "content": "```\\npublic class Solution {\\n    public int MostWordsFound(string[] sentences) {\\n        int mayor = 0;\\n        foreach(string sentence in sentences)\\n        {\\n          //Dividir la oracion en palabras usando espacios en blanco como delimitador\\n          string[] palabras  = sentence.Split(new char[] {\\' \\'}, StringSplitOptions.RemoveEmptyEntries);\\n\\n          // contar la cantidad de palabras en la oracion\\n          int contadorPalabras = palabras.Length;\\n\\n          // actualizar la variable mayor si es necesario\\n         if(contadorPalabras > mayor)\\n         {\\n             mayor = contadorPalabras;\\n         }\\n\\n        }\\n        return mayor;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MostWordsFound(string[] sentences) {\\n        int mayor = 0;\\n        foreach(string sentence in sentences)\\n        {\\n          //Dividir la oracion en palabras usando espacios en blanco como delimitador\\n          string[] palabras  = sentence.Split(new char[] {\\' \\'}, StringSplitOptions.RemoveEmptyEntries);\\n\\n          // contar la cantidad de palabras en la oracion\\n          int contadorPalabras = palabras.Length;\\n\\n          // actualizar la variable mayor si es necesario\\n         if(contadorPalabras > mayor)\\n         {\\n             mayor = contadorPalabras;\\n         }\\n\\n        }\\n        return mayor;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3995494,
                "title": "1ms-100-easy-explanation-java",
                "content": "\\n# \\n<!-- Describe your approach to solving the problem. -->\\nRun countWords() function for each item of String array. In the given function count the number of words. In the main function get the maximum count and return it.\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int n = sentences.length, max_count = 0;\\n        for(int i=0;i<n;i++){\\n            int count = countWords(sentences[i],sentences[i].length());\\n            max_count = Math.max(count,max_count);\\n        }\\n        return max_count;\\n    }\\n\\n    public int countWords(String str, int n){\\n        int i = 0, count = 0;\\n        while(i<n){\\n            if(str.charAt(i)==\\' \\'){\\n                count++;\\n            }\\n            i++;\\n        }\\n        count++;\\n        return count;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int n = sentences.length, max_count = 0;\\n        for(int i=0;i<n;i++){\\n            int count = countWords(sentences[i],sentences[i].length());\\n            max_count = Math.max(count,max_count);\\n        }\\n        return max_count;\\n    }\\n\\n    public int countWords(String str, int n){\\n        int i = 0, count = 0;\\n        while(i<n){\\n            if(str.charAt(i)==\\' \\'){\\n                count++;\\n            }\\n            i++;\\n        }\\n        count++;\\n        return count;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3775086,
                "title": "very-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int mostWordsFound(List<String> sentences) {\\n int maxWords =0;\\n\\n for(var sentence in sentences){\\n   List<String> words = sentence.split(\\' \\').toList();\\n   int wordCount = words.length; \\n   if(wordCount>maxWords){\\n     maxWords =wordCount;\\n   }\\n }\\n\\n  return maxWords;\\n}\\n\\n}\\n\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int mostWordsFound(List<String> sentences) {\\n int maxWords =0;\\n\\n for(var sentence in sentences){\\n   List<String> words = sentence.split(\\' \\').toList();\\n   int wordCount = words.length; \\n   if(wordCount>maxWords){\\n     maxWords =wordCount;\\n   }\\n }\\n\\n  return maxWords;\\n}\\n\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3673111,
                "title": "easy-c-solution-anybody-can-solve-beats-93",
                "content": "# Intuition\\nJust look for the spaces in each sentences and add 1 to it. to find the number of words and then comapre them tom find the max value.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nUse 2 nested loops : 1 Outer loop for each sentence and the inner one for each character in that sentence. Check for whitespace and count them add 1 to it then compare it with max and store the maximum value in max.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int m=INT_MIN;\\n        for(auto i: sentences)\\n        {\\n            int x=1;\\n            for(auto it: i)\\n            {\\n                if(it==\\' \\') x++;\\n            }\\n\\n            m=max(m,x);\\n        }\\n        return m;\\n    }\\n};\\n```\\n\\n**Please Upvote yay!!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int m=INT_MIN;\\n        for(auto i: sentences)\\n        {\\n            int x=1;\\n            for(auto it: i)\\n            {\\n                if(it==\\' \\') x++;\\n            }\\n\\n            m=max(m,x);\\n        }\\n        return m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3481056,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int words;\\n        int maxWords = 0;\\n        for(String x : sentences) {\\n            // Initialize words to 1 as each sentence will contain atleast 1 word\\n            words = 1;\\n            for(int i = 0; i < x.length(); i++) {\\n                // If there is a space, increment words; (Note: There are no trailing white spaces)\\n                if(x.charAt(i) == \\' \\') {\\n                    words++;\\n                }\\n            }\\n            // If current count of words is greater than previous maximum count of words then assign the words to maximum words; \\n            if(words > maxWords) {\\n                maxWords = words;\\n            }\\n        }\\n        return maxWords;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int words;\\n        int maxWords = 0;\\n        for(String x : sentences) {\\n            // Initialize words to 1 as each sentence will contain atleast 1 word\\n            words = 1;\\n            for(int i = 0; i < x.length(); i++) {\\n                // If there is a space, increment words; (Note: There are no trailing white spaces)\\n                if(x.charAt(i) == \\' \\') {\\n                    words++;\\n                }\\n            }\\n            // If current count of words is greater than previous maximum count of words then assign the words to maximum words; \\n            if(words > maxWords) {\\n                maxWords = words;\\n            }\\n        }\\n        return maxWords;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3401509,
                "title": "accepted-easy-to-understand-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func mostWordsFound(_ sentences: [String]) -> Int {\\n        \\n        var countSpace = 0\\n        var count = 0\\n\\n        for i in sentences[0] {\\n            i == \" \" ? (countSpace += 1) : (countSpace += 0)\\n        }\\n\\n        for i in sentences {\\n            for j in i {\\n                j == \" \" ? (count += 1) : (count += 0)\\n            }\\n\\n            if count > countSpace {\\n                countSpace = count\\n                count = 0\\n            } else {\\n                count = 0\\n            }\\n\\n        }\\n\\n        return countSpace + 1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func mostWordsFound(_ sentences: [String]) -> Int {\\n        \\n        var countSpace = 0\\n        var count = 0\\n\\n        for i in sentences[0] {\\n            i == \" \" ? (countSpace += 1) : (countSpace += 0)\\n        }\\n\\n        for i in sentences {\\n            for j in i {\\n                j == \" \" ? (count += 1) : (count += 0)\\n            }\\n\\n            if count > countSpace {\\n                countSpace = count\\n                count = 0\\n            } else {\\n                count = 0\\n            }\\n\\n        }\\n\\n        return countSpace + 1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345872,
                "title": "dart-solution-98-time-space-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int mostWordsFound(List<String> sentences) {\\n      int res = 0;\\n\\n     sentences.forEach((e){\\n         int lgth = e.split(\\' \\').length;\\n         if(lgth > res){\\n             res = lgth;\\n         }\\n     });\\n\\n     return res;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int mostWordsFound(List<String> sentences) {\\n      int res = 0;\\n\\n     sentences.forEach((e){\\n         int lgth = e.split(\\' \\').length;\\n         if(lgth > res){\\n             res = lgth;\\n         }\\n     });\\n\\n     return res;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234017,
                "title": "maximum-number-of-words-found-in-sentences-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int i, j, count, max=0;\\n        for(i=0 ; i<sentences.size() ; i++)\\n        {\\n            count = 1;\\n            for(j=0 ; j<sentences[i].size() ; j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count += 1;\\n                }\\n            }\\n            if(count>max)\\n            {\\n                max = count;\\n            }\\n        }\\n        return max;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int i, j, count, max=0;\\n        for(i=0 ; i<sentences.size() ; i++)\\n        {\\n            count = 1;\\n            for(j=0 ; j<sentences[i].size() ; j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count += 1;\\n                }\\n            }\\n            if(count>max)\\n            {\\n                max = count;\\n            }\\n        }\\n        return max;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186195,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=sentences.size();\\n        int count=0;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            string sent=sentences[i];\\n            int temp=0;\\n            for(int j=0;j<sent.size();j++)\\n            {\\n                if(sent[j]==\\' \\' && sent[j+1]!=\\' \\')\\n                    temp++;\\n            }\\n            count=max(count,temp);\\n        }\\n        return count+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n=sentences.size();\\n        int count=0;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            string sent=sentences[i];\\n            int temp=0;\\n            for(int j=0;j<sent.size();j++)\\n            {\\n                if(sent[j]==\\' \\' && sent[j+1]!=\\' \\')\\n                    temp++;\\n            }\\n            count=max(count,temp);\\n        }\\n        return count+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3099598,
                "title": "rust-0ms-beats-100-elegant",
                "content": "# Intuition\\nAs the problem states, a sentence is a *list of words that are **separated by a single space** with no leading or trailing spaces.*\\nWith this foresight, we can assume that the length of a sentence is *spaces + 1*.\\n\\n# Approach\\nWhile it might seem more idiomatic in Rust to use `sentences.iter().for_each(|s| ...)` here, there is actually a loss of speed and memory allocation.\\nTherefore, a `for..in` loop was my best take at iterating.\\nNext, we check the count of characters matching `\\' \\'`, a space, and compare that result to the current length `len`, storing the max returned back to len.\\nFinally, `s.matches(\\' \\').count()` returns a `usize` type, requiring a typecast to `i32`.\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn most_words_found(sentences: Vec<String>) -> i32 {\\n        let mut len = 0;\\n\\n        for s in sentences {\\n            len = std::cmp::max(s.matches(\\' \\').count() + 1, len);\\n        }\\n\\n        len as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn most_words_found(sentences: Vec<String>) -> i32 {\\n        let mut len = 0;\\n\\n        for s in sentences {\\n            len = std::cmp::max(s.matches(\\' \\').count() + 1, len);\\n        }\\n\\n        len as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3098015,
                "title": "easy-python-solution-4-lines-beats-96-beginner-friendly",
                "content": "\\n```\\nclass Solution:\\n    def mostWordsFound(self, s: List[str]) -> int:\\n        Most = 0\\n        for i in s:\\n            Most = max(Most,len(i.split()))\\n        return Most\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, s: List[str]) -> int:\\n        Most = 0\\n        for i in s:\\n            Most = max(Most,len(i.split()))\\n        return Most\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3094949,
                "title": "solution-in-java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n   public int mostWordsFound(String[] sentences) {\\n        int result = 0;\\n        int count;\\n\\n        for (int i = 0; i < sentences.length; i++) {\\n            count = 1;\\n            for (char c : sentences[i].toCharArray()) {\\n                if (c == \\' \\') count++;\\n            }\\n            if (count > result) result = count;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public int mostWordsFound(String[] sentences) {\\n        int result = 0;\\n        int count;\\n\\n        for (int i = 0; i < sentences.length; i++) {\\n            count = 1;\\n            for (char c : sentences[i].toCharArray()) {\\n                if (c == \\' \\') count++;\\n            }\\n            if (count > result) result = count;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3094674,
                "title": "php-solution-without-adding-new-array-run-in-11ms",
                "content": "\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String[] $sentences\\n     * @return Integer\\n     */\\n    function mostWordsFound($sentences) {\\n        $max = 0;\\n        foreach($sentences as $single) {\\n            $count = substr_count($single, \" \") + 1;\\n            if($count > $max) {\\n                $max = $count;\\n            }\\n        }\\n        return $max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String[] $sentences\\n     * @return Integer\\n     */\\n    function mostWordsFound($sentences) {\\n        $max = 0;\\n        foreach($sentences as $single) {\\n            $count = substr_count($single, \" \") + 1;\\n            if($count > $max) {\\n                $max = $count;\\n            }\\n        }\\n        return $max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085987,
                "title": "2114-java-4-approach",
                "content": "# Approach 1\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 3 ms\\n- Beats : 94.46%\\n- Memory : 42 MB\\n- Beats : 57.98%\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            String temp[] = s.split(\" \");\\n            int total = temp.length;\\n            if(total > max) max = total;\\n        }\\n        return max;\\n    }\\n}\\n```\\n# Approach 2\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 3 ms\\n- Beats : 94.46%\\n- Memory : 42.1 MB\\n- Beats : 57.98%\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            max = Math.max(max , s.split(\" \").length);\\n        }\\n        return max;\\n    }\\n}\\n```\\n# Approach 3\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 3 ms\\n- Beats : 94.46%\\n- Memory : 42.2 MB\\n- Beats : 45.30%\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            if(s.split(\" \").length > max) max = s.split(\" \").length;\\n        }\\n        return max;\\n    }\\n}\\n```\\n# Approach 4\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 4 ms\\n- Beats : 50.19%\\n- Memory : 44.2 MB\\n- Beats : 24.93%\\n\\n# Code\\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            int total = 0;\\n            for(char ch : s.toCharArray()) if(ch == \\' \\') total++;\\n            if(max < total) max = total;\\n        }\\n        return max+1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            String temp[] = s.split(\" \");\\n            int total = temp.length;\\n            if(total > max) max = total;\\n        }\\n        return max;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            max = Math.max(max , s.split(\" \").length);\\n        }\\n        return max;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            if(s.split(\" \").length > max) max = s.split(\" \").length;\\n        }\\n        return max;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String s : sentences){\\n            int total = 0;\\n            for(char ch : s.toCharArray()) if(ch == \\' \\') total++;\\n            if(max < total) max = total;\\n        }\\n        return max+1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2896824,
                "title": "easy-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans=0;\\n        for(auto it : sentences)\\n        {\\n            int sum=0;\\n            for(auto iterator : it){\\n                if(iterator==\\' \\')\\n                sum++;\\n            }\\n            ans=max(ans,sum+1);\\n        }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int ans=0;\\n        for(auto it : sentences)\\n        {\\n            int sum=0;\\n            for(auto iterator : it){\\n                if(iterator==\\' \\')\\n                sum++;\\n            }\\n            ans=max(ans,sum+1);\\n        }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2800952,
                "title": "maximum-number-of-words-found-in-sentences",
                "content": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        vector<int>ans;\\n     for(int i=0;i<sentences.size();i++)\\n        {  int cnt=0;\\n            for(int j=0;j<sentences[i].length();j++)\\n            { \\n              if(sentences[i][j]==\\' \\')\\n              {\\n                  cnt++;\\n              } \\n            } \\n        ans.push_back(cnt);\\n        }\\n   int a= *max_element(ans.begin(),ans.end());\\n        a=a+1;\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        vector<int>ans;\\n     for(int i=0;i<sentences.size();i++)\\n        {  int cnt=0;\\n            for(int j=0;j<sentences[i].length();j++)\\n            { \\n              if(sentences[i][j]==\\' \\')\\n              {\\n                  cnt++;\\n              } \\n            } \\n        ans.push_back(cnt);\\n        }\\n   int a= *max_element(ans.begin(),ans.end());\\n        a=a+1;\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783616,
                "title": "easy-c-soln-faang-interview-optimized-code",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCheck for spaces to calculate the max no. of words\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int max_length=0 ;\\n        for(int i=0 ; i<sentences.size() ; i++){\\n            int c=0;\\n            for(int j=0 ; j<sentences[i].size() ; j++){\\n                if(sentences[i][j]==\\' \\') c++;\\n            }\\n            max_length=max(max_length,c+1);\\n        }\\n        return max_length;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int max_length=0 ;\\n        for(int i=0 ; i<sentences.size() ; i++){\\n            int c=0;\\n            for(int j=0 ; j<sentences[i].size() ; j++){\\n                if(sentences[i][j]==\\' \\') c++;\\n            }\\n            max_length=max(max_length,c+1);\\n        }\\n        return max_length;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2773710,
                "title": "java-easy",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String sentence:sentences) {\\n            max = Math.max(max,(sentence.split(\" \")).length);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max = 0;\\n        for(String sentence:sentences) {\\n            max = Math.max(max,(sentence.split(\" \")).length);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2671129,
                "title": "solution-from-niyaz",
                "content": "```\\n\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int length = sentences.length;\\n        int[] size = new int[length];\\n\\n        for (int i = 0; i < length; i++) {\\n            String[] res = sentences[i].split(\" \");\\n            size[i] = res.length;\\n        }\\n        Arrays.sort(size);\\n        return size[length-1];\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int length = sentences.length;\\n        int[] size = new int[length];\\n\\n        for (int i = 0; i < length; i++) {\\n            String[] res = sentences[i].split(\" \");\\n            size[i] = res.length;\\n        }\\n        Arrays.sort(size);\\n        return size[length-1];\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2669252,
                "title": "from-niyaz-10-ms-45-7-mb",
                "content": "```\\n\\n    public int mostWordsFound(String[] sentences) {\\n        int length = sentences.length;\\n        int[] size = new int[length];\\n\\n        for (int i = 0; i < length; i++) {\\n            String[] res = sentences[i].split(\" \");\\n            size[i] = res.length;\\n        }\\n        Arrays.sort(size);\\n        return size[length-1];\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n    public int mostWordsFound(String[] sentences) {\\n        int length = sentences.length;\\n        int[] size = new int[length];\\n\\n        for (int i = 0; i < length; i++) {\\n            String[] res = sentences[i].split(\" \");\\n            size[i] = res.length;\\n        }\\n        Arrays.sort(size);\\n        return size[length-1];\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2658482,
                "title": "jaascript-split-string-soln",
                "content": "```\\nvar mostWordsFound = function(sentences) {\\n    let maxWords = 0;\\n    for ( let i=0; i< sentences.length; i++) {\\n        const words = sentences[i].split(\\' \\').length;\\n        if(words > maxWords) maxWords =words;\\n    }\\n    return maxWords;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar mostWordsFound = function(sentences) {\\n    let maxWords = 0;\\n    for ( let i=0; i< sentences.length; i++) {\\n        const words = sentences[i].split(\\' \\').length;\\n        if(words > maxWords) maxWords =words;\\n    }\\n    return maxWords;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2636235,
                "title": "python-easy-solution-in-5-lines",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        m=0\\n        for i in sentences:\\n            i=i.split()\\n            m=max(len(i),m)\\n        return m\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        m=0\\n        for i in sentences:\\n            i=i.split()\\n            m=max(len(i),m)\\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2636227,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        m=0\\n        for i in sentences:\\n            c=0\\n            for j in i:\\n                if j == \\' \\':\\n                    c+=1\\n            m=max(m,c+1)\\n        return m\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def mostWordsFound(self, sentences: List[str]) -> int:\\n        m=0\\n        for i in sentences:\\n            c=0\\n            for j in i:\\n                if j == \\' \\':\\n                    c+=1\\n            m=max(m,c+1)\\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2623281,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        int count=0;\\n        for(int i=0;i<sentences.length;i++){\\n             count=0;\\n            int length=sentences[i].length();\\n            for(int j=0;j<length;j++){\\n                String a=sentences[i];\\n                if(a.charAt(j)==32){\\n                    count++;\\n                }\\n            }\\n            if(max<count){\\n                max=count;\\n            }\\n        }\\n        return max+1;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) {\\n        int max=0;\\n        int count=0;\\n        for(int i=0;i<sentences.length;i++){\\n             count=0;\\n            int length=sentences[i].length();\\n            for(int j=0;j<length;j++){\\n                String a=sentences[i];\\n                if(a.charAt(j)==32){\\n                    count++;\\n                }\\n            }\\n            if(max<count){\\n                max=count;\\n            }\\n        }\\n        return max+1;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2616586,
                "title": "22-ms-faster-than-98-59-of-python-online-submissions",
                "content": "```\\nclass Solution(object):\\n    def mostWordsFound(self, sentences):\\n        \"\"\"\\n        :type sentences: List[str]\\n        :rtype: int\\n        \"\"\"\\n        return max([len(i.split()) for i in sentences])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def mostWordsFound(self, sentences):\\n        \"\"\"\\n        :type sentences: List[str]\\n        :rtype: int\\n        \"\"\"\\n        return max([len(i.split()) for i in sentences])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2601067,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n = sentences.size();\\n        int ans =0;\\n        for(int i =0;i<n;i++)\\n        {\\n           int p = count(sentences[i].begin(),sentences[i].end(),\\' \\');\\n             \\n            ans = max(ans,p);\\n        }\\n        return ans+1;\\n    }\\n};",
                "solutionTags": [
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        int n = sentences.size();\\n        int ans =0;\\n        for(int i =0;i<n;i++)\\n        {\\n           int p = count(sentences[i].begin(),sentences[i].end(),\\' \\');\\n             \\n            ans = max(ans,p);\\n        }",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1576573,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1910959,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1758191,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1724313,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1576216,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1576121,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2068196,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1842307,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1841701,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1804467,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1576573,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1910959,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1758191,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1724313,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1576216,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1576121,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2068196,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1842307,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1841701,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1804467,
                "content": [
                    {
                        "username": "jasonrdavis",
                        "content": "var mostWordsFound = function(sentences) {\\n  const  newArry = []\\n //persist length values from sentences array elements into new array\\n sentences.filter( function(s){\\n arr.push(s.split(\" \").length)      \\n })\\n //calculate the max number from newArray\\nreturn Math.max(...newArr)\\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/solutions/2783616/easy-c-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "rezl_jaws",
                        "content": "A very simple C++ approach\\n1. Iterate through the vector to get each string \\n for( auto s : sentences) , the variable s get the individual sentence\\n2. count the number of white spaces, this would work out the number of words ( i am using lamdas and count_if stl to work out the white spaces) \\nint tmp = count_if(s.begin(), s.end(), [](char g) {return (g == \\' \\' );});\\n3. work out the max number of words result = max( result, tmp)\\n4. return result, we need to add 1 to the final result as count_if restult the number of white spaces, not the workd"
                    },
                    {
                        "username": "JeevanDevkota",
                        "content": "public int mostWordsFound(String[] sentences) {\\n        int maxCount = 0;\\n        for(int i=0;i<sentences.length;i++) {\\n            int count = 1;\\n            for(int j=0;j<sentences[i].length();j++) {\\n                if(sentences[i].charAt(j) == \\' \\') {\\n                    count++;\\n                }\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }"
                    },
                    {
                        "username": "farhan2022skipq",
                        "content": "Javascript compiler is not efficient, It has a bug. it gives me error on use cases but when i run the same code and input array in my computer, The code works fine"
                    },
                    {
                        "username": "dhi2511",
                        "content": "let value = sentences.map(ele => ele.split(\" \").length)\\n   \\n   let highest = Math.max(...value)\\n   \\n   return highest;"
                    },
                    {
                        "username": "salander",
                        "content": "sentences.iter().map(|x| x.split_whitespace().count()).max().unwrap() as i32\\n"
                    },
                    {
                        "username": "dm_korniienko",
                        "content": "####################\n# Python way\n####################\n\n\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        max_len = []\n        \n        for i in sentences:\n            a = i.split(\" \")\n            max_len.append(len(a))\n        max_len.sort()\n        \n        return(max_len[-1])"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "  t = [i.split(\" \") for i in sentences]\\n        return max([len(j) for j in t ])"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "//100%  right\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {  \\n        int n= sentences.size();\\n        int i,j;\\n        \\n        int maxCount =0;\\n        for(i=0;i<n;i++)\\n        {\\n            int count =1;\\n            for(j=0;j<sentences[i].length();j++)\\n            {\\n                if(sentences[i][j]==\\' \\')\\n                {\\n                    count++;\\n                }\\n            }\\n        maxCount =max(maxCount,count);    \\n        }\\n        return maxCount;\\n\\n    }\\n};"
                    },
                    {
                        "username": "Drako_Rexon",
                        "content": "C++ Solution:\\n\\nclass Solution {\\npublic:\\n    int mostWordsFound(vector<string>& sentences) {\\n        \\n        vector<int> arr;\\n        for (string ch: sentences) {\\n            string word = \"\";\\n            vector<string> arrayOfWords;\\n            for (char element: ch) {\\n                if (element == \\' \\' || element == \\'\\\\0\\') {\\n                    arrayOfWords.push_back(word);\\n                } else {\\n                    word += element;\\n                }\\n            }\\n            arr.push_back(arrayOfWords.size()+1);\\n            arrayOfWords.clear();\\n        }\\n        \\n        return *max_element(arr.begin(), arr.end());\\n    }\\n};"
                    }
                ]
            }
        ]
    }
]