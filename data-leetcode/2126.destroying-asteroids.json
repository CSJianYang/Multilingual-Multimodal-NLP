[
    {
        "title": "Destroying Asteroids",
        "question_content": "You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.\nYou can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.\nReturn true if all asteroids can be destroyed. Otherwise, return false.\n&nbsp;\nExample 1:\n\nInput: mass = 10, asteroids = [3,9,19,5,21]\nOutput: true\nExplanation: One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed.\n\nExample 2:\n\nInput: mass = 5, asteroids = [4,9,23,4]\nOutput: false\nExplanation: \nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid.\n&nbsp;\nConstraints:\n\n\t1 <= mass <= 105\n\t1 <= asteroids.length <= 105\n\t1 <= asteroids[i] <= 105",
        "solutions": [
            {
                "id": 1661044,
                "title": "java-python-3-sort-then-apply-greedy-algorithm",
                "content": "```java\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long m = mass;\\n        Arrays.sort(asteroids);\\n        for (int ast : asteroids) {\\n            if (m < ast) {\\n                return false;\\n            }\\n            m += ast;\\n        }\\n        return true;\\n    }\\n```\\nIn case you do NOT like using `long`, we can use the constraints: `1 <= asteroids[i] <= 10^5`: once mass is greater than all asteroids, we can conclude all can be destroyed.\\u3000-- inspired by **@Zudas**.\\n\\n```java\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for (int ast : asteroids) {\\n            if (mass < ast) {\\n                return false;\\n            }else if (mass > 100_000) { // now we can conclude all can be destroyed.\\n                return true;\\n            }\\n            mass += ast;\\n        }\\n        return true;\\n    }\\n```\\n```python\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        for a in sorted(asteroids):\\n            if mass < a:\\n                return False\\n            mass += a\\n        return True\\n```\\n**Analysis:**\\n\\nTime: `O(n * log(n))`, space: `O(n)` - including sorting space.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long m = mass;\\n        Arrays.sort(asteroids);\\n        for (int ast : asteroids) {\\n            if (m < ast) {\\n                return false;\\n            }\\n            m += ast;\\n        }\\n        return true;\\n    }\\n```\n```java\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for (int ast : asteroids) {\\n            if (mass < ast) {\\n                return false;\\n            }else if (mass > 100_000) { // now we can conclude all can be destroyed.\\n                return true;\\n            }\\n            mass += ast;\\n        }\\n        return true;\\n    }\\n```\n```python\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        for a in sorted(asteroids):\\n            if mass < a:\\n                return False\\n            mass += a\\n        return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1660949,
                "title": "simple-c-python-solution",
                "content": "**Approach:**\\n1. Sort array in increasing order\\n2. Start destroying astroid with smallest weight return false if any point it is not possible.\\n\\n<br>\\n\\n**C++ Solution :**\\n```\\nclass Solution\\n{\\n    public:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr)\\n    {\\n        sort(arr.begin(),arr.end());\\n        int n=arr.size();\\n        long long m=mass;\\n        for (int i=0;i<n;i++)\\n        {\\n            if (arr[i]<=m)\\n                m+=arr[i];\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```\\n\\n<br>\\n\\n**Python Solution :**\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        \\n        asteroids.sort()\\n        \\n        for astMass in asteroids:\\n            if astMass <= mass:\\n                mass += astMass\\n            else:\\n                return False\\n        \\n        return True\\n```\\n**Time Complexity : O(nlogn)**",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\n    public:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr)\\n    {\\n        sort(arr.begin(),arr.end());\\n        int n=arr.size();\\n        long long m=mass;\\n        for (int i=0;i<n;i++)\\n        {\\n            if (arr[i]<=m)\\n                m+=arr[i];\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        \\n        asteroids.sort()\\n        \\n        for astMass in asteroids:\\n            if astMass <= mass:\\n                mass += astMass\\n            else:\\n                return False\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1691774,
                "title": "c-easiest-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ass) {\\n        long long m = mass;\\n        sort(ass.begin(),ass.end());\\n        for(auto i: ass)\\n        {\\n            if(i<=m)\\n                m += i;\\n            else\\n                return false; \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ass) {\\n        long long m = mass;\\n        sort(ass.begin(),ass.end());\\n        for(auto i: ass)\\n        {\\n            if(i<=m)\\n                m += i;\\n            else\\n                return false; \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1674076,
                "title": "sort-and-accumulate",
                "content": "Not sure why such an easy problem appeared as #3 in the contest.\\n\\n**C++**\\n```cpp\\nbool asteroidsDestroyed(int mass, vector<int>& a) {\\n    sort(begin(a), end(a));\\n    return accumulate(begin(a), end(a), mass, [](int m, int a){\\n        return m < a ? 0 : min(100000, m + a);\\n    });\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nbool asteroidsDestroyed(int mass, vector<int>& a) {\\n    sort(begin(a), end(a));\\n    return accumulate(begin(a), end(a), mass, [](int m, int a){\\n        return m < a ? 0 : min(100000, m + a);\\n    });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1664790,
                "title": "idea-explained-greedy-approach-c-clean-code",
                "content": "**Intuition :**\\n\\n* Idea is to simply sort the `asteroids` list. & then we need to collide planet with asteroid.\\n* There are 2 cases :\\n\\t* If `planetMass >= asteroid`, then we merge it. and continue\\n\\t\\n\\t* else we planet get destroyed, and `return false`. \\n* In the end if all `asteroids` are collided, then `return true`\\n* This is basically a Greedy approach and we need to simulate the collision process.\\n# Code :\\n\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        int n = asteroids.size();\\n        sort(begin(asteroids), end(asteroids));\\n        \\n        long long planetMass = mass;\\n        \\n        for(auto& asteroid : asteroids) {\\n            if(planetMass < asteroid) return false; \\n\\t\\t\\tplanetMass += asteroid;\\n        }\\n        return true;\\n    }\\n};\\n```\\n\\n**Complexity :**\\n\\n* Time : `O(NlogN + N)`, N is size of `asteroids` list\\n* Space : `O(1)`",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        int n = asteroids.size();\\n        sort(begin(asteroids), end(asteroids));\\n        \\n        long long planetMass = mass;\\n        \\n        for(auto& asteroid : asteroids) {\\n            if(planetMass < asteroid) return false; \\n\\t\\t\\tplanetMass += asteroid;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661582,
                "title": "simple-c-sorting-and-greedy-approach",
                "content": "1.Sorting the asteroids vector in increasing order \\n2. Checking if any moment the mass of the planet is less than the asteroid then returning false;\\n3.Using long long int in order to avoid overflow.\\n\\n\\tbool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        //Using long long int to avoid overflow\\n        long long int m=mass;\\n        \\n        sort(asteroids.begin(),asteroids.end());   //sorting the mass of the asteroids in increasing order.\\n       \\n        //checking if mass of the planet is greater than asteroid then adding the mass in the planet else returning false\\n        \\n        for(int i=0;i<asteroids.size();i++){\\n        \\n            if(m>=asteroids[i])\\n                m+=asteroids[i];\\n            else\\n                return false;\\n            \\n        }\\n        return true;\\n    }",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "1.Sorting the asteroids vector in increasing order \\n2. Checking if any moment the mass of the planet is less than the asteroid then returning false;\\n3.Using long long int in order to avoid overflow.\\n\\n\\tbool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        //Using long long int to avoid overflow\\n        long long int m=mass;\\n        \\n        sort(asteroids.begin(),asteroids.end());   //sorting the mass of the asteroids in increasing order.\\n       \\n        //checking if mass of the planet is greater than asteroid then adding the mass in the planet else returning false\\n        \\n        for(int i=0;i<asteroids.size();i++){\\n        \\n            if(m>=asteroids[i])\\n                m+=asteroids[i];\\n            else\\n                return false;\\n            \\n        }\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1661046,
                "title": "c-simple-soultion-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        long long val=(long long)mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++)\\n        {\\n            int v=asteroids[i];\\n            if(val>=v)\\n             {\\n               val+=v;\\n            }\\n            \\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        long long val=(long long)mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++)\\n        {\\n            int v=asteroids[i];\\n            if(val>=v)\\n             {\\n               val+=v;\\n            }\\n            \\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2295532,
                "title": "greedy-approch",
                "content": "```\\nclass Solution {\\n   public  boolean asteroidsDestroyed(int mass, int[] arr) {\\n\\t\\tArrays.sort(arr);\\n        long sum = mass;\\n\\t\\tfor (int i = 0; i < arr.length; i++) {\\n\\t\\t\\tif (sum >=arr[i]) {\\n\\t\\t\\t\\tsum += arr[i];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public  boolean asteroidsDestroyed(int mass, int[] arr) {\\n\\t\\tArrays.sort(arr);\\n        long sum = mass;\\n\\t\\tfor (int i = 0; i < arr.length; i++) {\\n\\t\\t\\tif (sum >=arr[i]) {\\n\\t\\t\\t\\tsum += arr[i];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661107,
                "title": "java-sort-and-check-them-1-by-1",
                "content": "```\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long m = mass;\\n        int len = asteroids.length;\\n        for (int i = 0; i < len; i++) {\\n            if (m >= asteroids[i]) {\\n                m += asteroids[i];\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long m = mass;\\n        int len = asteroids.length;\\n        for (int i = 0; i < len; i++) {\\n            if (m >= asteroids[i]) {\\n                m += asteroids[i];\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3800259,
                "title": "short-and-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        sort(arr.begin(),arr.end());\\n        long long x = mass;\\n        for(int i=0; i<arr.size(); i++){\\n            if(arr[i] > x) return false;\\n            x += arr[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        sort(arr.begin(),arr.end());\\n        long long x = mass;\\n        for(int i=0; i<arr.size(); i++){\\n            if(arr[i] > x) return false;\\n            x += arr[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2697457,
                "title": "greedy-approach-no-need-to-use-long-long-o-n-log-n-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n\\t\\tint max = 100000;\\n        for(auto &i: ast){\\n            if(mass < i){\\n                return false;\\n            }\\n            mass += i;\\n\\t\\t\\t\\t\\n\\t\\t\\t// the largest possible value of asteroids[i] is 10^5\\n            if(mass > max) return true; \\n\\t\\t\\t// no need to check further if the mass gets greater than max(10^5) because after this we can destroy any asteroids\\n\\t\\t\\t\\n        }\\n        return true;\\n    }\\n};\\n```\\n\\n   : ) \\uD83D\\uDC4D\\uD83D\\uDC4D :-)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n\\t\\tint max = 100000;\\n        for(auto &i: ast){\\n            if(mass < i){\\n                return false;\\n            }\\n            mass += i;\\n\\t\\t\\t\\t\\n\\t\\t\\t// the largest possible value of asteroids[i] is 10^5\\n            if(mass > max) return true; \\n\\t\\t\\t// no need to check further if the mass gets greater than max(10^5) because after this we can destroy any asteroids\\n\\t\\t\\t\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2636198,
                "title": "simple-python",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        for a in sorted(asteroids):\\n            if mass < a:\\n                return False\\n            mass+=a\\n        return True",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        for a in sorted(asteroids):\\n            if mass < a:\\n                return False\\n            mass+=a\\n        return True",
                "codeTag": "Java"
            },
            {
                "id": 1816956,
                "title": "self-explanatory-java-solution",
                "content": "class Solution {\\n\\n    public boolean asteroidsDestroyed(int mass, int[] ast) {\\t\\n        Arrays.sort(ast);\\n        long x=(long)mass;\\n        for(long i : ast)\\n        {\\n            if(x<i)\\n                return false;\\n            \\n            x+=i;\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "class Solution {\\n\\n    public boolean asteroidsDestroyed(int mass, int[] ast) {\\t\\n        Arrays.sort(ast);\\n        long x=(long)mass;\\n        for(long i : ast)\\n        {\\n            if(x<i)\\n                return false;\\n            \\n            x+=i;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1775912,
                "title": "simple-python-solution-85-lesser-memory",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids = sorted(asteroids)\\n        for i in asteroids:\\n            if i <= mass:\\n                mass += i\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids = sorted(asteroids)\\n        for i in asteroids:\\n            if i <= mass:\\n                mass += i\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1673339,
                "title": "a-few-solutions",
                "content": "Sort the input array `A` to greedily consume the smallest first.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun asteroidsDestroyed(T: Int, A: IntArray): Boolean {\\n        var t = T.toLong()\\n        A.sort()\\n        for (x in A) {\\n            if (t < x)\\n                return false\\n            t += x\\n        }\\n        return true\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet asteroidsDestroyed = (t, A) => {\\n    A.sort((a, b) => a - b);\\n    for (let x of A) {\\n        if (t < x)\\n            return false;\\n        t += x;\\n    }\\n    return true;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, t: int, A: List[int]) -> bool:\\n        A.sort()\\n        for x in A:\\n            if t < x:\\n                return False\\n            t += x\\n        return t\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using LL = long long;\\n    using VI = vector<int>;\\n    bool asteroidsDestroyed(int T, VI& A) {\\n        LL t{ T };\\n        sort(A.begin(), A.end());\\n        for (auto x: A) {\\n            if (t < x)\\n                return false;\\n            t += x;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun asteroidsDestroyed(T: Int, A: IntArray): Boolean {\\n        var t = T.toLong()\\n        A.sort()\\n        for (x in A) {\\n            if (t < x)\\n                return false\\n            t += x\\n        }\\n        return true\\n    }\\n}\\n```\n```\\nlet asteroidsDestroyed = (t, A) => {\\n    A.sort((a, b) => a - b);\\n    for (let x of A) {\\n        if (t < x)\\n            return false;\\n        t += x;\\n    }\\n    return true;\\n};\\n```\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, t: int, A: List[int]) -> bool:\\n        A.sort()\\n        for x in A:\\n            if t < x:\\n                return False\\n            t += x\\n        return t\\n```\n```\\nclass Solution {\\npublic:\\n    using LL = long long;\\n    using VI = vector<int>;\\n    bool asteroidsDestroyed(int T, VI& A) {\\n        LL t{ T };\\n        sort(A.begin(), A.end());\\n        for (auto x: A) {\\n            if (t < x)\\n                return false;\\n            t += x;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1667702,
                "title": "java-o-n-18-ms-faster-than-99-53-of-java-online-submissions",
                "content": "```\\npublic boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long current = mass;\\n        int[] data = new int[100001];\\n        int min = 100001;\\n        int max = -1;\\n        \\n        for(int a : asteroids) {\\n            min = Math.min(min, a);\\n            max = Math.max(max, a);\\n            data[a]++;\\n        }\\n        \\n        for(int i = min; i <= max; i++) {\\n            if(current < i && data[i] != 0)\\n                return false;\\n            \\n            current += i * data[i];\\n        }\\n        \\n        return true;\\n    }\\n\\n",
                "solutionTags": [],
                "code": "```\\npublic boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long current = mass;\\n        int[] data = new int[100001];\\n        int min = 100001;\\n        int max = -1;\\n        \\n        for(int a : asteroids) {\\n            min = Math.min(min, a);\\n            max = Math.max(max, a);\\n            data[a]++;\\n        }\\n        \\n        for(int i = min; i <= max; i++) {\\n            if(current < i && data[i] != 0)\\n                return false;\\n            \\n            current += i * data[i];\\n        }\\n        \\n        return true;\\n    }\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1661959,
                "title": "java-easy-greedy",
                "content": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        //Sorting helps to find the best suitable asteroid greedily to destroy\\n         Arrays.sort(asteroids);\\n         long cm = mass;\\n         for(int val : asteroids){\\n             if(cm >= val){\\n                 cm += val;\\n             }\\n             else return false;\\n         }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        //Sorting helps to find the best suitable asteroid greedily to destroy\\n         Arrays.sort(asteroids);\\n         long cm = mass;\\n         for(int val : asteroids){\\n             if(cm >= val){\\n                 cm += val;\\n             }\\n             else return false;\\n         }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661652,
                "title": "easy-c-solution-using-sort",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        long long int sum=mass;\\n        sort(ast.begin(),ast.end());\\n        for(int i=0;i<ast.size();i++){\\n            if(sum>=ast[i]) sum+=ast[i];\\n            else return false;\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        long long int sum=mass;\\n        sort(ast.begin(),ast.end());\\n        for(int i=0;i<ast.size();i++){\\n            if(sum>=ast[i]) sum+=ast[i];\\n            else return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1660965,
                "title": "sort-and-greedy-c-clean-code",
                "content": "Here int64_t (long long) is used to avoid overflow.\\n\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(), asteroids.end());\\n        int64_t cur_mass = mass;\\n        for(auto a : asteroids){\\n            if(cur_mass >= a) cur_mass += a;\\n            else return false;\\n        }\\n        return true;\\n    }",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "Here int64_t (long long) is used to avoid overflow.\\n\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(), asteroids.end());\\n        int64_t cur_mass = mass;\\n        for(auto a : asteroids){\\n            if(cur_mass >= a) cur_mass += a;\\n            else return false;\\n        }\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1660955,
                "title": "java-simple-nlogn",
                "content": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long m = mass;\\n        for(int i=0;i<asteroids.length;i++){\\n            if(asteroids[i] <= m){\\n                m += asteroids[i];\\n            }else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long m = mass;\\n        for(int i=0;i<asteroids.length;i++){\\n            if(asteroids[i] <= m){\\n                m += asteroids[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3797519,
                "title": "very-easy-for-loop-solution-c-beats-96-in-time-beats-92-in-memory",
                "content": "# Approach\\nWe just have to sort the array and check according to the given conditions. Also make the type of mass as long long else it will result in overflow.\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        int c=0;\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++){\\n            if(asteroids[i]<=mass){\\n                c++;\\n                mass+=asteroids[i];\\n            } \\n            else break;\\n        }\\n        if(c==asteroids.size())return 1;\\n        else return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        int c=0;\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++){\\n            if(asteroids[i]<=mass){\\n                c++;\\n                mass+=asteroids[i];\\n            } \\n            else break;\\n        }\\n        if(c==asteroids.size())return 1;\\n        else return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790902,
                "title": "sorting-easy-c-beats-98",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n```\\nThe smallest asteroid will hit the planet if the mass of the smallest\\nasteroid is greater than that of the planet, so it is not possible to \\ndestroy all asteroids.\\n```\\n# Complexity\\n- Time complexity:O(N*Log(N))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long sum = m;\\n        for(int i = 0;i<a.size();i++)\\n        {\\n            if(a[i]>sum) return false;\\n            sum+=a[i];\\n        }\\n        return true; \\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/b4f65d2d-3b1f-46fc-b3bb-b313f2cdd057_1689833615.7635784.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Sorting"
                ],
                "code": "```\\nThe smallest asteroid will hit the planet if the mass of the smallest\\nasteroid is greater than that of the planet, so it is not possible to \\ndestroy all asteroids.\\n```\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long sum = m;\\n        for(int i = 0;i<a.size();i++)\\n        {\\n            if(a[i]>sum) return false;\\n            sum+=a[i];\\n        }\\n        return true; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366350,
                "title": "java-very-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        int c=0;\\n        long s=(long)mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            long d=(long)asteroids[i];\\n            if(s>=d)\\n            {\\n                c+=1;\\n                s+=d;\\n            }\\n        }\\n        if(c==asteroids.length)return true;\\n        else return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        int c=0;\\n        long s=(long)mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            long d=(long)asteroids[i];\\n            if(s>=d)\\n            {\\n                c+=1;\\n                s+=d;\\n            }\\n        }\\n        if(c==asteroids.length)return true;\\n        else return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3193158,
                "title": "beats-88-simple-and-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to find an asteroid with least mass that can destroy the planet.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe first sort the asteroid according to increasing order of their masses.\\n\\nThen we keep on iterating till we find an asteroid whose mass is greater than the mass of the planet.\\n\\nAlso, if the mass of the asteroid is less or equal to the planet, then we will add that mass to the mass of planet.\\n\\n**Note: We will need to declare a new mass variable for planet with a datatype of long.**\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        int n = asteroids.size();\\n        long mass_new = mass;\\n            \\n        sort(asteroids.begin(),asteroids.end());\\n        \\n        for(int j = 0; j < n; j++){\\n            if(asteroids[j] <= mass_new)\\n                mass_new +=  asteroids[j];\\n            else\\n                return false;\\n                \\n        }\\n        return true;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        int n = asteroids.size();\\n        long mass_new = mass;\\n            \\n        sort(asteroids.begin(),asteroids.end());\\n        \\n        for(int j = 0; j < n; j++){\\n            if(asteroids[j] <= mass_new)\\n                mass_new +=  asteroids[j];\\n            else\\n                return false;\\n                \\n        }\\n        return true;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3128898,
                "title": "java-sol-beats-75-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for (int i=0; i<asteroids.length; i++) {\\n            if (mass>=asteroids[i]) mass+=asteroids[i];\\n            else return false;\\n            if (mass>100000) return true;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for (int i=0; i<asteroids.length; i++) {\\n            if (mass>=asteroids[i]) mass+=asteroids[i];\\n            else return false;\\n            if (mass>100000) return true;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3108895,
                "title": "easy-simple-c-solution-o-nlogn",
                "content": "## Complexity\\n- Time complexity: $$O(nlogn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long mass1= mass;\\n        for (int i=0; i<asteroids.size(); i++){\\n            if (mass1>=asteroids[i]){\\n                mass1+= asteroids[i];\\n            }\\n            else return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy",
                    "Sort",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long mass1= mass;\\n        for (int i=0; i<asteroids.size(); i++){\\n            if (mass1>=asteroids[i]){\\n                mass1+= asteroids[i];\\n            }\\n            else return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2928528,
                "title": "c-faster-than-90-sorting-greedy-approach-beginner-friendly",
                "content": "\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n\\n    bool asteroidsDestroyed(long long mass, vector<int>& ass) {\\n        \\n        sort(ass.begin(), ass.end());\\n\\n        for(int i = 0; i < ass.size(); ++i)\\n        {\\n           if(mass < ass[i]) return false;\\n           \\n           else mass += ass[i];   \\n        }\\n\\n        return true;\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n\\n    bool asteroidsDestroyed(long long mass, vector<int>& ass) {\\n        \\n        sort(ass.begin(), ass.end());\\n\\n        for(int i = 0; i < ass.size(); ++i)\\n        {\\n           if(mass < ass[i]) return false;\\n           \\n           else mass += ass[i];   \\n        }\\n\\n        return true;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2489236,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn asteroids_destroyed(mass: i32, mut asteroids: Vec<i32>) -> bool {\\n        asteroids.sort();\\n        let mut m:i64 = mass as i64;\\n        for a in asteroids {\\n            let b = a as i64;\\n            if b<=m {\\n                m += b;\\n            } else {\\n                return false\\n            }\\n        }\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn asteroids_destroyed(mass: i32, mut asteroids: Vec<i32>) -> bool {\\n        asteroids.sort();\\n        let mut m:i64 = mass as i64;\\n        for a in asteroids {\\n            let b = a as i64;\\n            if b<=m {\\n                m += b;\\n            } else {\\n                return false\\n            }\\n        }\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2440210,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& v) \\n    {\\n        sort(v.begin(),v.end());\\n\\n        long long ans=mass;\\n        for(long long i=0;i<v.size();i++)\\n        {\\n            if(ans<v[i])\\n                return false;\\n            ans+=v[i];\\n        }\\n        \\n        return true;\\n    }\\n};\\n```\\n***Upvote if you like the solution :)***",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& v) \\n    {\\n        sort(v.begin(),v.end());\\n\\n        long long ans=mass;\\n        for(long long i=0;i<v.size();i++)\\n        {\\n            if(ans<v[i])\\n                return false;\\n            ans+=v[i];\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2419358,
                "title": "python-1-line-greedy",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        return reduce(lambda a, b: (a[0] and a[1]>=b, a[1]+b), sorted(asteroids), (True, mass))[0]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        return reduce(lambda a, b: (a[0] and a[1]>=b, a[1]+b), sorted(asteroids), (True, mass))[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2318584,
                "title": "python-90-faster-than-other-greedy-solution-very-intuitive-using-sorting-technique",
                "content": "![image](https://assets.leetcode.com/users/images/2853d186-23e7-414b-925b-f13588a50a2e_1658509474.4397042.png)\\n***Please don\\'t forget to upvote if found it helpful!!!***\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        # ///// TC O(nlogn) //////\\n        asteroids.sort()\\n        \\n        for asteroid in asteroids:\\n            if mass >= asteroid:\\n                mass += asteroid\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        # ///// TC O(nlogn) //////\\n        asteroids.sort()\\n        \\n        for asteroid in asteroids:\\n            if mass >= asteroid:\\n                mass += asteroid\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2310138,
                "title": "easy-solutions-using-two-heaps",
                "content": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b)->b-a);\\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\\n        \\n        for(int val:asteroids)\\n            maxHeap.add(val);\\n        \\n        long bigMass = mass;\\n        \\n        while(maxHeap.size()>0){\\n            int curr = maxHeap.poll();\\n            \\n            if(bigMass>=curr){\\n                bigMass+=curr;\\n                while(minHeap.size()>0 && bigMass>=minHeap.peek()){\\n                    bigMass+=minHeap.poll();\\n                }\\n            }\\n            else{\\n                minHeap.add(curr);\\n            }\\n        }\\n        \\n        return minHeap.size()==0 && maxHeap.size()==0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b)->b-a);\\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\\n        \\n        for(int val:asteroids)\\n            maxHeap.add(val);\\n        \\n        long bigMass = mass;\\n        \\n        while(maxHeap.size()>0){\\n            int curr = maxHeap.poll();\\n            \\n            if(bigMass>=curr){\\n                bigMass+=curr;\\n                while(minHeap.size()>0 && bigMass>=minHeap.peek()){\\n                    bigMass+=minHeap.poll();\\n                }\\n            }\\n            else{\\n                minHeap.add(curr);\\n            }\\n        }\\n        \\n        return minHeap.size()==0 && maxHeap.size()==0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1873113,
                "title": "c-short-and-simple-solution-using-greedy-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        sort(begin(asteroids), end(asteroids));\\n        \\n        long long sum = mass;\\n        \\n        for(int i: asteroids){\\n            \\n            long long num = i;\\n            \\n            if(num > sum)\\n                return false;\\n            \\n            sum += num;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        sort(begin(asteroids), end(asteroids));\\n        \\n        long long sum = mass;\\n        \\n        for(int i: asteroids){\\n            \\n            long long num = i;\\n            \\n            if(num > sum)\\n                return false;\\n            \\n            sum += num;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1820515,
                "title": "java-simple-solution",
                "content": "```\\n public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);             //sorting as the lower values combined first gives a good chance for earth to be safe\\n        long m = mass;\\n        for(int i:asteroids)\\n        {\\n          if(m<i)return false;           // if at any point any new asteroid weigh more then the earth we return false \\n\\t\\t   else m+=i;                    //other wise the new mass will be added to earth\\'s mass\\n        }\\n        return true;\\n    }",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\n public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);             //sorting as the lower values combined first gives a good chance for earth to be safe\\n        long m = mass;\\n        for(int i:asteroids)\\n        {\\n          if(m<i)return false;           // if at any point any new asteroid weigh more then the earth we return false \\n\\t\\t   else m+=i;                    //other wise the new mass will be added to earth\\'s mass\\n        }\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1800373,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        sort(arr.begin(),arr.end());\\n        long long m = mass;\\n        for(auto it:arr){\\n            if(it <= m){\\n                m += it;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        sort(arr.begin(),arr.end());\\n        long long m = mass;\\n        for(auto it:arr){\\n            if(it <= m){\\n                m += it;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791968,
                "title": "c-5-line-of-code-100-correct",
                "content": "****Please Upvote me :)****\\n```\\nbool asteroidsDestroyed(int mass, vector<int>& a) {\\n        \\n        long long m = mass;\\n        sort(a.begin(),a.end());\\n        \\n        for(auto i:a){\\n            \\n            if(i<=m){\\n                m+=i;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool asteroidsDestroyed(int mass, vector<int>& a) {\\n        \\n        long long m = mass;\\n        sort(a.begin(),a.end());\\n        \\n        for(auto i:a){\\n            \\n            if(i<=m){\\n                m+=i;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1757764,
                "title": "c-stack-with-sorting-solution-accepted",
                "content": "class Solution {\\npublic:\\n\\n    bool asteroidsDestroyed(int val, vector<int>& nums) {\\n        long long mass = val;\\n        sort(nums.begin() , nums.end());\\n        stack<int>st;\\n        for(int i=nums.size()-1 ; i>=0 ; i--){\\n            if(mass >= nums[i]){\\n                mass += nums[i];\\n                while(!st.empty() and st.top() <= mass){\\n                    mass += st.top();\\n                    st.pop();\\n                }\\n            }else{\\n                st.push(nums[i]);\\n            }\\n        }\\n        while(!st.empty() and st.top() <= mass){\\n            mass += st.top();\\n            st.pop();\\n        }\\n        \\n        return st.empty();\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Stack",
                    "Greedy",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n\\n    bool asteroidsDestroyed(int val, vector<int>& nums) {\\n        long long mass = val;\\n        sort(nums.begin() , nums.end());\\n        stack<int>st;\\n        for(int i=nums.size()-1 ; i>=0 ; i--){\\n            if(mass >= nums[i]){\\n                mass += nums[i];\\n                while(!st.empty() and st.top() <= mass){\\n                    mass += st.top();\\n                    st.pop();\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1733988,
                "title": "c-greedy-sorting",
                "content": "**This is a straightforward greedy problem , You cant possibly collide all asteroids in any order , if it isnt possible to collide them in an increasing order of their masses.**\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long c=0;\\n        long long m = mass;\\n        for(auto x : asteroids){\\n            if(x>m)\\n                return false;\\n            else{\\n                m+=(x);\\n                c++;\\n            }\\n        }\\n        \\n        return c==asteroids.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long c=0;\\n        long long m = mass;\\n        for(auto x : asteroids){\\n            if(x>m)\\n                return false;\\n            else{\\n                m+=(x);\\n                c++;\\n            }\\n        }\\n        \\n        return c==asteroids.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1719605,
                "title": "python3-greedy-approach",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        \\n        asteroids.sort()\\n        \\n        for a in asteroids:\\n            if mass >= a:\\n                mass += a\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        \\n        asteroids.sort()\\n        \\n        for a in asteroids:\\n            if mass >= a:\\n                mass += a\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1718790,
                "title": "simple-solution-using-sorting-easiest-solution",
                "content": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n       long long int sum=mass;\\n       long long int n=ast.size();\\n        sort(ast.begin(),ast.end());\\n        for(int i=0;i<n;i++)\\n        {\\n           if(sum>=ast[i])\\n               sum+=ast[i];\\n            else\\n                return false;\\n        }\\n        return true;\\n       \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n       long long int sum=mass;\\n       long long int n=ast.size();\\n        sort(ast.begin(),ast.end());\\n        for(int i=0;i<n;i++)\\n        {\\n           if(sum>=ast[i])\\n               sum+=ast[i];\\n            else\\n                return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1683637,
                "title": "python3-runtime-1036-ms-faster-than-98-85-memory-28-1-mb-less-than-9-00",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids=sorted(asteroids)\\n        for i in asteroids:\\n            if mass<i:\\n                return False\\n            mass+=i\\n        return True\\n\\t\\t\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids=sorted(asteroids)\\n        for i in asteroids:\\n            if mass<i:\\n                return False\\n            mass+=i\\n        return True\\n\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1673172,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(begin(asteroids),end(asteroids));\\n        int i = 0;\\n        int n = asteroids.size();\\n        long long a = mass;\\n        while(i<n){\\n            if(asteroids[i]>a) return false;\\n            a+=asteroids[i];\\n            i++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(begin(asteroids),end(asteroids));\\n        int i = 0;\\n        int n = asteroids.size();\\n        long long a = mass;\\n        while(i<n){\\n            if(asteroids[i]>a) return false;\\n            a+=asteroids[i];\\n            i++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1666789,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {number} mass\\n * @param {number[]} asteroids\\n * @return {boolean}\\n */\\nvar asteroidsDestroyed = function(mass, nums) \\n{\\n    nums.sort(function(a, b){return a - b});\\n    for(let i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]<=mass)\\n                {\\n                    mass+=nums[i];\\n                }\\n            else\\n                {\\n                    return false;\\n                }\\n        }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sorting"
                ],
                "code": "```\\n/**\\n * @param {number} mass\\n * @param {number[]} asteroids\\n * @return {boolean}\\n */\\nvar asteroidsDestroyed = function(mass, nums) \\n{\\n    nums.sort(function(a, b){return a - b});\\n    for(let i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]<=mass)\\n                {\\n                    mass+=nums[i];\\n                }\\n            else\\n                {\\n                    return false;\\n                }\\n        }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1666787,
                "title": "c-sorting-solution",
                "content": "\\nWhen you sort the array, then you make sure that the everytime you add a new stone to the mass, the mass will be  greater than the stone being added.\\nIf the mass is smaller than the stone being added to it, then we can return false, because all the numbers coming after the current index, will be larger than the  current stone. Also, the mass has the greatest possible weight at this point, that is has accumulated by adding all the stones smaller than it. \\n\\n\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n     long sum = mass; \\n        sort(asteroids.begin(), asteroids.end()); \\n        int n = asteroids.size(); \\n        int i = 0; \\n        while (i < n){\\n            if (asteroids[i] <= sum){sum += asteroids[i];}\\n            else return false;\\n            i += 1; \\n        }\\n        return true; \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n     long sum = mass; \\n        sort(asteroids.begin(), asteroids.end()); \\n        int n = asteroids.size(); \\n        int i = 0; \\n        while (i < n){\\n            if (asteroids[i] <= sum){sum += asteroids[i];}\\n            else return false;\\n            i += 1; \\n        }\\n        return true; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1663529,
                "title": "easy-solution-in-c",
                "content": "//smjh\\n\\n```\\nbool asteroidsDestroyed( long long int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i = 0;i<asteroids.size();i++){\\n           if(mass<asteroids[i])\\n               return false;\\n            \\n            mass += asteroids[i];\\n        }\\n        return true;\\n        \\n    }\\n```\\nDo upvote if you find it helpful",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool asteroidsDestroyed( long long int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i = 0;i<asteroids.size();i++){\\n           if(mass<asteroids[i])\\n               return false;\\n            \\n            mass += asteroids[i];\\n        }\\n        return true;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1662802,
                "title": "simple-c-solution-short-code-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n        // 3 5 9 19 21\\n        // 3 8 17 36 57\\n        // 13 18 27 56 62    \\n         vector<long long> v(ast.size());\\n        for(int i=0;i<ast.size();i++)\\n            v[i]=ast[i]*1LL;\\n            \\n        v[0]+=mass*1LL;\\n        for(int i=1;i<v.size();i++)\\n        { \\n          v[i]+=v[i-1]; \\n         \\n        }\\n        if(mass<ast[0])\\n          return 0;\\n        for(int i=1;i<ast.size();i++)\\n        {\\n            if(v[i-1]<ast[i])\\n                return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n        // 3 5 9 19 21\\n        // 3 8 17 36 57\\n        // 13 18 27 56 62    \\n         vector<long long> v(ast.size());\\n        for(int i=0;i<ast.size();i++)\\n            v[i]=ast[i]*1LL;\\n            \\n        v[0]+=mass*1LL;\\n        for(int i=1;i<v.size();i++)\\n        { \\n          v[i]+=v[i-1]; \\n         \\n        }\\n        if(mass<ast[0])\\n          return 0;\\n        for(int i=1;i<ast.size();i++)\\n        {\\n            if(v[i-1]<ast[i])\\n                return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1662678,
                "title": "easy-solution-in-cpp",
                "content": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n       sort(arr.begin(),arr.end());\\n        int n=arr.size();\\n        long long int sum=mass;\\n        for(int i=0;i<n;i++){\\n            if(arr[i]>sum){\\n                return false;\\n            }\\n            else\\n                sum+=arr[i];\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n       sort(arr.begin(),arr.end());\\n        int n=arr.size();\\n        long long int sum=mass;\\n        for(int i=0;i<n;i++){\\n            if(arr[i]>sum){\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1662601,
                "title": "c-easy-to-understand-with-explanation",
                "content": "```\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) \\n    {\\n        sort(asteroids.begin(),asteroids.end());\\n\\t\\t// We will arrange the asteroids in ascending order\\n        long long planetmass=mass;\\n\\t\\t// We will keep adding the mass of incoming asteroids\\n        int n=asteroids.size();\\n        for(int i=0;i<n;i++)\\n        {\\n\\t\\t// If the planet weigth is more as compare to  incoming asteroids then we will just add them  \\n           if(pmass>=asteroids[i])\\n           {\\n               pmass+=asteroids[i];\\n           }\\n\\t\\t   // If the weigth of asteroid is more than planet total weight than it is not possible to destroyed asteroid\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) \\n    {\\n        sort(asteroids.begin(),asteroids.end());\\n\\t\\t// We will arrange the asteroids in ascending order\\n        long long planetmass=mass;\\n\\t\\t// We will keep adding the mass of incoming asteroids\\n        int n=asteroids.size();\\n        for(int i=0;i<n;i++)\\n        {\\n\\t\\t// If the planet weigth is more as compare to  incoming asteroids then we will just add them  \\n           if(pmass>=asteroids[i])\\n           {\\n               pmass+=asteroids[i];\\n           }\\n\\t\\t   // If the weigth of asteroid is more than planet total weight than it is not possible to destroyed asteroid\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1662225,
                "title": "java-solution-using-sorting-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long sum=mass;\\n        for(int i=0;i<asteroids.length;i++){\\n            if(sum>=asteroids[i]){\\n                sum+=asteroids[i];\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long sum=mass;\\n        for(int i=0;i<asteroids.length;i++){\\n            if(sum>=asteroids[i]){\\n                sum+=asteroids[i];\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1662160,
                "title": "one-liner-ruby",
                "content": "Sort asteroids, check if each can collide with planet and update planet\\'s mass. \\n\\n```\\ndef asteroids_destroyed(mass, asteroids)\\n    asteroids.sort.all? {|a| mass >= a && (mass+= a)}\\nend",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "Sort asteroids, check if each can collide with planet and update planet\\'s mass. \\n\\n```\\ndef asteroids_destroyed(mass, asteroids)\\n    asteroids.sort.all? {|a| mass >= a && (mass+= a)}\\nend",
                "codeTag": "Python3"
            },
            {
                "id": 1661831,
                "title": "collide-all-the-asteroids-in-ascending-order-sorting-greedy",
                "content": "**TC=O(nlogn)**\\n**SC=O(1)**\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long m=mass;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            if(m<a[i]) return false;\\n            else\\n            {\\n                m+=a[i];\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long m=mass;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            if(m<a[i]) return false;\\n            else\\n            {\\n                m+=a[i];\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661628,
                "title": "not-a-medium-ques-basic-sorting-greedy-implementation-java",
                "content": "* **1. Runtime: 40 ms, faster than 60.00% of Java online submissions for Destroying Asteroids.**\\n* **2. Memory Usage: 129.5 MB, less than 20.00% of Java online submissions for Destroying Asteroids.**\\n\\n*In the given question, the confusing part was that we were given to choose the asteroids in any arbitrary order. We can just traverse one by one on asteroids array and return \"false\" if mass couldn\\'t destroy the asteroid. Similarly for the opposite scenario.*\\n\\n```java\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        \\n        Arrays.sort(asteroids);\\n        for(int i = 0; i<asteroids.length; i++)\\n        {\\n            if(mass > 10000000)\\n                return true;\\n            if(mass < asteroids[i])\\n                return false;\\n            mass += asteroids[i];\\n        }\\n        \\n        return true;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "class Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        \\n        Arrays.sort(asteroids);\\n        for(int i = 0; i<asteroids.length; i++)\\n        {\\n            if(mass > 10000000)\\n                return true;\\n            if(mass < asteroids[i])\\n                return false;\\n            mass += asteroids[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1661618,
                "title": "c-linq-one-liner-o-n-logn-time",
                "content": "```\\npublic class Solution \\n{\\n    public bool AsteroidsDestroyed(int mass, int[] a)\\n        => a.OrderBy(x => x)\\n            .Aggregate((long) mass, (planet, asteroid) => planet >= asteroid ? planet + asteroid : -1) > 0;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    public bool AsteroidsDestroyed(int mass, int[] a)\\n        => a.OrderBy(x => x)\\n            .Aggregate((long) mass, (planet, asteroid) => planet >= asteroid ? planet + asteroid : -1) > 0;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661603,
                "title": "c-solution",
                "content": "Simply Sort the elements so that the smallest mass aesteroid is hit first and if it is smaller than planet then it will be added to the mass of planet and do the same for the remaining array.\\nlong long is taken because of the aestroid\\'s mass being added to the planet.\\n```\\nbool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        long long m = mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++){\\n            if(asteroids[i]>m){\\n                return false;\\n            }\\n            m+=asteroids[i];\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\nbool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        long long m = mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++){\\n            if(asteroids[i]>m){\\n                return false;\\n            }\\n            m+=asteroids[i];\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1661551,
                "title": "c-greedy-sorting-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        // if small asteroid can destroy the planet than large \\n        // asteroid can also destroy the planet \\n        // thats the idea behind sorting\\n        \\n        sort(asteroids.begin(), asteroids.end());\\n        \\n        // edge case \\n        if(asteroids[0] > mass) return false;\\n       \\n        int n = asteroids.size();\\n        \\n        // mass of planet can go out of int range so we need to typecast it\\n        long long mss = mass;\\n        for (int i = 0; i < n; i++)\\n        {\\n            if (asteroids[i] <= mss)\\n                mss += asteroids[i];\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        // if small asteroid can destroy the planet than large \\n        // asteroid can also destroy the planet \\n        // thats the idea behind sorting\\n        \\n        sort(asteroids.begin(), asteroids.end());\\n        \\n        // edge case \\n        if(asteroids[0] > mass) return false;\\n       \\n        int n = asteroids.size();\\n        \\n        // mass of planet can go out of int range so we need to typecast it\\n        long long mss = mass;\\n        for (int i = 0; i < n; i++)\\n        {\\n            if (asteroids[i] <= mss)\\n                mss += asteroids[i];\\n            else\\n                return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1661395,
                "title": "javascript-2126-destroying-asteroids",
                "content": "\\n---\\n\\n**Weekly Contest 274**\\n  - **Q1** answer\\n    - https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/discuss/1661296/JavaScript-2124.-Check-if-All-A\\'s-Appears-Before-All-B\\'s\\n- **Q2** answer\\n  - https://leetcode.com/problems/number-of-laser-beams-in-a-bank/discuss/1661353/javascript-2125-number-of-laser-beams-in-a-bank\\n- **Q3** answer\\n  - https://leetcode.com/problems/destroying-asteroids/discuss/1661395/JavaScript-2126.-Destroying-Asteroids\\n  - **below**\\n    - In the contest, thought Q3 needs an optimal solution, but after 20 mins changed to below linear solution\\n      - 20 mins costed lot of ranks\\n- **Q4** answer - **C++ & JavaScript**\\n  - https://leetcode.com/problems/maximum-employees-to-be-invited-to-a-meeting/discuss/1664868/C%2B%2B-return-max-(-maxCycleLength-sumOfMaxCycle2ChainLengths-)\\n\\n---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar asteroidsDestroyed = function (mass, asteroids) {\\n    let n = asteroids.length;\\n    asteroids.sort((a, b) => a - b);\\n\\n    let asteroidDestroyed = 0;\\n    for (let asteroidMass of asteroids) {\\n        if (asteroidMass > mass) {\\n            break;\\n        }\\n        mass += asteroidMass;\\n        asteroidDestroyed++;\\n    }\\n    return asteroidDestroyed === n;\\n};\\n```\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar asteroidsDestroyed = function (mass, asteroids) {\\n    let n = asteroids.length;\\n    asteroids.sort((a, b) => a - b);\\n\\n    let asteroidDestroyed = 0;\\n    for (let asteroidMass of asteroids) {\\n        if (asteroidMass > mass) {\\n            break;\\n        }\\n        mass += asteroidMass;\\n        asteroidDestroyed++;\\n    }\\n    return asteroidDestroyed === n;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1661334,
                "title": "javascript-solution-no-sort",
                "content": "Runtime:\\xA0172 ms, faster than 100.00% of JavaScript online submissions\\n```var asteroidsDestroyed = function(mass, asteroids) {\\n   let total = asteroids.length;\\n   while (true){\\n     let cnt = 0;\\n     for (let i=0; i < asteroids.length; i++) {\\n       if (asteroids[i] !== undefined){\\n         if (asteroids[i] <= mass){\\n           mass += asteroids[i] ;\\n           asteroids[i] = undefined;\\n           cnt++;   \\n           total--;\\n           if (!total)\\n            return true;\\n         }  \\n       }     \\n     }\\n     if (!cnt)\\n       return false;\\n   }\\n};\\n```",
                "solutionTags": [],
                "code": "```var asteroidsDestroyed = function(mass, asteroids) {\\n   let total = asteroids.length;\\n   while (true){\\n     let cnt = 0;\\n     for (let i=0; i < asteroids.length; i++) {\\n       if (asteroids[i] !== undefined){\\n         if (asteroids[i] <= mass){\\n           mass += asteroids[i] ;\\n           asteroids[i] = undefined;\\n           cnt++;   \\n           total--;\\n           if (!total)\\n            return true;\\n         }  \\n       }     \\n     }\\n     if (!cnt)\\n       return false;\\n   }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1661298,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        int n=asteroids.size(),f=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(asteroids[i]<=mass)\\n                mass+=asteroids[i];\\n            else\\n            {\\n                f=1;\\n                break;\\n            }\\n        }\\n        if(f==1) return false;\\n        else return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        int n=asteroids.size(),f=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(asteroids[i]<=mass)\\n                mass+=asteroids[i];\\n            else\\n            {\\n                f=1;\\n                break;\\n            }\\n        }\\n        if(f==1) return false;\\n        else return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661279,
                "title": "2-solutions",
                "content": "1. O(nlogn) \\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end()); \\n        long long mass = m; \\n        for(int a: asteroids){\\n            if(mass<a)\\n                return 0;\\n            mass += a; \\n        }\\n        return true; \\n    }\\n};\\n```\\n2. O(n)\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        vector<int> count(1e5+1,0);\\n        long long m = mass; \\n        for(int a: asteroids) \\n            count[a]++;\\n        for(int i=1;i<1e5+1;i++){\\n            if(count[i]){\\n                if(m<i)\\n                    return 0;\\n                m += 1LL * count[i]*i;\\n            }\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end()); \\n        long long mass = m; \\n        for(int a: asteroids){\\n            if(mass<a)\\n                return 0;\\n            mass += a; \\n        }\\n        return true; \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        vector<int> count(1e5+1,0);\\n        long long m = mass; \\n        for(int a: asteroids) \\n            count[a]++;\\n        for(int i=1;i<1e5+1;i++){\\n            if(count[i]){\\n                if(m<i)\\n                    return 0;\\n                m += 1LL * count[i]*i;\\n            }\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661225,
                "title": "c-easy-solution-using-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long int mass, vector<int>& asteroids) {\\n        long long  maximum = INT_MIN;\\n        if(asteroids.size() == 1){\\n            return asteroids[0] <= mass;\\n        }\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i = 0;i < asteroids.size() - 1;i++){\\n            mass += asteroids[i];\\n            if(mass < asteroids[i + 1]){\\n                return false;\\n            }\\n        }\\n        for(int i = 0;i < asteroids.size();i++){\\n            if(asteroids[i] != maximum){\\n                mass+=asteroids[i];\\n            }\\n        }\\n        if(mass < maximum){\\n            return false;\\n        }\\n        else{\\n            return true;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long int mass, vector<int>& asteroids) {\\n        long long  maximum = INT_MIN;\\n        if(asteroids.size() == 1){\\n            return asteroids[0] <= mass;\\n        }\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i = 0;i < asteroids.size() - 1;i++){\\n            mass += asteroids[i];\\n            if(mass < asteroids[i + 1]){\\n                return false;\\n            }\\n        }\\n        for(int i = 0;i < asteroids.size();i++){\\n            if(asteroids[i] != maximum){\\n                mass+=asteroids[i];\\n            }\\n        }\\n        if(mass < maximum){\\n            return false;\\n        }\\n        else{\\n            return true;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661168,
                "title": "javascript-greedy-226ms",
                "content": "Main idea: optimal arrangement is to phase smaller one each time.\\n```\\nconst asteroidsDestroyed = (mass, a) => {\\n    a.sort((x, y) => x - y);\\n    let n = a.length, sum = mass;\\n    for (let i = 0; i < n; i++) {\\n        if (sum >= a[i]) {\\n            sum += a[i];\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nconst asteroidsDestroyed = (mass, a) => {\\n    a.sort((x, y) => x - y);\\n    let n = a.length, sum = mass;\\n    for (let i = 0; i < n; i++) {\\n        if (sum >= a[i]) {\\n            sum += a[i];\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1661157,
                "title": "java-greedy-sorting-why-greedy-works-here",
                "content": "\"You can arrange for the planet to collide with the asteroids **in any arbitrary order**.\"\\nFirst we try colliding with the smallest asteroid to increase the chances of survival of planet.\\n\\n\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] a) {\\n        Arrays.sort(a);\\n        //  mass of the planet is smaller than the smallest asteroid\\n        if(mass < a[0]) return false;\\n        long curr_planet_mass = mass;\\n        for (int i = 0; i < a.length; i++) {\\n            if (curr_planet_mass >= a[i]) {\\n                curr_planet_mass += a[i];\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] a) {\\n        Arrays.sort(a);\\n        //  mass of the planet is smaller than the smallest asteroid\\n        if(mass < a[0]) return false;\\n        long curr_planet_mass = mass;\\n        for (int i = 0; i < a.length; i++) {\\n            if (curr_planet_mass >= a[i]) {\\n                curr_planet_mass += a[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1661138,
                "title": "python3-simple-by-sorting",
                "content": "Arrange the asteroids in ascending order and check if the mass is greater than or equal to each of the mass of asteroids\\n\\nIf the mass of planet is less than any of the mass of asteroids then it will get destroyed, and we have to return False else return True\\n\\n\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        for i in range(len(asteroids)):\\n            if mass>=asteroids[i]:\\n                mass+=asteroids[i]\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        for i in range(len(asteroids)):\\n            if mass>=asteroids[i]:\\n                mass+=asteroids[i]\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661129,
                "title": "easy-to-understand-java-n-python-solution",
                "content": "**Java**\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long res = mass;\\n        Arrays.sort(asteroids);\\n        \\n        for(int val:asteroids){\\n            if(val > res) {\\n              return false;  \\n            }\\n            else res += val;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```\\n**Python**\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        for val in asteroids:\\n            if val > mass:\\n                return False\\n            mass += val\\n        return True\\n```\\n* **Time Complexity :-** BigO(NlogN) \\n\\n* **Space Complexity :-** BigO(N) using sorting Space",
                "solutionTags": [
                    "Java",
                    "Python"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long res = mass;\\n        Arrays.sort(asteroids);\\n        \\n        for(int val:asteroids){\\n            if(val > res) {\\n              return false;  \\n            }\\n            else res += val;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        for val in asteroids:\\n            if val > mass:\\n                return False\\n            mass += val\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661069,
                "title": "python-5-liner-and-explanation",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        for i in asteroids:\\n            if i > mass: return False\\n            mass += i\\n        return True\\n```\\nWe start by looking at the best case scenario for the planet. The planet will be hit with the smallest asteroids available, and the asteroids progressively get bigger as the planet increases in size as well by absorbing the increasingly sized asteroids. If at any time the next asteroid is too big for the planet, we return False. This is because we have chosen the best possible scenario for the planet. If the asteroid had come any time sooner, the planet would have gotten destroyed even more since it was smaller previously.",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        for i in asteroids:\\n            if i > mass: return False\\n            mass += i\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661047,
                "title": "simple-java-solution-with-sorting",
                "content": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] a) {\\n        long sum=mass;\\n        Arrays.sort(a);\\n        \\n        for(int n:a){\\n            if(n>sum) {\\n              return false;  \\n            }\\n            else sum+=n;\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] a) {\\n        long sum=mass;\\n        Arrays.sort(a);\\n        \\n        for(int n:a){\\n            if(n>sum) {\\n              return false;  \\n            }\\n            else sum+=n;\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661042,
                "title": "java-solution-with-explanation",
                "content": "**Intuition :**\\n    Firstly by looking at the question and the examples, we can deduce that for a mass m we need to check the next smaller element in the array so that we can dissolve that asteroid in the planet. Now three cases arise:\\n\\n```\\nCase 1: If all the asteroids are less than the mass of the planet \\n        Solution : If this is the case then we can simply return true;\\n        e.g mass = 10 asteroid = [1,2,3,4,5]\\n            \\n    Case 2: If all the asteroids are greater than the mass of the planet\\n        Solution: If this is the case then we can simply return false because there is no asteroid that can be dissolved in the planet\\n            e.g. mass = 2 asteroid = [3,4,5,6]\\n            \\n    Case 3: If none of the above cases come then we have to find the next smaller asteroid that can be dissolved in the planet until there is no asteroid left\\n```\\n\\n**Approach**\\n\\nIf the look at the examples in the question we need asteroids less than mass of the planet in a descending order and asteroids that are greater than the mass of the planet in a ascending order.\\n\\nHere I have 2 PriorityQueues for the same i.e smaller and greater\\n\\tsmaller will have the all the asteroids that are less than the initial mass of the planet in a descending order\\n\\tand the greater will have all the asteroids that are greater than the initial mass of the planet in a ascending order\\n\\nNow we have to iterate the queues until one of them is empty and check the following condition\\n1. if the current mass of the planet is greater than equal to first greater asteroid then dissolve that asteroid in the planet\\n2. else dissolve the next smaller asteroid in the planet\\n\\n\\n\\n**Code :**\\n\\n```\\nclass Solution {\\n            \\n    public boolean asteroidsDestroyed(int m, int[] asteroids) {\\n        \\n        PriorityQueue<Integer> smaller = new PriorityQueue<>((a,b) -> b - a);\\n        PriorityQueue<Integer> greater = new PriorityQueue<>();\\n        long mass = m;\\n        for(int i : asteroids){\\n            if(i <= mass) smaller.add(i);\\n            else greater.add(i);\\n        }\\n        \\n        if(greater.isEmpty()) return true;\\n        if(smaller.isEmpty()) return false;\\n        \\n        while(!smaller.isEmpty() && !greater.isEmpty()){\\n            if(mass >= greater.peek()){\\n                mass += greater.poll();\\n            }else {\\n                mass += smaller.poll();\\n            }\\n        }\\n        \\n        if(greater.isEmpty()) return true;\\n        \\n        while(!greater.isEmpty()){\\n            if(mass < greater.peek()) return false;\\n            mass += greater.poll();\\n        }\\n        \\n        return true;\\n    }\\n}\\n```\\n\\nTime Complexity : O(n logn )\\n\\n***Please upvote if you like the solution***",
                "solutionTags": [],
                "code": "```\\nCase 1: If all the asteroids are less than the mass of the planet \\n        Solution : If this is the case then we can simply return true;\\n        e.g mass = 10 asteroid = [1,2,3,4,5]\\n            \\n    Case 2: If all the asteroids are greater than the mass of the planet\\n        Solution: If this is the case then we can simply return false because there is no asteroid that can be dissolved in the planet\\n            e.g. mass = 2 asteroid = [3,4,5,6]\\n            \\n    Case 3: If none of the above cases come then we have to find the next smaller asteroid that can be dissolved in the planet until there is no asteroid left\\n```\n```\\nclass Solution {\\n            \\n    public boolean asteroidsDestroyed(int m, int[] asteroids) {\\n        \\n        PriorityQueue<Integer> smaller = new PriorityQueue<>((a,b) -> b - a);\\n        PriorityQueue<Integer> greater = new PriorityQueue<>();\\n        long mass = m;\\n        for(int i : asteroids){\\n            if(i <= mass) smaller.add(i);\\n            else greater.add(i);\\n        }\\n        \\n        if(greater.isEmpty()) return true;\\n        if(smaller.isEmpty()) return false;\\n        \\n        while(!smaller.isEmpty() && !greater.isEmpty()){\\n            if(mass >= greater.peek()){\\n                mass += greater.poll();\\n            }else {\\n                mass += smaller.poll();\\n            }\\n        }\\n        \\n        if(greater.isEmpty()) return true;\\n        \\n        while(!greater.isEmpty()){\\n            if(mass < greater.peek()) return false;\\n            mass += greater.poll();\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661035,
                "title": "swift",
                "content": "```\\n\\nclass Solution {\\n    func asteroidsDestroyed(_ mass: Int, _ asteroids: [Int]) -> Bool {\\n        var s = asteroids.sorted()\\n        var m = mass\\n        for i in 0..<s.count {\\n            if m >= s[i] {\\n                m = m + s[i]\\n            } else {\\n                return false\\n            }\\n        }\\n        \\n        return true\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    func asteroidsDestroyed(_ mass: Int, _ asteroids: [Int]) -> Bool {\\n        var s = asteroids.sorted()\\n        var m = mass\\n        for i in 0..<s.count {\\n            if m >= s[i] {\\n                m = m + s[i]\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1661001,
                "title": "python3-greedy",
                "content": "Please check out this [commit](https://github.com/gaosanyong/leetcode/commit/18f88320ffb2c2a06e86fad46d82ebd17dadad64) for solutions of weekly 274. \\n\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        for x in sorted(asteroids): \\n            if mass < x: return False \\n            mass += x\\n        return True \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        for x in sorted(asteroids): \\n            if mass < x: return False \\n            mass += x\\n        return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1660999,
                "title": "basic-sorting",
                "content": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for(int i = 0; i < asteroids.length; ++i){\\n            int astMass = asteroids[i];\\n            if(astMass > mass) {\\n                return false;\\n            }\\n            mass += astMass;\\n            if(mass < 0) {      // checks integer overflow and return early\\n                return true;    \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for(int i = 0; i < asteroids.length; ++i){\\n            int astMass = asteroids[i];\\n            if(astMass > mass) {\\n                return false;\\n            }\\n            mass += astMass;\\n            if(mass < 0) {      // checks integer overflow and return early\\n                return true;    \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1660969,
                "title": "c-solution-using-multiset",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& nums)\\n    {\\n        int n=nums.size();\\n        multiset<long long>s(nums.begin(),nums.end());\\n        s.insert(INT_MAX); // boundary condition \\n        s.insert(INT_MIN); // boundary condition\\n        long long mass=m;\\n        while(s.size())\\n        {\\n            auto it=s.lower_bound(mass);\\n            if(*it==INT_MAX) return true;\\n            if(*it<=mass)\\n            {\\n                mass+=*it;\\n            }\\n            else\\n            {\\n                it--;\\n                if(*it==INT_MIN)\\n                {\\n                    return false;\\n                }\\n                else\\n                {\\n                    mass+=*it;\\n                }\\n            }\\n            s.erase(it);\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& nums)\\n    {\\n        int n=nums.size();\\n        multiset<long long>s(nums.begin(),nums.end());\\n        s.insert(INT_MAX); // boundary condition \\n        s.insert(INT_MIN); // boundary condition\\n        long long mass=m;\\n        while(s.size())\\n        {\\n            auto it=s.lower_bound(mass);\\n            if(*it==INT_MAX) return true;\\n            if(*it<=mass)\\n            {\\n                mass+=*it;\\n            }\\n            else\\n            {\\n                it--;\\n                if(*it==INT_MIN)\\n                {\\n                    return false;\\n                }\\n                else\\n                {\\n                    mass+=*it;\\n                }\\n            }\\n            s.erase(it);\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1660959,
                "title": "c-easy-sorting-based-algorithm-o-nlogn",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long temp = mass;\\n        for(int i=0; i<asteroids.size(); i++){\\n            if(temp >= asteroids[i])\\n                temp += asteroids[i];\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long temp = mass;\\n        for(int i=0; i<asteroids.size(); i++){\\n            if(temp >= asteroids[i])\\n                temp += asteroids[i];\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1660950,
                "title": "c-python-java-javascript-go-kotlin-ruby-sort-and-check-accumulation",
                "content": "## C++\\n```\\nbool asteroidsDestroyed(int mass, vector<int>& x) {\\n\\tlong long y = mass;\\n\\tsort(x.begin(), x.end());\\n\\tfor (int i = 0; i < x.size(); i++) {\\n\\t\\tif (y < x[i])\\n\\t\\t\\treturn false;\\n\\t\\ty += x[i];\\n\\t}\\n\\treturn true;\\n```\\n\\n## Python\\n```\\ndef asteroidsDestroyed(self, mass: int, x: List[int]) -> bool:\\n\\tx.sort()\\n\\tfor i in range(len(x)):\\n\\t\\tif mass < x[i]:\\n\\t\\t\\treturn False\\n\\t\\tmass += x[i]\\n\\treturn True\\n```\\n\\n## Java\\n```\\npublic boolean asteroidsDestroyed(int mass, int[] x) {\\n\\tArrays.sort(x);\\n\\tlong y = mass;\\n\\tfor (int n : x) {\\n\\t\\tif (y < n)\\n\\t\\t\\treturn false;\\n\\t\\ty += n;\\n\\t}\\n\\treturn true;\\n}\\n```\\n\\n## Javascript\\n```\\nvar asteroidsDestroyed = function(mass, x) {\\n    x.sort(function(a, b) { return a - b });\\n    for (let i = 0; i < x.length; i++) {\\n        if (mass < x[i])\\n            return false;\\n        mass += x[i];\\n    }\\n    return true;\\n};\\n```\\n\\n## Go\\n```\\nfunc asteroidsDestroyed(mass int, x []int) bool {\\n    sort.Ints(x[:])\\n    var y int64 = int64(mass)\\n    var n int64\\n    for _, num := range x {\\n        n = int64(num)\\n        if (y < n) {\\n            return false\\n        }\\n        y += n\\n    }\\n    return true\\n}\\n```\\n\\n## Kotlin\\n```\\nclass Solution {\\n    fun asteroidsDestroyed(mass: Int, x: IntArray): Boolean {\\n        x.sort()\\n        var y : Long = mass.toLong()\\n        for (n in x) {\\n            if (y < n) {\\n                return false\\n            }\\n            y += n\\n        }\\n        return true\\n    }\\n}\\n```\\n\\n## Ruby\\n```\\ndef asteroids_destroyed(mass, asteroids)\\n    x = asteroids.sort\\n    x.each do |n|\\n        if (mass < n)\\n            return false\\n        end\\n        mass += n\\n    end\\n    return true\\nend\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Ruby",
                    "Go",
                    "Kotlin"
                ],
                "code": "```\\nbool asteroidsDestroyed(int mass, vector<int>& x) {\\n\\tlong long y = mass;\\n\\tsort(x.begin(), x.end());\\n\\tfor (int i = 0; i < x.size(); i++) {\\n\\t\\tif (y < x[i])\\n\\t\\t\\treturn false;\\n\\t\\ty += x[i];\\n\\t}\\n\\treturn true;\\n```\n```\\ndef asteroidsDestroyed(self, mass: int, x: List[int]) -> bool:\\n\\tx.sort()\\n\\tfor i in range(len(x)):\\n\\t\\tif mass < x[i]:\\n\\t\\t\\treturn False\\n\\t\\tmass += x[i]\\n\\treturn True\\n```\n```\\npublic boolean asteroidsDestroyed(int mass, int[] x) {\\n\\tArrays.sort(x);\\n\\tlong y = mass;\\n\\tfor (int n : x) {\\n\\t\\tif (y < n)\\n\\t\\t\\treturn false;\\n\\t\\ty += n;\\n\\t}\\n\\treturn true;\\n}\\n```\n```\\nvar asteroidsDestroyed = function(mass, x) {\\n    x.sort(function(a, b) { return a - b });\\n    for (let i = 0; i < x.length; i++) {\\n        if (mass < x[i])\\n            return false;\\n        mass += x[i];\\n    }\\n    return true;\\n};\\n```\n```\\nfunc asteroidsDestroyed(mass int, x []int) bool {\\n    sort.Ints(x[:])\\n    var y int64 = int64(mass)\\n    var n int64\\n    for _, num := range x {\\n        n = int64(num)\\n        if (y < n) {\\n            return false\\n        }\\n        y += n\\n    }\\n    return true\\n}\\n```\n```\\nclass Solution {\\n    fun asteroidsDestroyed(mass: Int, x: IntArray): Boolean {\\n        x.sort()\\n        var y : Long = mass.toLong()\\n        for (n in x) {\\n            if (y < n) {\\n                return false\\n            }\\n            y += n\\n        }\\n        return true\\n    }\\n}\\n```\n```\\ndef asteroids_destroyed(mass, asteroids)\\n    x = asteroids.sort\\n    x.each do |n|\\n        if (mass < n)\\n            return false\\n        end\\n        mass += n\\n    end\\n    return true\\nend\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069857,
                "title": "greedy-approach-with-sort",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing Greedy algorithm, we first sort the given array in ascending order. We do this so we can start adding the smallest asteroid in the planet. If the smallest asteroid is too big then we return false. If it isn\\'t we keep adding the mass of the asteroid to current planet mass until we go over all the asteroids or we found an asteroid large enough to destroy the current planet mass.\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(logn)\\n\\n# Code\\n```\\nclass Solution {\\n    fun asteroidsDestroyed(mass: Int, asteroids: IntArray): Boolean {\\n        \\n        var cur = mass.toLong()\\n        asteroids.sort()\\n        for(a in asteroids){\\n            if(cur < a){\\n                return false\\n            }\\n            cur += a\\n        }\\n\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Greedy",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\n    fun asteroidsDestroyed(mass: Int, asteroids: IntArray): Boolean {\\n        \\n        var cur = mass.toLong()\\n        asteroids.sort()\\n        for(a in asteroids){\\n            if(cur < a){\\n                return false\\n            }\\n            cur += a\\n        }\\n\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061370,
                "title": "c-using-std-sort-too-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long mass, vector<int>& asteroids) {\\n        std::sort(asteroids.begin(), asteroids.end());\\n\\n        for (const int amass : asteroids) {\\n            if (mass < amass) {\\n                return false;\\n            }\\n            mass += amass;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long mass, vector<int>& asteroids) {\\n        std::sort(asteroids.begin(), asteroids.end());\\n\\n        for (const int amass : asteroids) {\\n            if (mass < amass) {\\n                return false;\\n            }\\n            mass += amass;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4060347,
                "title": "java-simple-o-n-solution",
                "content": "\\n# Complexity\\n- Time complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long m = mass;\\n        for (int a : asteroids) {\\n            if (m >= a) m += a;\\n            else return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long m = mass;\\n        for (int a : asteroids) {\\n            if (m >= a) m += a;\\n            else return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059916,
                "title": "python-sort-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n\\n        for asteroid in asteroids:\\n            if asteroid <= mass:\\n                mass += asteroid\\n            else:\\n                return False\\n\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n\\n        for asteroid in asteroids:\\n            if asteroid <= mass:\\n                mass += asteroid\\n            else:\\n                return False\\n\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054891,
                "title": "very-easy-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, n: List[int]) -> bool:\\n        n.sort()\\n        for i in n:\\n            if mass < i:\\n                return False\\n            mass+=i\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, n: List[int]) -> bool:\\n        n.sort()\\n        for i in n:\\n            if mass < i:\\n                return False\\n            mass+=i\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044564,
                "title": "six-lines",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def asteroidsDestroyed(self, mass, asteroids):\\n        for i in sorted(asteroids):\\n            if mass >= i:\\n                mass += i\\n\\n            else:\\n                return False\\n\\n        return True\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def asteroidsDestroyed(self, mass, asteroids):\\n        for i in sorted(asteroids):\\n            if mass >= i:\\n                mass += i\\n\\n            else:\\n                return False\\n\\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012629,
                "title": "c-simple-short-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) \\n    {\\n        sort(asteroids.begin(), asteroids.end());\\n        long updated_mass = mass;\\n\\n        for(int i=0; i<asteroids.size(); i++)\\n        {\\n            if(updated_mass >= asteroids[i]) updated_mass += asteroids[i];\\n            else return false;\\n        }    \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) \\n    {\\n        sort(asteroids.begin(), asteroids.end());\\n        long updated_mass = mass;\\n\\n        for(int i=0; i<asteroids.size(); i++)\\n        {\\n            if(updated_mass >= asteroids[i]) updated_mass += asteroids[i];\\n            else return false;\\n        }    \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999979,
                "title": "very-easy-approach-in-java-plss-vote-me-up",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for(int i=0;i<asteroids.length;i++){\\n            if(asteroids[i]>mass){\\n                return false;\\n            }\\n            else if(mass>=asteroids[asteroids.length-1]){\\n                return true;\\n            }\\n            else{\\n                mass+=asteroids[i];\\n            }\\n\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        for(int i=0;i<asteroids.length;i++){\\n            if(asteroids[i]>mass){\\n                return false;\\n            }\\n            else if(mass>=asteroids[asteroids.length-1]){\\n                return true;\\n            }\\n            else{\\n                mass+=asteroids[i];\\n            }\\n\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985366,
                "title": "beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction asteroidsDestroyed(mass: number, asteroids: number[]): boolean {\\n  let counter = 0;\\n\\n  asteroids = asteroids.sort((a, b) => a - b);\\n\\n  for (let i = 0; i < asteroids.length; i++) {\\n    if (mass >= asteroids[i]) {\\n      counter++;\\n      mass += asteroids[i];\\n      continue;\\n    }\\n\\n    break;\\n  }\\n\\n  if (counter === asteroids.length) return true;\\n\\n  return false;\\n}\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nfunction asteroidsDestroyed(mass: number, asteroids: number[]): boolean {\\n  let counter = 0;\\n\\n  asteroids = asteroids.sort((a, b) => a - b);\\n\\n  for (let i = 0; i < asteroids.length; i++) {\\n    if (mass >= asteroids[i]) {\\n      counter++;\\n      mass += asteroids[i];\\n      continue;\\n    }\\n\\n    break;\\n  }\\n\\n  if (counter === asteroids.length) return true;\\n\\n  return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3980386,
                "title": "c-sorting-very-easy-approach-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(), asteroids.end());\\n        for(int i=0;i<asteroids.size();i++){\\n            if(mass>=asteroids[i]){\\n                mass+=asteroids[i];\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(), asteroids.end());\\n        for(int i=0;i<asteroids.size();i++){\\n            if(mass>=asteroids[i]){\\n                mass+=asteroids[i];\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949595,
                "title": "simple-greedy-approch-beats-88-of-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGreedy Approch \\n\\n# Complexity\\n- Time complexity:\\n- o(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        \\n        sort(ast.begin(), ast.end()); \\n       long long int mt= mass ; \\n        for( int i =0 ; i < ast.size(); i++)\\n        {\\n            if( mt >= ast[i])\\n            {\\n                // destroy \\n                mt += ast[i]; \\n            }\\n            else{\\n                return false ;\\n            }\\n        }\\n        return true ; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        \\n        sort(ast.begin(), ast.end()); \\n       long long int mt= mass ; \\n        for( int i =0 ; i < ast.size(); i++)\\n        {\\n            if( mt >= ast[i])\\n            {\\n                // destroy \\n                mt += ast[i]; \\n            }\\n            else{\\n                return false ;\\n            }\\n        }\\n        return true ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942290,
                "title": "java-very-easy-using-lowerkey-function-in-treemap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        TreeMap<Long,Long>map=new TreeMap<>();\\n        for(int v:asteroids)\\n        {\\n            map.put((long)v,(long)map.getOrDefault((long)v,(long)0)+1);\\n        }\\n        long sum=mass;\\n        while(map.size()>0)\\n        {\\n            Long lower=map.lowerKey(sum+1);\\n            if(lower!=null)\\n            {\\n                sum=sum+lower;\\n                if(map.get(lower)==1)\\n                {\\n                    map.remove(lower);\\n                }\\n                else\\n                {\\n                    map.put(lower,map.get(lower)-1);\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        TreeMap<Long,Long>map=new TreeMap<>();\\n        for(int v:asteroids)\\n        {\\n            map.put((long)v,(long)map.getOrDefault((long)v,(long)0)+1);\\n        }\\n        long sum=mass;\\n        while(map.size()>0)\\n        {\\n            Long lower=map.lowerKey(sum+1);\\n            if(lower!=null)\\n            {\\n                sum=sum+lower;\\n                if(map.get(lower)==1)\\n                {\\n                    map.remove(lower);\\n                }\\n                else\\n                {\\n                    map.put(lower,map.get(lower)-1);\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928755,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf the planet hits the asteroids with the least mass first and the mass of the planet is greater then that of the astroid then the mass of the planet will increase and if the mass of the asteroid with the least mass out of all the asteroids in greater than the planet then the planet won\\'t be able to destroy the asteroids.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can simply sort the asteroids array in sorted order and the keep on checking the mass with the asteroid with the least mass out of the remaining ones and if the mass of the asteroid is less we can add it with the mass of the planet.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long sum=mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            if(sum>=asteroids[i])\\n            {\\n                sum=sum+asteroids[i];\\n                if(sum>=Integer.MAX_VALUE)\\n                {\\n                    return true;\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long sum=mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            if(sum>=asteroids[i])\\n            {\\n                sum=sum+asteroids[i];\\n                if(sum>=Integer.MAX_VALUE)\\n                {\\n                    return true;\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3910004,
                "title": "beats-100-in-time-very-easy-greedy-c-beats-92-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe first thought that comes to the mind is to send asteroids in an ascending order so that if by any chance asteroids of bigger mass occurs it occurs at the end when the mass value is at its biggest.\\nHence we greedily sort the array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The code starts by checking if the size of the `asteroids` vector is greater than 100,000. If it is, the code immediately returns `true`. This indicates that if the number of asteroids is large enough, the code doesn\\'t perform further calculations and simply returns `true`.\\n\\n2. Next, the code sorts the `asteroids` vector in ascending order using the `sort` function.\\n\\n3. A `long long` variable named `sum` is initialized with the value of `mass`. It seems that `mass` is a variable that holds a pre-defined mass value.\\n\\n4. A loop iterates over each element in the `asteroids` vector using the range-based `for` loop.\\n\\n5. Inside the loop, the code checks a few conditions:\\n   - If the current value of `sum` is greater than or equal to the current asteroid\\'s mass (`it`), then the code increases the value of `sum` by adding the asteroid\\'s mass to it.\\n   - Else if the current value of `sum` is greater than 100,000, the code returns `true`. This indicates that if the sum of masses exceeds 100,000 at any point, the code returns `true`.\\n   - If none of the above conditions are met, the code returns `false`.\\n\\n6. After the loop, the code returns `true`. This indicates that if the loop completes without returning `true` based on the conditions mentioned above, the code returns `true`.\\n\\nOverall, the code seems to be dealing with a scenario where asteroids have masses, and the conditions are being checked to determine whether the sum of masses exceeds a certain threshold value (100,000). If the number of asteroids is large (more than 100,000), it immediately returns `true`. If the sum of masses exceeds 100,000 at any point during the loop, it also returns `true`. If none of these conditions are met, it returns `true` after the loop.\\n\\nPlease note that without additional context and the definition of the `mass` variable, it\\'s difficult to provide a complete understanding of the code\\'s purpose.\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1);\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        if(asteroids.size()>100000) return true;\\n        sort(asteroids.begin(), asteroids.end());\\n        long long sum = mass;\\n        for(auto it: asteroids){\\n            if(sum >= it){\\n                sum += it;\\n            }\\n            else if(sum > 100000) return true;\\n            else\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        if(asteroids.size()>100000) return true;\\n        sort(asteroids.begin(), asteroids.end());\\n        long long sum = mass;\\n        for(auto it: asteroids){\\n            if(sum >= it){\\n                sum += it;\\n            }\\n            else if(sum > 100000) return true;\\n            else\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3901492,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long longMass = (long)mass;\\n        for (int i = 0; i < asteroids.length; i++) {\\n            long longAsteroid = (long)asteroids[i];\\n            if (longMass >= longAsteroid) {\\n                longMass += longAsteroid;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long longMass = (long)mass;\\n        for (int i = 0; i < asteroids.length; i++) {\\n            long longAsteroid = (long)asteroids[i];\\n            if (longMass >= longAsteroid) {\\n                longMass += longAsteroid;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894206,
                "title": "c-easy-greedy-algorithm",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long  long total=mass;\\n\\n        for(int i=0;i<asteroids.size();i++){\\n// \\uD83D\\uDC49 If mass of asteroid is greater \\uD83C\\uDF20 than planet than return false planet is no more\\uD83D\\uDC94\\n            if(asteroids[i]>total){\\n                return false;\\n            }\\n// \\uD83D\\uDC49 If asteroid mass is less than planet will absorb the mass of asteroid.\\n            else{\\n                total+=asteroids[i];\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/98d631b8-3758-4e22-8f29-dda38f944f4c_1691745936.4522512.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long  long total=mass;\\n\\n        for(int i=0;i<asteroids.size();i++){\\n// \\uD83D\\uDC49 If mass of asteroid is greater \\uD83C\\uDF20 than planet than return false planet is no more\\uD83D\\uDC94\\n            if(asteroids[i]>total){\\n                return false;\\n            }\\n// \\uD83D\\uDC49 If asteroid mass is less than planet will absorb the mass of asteroid.\\n            else{\\n                total+=asteroids[i];\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3882940,
                "title": "java-beats-92-in-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nFirst, Sort te array\\n2nd, If at any point asteroids[i] > mass means we cannot destroy aseroid as all others asteroids greater then i index are also greater than mass.\\nSiimply return false;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long t = mass;\\n        Arrays.sort(asteroids);\\n        for(int i=0;i<asteroids.length;i++){\\n            if(t<asteroids[i]) return false;\\n            t+=asteroids[i];\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long t = mass;\\n        Arrays.sort(asteroids);\\n        for(int i=0;i<asteroids.length;i++){\\n            if(t<asteroids[i]) return false;\\n            t+=asteroids[i];\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855965,
                "title": "python-99-55-sort-binary-search",
                "content": "# Intuition\\n\\nFrom the description: \"You can arrange for the planet to collide with the asteroids in any **arbitrary** order\". Since the order doesn\\'t matter, we are free to rearrange it in any way we like, so we sort, and divide the list into two halves.\\n\\n# Approach\\n\\nSort `asteroids`, and `bisect_left` to find the split point in the sorted array. You know for sure the lefthand side is `<` you, and the right side is `>=`. From there, pass through the array in reverse order, adding up the elements along the way. We can bail early if `mass >= max(asteroids)`. Otherwise, once we\\'ve accumulated all the mass from the left, go through the right side from `bound` to `len(asteroids)` and accumulate or bail if `mass < asteroid[i]`.\\n\\n# Complexity\\n\\n- Time complexity: O(NLogN) (sort dominates the time complexity)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nimport bisect\\n# Time: O(N Log N), b/c/ sort O(NlogN) and O(N) pass\\n# Space: O(1) \\nclass Solution:\\n    def asteroidsDestroyed(self, mass, asteroids):\\n        N = len(asteroids)\\n        \\n        # sort in ascending order\\n        asteroids.sort()\\n        \\n        # everything to the left of bound is < mass\\n        # everything from bound to N is >= mass\\n        bound = bisect.bisect_left(asteroids, mass)\\n        \\n        # all must be > us, no way to win\\n        if bound == 0 and asteroids[0] > mass: return False\\n\\n        # all must be < us, definitely won\\n        if bound == N: return True\\n\\n        largest_asteroid = asteroids[-1]\\n\\n        # now in reverse order, pick up all the mass\\n        # bail early if we already beat the max mass\\n        # worst case this will go through the whole array\\n        for i in range(bound-1, -1, -1):\\n            mass += asteroids[i]\\n            if mass >= largest_asteroid:\\n                return True # no need to keep going, we definitely won!\\n        \\n        # now, test against all remaining\\n        for i in range(bound, N):\\n            if mass < asteroids[i]:\\n                return False\\n            else:\\n                mass += asteroids[i]\\n\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport bisect\\n# Time: O(N Log N), b/c/ sort O(NlogN) and O(N) pass\\n# Space: O(1) \\nclass Solution:\\n    def asteroidsDestroyed(self, mass, asteroids):\\n        N = len(asteroids)\\n        \\n        # sort in ascending order\\n        asteroids.sort()\\n        \\n        # everything to the left of bound is < mass\\n        # everything from bound to N is >= mass\\n        bound = bisect.bisect_left(asteroids, mass)\\n        \\n        # all must be > us, no way to win\\n        if bound == 0 and asteroids[0] > mass: return False\\n\\n        # all must be < us, definitely won\\n        if bound == N: return True\\n\\n        largest_asteroid = asteroids[-1]\\n\\n        # now in reverse order, pick up all the mass\\n        # bail early if we already beat the max mass\\n        # worst case this will go through the whole array\\n        for i in range(bound-1, -1, -1):\\n            mass += asteroids[i]\\n            if mass >= largest_asteroid:\\n                return True # no need to keep going, we definitely won!\\n        \\n        # now, test against all remaining\\n        for i in range(bound, N):\\n            if mass < asteroids[i]:\\n                return False\\n            else:\\n                mass += asteroids[i]\\n\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844289,
                "title": "c-greedy-priority-queue",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool AsteroidsDestroyed(int mass, int[] asteroids) {\\n        var queue = new PriorityQueue<int, int>();\\n        foreach(int asteroid in asteroids)\\n        {\\n            queue.Enqueue(asteroid, asteroid);\\n        }\\n\\n        long currentMass = mass;\\n\\n        while(queue.Count != 0 && queue.Peek() <= currentMass)\\n        {\\n            currentMass += queue.Dequeue();\\n        }\\n\\n        return queue.Count == 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool AsteroidsDestroyed(int mass, int[] asteroids) {\\n        var queue = new PriorityQueue<int, int>();\\n        foreach(int asteroid in asteroids)\\n        {\\n            queue.Enqueue(asteroid, asteroid);\\n        }\\n\\n        long currentMass = mass;\\n\\n        while(queue.Count != 0 && queue.Peek() <= currentMass)\\n        {\\n            currentMass += queue.Dequeue();\\n        }\\n\\n        return queue.Count == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844288,
                "title": "c-greedy-priority-queue",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool AsteroidsDestroyed(int mass, int[] asteroids) {\\n        var queue = new PriorityQueue<int, int>();\\n        foreach(int asteroid in asteroids)\\n        {\\n            queue.Enqueue(asteroid, asteroid);\\n        }\\n\\n        long currentMass = mass;\\n\\n        while(queue.Count != 0 && queue.Peek() <= currentMass)\\n        {\\n            currentMass += queue.Dequeue();\\n        }\\n\\n        return queue.Count == 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool AsteroidsDestroyed(int mass, int[] asteroids) {\\n        var queue = new PriorityQueue<int, int>();\\n        foreach(int asteroid in asteroids)\\n        {\\n            queue.Enqueue(asteroid, asteroid);\\n        }\\n\\n        long currentMass = mass;\\n\\n        while(queue.Count != 0 && queue.Peek() <= currentMass)\\n        {\\n            currentMass += queue.Dequeue();\\n        }\\n\\n        return queue.Count == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3842441,
                "title": "asteroid-destroyed-by-brute-force",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nbased on the given condition we can solve using if loop in brute force\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nconditional approach as given\\n\\n# Complexity\\n- Time complexity: O(n log n)\\n- (presence of only one for loop)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:O(n)\\n- (as the astroids has n elements which are stored)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        sor=sorted(asteroids)\\n        for i in sor:\\n            if mass<i:\\n                return False\\n            mass+=i\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        sor=sorted(asteroids)\\n        for i in sor:\\n            if mass<i:\\n                return False\\n            mass+=i\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3842405,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nBrute Force approach\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        y=mass\\n        for i in sorted(asteroids):\\n            if(i>y):\\n                return False;\\n            else:\\n                y+=i\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        y=mass\\n        for i in sorted(asteroids):\\n            if(i>y):\\n                return False;\\n            else:\\n                y+=i\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841860,
                "title": "easy-solution-for-beginner-beat-99-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++)\\n            if(temp>=asteroids[i]) temp+=asteroids[i];\\n            else return false; \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0;i<asteroids.size();i++)\\n            if(temp>=asteroids[i]) temp+=asteroids[i];\\n            else return false; \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841858,
                "title": "easy-solution-for-beginner-beat-99-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long temp=mass;\\n        for(int i=0;i<asteroids.size();i++)\\n            if(temp>=asteroids[i]) temp+=asteroids[i];\\n            else return false; \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long temp=mass;\\n        for(int i=0;i<asteroids.size();i++)\\n            if(temp>=asteroids[i]) temp+=asteroids[i];\\n            else return false; \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839024,
                "title": "simple-beginner-friendly-solution-beats-90-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA very simple problem but testcases make this a huge deal.\\nI\\'ve made a simple solution which is so beginner friendy and with detailed explanation.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIt\\'s just basically iterating through the array and doing according to the question.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] a) {\\n        //Sort the array of asteroids for better result//\\n\\n        Arrays.sort(a);\\n\\n        //convert the mass to long as to satisfy the test case//\\n\\n        long mass2 = ( long ) mass ;\\n\\n        //For loop for iterating through asteroids//\\n\\n        for(int i = 0 ; i < a.length ; i++) {\\n\\n            long sum = 0 ;\\n\\n            sum += (long) a[i] ;\\n\\n            // compare and if asteroid is greater it will destroy the planet , else the planet will gain mass//\\n\\n            if ( mass2 > = sum ) mass2 += sum ;\\n\\n            else return false ; \\n        }\\n        // if it successfully came out of the for loop then planet survives//\\n        return true ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] a) {\\n        //Sort the array of asteroids for better result//\\n\\n        Arrays.sort(a);\\n\\n        //convert the mass to long as to satisfy the test case//\\n\\n        long mass2 = ( long ) mass ;\\n\\n        //For loop for iterating through asteroids//\\n\\n        for(int i = 0 ; i < a.length ; i++) {\\n\\n            long sum = 0 ;\\n\\n            sum += (long) a[i] ;\\n\\n            // compare and if asteroid is greater it will destroy the planet , else the planet will gain mass//\\n\\n            if ( mass2 > = sum ) mass2 += sum ;\\n\\n            else return false ; \\n        }\\n        // if it successfully came out of the for loop then planet survives//\\n        return true ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838812,
                "title": "easy-cpp-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long  k, vector<int>& nums) {\\n        vector<int>small;\\n        vector<int>great;\\n\\n\\n        for(auto it:nums){\\n               if(it>=k){\\n                   great.push_back(it);\\n               }\\n               else{\\n                   small.push_back(it);\\n               }\\n        }\\n    for(auto it:small){\\n        k+=it;\\n    }\\n    sort(great.begin(),great.end());\\n    for(auto it:great){\\n        if(k>=it){\\n            k+=it;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n    return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long  k, vector<int>& nums) {\\n        vector<int>small;\\n        vector<int>great;\\n\\n\\n        for(auto it:nums){\\n               if(it>=k){\\n                   great.push_back(it);\\n               }\\n               else{\\n                   small.push_back(it);\\n               }\\n        }\\n    for(auto it:small){\\n        k+=it;\\n    }\\n    sort(great.begin(),great.end());\\n    for(auto it:great){\\n        if(k>=it){\\n            k+=it;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n    return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838762,
                "title": "destroying-asteroids-using-java",
                "content": "# Approach\\nUsed sorting to sort the array and greedy method to find the planents destroyed or not\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        int cnt=0;\\n        long sum=(long)mass;\\n        \\n        for(int i=0;i<asteroids.length;i++){\\n            long dest=(long)asteroids[i];\\n            if(sum>=dest){\\n                cnt+=1;\\n                sum+=dest;\\n            }\\n        }\\n        if(cnt==asteroids.length){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        int cnt=0;\\n        long sum=(long)mass;\\n        \\n        for(int i=0;i<asteroids.length;i++){\\n            long dest=(long)asteroids[i];\\n            if(sum>=dest){\\n                cnt+=1;\\n                sum+=dest;\\n            }\\n        }\\n        if(cnt==asteroids.length){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838640,
                "title": "simple-easy-solution-beats-99-30-ms-accepted",
                "content": "# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, y: int, x: List[int]) -> bool:\\n        for i in sorted(x):\\n            if i>y: return False\\n            y+=i\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, y: int, x: List[int]) -> bool:\\n        for i in sorted(x):\\n            if i>y: return False\\n            y+=i\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835660,
                "title": "simple-python-nlogn",
                "content": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        running_sum = mass\\n        for asteroid in asteroids:\\n            if running_sum < asteroid:\\n                return False\\n            running_sum += asteroid\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        running_sum = mass\\n        for asteroid in asteroids:\\n            if running_sum < asteroid:\\n                return False\\n            running_sum += asteroid\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3809748,
                "title": "simple-solution-using-sort-method-rust-tm",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn asteroids_destroyed(mass: i32, asteroids: Vec<i32>) -> bool {\\n        let mut curr_mass: i64 = mass as i64;\\n        let mut sorted_ast: Vec<i32> = asteroids.to_vec();\\n        sorted_ast.sort_by(|a, b| a.cmp(b));\\n        // println!(\"{:?}\", sorted_ast);\\n        for i in 0..sorted_ast.len() {\\n            if curr_mass < sorted_ast[i] as i64 {return false}\\n            if curr_mass >= 100000 {return true}\\n            curr_mass += sorted_ast[i] as i64;\\n            // println!(\"curr_mass:{}\", curr_mass);\\n        }\\n\\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn asteroids_destroyed(mass: i32, asteroids: Vec<i32>) -> bool {\\n        let mut curr_mass: i64 = mass as i64;\\n        let mut sorted_ast: Vec<i32> = asteroids.to_vec();\\n        sorted_ast.sort_by(|a, b| a.cmp(b));\\n        // println!(\"{:?}\", sorted_ast);\\n        for i in 0..sorted_ast.len() {\\n            if curr_mass < sorted_ast[i] as i64 {return false}\\n            if curr_mass >= 100000 {return true}\\n            curr_mass += sorted_ast[i] as i64;\\n            // println!(\"curr_mass:{}\", curr_mass);\\n        }\\n\\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3808501,
                "title": "beginner-friendly-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n\\n        \\n        int i;\\n\\n        long long mass=m;\\n        for (i=0;i<asteroids.size();i++)\\n        {\\n            if(mass>=asteroids[i])\\n            {\\n                mass+=asteroids[i];\\n            }\\n            else if(mass<asteroids[i])\\n            {\\n                return false;\\n            }\\n        }\\n\\n        if(i==asteroids.size())\\n            return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n\\n        \\n        int i;\\n\\n        long long mass=m;\\n        for (i=0;i<asteroids.size();i++)\\n        {\\n            if(mass>=asteroids[i])\\n            {\\n                mass+=asteroids[i];\\n            }\\n            else if(mass<asteroids[i])\\n            {\\n                return false;\\n            }\\n        }\\n\\n        if(i==asteroids.size())\\n            return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3799377,
                "title": "easy-c-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n\\n        sort(asteroids.begin(),asteroids.end());\\n\\n        for(int i=0;i<asteroids.size();i++){\\n        \\n\\n            if(mass<asteroids[i] )\\n            {\\n                return false;\\n            }\\n             mass+=asteroids[i];\\n\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n\\n        sort(asteroids.begin(),asteroids.end());\\n\\n        for(int i=0;i<asteroids.size();i++){\\n        \\n\\n            if(mass<asteroids[i] )\\n            {\\n                return false;\\n            }\\n             mass+=asteroids[i];\\n\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3795302,
                "title": "very-simple-and-easy-approach-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) \\n    {\\n        sort(asteroids.begin(),asteroids.end());\\n        if(asteroids[0]>mass)return false;\\n        long long max=mass;\\n        for(int i=0;i<asteroids.size()-1;i++)\\n        {\\n            max+=asteroids[i];\\n            if(max<asteroids[i+1])return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) \\n    {\\n        sort(asteroids.begin(),asteroids.end());\\n        if(asteroids[0]>mass)return false;\\n        long long max=mass;\\n        for(int i=0;i<asteroids.size()-1;i++)\\n        {\\n            max+=asteroids[i];\\n            if(max<asteroids[i+1])return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3794052,
                "title": "java-simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long sum = mass;\\n\\n        for(int i = 0; i < asteroids.length; i++){\\n            if(sum > 100000){\\n                return true;\\n            }\\n            if(sum >= asteroids[i]){\\n                sum += asteroids[i];\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long sum = mass;\\n\\n        for(int i = 0; i < asteroids.length; i++){\\n            if(sum > 100000){\\n                return true;\\n            }\\n            if(sum >= asteroids[i]){\\n                sum += asteroids[i];\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3794035,
                "title": "2126-destroying-asteroids-easy-solution-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        int n = asteroids.size();\\n        int currmass = mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        int max_mass = asteroids[n-1];\\n        for(int i=0;i<n;i++){\\n            if(currmass >= max_mass) return true;\\n            if(asteroids[i]<=currmass){\\n                currmass+=asteroids[i];\\n            }\\n            else return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        int n = asteroids.size();\\n        int currmass = mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        int max_mass = asteroids[n-1];\\n        for(int i=0;i<n;i++){\\n            if(currmass >= max_mass) return true;\\n            if(asteroids[i]<=currmass){\\n                currmass+=asteroids[i];\\n            }\\n            else return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3793952,
                "title": "easiest-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long int sum=mass;\\n        for(int i=0;i<asteroids.size();i++){\\n            if(sum<asteroids[i])\\n            return false;\\n            sum+=asteroids[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long int sum=mass;\\n        for(int i=0;i<asteroids.size();i++){\\n            if(sum<asteroids[i])\\n            return false;\\n            sum+=asteroids[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792830,
                "title": "sort-and-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDeal with the smaller asteroids first to reduce the risk of planet being destroyed by the larger asteroid first. Addingly, making the planet collide with smaller asteroid first , it will add that asteroid mass to planet mass and hence will be supporting the planet to deal with the larger asteroids.\\nHence sort the asteroids in increasing order of size. \\n\\n# Approach I\\n<!-- Describe your approach to solving the problem. -->\\n- Since while adding the mass of asteroid with planet, it may exceeds the limit of integer capcity, store mass in long long variable.\\n`long long m = mass;`\\n- Sort the array :  `sort(v.begin(), v.end());`\\n- If current mass of planet is less than asteroid mass, it will get destroyed return false else add current asteroid mass to planet mass and check further.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n`O(nlogn)`\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& v) {\\n       \\n        long long m = mass;\\n        sort(v.begin(), v.end());\\n\\n        for(auto x: v){\\n            if(m < x){\\n                return false;\\n            }\\n            m += x;\\n        }\\n        return true;\\n    }\\n};\\n\\n```\\n# Approach II\\nWithout converting mass into long long variable type, we can take problem constraints to our advantage.\\nIf mass of planet > 100000 (which is the maximum possible acc to constraints) then none of the asteroid can destroy the planet because maximum possible asteroid mass according to constraints is 100000.\\nTo ensure that mass of the planet sum do not exceeds the integer limit we return from here only.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& v) {\\n       \\n     \\n        sort(v.begin(), v.end());\\n\\n        for(auto x: v){\\n            if(m > 100000){\\n                return true;\\n            }\\n            else if(m < x){\\n                return false;\\n            }\\n        \\n            m += x;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& v) {\\n       \\n        long long m = mass;\\n        sort(v.begin(), v.end());\\n\\n        for(auto x: v){\\n            if(m < x){\\n                return false;\\n            }\\n            m += x;\\n        }\\n        return true;\\n    }\\n};\\n\\n```\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& v) {\\n       \\n     \\n        sort(v.begin(), v.end());\\n\\n        for(auto x: v){\\n            if(m > 100000){\\n                return true;\\n            }\\n            else if(m < x){\\n                return false;\\n            }\\n        \\n            m += x;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792743,
                "title": "easiest-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n         \\n\\n                  long sum = mass ;\\n                  Arrays.sort(asteroids);\\n                  for(int i=0;i<asteroids.length;i++){\\n\\n                        if(asteroids[i] > sum) return false;\\n                        sum+=asteroids[i];\\n\\n                  } \\n                  return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n         \\n\\n                  long sum = mass ;\\n                  Arrays.sort(asteroids);\\n                  for(int i=0;i<asteroids.length;i++){\\n\\n                        if(asteroids[i] > sum) return false;\\n                        sum+=asteroids[i];\\n\\n                  } \\n                  return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792695,
                "title": "93-fast-and-easy-python-6-lines-solution",
                "content": "# PLEASE UPVOTE \\uD83E\\uDD70\\uD83D\\uDC9D\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        ans=mass\\n        for i in asteroids:\\n            if ans<i:\\n                return False\\n            else:\\n                ans+=i\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        asteroids.sort()\\n        ans=mass\\n        for i in asteroids:\\n            if ans<i:\\n                return False\\n            else:\\n                ans+=i\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792480,
                "title": "",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, aster: List[int]) -> bool:\\n        aster.sort()\\n        for i in aster:\\n            if mass>=i:\\n                mass+=i\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, aster: List[int]) -> bool:\\n        aster.sort()\\n        for i in aster:\\n            if mass>=i:\\n                mass+=i\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792394,
                "title": "destroying-asteroids-c-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        int n=asteroids.size();\\n       stack<int>s;\\n        long long ans=mass;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(ans>=asteroids[i])\\n            {\\n                ans+=asteroids[i];\\n            }\\n            else\\n            {\\n                s.push(asteroids[i]);\\n                break;\\n            }\\n        }\\n        if(!s.empty()) return false;\\n        return true;\\n    }\\n};\\n```\\n\\nP.s- This is just a brute-force solution.\\nHappy Coding!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        int n=asteroids.size();\\n       stack<int>s;\\n        long long ans=mass;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(ans>=asteroids[i])\\n            {\\n                ans+=asteroids[i];\\n            }\\n            else\\n            {\\n                s.push(asteroids[i]);\\n                break;\\n            }\\n        }\\n        if(!s.empty()) return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791996,
                "title": "c-easy-beginner-friendly-solution-simple-approach",
                "content": "# Intuition\\nfirst sort and then keep adding and then comparing\\n# Approach\\nsort and apply greedy approach\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n      sort(asteroids.begin(),asteroids.end());\\n      int n=asteroids.size();\\n      long long ans=mass;\\n      for(int i=0;i<n;i++)\\n      {\\n          if(asteroids[i]<=ans)\\n          {\\n              ans+=asteroids[i];\\n          }\\n          else\\n          return false;\\n      }\\n      return true;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Sorting",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n      sort(asteroids.begin(),asteroids.end());\\n      int n=asteroids.size();\\n      long long ans=mass;\\n      for(int i=0;i<n;i++)\\n      {\\n          if(asteroids[i]<=ans)\\n          {\\n              ans+=asteroids[i];\\n          }\\n          else\\n          return false;\\n      }\\n      return true;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791887,
                "title": "c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0; i<asteroids.size();i++){\\n            if(mass<asteroids[i]) return false;\\n            else mass+=asteroids[i];\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(int i=0; i<asteroids.size();i++){\\n            if(mass<asteroids[i]) return false;\\n            else mass+=asteroids[i];\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791799,
                "title": "easy-soltuion-using-sorting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        sort(arr.begin(), arr.end());\\n\\n        long long int sum = mass;\\n        for(int i = 0; i < arr.size(); i++){\\n            if(arr[i] > sum)return false;\\n            sum += arr[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        sort(arr.begin(), arr.end());\\n\\n        long long int sum = mass;\\n        for(int i = 0; i < arr.size(); i++){\\n            if(arr[i] > sum)return false;\\n            sum += arr[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791569,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long int t=mass;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            if(t<a[i])\\n            {\\n                return false;\\n            }\\n            t+=a[i];\\n        }\\n        return true;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/c6404ce6-f580-4182-9b2c-f15bb024d18c_1689843705.1183612.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long int t=mass;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            if(t<a[i])\\n            {\\n                return false;\\n            }\\n            t+=a[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791465,
                "title": "very-basic-solution-beginner-friendly-easy-to-understand-beats-100-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        return Destroy(mass,asteroids);\\n    }\\n    private static boolean Destroy(int mass, int[] asteroids) {\\n\\t\\t// TODO Auto-generated method stub\\n\\t\\tArrays.sort(asteroids);\\n\\t\\tlong s = (long)mass;\\n\\t\\tfor (int i = 0; i < asteroids.length; i++) {\\n\\t\\t\\tlong d = (long)asteroids[i];\\n\\t\\t\\tif(s < d) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\ts += d;\\n\\t\\t}\\n\\t\\treturn true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy",
                    "Sorting",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        return Destroy(mass,asteroids);\\n    }\\n    private static boolean Destroy(int mass, int[] asteroids) {\\n\\t\\t// TODO Auto-generated method stub\\n\\t\\tArrays.sort(asteroids);\\n\\t\\tlong s = (long)mass;\\n\\t\\tfor (int i = 0; i < asteroids.length; i++) {\\n\\t\\t\\tlong d = (long)asteroids[i];\\n\\t\\t\\tif(s < d) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\ts += d;\\n\\t\\t}\\n\\t\\treturn true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791232,
                "title": "c-3-liner-greedy-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long int mass, vector<int>& arr) {\\n        sort(arr.begin(),arr.end());\\n        for(auto x : arr) if(mass < x) return false; else mass += x;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long int mass, vector<int>& arr) {\\n        sort(arr.begin(),arr.end());\\n        for(auto x : arr) if(mass < x) return false; else mass += x;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790801,
                "title": "easiest-solution-java",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] as) {\\n        Arrays.sort(as);\\n        long s = (long)mass;\\n        for(int i=0;i<as.length;i++){\\n            if(as[i]<=s){\\n                s += (long)as[i];\\n                if(i==as.length-1){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] as) {\\n        Arrays.sort(as);\\n        long s = (long)mass;\\n        for(int i=0;i<as.length;i++){\\n            if(as[i]<=s){\\n                s += (long)as[i];\\n                if(i==as.length-1){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790704,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long ms=mass;\\n        for(int i=0;i<asteroids.size();i++){\\n            if(ms>=asteroids[i]){\\n                ms+=asteroids[i];\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        long long ms=mass;\\n        for(int i=0;i<asteroids.size();i++){\\n            if(ms>=asteroids[i]){\\n                ms+=asteroids[i];\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790457,
                "title": "heap",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n   bool asteroidsDestroyed(int mass, vector<int> &nums)\\n{\\n    priority_queue<int,vector<int>, greater<int>> pq;\\n    for (auto it : nums)\\n    {\\n        pq.push(it);\\n    }\\n\\n    long long int sum = (long long int)(mass);\\n\\n    while (!pq.empty() and pq.top() <= sum)\\n    {\\n        sum += (long long int)pq.top();\\n        pq.pop();\\n    }\\n    return pq.empty();\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   bool asteroidsDestroyed(int mass, vector<int> &nums)\\n{\\n    priority_queue<int,vector<int>, greater<int>> pq;\\n    for (auto it : nums)\\n    {\\n        pq.push(it);\\n    }\\n\\n    long long int sum = (long long int)(mass);\\n\\n    while (!pq.empty() and pq.top() <= sum)\\n    {\\n        sum += (long long int)pq.top();\\n        pq.pop();\\n    }\\n    return pq.empty();\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790416,
                "title": "simple-sorting-based-java-solution-constant-space",
                "content": "\\n# Complexity\\n- Time complexity: $$O(nlogn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long planetMass = mass;\\n        for(int currentMass : asteroids) {\\n            if(planetMass < currentMass) {\\n                return false;\\n            }\\n            planetMass = planetMass + currentMass;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        long planetMass = mass;\\n        for(int currentMass : asteroids) {\\n            if(planetMass < currentMass) {\\n                return false;\\n            }\\n            planetMass = planetMass + currentMass;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790358,
                "title": "c-faster-than-90-sorting-greedy-approach-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& nums) {\\n       \\nsort(nums.begin(), nums.end());\\nint i = 0;\\nlong long curr = mass;\\nwhile(i<nums.size()){\\nif(nums[i]<=curr){\\n    curr+=nums[i];\\n    i++;\\n}\\nelse{\\n    return false;\\n    break;\\n}\\n}\\nreturn true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& nums) {\\n       \\nsort(nums.begin(), nums.end());\\nint i = 0;\\nlong long curr = mass;\\nwhile(i<nums.size()){\\nif(nums[i]<=curr){\\n    curr+=nums[i];\\n    i++;\\n}\\nelse{\\n    return false;\\n    break;\\n}\\n}\\nreturn true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790329,
                "title": "c-solution-99-space-easy-to-understand-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $O(n)$ in the worst case\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        // Base case when vector size is 1\\n        if (asteroids.size() == 1) {\\n            return (mass >= asteroids[0]);\\n        }\\n\\n        // When vector size != 1\\n        sort(asteroids.begin(), asteroids.end());\\n        if (mass < asteroids[0]) {\\n            return false;\\n        }\\n        int index = 0;\\n        mass += asteroids[0];\\n        while (true) {\\n            // Find the index of asteroids > mass and update mass\\n            int idxCheck = 0;\\n            for (int i = index + 1; i < asteroids.size(); i++) {\\n                // check for index of asteroids > mass\\n                if (asteroids[i] > mass) {\\n                    idxCheck = i;\\n                    break;\\n                }\\n                else {\\n                    // update mass when mass >= asteroids\\n                    mass += asteroids[i];\\n                    if (i == asteroids.size() - 1) {\\n                        idxCheck = asteroids.size() - 1;\\n                    }\\n                    // After update mass, we check if mass\\n                    // already >= the largest asteroids\\n                    if (mass >= asteroids[asteroids.size() - 1]) {\\n                        return true;\\n                    }\\n                }\\n            }\\n\\n            // If idxCheck == idx of last asteroids\\n            if (idxCheck == asteroids.size() - 1) {\\n                if (mass >= asteroids[idxCheck]) {\\n                    return true;\\n                }\\n                else {\\n                    return false;\\n                }\\n            }\\n            // If have find an indexCheck and \\n            // it != idx of last asteroids,\\n            // then we update index\\n            else {\\n                index = idxCheck;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long mass, vector<int>& asteroids) {\\n        // Base case when vector size is 1\\n        if (asteroids.size() == 1) {\\n            return (mass >= asteroids[0]);\\n        }\\n\\n        // When vector size != 1\\n        sort(asteroids.begin(), asteroids.end());\\n        if (mass < asteroids[0]) {\\n            return false;\\n        }\\n        int index = 0;\\n        mass += asteroids[0];\\n        while (true) {\\n            // Find the index of asteroids > mass and update mass\\n            int idxCheck = 0;\\n            for (int i = index + 1; i < asteroids.size(); i++) {\\n                // check for index of asteroids > mass\\n                if (asteroids[i] > mass) {\\n                    idxCheck = i;\\n                    break;\\n                }\\n                else {\\n                    // update mass when mass >= asteroids\\n                    mass += asteroids[i];\\n                    if (i == asteroids.size() - 1) {\\n                        idxCheck = asteroids.size() - 1;\\n                    }\\n                    // After update mass, we check if mass\\n                    // already >= the largest asteroids\\n                    if (mass >= asteroids[asteroids.size() - 1]) {\\n                        return true;\\n                    }\\n                }\\n            }\\n\\n            // If idxCheck == idx of last asteroids\\n            if (idxCheck == asteroids.size() - 1) {\\n                if (mass >= asteroids[idxCheck]) {\\n                    return true;\\n                }\\n                else {\\n                    return false;\\n                }\\n            }\\n            // If have find an indexCheck and \\n            // it != idx of last asteroids,\\n            // then we update index\\n            else {\\n                index = idxCheck;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3775808,
                "title": "using-python-sortedlist",
                "content": "# Intuition\\nThe idea is to make the planet as big ASAP without getting destroyed. For that the best deal is to collide with something that is equal or immidietly smaller.\\n\\n# Approach\\nSortedList made life easier. Not sure how else we could do this!?\\n\\n# Complexity\\n- Time complexity:  $$O(log(n))$$ \\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nfrom sortedcontainers import SortedList\\n\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        sl = SortedList(asteroids)\\n\\n        while sl:\\n            i = sl.bisect_right(mass)\\n            if i == 0:\\n                return False\\n            \\n            mass += sl[i-1]\\n            del sl[i-1]\\n\\n        return True\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom sortedcontainers import SortedList\\n\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        sl = SortedList(asteroids)\\n\\n        while sl:\\n            i = sl.bisect_right(mass)\\n            if i == 0:\\n                return False\\n            \\n            mass += sl[i-1]\\n            del sl[i-1]\\n\\n        return True\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762053,
                "title": "destroying-asteroids-easy-understanding",
                "content": "``\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& as) {\\n        long long int sum=mass;\\n        sort(as.begin(),as.end());\\n        \\n        for(int i=0;i<as.size();i++){\\n            if(as[i]>sum){\\n            return false;\\n            }else{\\n                sum+=as[i];\\n            }\\n        }\\n        if(sum>=as[as.size()-1])\\n            return true;\\n        else\\n            return false;\\n    }\\n};",
                "solutionTags": [
                    "Array",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& as) {\\n        long long int sum=mass;\\n        sort(as.begin(),as.end());\\n        \\n        for(int i=0;i<as.size();i++){\\n            if(as[i]>sum){\\n            return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3760602,
                "title": "beats-97-simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        sort(asteroids.begin(),asteroids.end());\\n\\n        for(int i=0;i<asteroids.size();i++){\\n            if(mass>100000) return true;\\n            if (mass>=asteroids[i]){\\n                mass+=asteroids[i];\\n            }\\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        \\n        sort(asteroids.begin(),asteroids.end());\\n\\n        for(int i=0;i<asteroids.size();i++){\\n            if(mass>100000) return true;\\n            if (mass>=asteroids[i]){\\n                mass+=asteroids[i];\\n            }\\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759605,
                "title": "shortest-easiest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long n, vector<int>& v) {\\n        sort(v.begin(),v.end());\\n        int flag=0;\\n        for(long long i=0;i<v.size();i++){\\n            if(v[i]<=n)n+=v[i];\\n            else {flag=1;break;}\\n        }\\n        if(flag==1)return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long long n, vector<int>& v) {\\n        sort(v.begin(),v.end());\\n        int flag=0;\\n        for(long long i=0;i<v.size();i++){\\n            if(v[i]<=n)n+=v[i];\\n            else {flag=1;break;}\\n        }\\n        if(flag==1)return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3754324,
                "title": "c-solution-greedy-sort",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity :   O(Nlog(N))\\n\\n- Space complexity :  O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n        long long m = mass;\\n        int n = ast.size();\\n        for(int i=0;i<n;i++){\\n            if(m>=ast[i]){\\n                m += ast[i];\\n            }else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n        long long m = mass;\\n        int n = ast.size();\\n        for(int i=0;i<n;i++){\\n            if(m>=ast[i]){\\n                m += ast[i];\\n            }else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3713856,
                "title": "light",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        a = mass\\n        for i in sorted(asteroids):\\n            if a>=i:\\n                a+=i\\n            else:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        a = mass\\n        for i in sorted(asteroids):\\n            if a>=i:\\n                a+=i\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3707319,
                "title": "sorting-easy-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(auto x : asteroids){\\n            if(mass<x) return false;\\n            mass+=x;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(long mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        for(auto x : asteroids){\\n            if(mass<x) return false;\\n            mass+=x;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3699428,
                "title": "c-sorting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& a) {\\n    sort(a.begin(),a.end());\\n    long long mass=(long long)m;\\n    for(int i:a)\\n    {\\n        if(mass>=i)\\n        {\\n            mass+=i;\\n        } else\\n        {\\n            return 0;\\n        }\\n    }    \\n    return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int m, vector<int>& a) {\\n    sort(a.begin(),a.end());\\n    long long mass=(long long)m;\\n    for(int i:a)\\n    {\\n        if(mass>=i)\\n        {\\n            mass+=i;\\n        } else\\n        {\\n            return 0;\\n        }\\n    }    \\n    return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3699116,
                "title": "2-approaches-min-heap-and-sorting-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: in code comments\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: in code comments\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    bool asteroidsDestroyed(long long mass, vector<int>& a) {\\n\\n        //TC=>O(nlogn +n)~>O(nlogn)  and SC=>O(1)............................\\n\\n        sort(a.begin(),a.end());\\n        \\n        for(int i=0;i<a.size();i++){\\n            if(a[i]>mass)return false;\\n            mass+=a[i];\\n        }\\n        return true;\\n\\n        //TC=>O(logn+n)~>O(n) and SC=>O(n)................................\\n\\n        priority_queue<int,vector<int>,greater<int>>pq;\\n        for(auto it:a)pq.push(it);\\n\\n        for(int i=0;i<a.size();i++){\\n            if(pq.top()>mass)return false;\\n            mass+=pq.top();\\n            pq.pop();\\n        }\\n        return true;\\n\\n        \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool asteroidsDestroyed(long long mass, vector<int>& a) {\\n\\n        //TC=>O(nlogn +n)~>O(nlogn)  and SC=>O(1)............................\\n\\n        sort(a.begin(),a.end());\\n        \\n        for(int i=0;i<a.size();i++){\\n            if(a[i]>mass)return false;\\n            mass+=a[i];\\n        }\\n        return true;\\n\\n        //TC=>O(logn+n)~>O(n) and SC=>O(n)................................\\n\\n        priority_queue<int,vector<int>,greater<int>>pq;\\n        for(auto it:a)pq.push(it);\\n\\n        for(int i=0;i<a.size();i++){\\n            if(pq.top()>mass)return false;\\n            mass+=pq.top();\\n            pq.pop();\\n        }\\n        return true;\\n\\n        \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3691923,
                "title": "easy-beginner-friendly-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nIf the planet is able to gain the weight of the smallest asteroid, we add the weight of the asteroid to the planet\\'s weight and repeat the process with the next smallest asteroid. If at any point of time, the condition fails, we return false.\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Since we traverse through all the elements once.\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        //A variable which will keep track of the weight of the planet at every iteration.\\n        long total=mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            //If the weight of the planet is less than the current weight of the asteroid,, it will get destroyed.\\n            if(total<(long)asteroids[i])\\n                return false;\\n            //Else the weight of the asteroid will be added to the weight of the planet.\\n            total+=(long)asteroids[i];\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        Arrays.sort(asteroids);\\n        //A variable which will keep track of the weight of the planet at every iteration.\\n        long total=mass;\\n        for(int i=0;i<asteroids.length;i++)\\n        {\\n            //If the weight of the planet is less than the current weight of the asteroid,, it will get destroyed.\\n            if(total<(long)asteroids[i])\\n                return false;\\n            //Else the weight of the asteroid will be added to the weight of the planet.\\n            total+=(long)asteroids[i];\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3691441,
                "title": "c-java-python-4-line-code-easiest-solution",
                "content": "**Intuition :**\\nSimple intuition based on gredy approach would be placing all the smaller asteroids at begining so than when planet would pass away from them i would gain mass , and placing larger asteroids at last positions , to ensure that planet have gain maximum possible size before hitting them larger ones.\\n\\nSimply sort the array then run a loop with variable sum(which would represent total mass of planet , iniialised as mass ) and comparing each asteroid size , if we got a asteroid size biggerr than of planet return false else add mass of that asteroid in planet total mass.\\n\\n\\n**C++ Code**\\n\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n      sort(a.begin(),a.end());\\n        long long  sum =mass;  //total mass of planet\\n        for(auto x:a){\\n            if(x>sum)return false;\\n            sum+=x;\\n        }\\n        retclassurn true;\\n    }\\n};\\n```\\n\\n\\n**Java Code**\\n\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, List<Integer> a) {\\n        a.sort(null);\\n        long sum = mass; // total mass of planet\\n        for (int x : a) {\\n            if (x > sum)\\n                return false;\\n            sum += x;\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\n\\n\\n**Python Code**\\n\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass, a):\\n        a.sort()\\n        total_mass = mass  # total mass of planet\\n        for x in a:\\n            if x > total_mass:\\n                return False\\n            total_mass += x\\n        return True\\n\\n```\\n\\nHope u like it !!",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n      sort(a.begin(),a.end());\\n        long long  sum =mass;  //total mass of planet\\n        for(auto x:a){\\n            if(x>sum)return false;\\n            sum+=x;\\n        }\\n        retclassurn true;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, List<Integer> a) {\\n        a.sort(null);\\n        long sum = mass; // total mass of planet\\n        for (int x : a) {\\n            if (x > sum)\\n                return false;\\n            sum += x;\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass, a):\\n        a.sort()\\n        total_mass = mass  # total mass of planet\\n        for x in a:\\n            if x > total_mass:\\n                return False\\n            total_mass += x\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3688923,
                "title": "",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long ans=mass;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            if(a[i]<=ans)\\n            {\\n                ans=ans+a[i];\\n            }\\n            else\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long ans=mass;\\n        for(int i=0;i<a.size();i++)\\n        {\\n            if(a[i]<=ans)\\n            {\\n                ans=ans+a[i];\\n            }\\n            else\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3682677,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> We can only destroy asteroids that are less than or equal to the planet in mass, so we should destroy the smaller asteroids first.\\n\\n # Approach\\n<!-- Describe your approach to solving the problem. --> We sort the asteroids array to have the smaller values first and then do a running sum involvind the mass of the planet and destroyed asteroids.\\n\\n# Code\\n```\\nimport java.util.Arrays;\\n\\nclass Solution {\\n\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        \\n        // sort asteroids array so that its easy to check if we can destroy all asteroids\\n        Arrays.sort(asteroids);\\n        \\n        // going to use a long data type to avoid data issues\\n        long correctedMass = (long) mass;\\n\\n        // go throuhg every asteroid value\\n        for(int i = 0; i < asteroids.length; i++) {\\n\\n            // check if the planet can destroy the asteroid at index[i]\\n            if(correctedMass >= asteroids[i]) {\\n                correctedMass += asteroids[i];\\n            }\\n            else {\\n                // we can not destroy the asteroid\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.Arrays;\\n\\nclass Solution {\\n\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        \\n        // sort asteroids array so that its easy to check if we can destroy all asteroids\\n        Arrays.sort(asteroids);\\n        \\n        // going to use a long data type to avoid data issues\\n        long correctedMass = (long) mass;\\n\\n        // go throuhg every asteroid value\\n        for(int i = 0; i < asteroids.length; i++) {\\n\\n            // check if the planet can destroy the asteroid at index[i]\\n            if(correctedMass >= asteroids[i]) {\\n                correctedMass += asteroids[i];\\n            }\\n            else {\\n                // we can not destroy the asteroid\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3665557,
                "title": "o-n-time-complexity-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n        long long int temp=mass;\\n        for(int i = 0 ; i < ast.size(); i++){\\n            if(temp<ast[i]) return false;\\n            temp+=ast[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& ast) {\\n        sort(ast.begin(),ast.end());\\n        long long int temp=mass;\\n        for(int i = 0 ; i < ast.size(); i++){\\n            if(temp<ast[i]) return false;\\n            temp+=ast[i];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3622623,
                "title": "easy-c-solution-with-explanation",
                "content": "# Observation\\nEver seen those mobile game adds. where the hero starts at the bottom and has to fight his way to the top.\\nEveryone has a certain power level and if the hero attacks someone with a lower power level he defeats them and gains their power, but if he attacks someone with a higher power level he is defeated.\\n\\n# Algorithm\\n1. Sort the asteroid array.\\n2. starting from left compare mass to the asteroid[i].\\n3. if mass is less return false\\n   else add it to the mass\\n4. return true if the planet eats all asteroid without getting destroyed  \\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)   [including sorting time]\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        long currmass=mass;\\n        sort(arr.begin(), arr.end());\\n        for (auto it: arr){\\n            if (currmass<it) return false;\\n            currmass+=it;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        long currmass=mass;\\n        sort(arr.begin(), arr.end());\\n        for (auto it: arr){\\n            if (currmass<it) return false;\\n            currmass+=it;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3618942,
                "title": "easy-approach-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(Nlog(N))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        long long a = mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        if(asteroids[0]>a){\\n            return false;\\n        }\\n        else{\\n            int j=0;\\n            for(int i=0;i<asteroids.size();i++){\\n                if(asteroids[i]<=a){\\n                    a+= asteroids[i];\\n                }\\n                else{\\n                    j=i;\\n                    break;\\n                }\\n               \\n            }\\n            \\n            return (j==0);\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        long long a = mass;\\n        sort(asteroids.begin(),asteroids.end());\\n        if(asteroids[0]>a){\\n            return false;\\n        }\\n        else{\\n            int j=0;\\n            for(int i=0;i<asteroids.size();i++){\\n                if(asteroids[i]<=a){\\n                    a+= asteroids[i];\\n                }\\n                else{\\n                    j=i;\\n                    break;\\n                }\\n               \\n            }\\n            \\n            return (j==0);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3604438,
                "title": "fast-c-solution-without-sorting-faster-than-99",
                "content": "# Intuition\\nMaintain a count of how many asteroids have been destroyed, and repeatedly keep iterating through the array until you\\'ve destroyed all the asteroids . Each time an asteroid is destroyed, swap the asteroid toward the front of the array. If you reach the end of the array and you haven\\'t destroyed all the asteroids, start iterating through the array again, starting just in front of the last asteroid you swapped. If you reach the end of the array without updating the mass a single time, then the planet can\\'t destroy all the asteroids.\\n\\n# Complexity\\n- Time complexity:\\nWorst-Case: O(N^2) because worst-case it only destroys one asteroid each iteration and it has to iterate all the way to end of array each time to find the next destroyable asteroid. This would mean N*(N+1)/2 iterations.\\nBut generally, it is faster than that.\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    static const int MAX_MASS = 100000; // 10^5\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        int count = 0;\\n        while (count < asteroids.size()) {\\n            int initial_mass = mass;\\n            for (int i = count; i < asteroids.size(); i++) {\\n                int num = asteroids[i];\\n                if (num <= mass) {\\n                    mass += num;\\n                    if (mass >= Solution::MAX_MASS) {\\n                        return true;\\n                    }\\n                    if (i != count) {\\n                        // swap the two\\n                        asteroids[i] = asteroids[count];\\n                        asteroids[count] = num;\\n                    }\\n                    count++;\\n                }\\n            }\\n            if (initial_mass == mass) {\\n                // iterated through entire array and couldn\\'t add a single asteroid\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    static const int MAX_MASS = 100000; // 10^5\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        int count = 0;\\n        while (count < asteroids.size()) {\\n            int initial_mass = mass;\\n            for (int i = count; i < asteroids.size(); i++) {\\n                int num = asteroids[i];\\n                if (num <= mass) {\\n                    mass += num;\\n                    if (mass >= Solution::MAX_MASS) {\\n                        return true;\\n                    }\\n                    if (i != count) {\\n                        // swap the two\\n                        asteroids[i] = asteroids[count];\\n                        asteroids[count] = num;\\n                    }\\n                    count++;\\n                }\\n            }\\n            if (initial_mass == mass) {\\n                // iterated through entire array and couldn\\'t add a single asteroid\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3599029,
                "title": "beginner-friendly-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        int n = asteroids.size();\\n\\n        long massNew = mass;\\n        \\n        for(int i=0;i<n;i++) {\\n            if(massNew < asteroids[i])\\n                return false;\\n\\n            massNew += asteroids[i];\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {\\n        sort(asteroids.begin(),asteroids.end());\\n        int n = asteroids.size();\\n\\n        long massNew = mass;\\n        \\n        for(int i=0;i<n;i++) {\\n            if(massNew < asteroids[i])\\n                return false;\\n\\n            massNew += asteroids[i];\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3587823,
                "title": "java-solution-using-heap",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long m = mass;\\n        PriorityQueue<Integer> heap = new PriorityQueue<>();\\n        for(int i=0;i<asteroids.length;i++){\\n            heap.add(asteroids[i]);\\n        }\\n        while(heap.size()>=1){\\n            if(m>=heap.peek()){\\n                m += heap.poll();\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long m = mass;\\n        PriorityQueue<Integer> heap = new PriorityQueue<>();\\n        for(int i=0;i<asteroids.length;i++){\\n            heap.add(asteroids[i]);\\n        }\\n        while(heap.size()>=1){\\n            if(m>=heap.peek()){\\n                m += heap.poll();\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3587822,
                "title": "java-solution-using-heap",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long m = mass;\\n        PriorityQueue<Integer> heap = new PriorityQueue<>();\\n        for(int i=0;i<asteroids.length;i++){\\n            heap.add(asteroids[i]);\\n        }\\n        while(heap.size()>=1){\\n            if(m>=heap.peek()){\\n                m += heap.poll();\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean asteroidsDestroyed(int mass, int[] asteroids) {\\n        long m = mass;\\n        PriorityQueue<Integer> heap = new PriorityQueue<>();\\n        for(int i=0;i<asteroids.length;i++){\\n            heap.add(asteroids[i]);\\n        }\\n        while(heap.size()>=1){\\n            if(m>=heap.peek()){\\n                m += heap.poll();\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3553340,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long int mask=mass;\\n        for(int i=0;i<a.size();i++){\\n           if(mask>=a[i]){\\n               mask+=a[i];\\n           }\\n           else if(mask<a[i]){\\n               return false;\\n           }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& a) {\\n        sort(a.begin(),a.end());\\n        long long int mask=mass;\\n        for(int i=0;i<a.size();i++){\\n           if(mask>=a[i]){\\n               mask+=a[i];\\n           }\\n           else if(mask<a[i]){\\n               return false;\\n           }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3537952,
                "title": "easy-solution-using-minheap",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        priority_queue<int,vector<int>,greater<int>>  q;\\n        for(auto i: arr){\\n            q.push(i);\\n        }\\n        \\n        long long m=mass;\\n        while(!q.empty()){\\n            if(m>=q.top()){\\n                m+=q.top();\\n                q.pop();\\n            }\\n            else\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool asteroidsDestroyed(int mass, vector<int>& arr) {\\n        priority_queue<int,vector<int>,greater<int>>  q;\\n        for(auto i: arr){\\n            q.push(i);\\n        }\\n        \\n        long long m=mass;\\n        while(!q.empty()){\\n            if(m>=q.top()){\\n                m+=q.top();\\n                q.pop();\\n            }\\n            else\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3496516,
                "title": "python3-greedy-sorting",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        \\n        \\n        asteroids.sort()\\n        \\n        for a in asteroids:\\n            if mass>=a:\\n                mass+=a\\n            else:\\n                return False\\n        \\n        return True\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:\\n        \\n        \\n        asteroids.sort()\\n        \\n        for a in asteroids:\\n            if mass>=a:\\n                mass+=a\\n            else:\\n                return False\\n        \\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494818,
                "title": "rust-sorting-iterators-and-saturating-add",
                "content": "# Intuition\\nWe can rearrange the asteroids in any order, and smashing a small asteroid makes it easier to smash other asteroids (since the planet is bigger) so we should smash the smallest first\\n\\n# Approach\\nSort the asteroids first. Then use scan for a stateful iterator to keep track of the mass of the planet, and the all operator to consume the iterator and short-circuit if it breaks.\\n\\nThe only annoying part is that, for a sufficiently large list of asteroids, we might end up overflowing an i32 in our mass, which breaks things. To avoid this we can use saturating_add(), which caps out mass at i32::MAX, at which point it will beat all future asteroids (since they\\'re guaranteed to fit into an i32.) \\n\\nYou could also upgrade to i64s or u64s, but that just pushes the problem out. It does seem to offer slightly higher performance, though, since saturating_add requires a check every time.\\n\\n# Complexity\\n- Time complexity: O(n log n). We have to sort the asteroids.\\n\\n- Space complexity: O(1), we only need to keep the mass which is finitely sized.\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn asteroids_destroyed(mass: i32, mut asteroids: Vec<i32>) -> bool {\\n        asteroids.sort();\\n\\n        asteroids\\n        .into_iter()\\n        .scan(mass, |m, a| {\\n            if *m >= a {\\n                *m = (*m).saturating_add(a);\\n                Some(true)\\n            } else {\\n                Some(false)\\n            }\\n        })\\n        .all(std::convert::identity)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn asteroids_destroyed(mass: i32, mut asteroids: Vec<i32>) -> bool {\\n        asteroids.sort();\\n\\n        asteroids\\n        .into_iter()\\n        .scan(mass, |m, a| {\\n            if *m >= a {\\n                *m = (*m).saturating_add(a);\\n                Some(true)\\n            } else {\\n                Some(false)\\n            }\\n        })\\n        .all(std::convert::identity)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1678123,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1907332,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1838504,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1780654,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1722659,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1717336,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1981909,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1979102,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1979012,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1946399,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1678123,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1907332,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1838504,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1780654,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1722659,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1717336,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1981909,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1979102,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1979012,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            },
            {
                "id": 1946399,
                "content": [
                    {
                        "username": "leomino",
                        "content": "Why `Medium`?"
                    },
                    {
                        "username": "rajmohit7114",
                        "content": "[@shekharaditya](/shekharaditya) easy"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "then it should be ?"
                    },
                    {
                        "username": "JustinAdams",
                        "content": "A key thing to remember when doing a running sum is the possibility of integer overflow."
                    },
                    {
                        "username": "saadkhan123456789",
                        "content": "thanks buddy.. you saved my 1 hour..."
                    },
                    {
                        "username": "Harshdev625",
                        "content": "This question should be tagged as \"easy\"."
                    },
                    {
                        "username": "luanct",
                        "content": "it would only be medium if we had to return the order of asteroids. Unless, it should be easy lol"
                    },
                    {
                        "username": "ANSHAB45",
                        "content": "[@anushkathakur13](/anushkathakur13)  sort the list of asteroids"
                    },
                    {
                        "username": "anushkathakur13",
                        "content": "How will we send order of asteroids??would you mind explaining me this?"
                    },
                    {
                        "username": "chickooo",
                        "content": "Reminds me of the Fish game \\uD83D\\uDC1F"
                    },
                    {
                        "username": "user3238Gj",
                        "content": "You can arrange for the planet to collide with the asteroids in any arbitrary order. \n\nthis is key.... I didn't realize you could change the order of the asteroids, so the planet can stear to every asteroid at will, doesn't really make sense because normally a planet has a fixed orbit around x..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "very easy problem"
                    },
                    {
                        "username": "ahmadafghan",
                        "content": "why M?"
                    },
                    {
                        "username": "ajjha7203",
                        "content": "Should be \"easy\"."
                    },
                    {
                        "username": "garvitagrawal_02",
                        "content": "beware of integer overflow"
                    }
                ]
            }
        ]
    }
]